
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  0801295c  0801295c  0002295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013624  08013624  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  08013624  08013624  00023624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801362c  0801362c  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801362c  0801362c  0002362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013630  08013630  00023630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08013634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003017c  2**0
                  CONTENTS
 10 .bss          00003dd0  2000017c  2000017c  0003017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f4c  20003f4c  0003017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e09d  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006adf  00000000  00000000  0005e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002288  00000000  00000000  00064d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fc8  00000000  00000000  00066fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002efed  00000000  00000000  00068f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003349a  00000000  00000000  00097f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edc7c  00000000  00000000  000cb3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b907b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000991c  00000000  00000000  001b90cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012944 	.word	0x08012944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000180 	.word	0x20000180
 80001ec:	08012944 	.word	0x08012944

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b3f      	cmp	r3, #63	; 0x3f
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc89 	bl	8001008 <ConsoleIoInit>
	ConsoleIoSendString("Stone subsytem CLI ");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fcda 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fcd7 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fcd4 	bl	80010b0 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b3f      	cmp	r3, #63	; 0x3f
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0801295c 	.word	0x0801295c
 8000738:	08012970 	.word	0x08012970
 800073c:	08012974 	.word	0x08012974
 8000740:	200001d8 	.word	0x200001d8
 8000744:	20000198 	.word	0x20000198

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fc69 	bl	8001038 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb76 	bl	8000e8c <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fc5e 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fc5b 	bl	80010b0 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fc58 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc4c 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fc49 	bl	80010b0 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fc26 	bl	80010b0 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fc23 	bl	80010b0 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fc0c 	bl	80010b0 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001d8 	.word	0x200001d8
 80008a4:	20000198 	.word	0x20000198
 80008a8:	200001dc 	.word	0x200001dc
 80008ac:	08012978 	.word	0x08012978
 80008b0:	08012980 	.word	0x08012980
 80008b4:	08012970 	.word	0x08012970
 80008b8:	08012988 	.word	0x08012988
 80008bc:	08012974 	.word	0x08012974

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b40      	cmp	r3, #64	; 0x40
 8000906:	d102      	bne.n	800090e <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000908:	2310      	movs	r3, #16
 800090a:	75fb      	strb	r3, [r7, #23]
 800090c:	e002      	b.n	8000914 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b08a      	sub	sp, #40	; 0x28
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	460b      	mov	r3, r1
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000934:	f107 021c 	add.w	r2, r7, #28
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	4619      	mov	r1, r3
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ffbf 	bl	80008c0 <ConsoleParamFindN>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4413      	add	r3, r2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095c:	e011      	b.n	8000982 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800095e:	f107 0214 	add.w	r2, r7, #20
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096a:	701a      	strb	r2, [r3, #0]
		i++;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3301      	adds	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	4413      	add	r3, r2
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000982:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d00a      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
 800098a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800098e:	2b0d      	cmp	r3, #13
 8000990:	d006      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000996:	2b20      	cmp	r3, #32
 8000998:	d002      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	2b07      	cmp	r3, #7
 800099e:	d9de      	bls.n	800095e <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d102      	bne.n	80009ac <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a6:	2310      	movs	r3, #16
 80009a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b4:	f107 0214 	add.w	r2, r7, #20
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f010 fc5d 	bl	8011284 <atoi>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b08a      	sub	sp, #40	; 0x28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	460b      	mov	r3, r1
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f4:	f107 0218 	add.w	r2, r7, #24
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	4619      	mov	r1, r3
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ff5f 	bl	80008c0 <ConsoleParamFindN>
 8000a02:	4603      	mov	r3, r0
 8000a04:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12c      	bne.n	8000a66 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e01e      	b.n	8000a50 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f107 0217 	add.w	r2, r7, #23
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f8c5 	bl	8000bba <ConsoleUtilHexCharToInt>
 8000a30:	4603      	mov	r3, r0
 8000a32:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a46:	4413      	add	r3, r2
 8000a48:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d9dd      	bls.n	8000a12 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d101      	bne.n	8000a60 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a64:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e01b      	b.n	8000abc <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a84:	7cfb      	ldrb	r3, [r7, #19]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d115      	bne.n	8000ab6 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f1c3 0303 	rsb	r3, r3, #3
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa0:	f107 020c 	add.w	r2, r7, #12
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	7cbb      	ldrb	r3, [r7, #18]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8c5 	bl	8000c3c <ConsoleUtilsIntToHexChar>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9e0      	bls.n	8000a84 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 faec 	bl	80010b0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b089      	sub	sp, #36	; 0x24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da07      	bge.n	8000b0c <smallItoa+0x2a>
		isNegative = true;
 8000afc:	2301      	movs	r3, #1
 8000afe:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	425b      	negs	r3, r3
 8000b04:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b10:	e007      	b.n	8000b22 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f1      	bne.n	8000b12 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	fb01 f202 	mul.w	r2, r1, r2
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	440b      	add	r3, r1
 8000b5a:	3230      	adds	r2, #48	; 0x30
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b68:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	617a      	str	r2, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1e6      	bne.n	8000b42 <smallItoa+0x60>

	if (isNegative) {
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	222d      	movs	r2, #45	; 0x2d
 8000b7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b80:	bf00      	nop
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	f107 0108 	add.w	r1, r7, #8
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff9e 	bl	8000ae2 <smallItoa>
	ConsoleIoSendString(out);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa80 	bl	80010b0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8000bce:	d908      	bls.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b39      	cmp	r3, #57	; 0x39
 8000bd4:	d805      	bhi.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3b30      	subs	r3, #48	; 0x30
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e025      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b40      	cmp	r3, #64	; 0x40
 8000be6:	d908      	bls.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b46      	cmp	r3, #70	; 0x46
 8000bec:	d805      	bhi.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3b37      	subs	r3, #55	; 0x37
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e019      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b60      	cmp	r3, #96	; 0x60
 8000bfe:	d908      	bls.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b66      	cmp	r3, #102	; 0x66
 8000c04:	d805      	bhi.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3b57      	subs	r3, #87	; 0x57
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e00d      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b0a      	cmp	r3, #10
 8000c16:	d105      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b0d      	cmp	r3, #13
 8000c1c:	d102      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d102      	bne.n	8000c2a <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c24:	2311      	movs	r3, #17
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e001      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d805      	bhi.n	8000c5e <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	3330      	adds	r3, #48	; 0x30
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e00d      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	d908      	bls.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d805      	bhi.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3337      	adds	r3, #55	; 0x37
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e001      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c76:	2310      	movs	r3, #16
 8000c78:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c96:	2300      	movs	r3, #0
 8000c98:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000ca6:	f107 0210 	add.w	r2, r7, #16
 8000caa:	7afb      	ldrb	r3, [r7, #11]
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fe06 	bl	80008c0 <ConsoleParamFindN>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cca:	e00e      	b.n	8000cea <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7dfa      	ldrb	r2, [r7, #23]
 8000cd4:	701a      	strb	r2, [r3, #0]
			i++;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	2b0a      	cmp	r3, #10
 8000cee:	d008      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b0d      	cmp	r3, #13
 8000cf4:	d005      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d002      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9e4      	bls.n	8000ccc <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d101      	bne.n	8000d0c <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d44:	2300      	movs	r3, #0
 8000d46:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d48:	230d      	movs	r3, #13
 8000d4a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e01e      	b.n	8000d90 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d52:	4914      	ldr	r1, [pc, #80]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f9a4 	bl	80010b0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ConsoleCommandHelp+0x6c>)
 8000d6a:	f000 f9a1 	bl	80010b0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f996 	bl	80010b0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <ConsoleCommandHelp+0x70>)
 8000d86:	f000 f993 	bl	80010b0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3db      	bcc.n	8000d52 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0801302c 	.word	0x0801302c
 8000da8:	08012a0c 	.word	0x08012a0c
 8000dac:	08012a10 	.word	0x08012a10

08000db0 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fdae 	bl	8000922 <ConsoleReceiveParamInt16>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d116      	bne.n	8000dfe <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <ConsoleCommandParamExampleInt16+0x58>)
 8000dd2:	f000 f96d 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fed6 	bl	8000b8c <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <ConsoleCommandParamExampleInt16+0x5c>)
 8000de2:	f000 f965 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe3f 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <ConsoleCommandParamExampleInt16+0x60>)
 8000df4:	f000 f95c 	bl	80010b0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <ConsoleCommandParamExampleInt16+0x64>)
 8000dfa:	f000 f959 	bl	80010b0 <ConsoleIoSendString>
	}
	return result;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	08012a14 	.word	0x08012a14
 8000e0c:	08012a24 	.word	0x08012a24
 8000e10:	08012a2c 	.word	0x08012a2c
 8000e14:	08012a10 	.word	0x08012a10

08000e18 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	461a      	mov	r2, r3
 8000e26:	2101      	movs	r1, #1
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fdd8 	bl	80009de <ConsoleReceiveParamHexUint16>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d109      	bne.n	8000e4c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e3a:	f000 f939 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe15 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e48:	f000 f932 	bl	80010b0 <ConsoleIoSendString>
	}
	return result;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08012a30 	.word	0x08012a30
 8000e5c:	08012a10 	.word	0x08012a10

08000e60 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <ConsoleCommandVer+0x24>)
 8000e6e:	f000 f91f 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ConsoleCommandVer+0x28>)
 8000e74:	f000 f91c 	bl	80010b0 <ConsoleIoSendString>
	return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08012a40 	.word	0x08012a40
 8000e88:	08012a10 	.word	0x08012a10

08000e8c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <ConsoleCommandsGetTable+0x10>)
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	0801302c 	.word	0x0801302c

08000ea0 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2101      	movs	r1, #1
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fee3 	bl	8000c88 <ConsoleReceiveParamString>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000ec6:	7a7b      	ldrb	r3, [r7, #9]
 8000ec8:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	2b6e      	cmp	r3, #110	; 0x6e
 8000ece:	d103      	bne.n	8000ed8 <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		SetUserDebugLogging(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 fcb9 	bl	8003848 <SetUserDebugLogging>
 8000ed6:	e008      	b.n	8000eea <ConsoleCommandDebugPrint+0x4a>
	}
	else if('f'== trigger){
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b66      	cmp	r3, #102	; 0x66
 8000edc:	d103      	bne.n	8000ee6 <ConsoleCommandDebugPrint+0x46>

		// trigger is off.
		SetUserDebugLogging(0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f002 fcb2 	bl	8003848 <SetUserDebugLogging>
 8000ee4:	e001      	b.n	8000eea <ConsoleCommandDebugPrint+0x4a>
	}
	else
	{
		//the inputs bad output guide text.
		return COMMAND_ERROR;
 8000ee6:	23ff      	movs	r3, #255	; 0xff
 8000ee8:	e000      	b.n	8000eec <ConsoleCommandDebugPrint+0x4c>
	}

	return result;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]

}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <ConsoleCommandSetMode>:
static eCommandResult_T ConsoleCommandSetMode(const char buffer[]){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	eCommandResult_T result = COMMAND_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	2300      	movs	r3, #0
 8000f06:	733b      	strb	r3, [r7, #12]
	// get the mode they want to set.
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff feb9 	bl	8000c88 <ConsoleReceiveParamString>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ConsoleCommandSetState>:
static eCommandResult_T ConsoleCommandSetState(const char buffer[]){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fea1 	bl	8000c88 <ConsoleReceiveParamString>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]

	return result;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <ConsoleCommandSetStateTimeout>:
static eCommandResult_T ConsoleCommandSetStateTimeout(const char buffer[]){
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <ConsoleCommandSetLogging>:
static eCommandResult_T ConsoleCommandSetLogging(const char buffer[]){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
		// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
		// All though it's great input sanitisation it's okay for this.
		char command[5] ={0};
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	733b      	strb	r3, [r7, #12]
		result = ConsoleReceiveParamString(buffer, 1, command);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	461a      	mov	r2, r3
 8000f88:	2101      	movs	r1, #1
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fe7c 	bl	8000c88 <ConsoleReceiveParamString>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
		char trigger = command[1];
 8000f94:	7a7b      	ldrb	r3, [r7, #9]
 8000f96:	73bb      	strb	r3, [r7, #14]
		if ('n'==trigger)
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b6e      	cmp	r3, #110	; 0x6e
 8000f9c:	d103      	bne.n	8000fa6 <ConsoleCommandSetLogging+0x38>
		{
			// trigger is on
			SetMovementUSBLogging(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f002 fc62 	bl	8003868 <SetMovementUSBLogging>
 8000fa4:	e008      	b.n	8000fb8 <ConsoleCommandSetLogging+0x4a>
		}
		else if('f'== trigger){
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b66      	cmp	r3, #102	; 0x66
 8000faa:	d103      	bne.n	8000fb4 <ConsoleCommandSetLogging+0x46>

			// trigger is off.
			SetMovementUSBLogging(0);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 fc5b 	bl	8003868 <SetMovementUSBLogging>
 8000fb2:	e001      	b.n	8000fb8 <ConsoleCommandSetLogging+0x4a>
		}
		else
		{
			//the inputs bad output guide text.
			return COMMAND_ERROR;
 8000fb4:	23ff      	movs	r3, #255	; 0xff
 8000fb6:	e000      	b.n	8000fba <ConsoleCommandSetLogging+0x4c>
		}

		return result;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <ConsoleCommandsetMainColour>:

static eCommandResult_T ConsoleCommandsetMainColour(const char buffer[]){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]
	int r,g,b;
	SetUserMainColour(r,g,b);
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	6938      	ldr	r0, [r7, #16]
 8000fd4:	f002 fc0c 	bl	80037f0 <SetUserMainColour>
	return result;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	charCount = 0;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <reset+0x1c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <reset+0x20>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200001e8 	.word	0x200001e8
 8001004:	200001e4 	.word	0x200001e4

08001008 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <ConsoleIoInit+0x28>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <ConsoleIoInit+0x28>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	4905      	ldr	r1, [pc, #20]	; (8001034 <ConsoleIoInit+0x2c>)
 800101e:	4618      	mov	r0, r3
 8001020:	f008 fad1 	bl	80095c6 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001e0 	.word	0x200001e0
 8001034:	200001f6 	.word	0x200001f6

08001038 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <ConsoleIoReceive+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d11f      	bne.n	8001090 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8001050:	e00a      	b.n	8001068 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	4912      	ldr	r1, [pc, #72]	; (80010a4 <ConsoleIoReceive+0x6c>)
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	440a      	add	r2, r1
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	701a      	strb	r2, [r3, #0]
			i++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <ConsoleIoReceive+0x70>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	461a      	mov	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4293      	cmp	r3, r2
 8001074:	d3ed      	bcc.n	8001052 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <ConsoleIoReceive+0x70>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8001080:	4908      	ldr	r1, [pc, #32]	; (80010a4 <ConsoleIoReceive+0x6c>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <ConsoleIoReceive+0x74>)
 8001084:	f010 fa32 	bl	80114ec <iprintf>
		// reset counts
		reset();
 8001088:	f7ff ffac 	bl	8000fe4 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 800108c:	2300      	movs	r3, #0
 800108e:	e003      	b.n	8001098 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001e4 	.word	0x200001e4
 80010a4:	200001ec 	.word	0x200001ec
 80010a8:	200001e8 	.word	0x200001e8
 80010ac:	08012a54 	.word	0x08012a54

080010b0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <ConsoleIoSendString+0x1c>)
 80010bc:	f010 fa16 	bl	80114ec <iprintf>
	return CONSOLE_SUCCESS;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08012a54 	.word	0x08012a54

080010d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 80010de:	7811      	ldrb	r1, [r2, #0]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_UART_RxCpltCallback+0x4c>)
 80010e2:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010ec:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d102      	bne.n	80010fc <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_UART_RxCpltCallback+0x50>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_UART_RxCpltCallback+0x54>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fa5e 	bl	80095c6 <HAL_UART_Receive_IT>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001e8 	.word	0x200001e8
 8001118:	200001f6 	.word	0x200001f6
 800111c:	200001ec 	.word	0x200001ec
 8001120:	200001e4 	.word	0x200001e4
 8001124:	200001e0 	.word	0x200001e0

08001128 <FileControllerInit>:
#include "usb_host.h"
#include "user.h"

int logMovement = 0;

stoneError_t FileControllerInit(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b098      	sub	sp, #96	; 0x60
 800112c:	af00      	add	r7, sp, #0
	stoneError_t ret = NO_ERROR;
 800112e:	2304      	movs	r3, #4
 8001130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// wait for the USB to be ready to mount.
	while (GetUSBState()!=APPLICATION_READY){
 8001134:	e001      	b.n	800113a <FileControllerInit+0x12>
		   MX_USB_HOST_Process();
 8001136:	f00f fd8d 	bl	8010c54 <MX_USB_HOST_Process>
	while (GetUSBState()!=APPLICATION_READY){
 800113a:	f00f fd59 	bl	8010bf0 <GetUSBState>
 800113e:	4603      	mov	r3, r0
 8001140:	2b02      	cmp	r3, #2
 8001142:	d1f8      	bne.n	8001136 <FileControllerInit+0xe>

	}
	Mount_USB();
 8001144:	f000 fd2a 	bl	8001b9c <Mount_USB>
	// check to see if a dir for this user already exists.
	char path[80]={0};
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	224c      	movs	r2, #76	; 0x4c
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f010 f8e1 	bl	801131c <memset>
	int userID = GetUserID();
 800115a:	f002 fb3d 	bl	80037d8 <GetUserID>
 800115e:	65b8      	str	r0, [r7, #88]	; 0x58
	sprintf(path,"/%d/%user_prefs.txt\n",userID,userID);
 8001160:	1d38      	adds	r0, r7, #4
 8001162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001166:	4917      	ldr	r1, [pc, #92]	; (80011c4 <FileControllerInit+0x9c>)
 8001168:	f010 fac4 	bl	80116f4 <siprintf>
	FRESULT res = Check_File( path );
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fd36 	bl	8001be0 <Check_File>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if(FR_NO_PATH == res)
 800117a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117e:	2b05      	cmp	r3, #5
 8001180:	d119      	bne.n	80011b6 <FileControllerInit+0x8e>
	{
		sprintf(path,"/%d",userID);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001186:	4910      	ldr	r1, [pc, #64]	; (80011c8 <FileControllerInit+0xa0>)
 8001188:	4618      	mov	r0, r3
 800118a:	f010 fab3 	bl	80116f4 <siprintf>
		res = Create_Dir(path);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fdd7 	bl	8001d44 <Create_Dir>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		sprintf(path,"/%d/prefs.txt",userID);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011a0:	490a      	ldr	r1, [pc, #40]	; (80011cc <FileControllerInit+0xa4>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f010 faa6 	bl	80116f4 <siprintf>
		res = Create_File(path);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd2e 	bl	8001c0c <Create_File>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	}

	// if not make a directory for that user

	return ret;
 80011b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3760      	adds	r7, #96	; 0x60
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08012a58 	.word	0x08012a58
 80011c8:	08012a70 	.word	0x08012a70
 80011cc:	08012a74 	.word	0x08012a74

080011d0 <MovementControllerInit>:
// From adafruit magic wand detection -

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa54 	bl	8001688 <Lis3dhInit>

	I3G450D_Init(SPIxHandle);
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f000 fdef 	bl	8001dc4 <I3G450D_Init>



}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <MovementControllerProcess>:
int MovementControllerProcess(){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
	// Gets for the gyroscope.
	 I3G450D_loop();
 80011f4:	f000 feae 	bl	8001f54 <I3G450D_loop>
	 Lis3dhGetAcc();
 80011f8:	f000 fae4 	bl	80017c4 <Lis3dhGetAcc>
	int16_t acelX,acelY,acelZ;
	AccelGetData(&acelX, &acelY, &acelZ);
 80011fc:	1dba      	adds	r2, r7, #6
 80011fe:	f107 0108 	add.w	r1, r7, #8
 8001202:	f107 030a 	add.w	r3, r7, #10
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb5e 	bl	80018c8 <AccelGetData>
	//printf("%d,%d,%d \n",acelX,acelY,acelZ);
	int interrupt = PollInterrupt();
 800120c:	f000 fc7a 	bl	8001b04 <PollInterrupt>
 8001210:	60f8      	str	r0, [r7, #12]

	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <GetInterruptType>:
gesture_t GetInterruptType( sensor_t sensor ){
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]


}
 8001226:	bf00      	nop
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <GetLastGesture>:
gesture_t GetLastGesture(){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	return lastGesture;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <GetLastGesture+0x14>)
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001f7 	.word	0x200001f7

0800124c <GetLast>:

void GetLast( sensor_t sensor,  movementData_t * data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
	if(ACCELEROMETER == sensor)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <GetLast+0x3c>
	{
		int16_t acelX,acelY,acelZ;
		AccelGetData(&acelX, &acelY, &acelZ);
 800125e:	f107 0212 	add.w	r2, r7, #18
 8001262:	f107 0114 	add.w	r1, r7, #20
 8001266:	f107 0316 	add.w	r3, r7, #22
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fb2c 	bl	80018c8 <AccelGetData>
		data->x = acelX;
 8001270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	801a      	strh	r2, [r3, #0]
		data->y = acelY;
 8001278:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	805a      	strh	r2, [r3, #2]
		data->z = acelZ;
 8001280:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	809a      	strh	r2, [r3, #4]

	}
	if(GYROSCOPE == sensor)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d114      	bne.n	80012b8 <GetLast+0x6c>
		{
			int16_t gyroX,gyroY,gyroZ;
			GyroGetData(&gyroX, &gyroY, &gyroZ);
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	f107 010e 	add.w	r1, r7, #14
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fa30 	bl	8002700 <GyroGetData>
			data->x = gyroX;
 80012a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	801a      	strh	r2, [r3, #0]
			data->y = gyroY;
 80012a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	805a      	strh	r2, [r3, #2]
			data->z = gyroZ;
 80012b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	809a      	strh	r2, [r3, #4]

		}

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SessionControllerInit>:




void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff7e 	bl	80011d0 <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fa07 	bl	80006e8 <ConsoleInit>
	FileControllerInit();
 80012da:	f7ff ff25 	bl	8001128 <FileControllerInit>
	currentState = START;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <SessionControllerInit+0x3c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80012e4:	f002 fbca 	bl	8003a7c <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SessionControllerInit+0x40>)
 80012ec:	6013      	str	r3, [r2, #0]
	ConsoleProcess();
 80012ee:	f7ff fa2b 	bl	8000748 <ConsoleProcess>




}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f8 	.word	0x200001f8
 8001300:	2000020c 	.word	0x2000020c

08001304 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0



// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <SessionControllerProcess+0xa8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <SessionControllerProcess+0xac>)
 8001312:	460b      	mov	r3, r1
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	f107 0414 	add.w	r4, r7, #20
 8001320:	461d      	mov	r5, r3
 8001322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	movementData_t accel;
	movementData_t gyro;

	//out put for training model
	MovementControllerProcess();
 8001332:	f7ff ff5c 	bl	80011ee <MovementControllerProcess>
	// if we are logging the data.
	if(1 == GetMovementUSBLogging())
 8001336:	f002 faa7 	bl	8003888 <GetMovementUSBLogging>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10a      	bne.n	8001356 <SessionControllerProcess+0x52>
	{
		GetLast( ACCELEROMETER,  &accel);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff80 	bl	800124c <GetLast>
		GetLast(GYROSCOPE, &gyro);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ff7b 	bl	800124c <GetLast>
	}


	// special case for timeout while in mode we pull the time out from the mode we are in.
	// users stay in mode until they explicitly exit or  meet another criteria ( like no movement ) defined by there mode.
	if(currentState == IN_MODE)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <SessionControllerProcess+0xa8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d104      	bne.n	8001368 <SessionControllerProcess+0x64>
	{
		timeStateStarted = HAL_GetTick();// just for testing.
 800135e:	f002 fb8d 	bl	8003a7c <HAL_GetTick>
 8001362:	4603      	mov	r3, r0
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <SessionControllerProcess+0xb0>)
 8001366:	6013      	str	r3, [r2, #0]


	//MovementControllerProcess();


	if ( HAL_GetTick() - timeStateStarted > timeout )
 8001368:	f002 fb88 	bl	8003a7c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <SessionControllerProcess+0xb0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001376:	429a      	cmp	r2, r3
 8001378:	d201      	bcs.n	800137e <SessionControllerProcess+0x7a>
	{

		current.onEnd();
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <SessionControllerProcess+0xb4>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <SessionControllerProcess+0x86>
	{

		current.onButtonPress();
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4798      	blx	r3
	}

	if( 1 == accelerometorInterrupt)
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <SessionControllerProcess+0xb8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d106      	bne.n	80013a0 <SessionControllerProcess+0x9c>
	{
		// The interrupt has been triggered.
		// get what interrupted it from movementController.
		gesture_t gesture =  GetInterruptType( ACCELEROMETER );
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff42 	bl	800121c <GetInterruptType>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		// run proccess for current state.
		current.stateProcess();
	}


}
 800139e:	e001      	b.n	80013a4 <SessionControllerProcess+0xa0>
		current.stateProcess();
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	4798      	blx	r3
}
 80013a4:	bf00      	nop
 80013a6:	3738      	adds	r7, #56	; 0x38
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	200001f8 	.word	0x200001f8
 80013b0:	20000000 	.word	0x20000000
 80013b4:	2000020c 	.word	0x2000020c
 80013b8:	20000210 	.word	0x20000210
 80013bc:	20000214 	.word	0x20000214

080013c0 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	DebugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <IdleAwake+0x28>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <IdleAwake+0x2c>)
 80013ca:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <IdleAwake+0x28>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80013d2:	f002 fb53 	bl	8003a7c <HAL_GetTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <IdleAwake+0x30>)
 80013da:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = IdleAwake");
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <IdleAwake+0x34>)
 80013de:	f002 fa13 	bl	8003808 <DebugPrint>
	return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200001f8 	.word	0x200001f8
 80013ec:	200001f9 	.word	0x200001f9
 80013f0:	2000020c 	.word	0x2000020c
 80013f4:	08012a98 	.word	0x08012a98

080013f8 <DeepSleep>:
int DeepSleep(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <DeepSleep+0x28>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <DeepSleep+0x2c>)
 8001402:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <DeepSleep+0x28>)
 8001406:	2202      	movs	r2, #2
 8001408:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800140a:	f002 fb37 	bl	8003a7c <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <DeepSleep+0x30>)
 8001412:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = DeepSleep");
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <DeepSleep+0x34>)
 8001416:	f002 f9f7 	bl	8003808 <DebugPrint>
	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200001f8 	.word	0x200001f8
 8001424:	200001f9 	.word	0x200001f9
 8001428:	2000020c 	.word	0x2000020c
 800142c:	08012aac 	.word	0x08012aac

08001430 <WaitingForSelection>:
int WaitingForSelection(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <WaitingForSelection+0x28>)
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <WaitingForSelection+0x2c>)
 800143a:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <WaitingForSelection+0x28>)
 800143e:	2203      	movs	r2, #3
 8001440:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001442:	f002 fb1b 	bl	8003a7c <HAL_GetTick>
 8001446:	4603      	mov	r3, r0
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <WaitingForSelection+0x30>)
 800144a:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = WaitingForSelection");
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <WaitingForSelection+0x34>)
 800144e:	f002 f9db 	bl	8003808 <DebugPrint>
	return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200001f8 	.word	0x200001f8
 800145c:	200001f9 	.word	0x200001f9
 8001460:	2000020c 	.word	0x2000020c
 8001464:	08012ac0 	.word	0x08012ac0

08001468 <LoadMode>:
int LoadMode(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	previouseState = currentState;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <LoadMode+0x28>)
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <LoadMode+0x2c>)
 8001472:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <LoadMode+0x28>)
 8001476:	2203      	movs	r2, #3
 8001478:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800147a:	f002 faff 	bl	8003a7c <HAL_GetTick>
 800147e:	4603      	mov	r3, r0
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <LoadMode+0x30>)
 8001482:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = LoadMode");
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <LoadMode+0x34>)
 8001486:	f002 f9bf 	bl	8003808 <DebugPrint>
	return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001f8 	.word	0x200001f8
 8001494:	200001f9 	.word	0x200001f9
 8001498:	2000020c 	.word	0x2000020c
 800149c:	08012ae0 	.word	0x08012ae0

080014a0 <CliMode>:
int CliMode(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

	previouseState = currentState;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <CliMode+0x34>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <CliMode+0x38>)
 80014aa:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <CliMode+0x34>)
 80014ae:	2206      	movs	r2, #6
 80014b0:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <CliMode+0x3c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	PauseDebugLogging();
 80014b8:	f002 f9f2 	bl	80038a0 <PauseDebugLogging>

	timeStateStarted = HAL_GetTick();
 80014bc:	f002 fade 	bl	8003a7c <HAL_GetTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <CliMode+0x40>)
 80014c4:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = CliMode");
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <CliMode+0x44>)
 80014c8:	f002 f99e 	bl	8003808 <DebugPrint>

	return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001f8 	.word	0x200001f8
 80014d8:	200001f9 	.word	0x200001f9
 80014dc:	20000210 	.word	0x20000210
 80014e0:	2000020c 	.word	0x2000020c
 80014e4:	08012af4 	.word	0x08012af4

080014e8 <StartPreviouseMode>:
int StartPreviouseMode(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	currentState = previouseState;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <StartPreviouseMode+0x2c>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <StartPreviouseMode+0x30>)
 80014f2:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <StartPreviouseMode+0x2c>)
 80014f6:	2206      	movs	r2, #6
 80014f8:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	ResumeDebugLogging();
 80014fa:	f002 f9dd 	bl	80038b8 <ResumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 80014fe:	f002 fabd 	bl	8003a7c <HAL_GetTick>
 8001502:	4603      	mov	r3, r0
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <StartPreviouseMode+0x34>)
 8001506:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = StartPreviouseMode");
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <StartPreviouseMode+0x38>)
 800150a:	f002 f97d 	bl	8003808 <DebugPrint>
	return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001f9 	.word	0x200001f9
 8001518:	200001f8 	.word	0x200001f8
 800151c:	2000020c 	.word	0x2000020c
 8001520:	08012b08 	.word	0x08012b08

08001524 <InMode>:
int InMode()
{
 8001524:	b598      	push	{r3, r4, r7, lr}
 8001526:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <InMode+0x34>)
 800152a:	2205      	movs	r2, #5
 800152c:	701a      	strb	r2, [r3, #0]
	selectedMode = modeTable[currentMode];
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <InMode+0x38>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	490b      	ldr	r1, [pc, #44]	; (8001560 <InMode+0x3c>)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <InMode+0x40>)
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	460c      	mov	r4, r1
 800153c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timeStateStarted = HAL_GetTick();
 8001542:	f002 fa9b 	bl	8003a7c <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <InMode+0x44>)
 800154a:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = InMode");
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <InMode+0x48>)
 800154e:	f002 f95b 	bl	8003808 <DebugPrint>
	return 0;
 8001552:	2300      	movs	r3, #0

}
 8001554:	4618      	mov	r0, r3
 8001556:	bd98      	pop	{r3, r4, r7, pc}
 8001558:	200001f8 	.word	0x200001f8
 800155c:	200001fa 	.word	0x200001fa
 8001560:	200001fc 	.word	0x200001fc
 8001564:	200000c4 	.word	0x200000c4
 8001568:	2000020c 	.word	0x2000020c
 800156c:	08012b24 	.word	0x08012b24

08001570 <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 8001574:	2300      	movs	r3, #0
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
 8001584:	2300      	movs	r3, #0
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
 8001594:	2300      	movs	r3, #0
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
	// check to see if we had any control gestures.
		gesture_t lastGesture  = GetLastGesture();
 80015a6:	f7ff fe45 	bl	8001234 <GetLastGesture>
 80015aa:	4603      	mov	r3, r0
 80015ac:	77fb      	strb	r3, [r7, #31]

		if( NO_GESTURE != lastGesture ){
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d01e      	beq.n	80015f2 <WaitingForSelectionProcess+0x52>
			// gesture recognized response.

			if(TWIST_Y == lastGesture )
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d102      	bne.n	80015c0 <WaitingForSelectionProcess+0x20>
			{ currentMode = COLOUR_CHANGE; }
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <WaitingForSelectionProcess+0x5c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
			if(SUDDEN_UP == lastGesture)
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <WaitingForSelectionProcess+0x2c>
			{currentMode = BREATHING_TRAINER;}
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <WaitingForSelectionProcess+0x5c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
			stateTableEntry_t current = stateTabel[currentState];
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <WaitingForSelectionProcess+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <WaitingForSelectionProcess+0x64>)
 80015d4:	460b      	mov	r3, r1
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a5b      	subs	r3, r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	463c      	mov	r4, r7
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			current.onGestureRecognize();
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4798      	blx	r3

		}



	return 0;}
 80015f2:	2300      	movs	r3, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	200001fa 	.word	0x200001fa
 8001600:	200001f8 	.word	0x200001f8
 8001604:	20000000 	.word	0x20000000

08001608 <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
 800160c:	2300      	movs	r3, #0
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <CliModeProcess>:

int CliModeProcess(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	ConsoleProcess();
 800161c:	f7ff f894 	bl	8000748 <ConsoleProcess>

	return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	selectedMode.modeProcess();
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <InModeProcess+0x10>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4798      	blx	r3
	return 0;}
 8001632:	2300      	movs	r3, #0
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001fc 	.word	0x200001fc

0800163c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8001646:	2301      	movs	r3, #1
 8001648:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_GPIO_EXTI_Callback+0x40>)
 800164c:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	4619      	mov	r1, r3
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f003 f898 	bl	8004788 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_Callback+0x44>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
	}
	if( GPIO_Pin == GPIO_PIN_8)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800166a:	d102      	bne.n	8001672 <HAL_GPIO_EXTI_Callback+0x36>
	{
		accelerometorInterrupt = 1;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_GPIO_EXTI_Callback+0x48>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
	}

}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020000 	.word	0x40020000
 8001680:	20000210 	.word	0x20000210
 8001684:	20000214 	.word	0x20000214

08001688 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8001690:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <Lis3dhInit+0x138>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001696:	238f      	movs	r3, #143	; 0x8f
 8001698:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <Lis3dhInit+0x138>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	2130      	movs	r1, #48	; 0x30
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a4:	2201      	movs	r2, #1
 80016a6:	f005 f92b 	bl	8006900 <HAL_I2C_IsDeviceReady>
 80016aa:	4603      	mov	r3, r0
 80016ac:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80016ae:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <Lis3dhInit+0x138>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	2130      	movs	r1, #48	; 0x30
 80016b4:	f107 0214 	add.w	r2, r7, #20
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	f004 fdfa 	bl	80062b8 <HAL_I2C_Master_Transmit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 80016ce:	f000 fa4f 	bl	8001b70 <errorHandler>
 80016d2:	e070      	b.n	80017b6 <Lis3dhInit+0x12e>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <Lis3dhInit+0x138>)
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	2130      	movs	r1, #48	; 0x30
 80016da:	f107 0208 	add.w	r2, r7, #8
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2302      	movs	r3, #2
 80016e6:	f004 fee5 	bl	80064b4 <HAL_I2C_Master_Receive>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 80016f4:	f000 fa3c 	bl	8001b70 <errorHandler>
 80016f8:	e05d      	b.n	80017b6 <Lis3dhInit+0x12e>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 400HZ so that we can use tap interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <Lis3dhInit+0x138>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	2130      	movs	r1, #48	; 0x30
 8001704:	f107 0214 	add.w	r2, r7, #20
 8001708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	f004 fdd2 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001714:	4603      	mov	r3, r0
 8001716:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <Lis3dhInit+0x138>)
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	2130      	movs	r1, #48	; 0x30
 800171e:	f107 0208 	add.w	r2, r7, #8
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2302      	movs	r3, #2
 800172a:	f004 fec3 	bl	80064b4 <HAL_I2C_Master_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1|LIS3DH_WRITE;
 8001732:	2320      	movs	r3, #32
 8001734:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 8001736:	2377      	movs	r3, #119	; 0x77
 8001738:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <Lis3dhInit+0x138>)
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	2130      	movs	r1, #48	; 0x30
 8001740:	f107 0214 	add.w	r2, r7, #20
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2302      	movs	r3, #2
 800174c:	f004 fdb4 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001750:	4603      	mov	r3, r0
 8001752:	75fb      	strb	r3, [r7, #23]

				// set high resolution output
				sendBuff[0] = LIS3DH_REG_CTRL4|LIS3DH_WRITE;
 8001754:	2323      	movs	r3, #35	; 0x23
 8001756:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 8001758:	2377      	movs	r3, #119	; 0x77
 800175a:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <Lis3dhInit+0x138>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	2130      	movs	r1, #48	; 0x30
 8001762:	f107 0214 	add.w	r2, r7, #20
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2302      	movs	r3, #2
 800176e:	f004 fda3 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001772:	4603      	mov	r3, r0
 8001774:	75fb      	strb	r3, [r7, #23]


				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001776:	23a0      	movs	r3, #160	; 0xa0
 8001778:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <Lis3dhInit+0x138>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	2130      	movs	r1, #48	; 0x30
 8001780:	f107 0214 	add.w	r2, r7, #20
 8001784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	f004 fd94 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <Lis3dhInit+0x138>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	2130      	movs	r1, #48	; 0x30
 800179a:	f107 0208 	add.w	r2, r7, #8
 800179e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2302      	movs	r3, #2
 80017a6:	f004 fe85 	bl	80064b4 <HAL_I2C_Master_Receive>
 80017aa:	4603      	mov	r3, r0
 80017ac:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 80017ae:	f000 f8ad 	bl	800190c <Lis3dhInteruptSetup>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]




}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000218 	.word	0x20000218

080017c4 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 80017ca:	23a7      	movs	r3, #167	; 0xa7
 80017cc:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <Lis3dhGetAcc+0xf4>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	2130      	movs	r1, #48	; 0x30
 80017d4:	f107 0214 	add.w	r2, r7, #20
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	f004 fd6a 	bl	80062b8 <HAL_I2C_Master_Transmit>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <Lis3dhGetAcc+0xf4>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	2130      	movs	r1, #48	; 0x30
 80017ee:	f107 0208 	add.w	r2, r7, #8
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2302      	movs	r3, #2
 80017fa:	f004 fe5b 	bl	80064b4 <HAL_I2C_Master_Receive>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 8001802:	23a8      	movs	r3, #168	; 0xa8
 8001804:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <Lis3dhGetAcc+0xf4>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	2130      	movs	r1, #48	; 0x30
 800180c:	f107 0214 	add.w	r2, r7, #20
 8001810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	f004 fd4e 	bl	80062b8 <HAL_I2C_Master_Transmit>
 800181c:	4603      	mov	r3, r0
 800181e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <Lis3dhGetAcc+0xf4>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	2130      	movs	r1, #48	; 0x30
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2306      	movs	r3, #6
 8001832:	f004 fe3f 	bl	80064b4 <HAL_I2C_Master_Receive>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 800183a:	7a7b      	ldrb	r3, [r7, #9]
 800183c:	b21b      	sxth	r3, r3
 800183e:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 8001840:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001844:	b29b      	uxth	r3, r3
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	7a3b      	ldrb	r3, [r7, #8]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	b21b      	sxth	r3, r3
 8001854:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 8001856:	7afb      	ldrb	r3, [r7, #11]
 8001858:	b21b      	sxth	r3, r3
 800185a:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 800185c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001860:	b29b      	uxth	r3, r3
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b29a      	uxth	r2, r3
 8001866:	7abb      	ldrb	r3, [r7, #10]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4413      	add	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21b      	sxth	r3, r3
 8001870:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	b21b      	sxth	r3, r3
 8001876:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001878:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b29a      	uxth	r2, r3
 8001882:	7b3b      	ldrb	r3, [r7, #12]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21b      	sxth	r3, r3
 800188c:	80bb      	strh	r3, [r7, #4]

	  LastXAcel = val[0];
 800188e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <Lis3dhGetAcc+0xf8>)
 8001896:	801a      	strh	r2, [r3, #0]
	  LastYAcel = val[1];
 8001898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <Lis3dhGetAcc+0xfc>)
 80018a0:	801a      	strh	r2, [r3, #0]
	  LastZAcel = val[2];
 80018a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <Lis3dhGetAcc+0x100>)
 80018aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000218 	.word	0x20000218
 80018bc:	2000021c 	.word	0x2000021c
 80018c0:	2000021e 	.word	0x2000021e
 80018c4:	20000220 	.word	0x20000220

080018c8 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <AccelGetData+0x38>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b21a      	sxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <AccelGetData+0x3c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <AccelGetData+0x40>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	801a      	strh	r2, [r3, #0]

}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000021c 	.word	0x2000021c
 8001904:	2000021e 	.word	0x2000021e
 8001908:	20000220 	.word	0x20000220

0800190c <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
	// default to  unlatched.
	HAL_StatusTypeDef ret = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	// turn the click interrupt on.
	sendBuff[0] = LIS3DH_REG_CTRL3 | LIS3DH_WRITE;
 8001916:	2322      	movs	r3, #34	; 0x22
 8001918:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x80;//il_click
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800191e:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	2130      	movs	r1, #48	; 0x30
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2302      	movs	r3, #2
 8001930:	f004 fcc2 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <Lis3dhInteruptSetup+0x36>

		        	//Handle error.
		errorHandler();
 800193e:	f000 f917 	bl	8001b70 <errorHandler>

	}
	sendBuff[0]  = LIS3DH_REG_CTRL3  |LIS3DH_READ;
 8001942:	23a2      	movs	r3, #162	; 0xa2
 8001944:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001946:	4b6e      	ldr	r3, [pc, #440]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	2130      	movs	r1, #48	; 0x30
 800194c:	f107 020c 	add.w	r2, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	f004 fcae 	bl	80062b8 <HAL_I2C_Master_Transmit>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001960:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	2130      	movs	r1, #48	; 0x30
 8001966:	463a      	mov	r2, r7
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2302      	movs	r3, #2
 8001970:	f004 fda0 	bl	80064b4 <HAL_I2C_Master_Receive>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <Lis3dhInteruptSetup+0x76>

			        	//Handle error.
			errorHandler();
 800197e:	f000 f8f7 	bl	8001b70 <errorHandler>

		}
	//turn the latch on.
	sendBuff[0] = LIS3DH_REG_CTRL5 | LIS3DH_WRITE;
 8001982:	2324      	movs	r3, #36	; 0x24
 8001984:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x8;//latch on
 8001986:	2308      	movs	r3, #8
 8001988:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	2130      	movs	r1, #48	; 0x30
 8001990:	f107 020c 	add.w	r2, r7, #12
 8001994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	f004 fc8c 	bl	80062b8 <HAL_I2C_Master_Transmit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <Lis3dhInteruptSetup+0xa2>

			        	//Handle error.
			errorHandler();
 80019aa:	f000 f8e1 	bl	8001b70 <errorHandler>

		}

	// turn double click on for all axis
	sendBuff[0] = LIS3DH_CLICK_CFG | LIS3DH_WRITE;
 80019ae:	2338      	movs	r3, #56	; 0x38
 80019b0:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x15;//single click 0x2a == double tap
 80019b2:	2315      	movs	r3, #21
 80019b4:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2130      	movs	r1, #48	; 0x30
 80019bc:	f107 020c 	add.w	r2, r7, #12
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2302      	movs	r3, #2
 80019c8:	f004 fc76 	bl	80062b8 <HAL_I2C_Master_Transmit>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <Lis3dhInteruptSetup+0xce>

			        	//Handle error.
			errorHandler();
 80019d6:	f000 f8cb 	bl	8001b70 <errorHandler>

		}
	// configure threshold.
	sendBuff[0] = LIS3DH_CLICK_THS | LIS3DH_WRITE;
 80019da:	233a      	movs	r3, #58	; 0x3a
 80019dc:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 100;// recomended from adafruit.
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	2130      	movs	r1, #48	; 0x30
 80019e8:	f107 020c 	add.w	r2, r7, #12
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	f004 fc60 	bl	80062b8 <HAL_I2C_Master_Transmit>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <Lis3dhInteruptSetup+0xfa>

			        	//Handle error.
			errorHandler();
 8001a02:	f000 f8b5 	bl	8001b70 <errorHandler>

		}
	// set Time Limit
	sendBuff[0] = LIS3DH_TIMELIMIT | LIS3DH_WRITE;
 8001a06:	233b      	movs	r3, #59	; 0x3b
 8001a08:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 10;// recomended from adafruit.
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	2130      	movs	r1, #48	; 0x30
 8001a14:	f107 020c 	add.w	r2, r7, #12
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f004 fc4a 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <Lis3dhInteruptSetup+0x126>

			        	//Handle error.
			errorHandler();
 8001a2e:	f000 f89f 	bl	8001b70 <errorHandler>

		}

	// set time latency
	sendBuff[0] = LIS3DH_TIME_LATENCY | LIS3DH_WRITE;
 8001a32:	233c      	movs	r3, #60	; 0x3c
 8001a34:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 20;// recomended from adafruit.
 8001a36:	2314      	movs	r3, #20
 8001a38:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	2130      	movs	r1, #48	; 0x30
 8001a40:	f107 020c 	add.w	r2, r7, #12
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f004 fc34 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <Lis3dhInteruptSetup+0x152>

			        	//Handle error.
			errorHandler();
 8001a5a:	f000 f889 	bl	8001b70 <errorHandler>

		}
	// set time window
	sendBuff[0] = LIS3DH_TIME_WINDOW | LIS3DH_WRITE;
 8001a5e:	233d      	movs	r3, #61	; 0x3d
 8001a60:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 255;// recomended from adafruit.
 8001a62:	23ff      	movs	r3, #255	; 0xff
 8001a64:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2130      	movs	r1, #48	; 0x30
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2302      	movs	r3, #2
 8001a78:	f004 fc1e 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <Lis3dhInteruptSetup+0x17e>

			        	//Handle error.
			errorHandler();
 8001a86:	f000 f873 	bl	8001b70 <errorHandler>

		}

	// set interrupt 1 duration
	sendBuff[0] = LIS3DH_INT1_DURATION | LIS3DH_WRITE;
 8001a8a:	2333      	movs	r3, #51	; 0x33
 8001a8c:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 9;// recomended from adafruit.
 8001a8e:	2309      	movs	r3, #9
 8001a90:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	2130      	movs	r1, #48	; 0x30
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f004 fc08 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <Lis3dhInteruptSetup+0x1aa>

			        	//Handle error.
			errorHandler();
 8001ab2:	f000 f85d 	bl	8001b70 <errorHandler>
		}



	// read last set to make sure it worked?
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 8001ab6:	23b9      	movs	r3, #185	; 0xb9
 8001ab8:	733b      	strb	r3, [r7, #12]

	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	2130      	movs	r1, #48	; 0x30
 8001ac0:	f107 020c 	add.w	r2, r7, #12
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	f004 fbf4 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <Lis3dhInteruptSetup+0x1f4>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	2130      	movs	r1, #48	; 0x30
 8001ada:	463a      	mov	r2, r7
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f004 fce6 	bl	80064b4 <HAL_I2C_Master_Receive>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <Lis3dhInteruptSetup+0x1ea>

			        	//Handle error.
			errorHandler();
 8001af2:	f000 f83d 	bl	8001b70 <errorHandler>

		}
	return ret;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]

}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000218 	.word	0x20000218

08001b04 <PollInterrupt>:
int PollInterrupt()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	uint8_t regValues=0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75bb      	strb	r3, [r7, #22]
	 lis2dh12_click_src_t interruptSource;
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 8001b12:	23b9      	movs	r3, #185	; 0xb9
 8001b14:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <PollInterrupt+0x68>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	2130      	movs	r1, #48	; 0x30
 8001b1c:	f107 0214 	add.w	r2, r7, #20
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	f004 fbc6 	bl	80062b8 <HAL_I2C_Master_Transmit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <PollInterrupt+0x68>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	2130      	movs	r1, #48	; 0x30
 8001b36:	f107 0208 	add.w	r2, r7, #8
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2302      	movs	r3, #2
 8001b42:	f004 fcb7 	bl	80064b4 <HAL_I2C_Master_Receive>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) {
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <PollInterrupt+0x50>

			        	//Handle error.
			errorHandler();
 8001b50:	f000 f80e 	bl	8001b70 <errorHandler>

		}
	regValues = reciveBuff[0];
 8001b54:	7a3b      	ldrb	r3, [r7, #8]
 8001b56:	75bb      	strb	r3, [r7, #22]
	if( regValues > 0 )
 8001b58:	7dbb      	ldrb	r3, [r7, #22]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <PollInterrupt+0x5e>
	{
		// there was an interrupt.
		return 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <PollInterrupt+0x60>

	}
	else return 0;
 8001b62:	2300      	movs	r3, #0

}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000218 	.word	0x20000218

08001b70 <errorHandler>:
void errorHandler()
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
	// something shitty has happened.
	int i = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <Send_USB_Console_Message>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_USB_Console_Message (char *string)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	DebugPrint(string);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f001 fe3a 	bl	8003808 <DebugPrint>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Mount_USB>:



void Mount_USB (void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <Mount_USB+0x30>)
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <Mount_USB+0x34>)
 8001ba6:	f00e fbdb 	bl	8010360 <f_mount>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <Mount_USB+0x38>)
 8001bb0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_USB_Console_Message ("ERROR!!! in mounting USB ...\n\n");
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Mount_USB+0x38>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <Mount_USB+0x26>
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <Mount_USB+0x3c>)
 8001bbc:	f7ff ffe3 	bl	8001b86 <Send_USB_Console_Message>
	else Send_USB_Console_Message("USB mounted successfully...\n");
}
 8001bc0:	e002      	b.n	8001bc8 <Mount_USB+0x2c>
	else Send_USB_Console_Message("USB mounted successfully...\n");
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <Mount_USB+0x40>)
 8001bc4:	f7ff ffdf 	bl	8001b86 <Send_USB_Console_Message>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200033c4 	.word	0x200033c4
 8001bd0:	200033c8 	.word	0x200033c8
 8001bd4:	2000023c 	.word	0x2000023c
 8001bd8:	08012b34 	.word	0x08012b34
 8001bdc:	08012b54 	.word	0x08012b54

08001be0 <Check_File>:
    free(path);
    return fresult;
}

FRESULT Check_File(char *name )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001be8:	4906      	ldr	r1, [pc, #24]	; (8001c04 <Check_File+0x24>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f00e fe64 	bl	80108b8 <f_stat>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <Check_File+0x28>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	return fresult;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <Check_File+0x28>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000224 	.word	0x20000224
 8001c08:	2000023c 	.word	0x2000023c

08001c0c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001c14:	4943      	ldr	r1, [pc, #268]	; (8001d24 <Create_File+0x118>)
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f00e fe4e 	bl	80108b8 <f_stat>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <Create_File+0x11c>)
 8001c22:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <Create_File+0x11c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d112      	bne.n	8001c52 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001c2c:	2064      	movs	r0, #100	; 0x64
 8001c2e:	f00f fb57 	bl	80112e0 <malloc>
 8001c32:	4603      	mov	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	493c      	ldr	r1, [pc, #240]	; (8001d2c <Create_File+0x120>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f00f fd5a 	bl	80116f4 <siprintf>
		Send_USB_Console_Message(buf);
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff ffa0 	bl	8001b86 <Send_USB_Console_Message>
		free(buf);
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f00f fb52 	bl	80112f0 <free>
	    return fresult;
 8001c4c:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <Create_File+0x11c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	e063      	b.n	8001d1a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001c52:	220b      	movs	r2, #11
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4836      	ldr	r0, [pc, #216]	; (8001d30 <Create_File+0x124>)
 8001c58:	f00e fbc8 	bl	80103ec <f_open>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <Create_File+0x11c>)
 8001c62:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <Create_File+0x11c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001c6c:	2064      	movs	r0, #100	; 0x64
 8001c6e:	f00f fb37 	bl	80112e0 <malloc>
 8001c72:	4603      	mov	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <Create_File+0x11c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	492d      	ldr	r1, [pc, #180]	; (8001d34 <Create_File+0x128>)
 8001c80:	6938      	ldr	r0, [r7, #16]
 8001c82:	f00f fd37 	bl	80116f4 <siprintf>
			Send_USB_Console_Message(buf);
 8001c86:	6938      	ldr	r0, [r7, #16]
 8001c88:	f7ff ff7d 	bl	8001b86 <Send_USB_Console_Message>
			free(buf);
 8001c8c:	6938      	ldr	r0, [r7, #16]
 8001c8e:	f00f fb2f 	bl	80112f0 <free>
		    return fresult;
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <Create_File+0x11c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	e040      	b.n	8001d1a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	f00f fb21 	bl	80112e0 <malloc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4924      	ldr	r1, [pc, #144]	; (8001d38 <Create_File+0x12c>)
 8001ca6:	69f8      	ldr	r0, [r7, #28]
 8001ca8:	f00f fd24 	bl	80116f4 <siprintf>
			Send_USB_Console_Message(buf);
 8001cac:	69f8      	ldr	r0, [r7, #28]
 8001cae:	f7ff ff6a 	bl	8001b86 <Send_USB_Console_Message>
			free(buf);
 8001cb2:	69f8      	ldr	r0, [r7, #28]
 8001cb4:	f00f fb1c 	bl	80112f0 <free>
		}

		fresult = f_close(&USBHFile);
 8001cb8:	481d      	ldr	r0, [pc, #116]	; (8001d30 <Create_File+0x124>)
 8001cba:	f00e fdd3 	bl	8010864 <f_close>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <Create_File+0x11c>)
 8001cc4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <Create_File+0x11c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d013      	beq.n	8001cf6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f00f fb06 	bl	80112e0 <malloc>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <Create_File+0x11c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <Create_File+0x130>)
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f00f fd06 	bl	80116f4 <siprintf>
			Send_USB_Console_Message(buf);
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff ff4c 	bl	8001b86 <Send_USB_Console_Message>
			free(buf);
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f00f fafe 	bl	80112f0 <free>
 8001cf4:	e00f      	b.n	8001d16 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001cf6:	2064      	movs	r0, #100	; 0x64
 8001cf8:	f00f faf2 	bl	80112e0 <malloc>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <Create_File+0x134>)
 8001d04:	69b8      	ldr	r0, [r7, #24]
 8001d06:	f00f fcf5 	bl	80116f4 <siprintf>
			Send_USB_Console_Message(buf);
 8001d0a:	69b8      	ldr	r0, [r7, #24]
 8001d0c:	f7ff ff3b 	bl	8001b86 <Send_USB_Console_Message>
			free(buf);
 8001d10:	69b8      	ldr	r0, [r7, #24]
 8001d12:	f00f faed 	bl	80112f0 <free>
		}
	}
    return fresult;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <Create_File+0x11c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000224 	.word	0x20000224
 8001d28:	2000023c 	.word	0x2000023c
 8001d2c:	08012ddc 	.word	0x08012ddc
 8001d30:	200035f8 	.word	0x200035f8
 8001d34:	08012e14 	.word	0x08012e14
 8001d38:	08012e3c 	.word	0x08012e3c
 8001d3c:	08012e7c 	.word	0x08012e7c
 8001d40:	08012dbc 	.word	0x08012dbc

08001d44 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f00e fdec 	bl	801092a <f_mkdir>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <Create_Dir+0x74>)
 8001d58:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <Create_Dir+0x74>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d110      	bne.n	8001d84 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8001d62:	2064      	movs	r0, #100	; 0x64
 8001d64:	f00f fabc 	bl	80112e0 <malloc>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4913      	ldr	r1, [pc, #76]	; (8001dbc <Create_Dir+0x78>)
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f00f fcbf 	bl	80116f4 <siprintf>
    	Send_USB_Console_Message (buf);
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f7ff ff05 	bl	8001b86 <Send_USB_Console_Message>
    	free(buf);
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f00f fab7 	bl	80112f0 <free>
 8001d82:	e012      	b.n	8001daa <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001d84:	2064      	movs	r0, #100	; 0x64
 8001d86:	f00f faab 	bl	80112e0 <malloc>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <Create_Dir+0x74>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	490a      	ldr	r1, [pc, #40]	; (8001dc0 <Create_Dir+0x7c>)
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f00f fcab 	bl	80116f4 <siprintf>
    	Send_USB_Console_Message(buf);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fef1 	bl	8001b86 <Send_USB_Console_Message>
    	free(buf);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f00f faa3 	bl	80112f0 <free>
    }
    return fresult;
 8001daa:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <Create_Dir+0x74>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000023c 	.word	0x2000023c
 8001dbc:	08012f5c 	.word	0x08012f5c
 8001dc0:	08012f84 	.word	0x08012f84

08001dc4 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <I3G450D_Init+0x180>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	485c      	ldr	r0, [pc, #368]	; (8001f48 <I3G450D_Init+0x184>)
 8001dd8:	f002 fcee 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001ddc:	2014      	movs	r0, #20
 8001dde:	f001 fe59 	bl	8003a94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2102      	movs	r1, #2
 8001de6:	4858      	ldr	r0, [pc, #352]	; (8001f48 <I3G450D_Init+0x184>)
 8001de8:	f002 fce6 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001dec:	2014      	movs	r0, #20
 8001dee:	f001 fe51 	bl	8003a94 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8001df2:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <I3G450D_Init+0x188>)
 8001df4:	2220      	movs	r2, #32
 8001df6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8001df8:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <I3G450D_Init+0x188>)
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <I3G450D_Init+0x180>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	2332      	movs	r3, #50	; 0x32
 8001e04:	2202      	movs	r2, #2
 8001e06:	4951      	ldr	r1, [pc, #324]	; (8001f4c <I3G450D_Init+0x188>)
 8001e08:	f005 ffa5 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2102      	movs	r1, #2
 8001e10:	484d      	ldr	r0, [pc, #308]	; (8001f48 <I3G450D_Init+0x184>)
 8001e12:	f002 fcd1 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e16:	2014      	movs	r0, #20
 8001e18:	f001 fe3c 	bl	8003a94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2102      	movs	r1, #2
 8001e20:	4849      	ldr	r0, [pc, #292]	; (8001f48 <I3G450D_Init+0x184>)
 8001e22:	f002 fcc9 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e26:	2014      	movs	r0, #20
 8001e28:	f001 fe34 	bl	8003a94 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <I3G450D_Init+0x188>)
 8001e2e:	2221      	movs	r2, #33	; 0x21
 8001e30:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <I3G450D_Init+0x188>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <I3G450D_Init+0x180>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	2332      	movs	r3, #50	; 0x32
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4942      	ldr	r1, [pc, #264]	; (8001f4c <I3G450D_Init+0x188>)
 8001e42:	f005 ff88 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2102      	movs	r1, #2
 8001e4a:	483f      	ldr	r0, [pc, #252]	; (8001f48 <I3G450D_Init+0x184>)
 8001e4c:	f002 fcb4 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e50:	2014      	movs	r0, #20
 8001e52:	f001 fe1f 	bl	8003a94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2102      	movs	r1, #2
 8001e5a:	483b      	ldr	r0, [pc, #236]	; (8001f48 <I3G450D_Init+0x184>)
 8001e5c:	f002 fcac 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e60:	2014      	movs	r0, #20
 8001e62:	f001 fe17 	bl	8003a94 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <I3G450D_Init+0x188>)
 8001e68:	2222      	movs	r2, #34	; 0x22
 8001e6a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <I3G450D_Init+0x188>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <I3G450D_Init+0x180>)
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	2332      	movs	r3, #50	; 0x32
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4934      	ldr	r1, [pc, #208]	; (8001f4c <I3G450D_Init+0x188>)
 8001e7c:	f005 ff6b 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2102      	movs	r1, #2
 8001e84:	4830      	ldr	r0, [pc, #192]	; (8001f48 <I3G450D_Init+0x184>)
 8001e86:	f002 fc97 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e8a:	2014      	movs	r0, #20
 8001e8c:	f001 fe02 	bl	8003a94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2102      	movs	r1, #2
 8001e94:	482c      	ldr	r0, [pc, #176]	; (8001f48 <I3G450D_Init+0x184>)
 8001e96:	f002 fc8f 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e9a:	2014      	movs	r0, #20
 8001e9c:	f001 fdfa 	bl	8003a94 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <I3G450D_Init+0x188>)
 8001ea2:	2223      	movs	r2, #35	; 0x23
 8001ea4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <I3G450D_Init+0x188>)
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <I3G450D_Init+0x180>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	2332      	movs	r3, #50	; 0x32
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4925      	ldr	r1, [pc, #148]	; (8001f4c <I3G450D_Init+0x188>)
 8001eb6:	f005 ff4e 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4822      	ldr	r0, [pc, #136]	; (8001f48 <I3G450D_Init+0x184>)
 8001ec0:	f002 fc7a 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001ec4:	2014      	movs	r0, #20
 8001ec6:	f001 fde5 	bl	8003a94 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2102      	movs	r1, #2
 8001ece:	481e      	ldr	r0, [pc, #120]	; (8001f48 <I3G450D_Init+0x184>)
 8001ed0:	f002 fc72 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001ed4:	2014      	movs	r0, #20
 8001ed6:	f001 fddd 	bl	8003a94 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <I3G450D_Init+0x188>)
 8001edc:	2224      	movs	r2, #36	; 0x24
 8001ede:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <I3G450D_Init+0x188>)
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <I3G450D_Init+0x180>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	2332      	movs	r3, #50	; 0x32
 8001eec:	2202      	movs	r2, #2
 8001eee:	4917      	ldr	r1, [pc, #92]	; (8001f4c <I3G450D_Init+0x188>)
 8001ef0:	f005 ff31 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4813      	ldr	r0, [pc, #76]	; (8001f48 <I3G450D_Init+0x184>)
 8001efa:	f002 fc5d 	bl	80047b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001efe:	2014      	movs	r0, #20
 8001f00:	f001 fdc8 	bl	8003a94 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2102      	movs	r1, #2
 8001f08:	480f      	ldr	r0, [pc, #60]	; (8001f48 <I3G450D_Init+0x184>)
 8001f0a:	f002 fc55 	bl	80047b8 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <I3G450D_Init+0x188>)
 8001f10:	228f      	movs	r2, #143	; 0x8f
 8001f12:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <I3G450D_Init+0x180>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	2332      	movs	r3, #50	; 0x32
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <I3G450D_Init+0x188>)
 8001f1e:	f005 ff1a 	bl	8007d56 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <I3G450D_Init+0x180>)
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	2332      	movs	r3, #50	; 0x32
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4909      	ldr	r1, [pc, #36]	; (8001f50 <I3G450D_Init+0x18c>)
 8001f2c:	f006 f84f 	bl	8007fce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2102      	movs	r1, #2
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <I3G450D_Init+0x184>)
 8001f36:	f002 fc3f 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20003180 	.word	0x20003180
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	20003174 	.word	0x20003174
 8001f50:	20003179 	.word	0x20003179

08001f54 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b098      	sub	sp, #96	; 0x60
 8001f58:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <I3G450D_loop+0x1c8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <I3G450D_loop+0x6a>
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f000 80c6 	beq.w	8002148 <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001fbc:	e379      	b.n	80026b2 <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001fbe:	4b58      	ldr	r3, [pc, #352]	; (8002120 <I3G450D_loop+0x1cc>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	f040 8374 	bne.w	80026b0 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4855      	ldr	r0, [pc, #340]	; (8002124 <I3G450D_loop+0x1d0>)
 8001fce:	f002 fbf3 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <I3G450D_loop+0x1d4>)
 8001fd4:	22a8      	movs	r2, #168	; 0xa8
 8001fd6:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001fd8:	4b54      	ldr	r3, [pc, #336]	; (800212c <I3G450D_loop+0x1d8>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	2332      	movs	r3, #50	; 0x32
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4951      	ldr	r1, [pc, #324]	; (8002128 <I3G450D_loop+0x1d4>)
 8001fe2:	f005 feb8 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <I3G450D_loop+0x1d8>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	2332      	movs	r3, #50	; 0x32
 8001fec:	2201      	movs	r2, #1
 8001fee:	4950      	ldr	r1, [pc, #320]	; (8002130 <I3G450D_loop+0x1dc>)
 8001ff0:	f005 ffed 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	484a      	ldr	r0, [pc, #296]	; (8002124 <I3G450D_loop+0x1d0>)
 8001ffa:	f002 fbdd 	bl	80047b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2102      	movs	r1, #2
 8002002:	4848      	ldr	r0, [pc, #288]	; (8002124 <I3G450D_loop+0x1d0>)
 8002004:	f002 fbd8 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <I3G450D_loop+0x1d4>)
 800200a:	22a9      	movs	r2, #169	; 0xa9
 800200c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <I3G450D_loop+0x1d8>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2332      	movs	r3, #50	; 0x32
 8002014:	2201      	movs	r2, #1
 8002016:	4944      	ldr	r1, [pc, #272]	; (8002128 <I3G450D_loop+0x1d4>)
 8002018:	f005 fe9d 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <I3G450D_loop+0x1d8>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	2332      	movs	r3, #50	; 0x32
 8002022:	2201      	movs	r2, #1
 8002024:	4943      	ldr	r1, [pc, #268]	; (8002134 <I3G450D_loop+0x1e0>)
 8002026:	f005 ffd2 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	2102      	movs	r1, #2
 800202e:	483d      	ldr	r0, [pc, #244]	; (8002124 <I3G450D_loop+0x1d0>)
 8002030:	f002 fbc2 	bl	80047b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	2102      	movs	r1, #2
 8002038:	483a      	ldr	r0, [pc, #232]	; (8002124 <I3G450D_loop+0x1d0>)
 800203a:	f002 fbbd 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 800203e:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <I3G450D_loop+0x1d4>)
 8002040:	22aa      	movs	r2, #170	; 0xaa
 8002042:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <I3G450D_loop+0x1d8>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	2332      	movs	r3, #50	; 0x32
 800204a:	2201      	movs	r2, #1
 800204c:	4936      	ldr	r1, [pc, #216]	; (8002128 <I3G450D_loop+0x1d4>)
 800204e:	f005 fe82 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <I3G450D_loop+0x1d8>)
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	2332      	movs	r3, #50	; 0x32
 8002058:	2201      	movs	r2, #1
 800205a:	4937      	ldr	r1, [pc, #220]	; (8002138 <I3G450D_loop+0x1e4>)
 800205c:	f005 ffb7 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	2102      	movs	r1, #2
 8002064:	482f      	ldr	r0, [pc, #188]	; (8002124 <I3G450D_loop+0x1d0>)
 8002066:	f002 fba7 	bl	80047b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2102      	movs	r1, #2
 800206e:	482d      	ldr	r0, [pc, #180]	; (8002124 <I3G450D_loop+0x1d0>)
 8002070:	f002 fba2 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <I3G450D_loop+0x1d4>)
 8002076:	22ab      	movs	r2, #171	; 0xab
 8002078:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <I3G450D_loop+0x1d8>)
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	2332      	movs	r3, #50	; 0x32
 8002080:	2201      	movs	r2, #1
 8002082:	4929      	ldr	r1, [pc, #164]	; (8002128 <I3G450D_loop+0x1d4>)
 8002084:	f005 fe67 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <I3G450D_loop+0x1d8>)
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	2332      	movs	r3, #50	; 0x32
 800208e:	2201      	movs	r2, #1
 8002090:	492a      	ldr	r1, [pc, #168]	; (800213c <I3G450D_loop+0x1e8>)
 8002092:	f005 ff9c 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	2102      	movs	r1, #2
 800209a:	4822      	ldr	r0, [pc, #136]	; (8002124 <I3G450D_loop+0x1d0>)
 800209c:	f002 fb8c 	bl	80047b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2102      	movs	r1, #2
 80020a4:	481f      	ldr	r0, [pc, #124]	; (8002124 <I3G450D_loop+0x1d0>)
 80020a6:	f002 fb87 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <I3G450D_loop+0x1d4>)
 80020ac:	22ac      	movs	r2, #172	; 0xac
 80020ae:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <I3G450D_loop+0x1d8>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	2332      	movs	r3, #50	; 0x32
 80020b6:	2201      	movs	r2, #1
 80020b8:	491b      	ldr	r1, [pc, #108]	; (8002128 <I3G450D_loop+0x1d4>)
 80020ba:	f005 fe4c 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <I3G450D_loop+0x1d8>)
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	2332      	movs	r3, #50	; 0x32
 80020c4:	2201      	movs	r2, #1
 80020c6:	491e      	ldr	r1, [pc, #120]	; (8002140 <I3G450D_loop+0x1ec>)
 80020c8:	f005 ff81 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2102      	movs	r1, #2
 80020d0:	4814      	ldr	r0, [pc, #80]	; (8002124 <I3G450D_loop+0x1d0>)
 80020d2:	f002 fb71 	bl	80047b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2102      	movs	r1, #2
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <I3G450D_loop+0x1d0>)
 80020dc:	f002 fb6c 	bl	80047b8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <I3G450D_loop+0x1d4>)
 80020e2:	22ad      	movs	r2, #173	; 0xad
 80020e4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <I3G450D_loop+0x1d8>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	2332      	movs	r3, #50	; 0x32
 80020ec:	2201      	movs	r2, #1
 80020ee:	490e      	ldr	r1, [pc, #56]	; (8002128 <I3G450D_loop+0x1d4>)
 80020f0:	f005 fe31 	bl	8007d56 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <I3G450D_loop+0x1d8>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	2332      	movs	r3, #50	; 0x32
 80020fa:	2201      	movs	r2, #1
 80020fc:	4911      	ldr	r1, [pc, #68]	; (8002144 <I3G450D_loop+0x1f0>)
 80020fe:	f005 ff66 	bl	8007fce <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2102      	movs	r1, #2
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <I3G450D_loop+0x1d0>)
 8002108:	f002 fb56 	bl	80047b8 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <I3G450D_loop+0x1c8>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8002112:	4b03      	ldr	r3, [pc, #12]	; (8002120 <I3G450D_loop+0x1cc>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
				break;
 8002118:	e2ca      	b.n	80026b0 <I3G450D_loop+0x75c>
 800211a:	bf00      	nop
 800211c:	2000023e 	.word	0x2000023e
 8002120:	200000e4 	.word	0x200000e4
 8002124:	40020800 	.word	0x40020800
 8002128:	20003174 	.word	0x20003174
 800212c:	20003180 	.word	0x20003180
 8002130:	20003179 	.word	0x20003179
 8002134:	2000317a 	.word	0x2000317a
 8002138:	2000317b 	.word	0x2000317b
 800213c:	2000317c 	.word	0x2000317c
 8002140:	2000317d 	.word	0x2000317d
 8002144:	2000317e 	.word	0x2000317e
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <I3G450D_loop+0x478>)
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	4b9e      	ldr	r3, [pc, #632]	; (80023cc <I3G450D_loop+0x478>)
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21b      	sxth	r3, r3
 800215a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 800215e:	4b9b      	ldr	r3, [pc, #620]	; (80023cc <I3G450D_loop+0x478>)
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b21a      	sxth	r2, r3
 8002166:	4b99      	ldr	r3, [pc, #612]	; (80023cc <I3G450D_loop+0x478>)
 8002168:	78db      	ldrb	r3, [r3, #3]
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b21b      	sxth	r3, r3
 8002170:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8002174:	4b95      	ldr	r3, [pc, #596]	; (80023cc <I3G450D_loop+0x478>)
 8002176:	799b      	ldrb	r3, [r3, #6]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21a      	sxth	r2, r3
 800217c:	4b93      	ldr	r3, [pc, #588]	; (80023cc <I3G450D_loop+0x478>)
 800217e:	795b      	ldrb	r3, [r3, #5]
 8002180:	b21b      	sxth	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b21b      	sxth	r3, r3
 8002186:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8002188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <I3G450D_loop+0x47c>)
 8002190:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8002192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002196:	b21a      	sxth	r2, r3
 8002198:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <I3G450D_loop+0x480>)
 800219a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800219c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <I3G450D_loop+0x484>)
 80021a2:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 80021a4:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <I3G450D_loop+0x488>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	f040 80d5 	bne.w	8002358 <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 80021ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b8a      	ldr	r3, [pc, #552]	; (80023e0 <I3G450D_loop+0x48c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80023e4 <I3G450D_loop+0x490>
 80021c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <I3G450D_loop+0x494>)
 80021ce:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 80021d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b84      	ldr	r3, [pc, #528]	; (80023ec <I3G450D_loop+0x498>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80023e4 <I3G450D_loop+0x490>
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <I3G450D_loop+0x49c>)
 80021f2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 80021f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <I3G450D_loop+0x4a0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80023e4 <I3G450D_loop+0x490>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	4b79      	ldr	r3, [pc, #484]	; (80023f8 <I3G450D_loop+0x4a4>)
 8002214:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8002218:	4b78      	ldr	r3, [pc, #480]	; (80023fc <I3G450D_loop+0x4a8>)
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 800221c:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <I3G450D_loop+0x494>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	4b77      	ldr	r3, [pc, #476]	; (8002400 <I3G450D_loop+0x4ac>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002230:	dc0c      	bgt.n	800224c <I3G450D_loop+0x2f8>
 8002232:	4b73      	ldr	r3, [pc, #460]	; (8002400 <I3G450D_loop+0x4ac>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb1 7a67 	vneg.f32	s14, s15
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <I3G450D_loop+0x494>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	dd1b      	ble.n	8002284 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <I3G450D_loop+0x494>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <I3G450D_loop+0x4b0>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800225c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002268:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <I3G450D_loop+0x4b4>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	4b64      	ldr	r3, [pc, #400]	; (8002408 <I3G450D_loop+0x4b4>)
 8002278:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <I3G450D_loop+0x494>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a60      	ldr	r2, [pc, #384]	; (8002404 <I3G450D_loop+0x4b0>)
 8002282:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <I3G450D_loop+0x49c>)
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	4b60      	ldr	r3, [pc, #384]	; (800240c <I3G450D_loop+0x4b8>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	dc0c      	bgt.n	80022b4 <I3G450D_loop+0x360>
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <I3G450D_loop+0x4b8>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eeb1 7a67 	vneg.f32	s14, s15
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <I3G450D_loop+0x49c>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	dd1b      	ble.n	80022ec <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 80022b4:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <I3G450D_loop+0x49c>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <I3G450D_loop+0x4bc>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <I3G450D_loop+0x4c0>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <I3G450D_loop+0x4c0>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <I3G450D_loop+0x49c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <I3G450D_loop+0x4bc>)
 80022ea:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <I3G450D_loop+0x4a4>)
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	4b49      	ldr	r3, [pc, #292]	; (8002418 <I3G450D_loop+0x4c4>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	dc0d      	bgt.n	800231e <I3G450D_loop+0x3ca>
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <I3G450D_loop+0x4c4>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eeb1 7a67 	vneg.f32	s14, s15
 800230c:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <I3G450D_loop+0x4a4>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	f340 81c2 	ble.w	80026a2 <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <I3G450D_loop+0x4a4>)
 8002320:	ed93 7a00 	vldr	s14, [r3]
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <I3G450D_loop+0x4c8>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002336:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800233a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <I3G450D_loop+0x4cc>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <I3G450D_loop+0x4cc>)
 800234a:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <I3G450D_loop+0x4a4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <I3G450D_loop+0x4c8>)
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e1a4      	b.n	80026a2 <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <I3G450D_loop+0x488>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f000 819b 	beq.w	8002698 <I3G450D_loop+0x744>
 8002362:	2b02      	cmp	r3, #2
 8002364:	f300 819a 	bgt.w	800269c <I3G450D_loop+0x748>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <I3G450D_loop+0x41e>
 800236c:	2b01      	cmp	r3, #1
 800236e:	d029      	beq.n	80023c4 <I3G450D_loop+0x470>
						break;
 8002370:	e194      	b.n	800269c <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <I3G450D_loop+0x4d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800237a:	b211      	sxth	r1, r2
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <I3G450D_loop+0x4d4>)
 800237e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <I3G450D_loop+0x4d0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800238a:	b211      	sxth	r1, r2
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <I3G450D_loop+0x4d8>)
 800238e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <I3G450D_loop+0x4d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002398:	b211      	sxth	r1, r2
 800239a:	4a25      	ldr	r2, [pc, #148]	; (8002430 <I3G450D_loop+0x4dc>)
 800239c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <I3G450D_loop+0x4d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <I3G450D_loop+0x4d0>)
 80023a8:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <I3G450D_loop+0x4d0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023b2:	f0c0 8175 	bcc.w	80026a0 <I3G450D_loop+0x74c>
							caliCounter=0;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <I3G450D_loop+0x4d0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <I3G450D_loop+0x488>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
						break;
 80023c2:	e16d      	b.n	80026a0 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c8:	e0a5      	b.n	8002516 <I3G450D_loop+0x5c2>
 80023ca:	bf00      	nop
 80023cc:	20003178 	.word	0x20003178
 80023d0:	20000288 	.word	0x20000288
 80023d4:	2000028a 	.word	0x2000028a
 80023d8:	2000028c 	.word	0x2000028c
 80023dc:	2000023d 	.word	0x2000023d
 80023e0:	2000024c 	.word	0x2000024c
 80023e4:	3d8f5c29 	.word	0x3d8f5c29
 80023e8:	20000240 	.word	0x20000240
 80023ec:	20000250 	.word	0x20000250
 80023f0:	20000244 	.word	0x20000244
 80023f4:	20000254 	.word	0x20000254
 80023f8:	20000248 	.word	0x20000248
 80023fc:	3b449ba6 	.word	0x3b449ba6
 8002400:	20000258 	.word	0x20000258
 8002404:	20000270 	.word	0x20000270
 8002408:	20000264 	.word	0x20000264
 800240c:	2000025c 	.word	0x2000025c
 8002410:	20000274 	.word	0x20000274
 8002414:	20000268 	.word	0x20000268
 8002418:	20000260 	.word	0x20000260
 800241c:	20000278 	.word	0x20000278
 8002420:	2000026c 	.word	0x2000026c
 8002424:	20000290 	.word	0x20000290
 8002428:	20000294 	.word	0x20000294
 800242c:	20001234 	.word	0x20001234
 8002430:	200021d4 	.word	0x200021d4
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8002434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	443b      	add	r3, r7
 800243c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8002440:	461a      	mov	r2, r3
 8002442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	499d      	ldr	r1, [pc, #628]	; (80026bc <I3G450D_loop+0x768>)
 8002448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800244a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800244e:	4413      	add	r3, r2
 8002450:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8002452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	3360      	adds	r3, #96	; 0x60
 8002458:	443b      	add	r3, r7
 800245a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 800245e:	461a      	mov	r2, r3
 8002460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	4996      	ldr	r1, [pc, #600]	; (80026c0 <I3G450D_loop+0x76c>)
 8002466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002468:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800246c:	4413      	add	r3, r2
 800246e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8002470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	3360      	adds	r3, #96	; 0x60
 8002476:	443b      	add	r3, r7
 8002478:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800247c:	461a      	mov	r2, r3
 800247e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	4990      	ldr	r1, [pc, #576]	; (80026c4 <I3G450D_loop+0x770>)
 8002484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002486:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800248a:	4413      	add	r3, r2
 800248c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800248e:	4a8b      	ldr	r2, [pc, #556]	; (80026bc <I3G450D_loop+0x768>)
 8002490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002492:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	3360      	adds	r3, #96	; 0x60
 800249c:	443b      	add	r3, r7
 800249e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 80024a2:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <I3G450D_loop+0x76c>)
 80024a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	3360      	adds	r3, #96	; 0x60
 80024b0:	443b      	add	r3, r7
 80024b2:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 80024b6:	4a83      	ldr	r2, [pc, #524]	; (80026c4 <I3G450D_loop+0x770>)
 80024b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ba:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80024be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	3360      	adds	r3, #96	; 0x60
 80024c4:	443b      	add	r3, r7
 80024c6:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 80024ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024cc:	4a7e      	ldr	r2, [pc, #504]	; (80026c8 <I3G450D_loop+0x774>)
 80024ce:	fb82 1203 	smull	r1, r2, r2, r3
 80024d2:	1092      	asrs	r2, r2, #2
 80024d4:	17db      	asrs	r3, r3, #31
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <I3G450D_loop+0x778>)
 80024da:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 80024dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024de:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <I3G450D_loop+0x774>)
 80024e0:	fb82 1203 	smull	r1, r2, r2, r3
 80024e4:	1092      	asrs	r2, r2, #2
 80024e6:	17db      	asrs	r3, r3, #31
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	4a79      	ldr	r2, [pc, #484]	; (80026d0 <I3G450D_loop+0x77c>)
 80024ec:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 80024ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f0:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <I3G450D_loop+0x774>)
 80024f2:	fb82 1203 	smull	r1, r2, r2, r3
 80024f6:	1092      	asrs	r2, r2, #2
 80024f8:	17db      	asrs	r3, r3, #31
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <I3G450D_loop+0x780>)
 80024fe:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8002500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002502:	3301      	adds	r3, #1
 8002504:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8002506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002508:	2b09      	cmp	r3, #9
 800250a:	d901      	bls.n	8002510 <I3G450D_loop+0x5bc>
									windowPosition=0;
 800250c:	2300      	movs	r3, #0
 800250e:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8002510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002512:	3301      	adds	r3, #1
 8002514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800251c:	d38a      	bcc.n	8002434 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800251e:	2300      	movs	r3, #0
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
 8002522:	e089      	b.n	8002638 <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8002524:	4a65      	ldr	r2, [pc, #404]	; (80026bc <I3G450D_loop+0x768>)
 8002526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002528:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800252c:	461a      	mov	r2, r3
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <I3G450D_loop+0x778>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <I3G450D_loop+0x784>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	dd0a      	ble.n	8002552 <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 800253c:	4a5f      	ldr	r2, [pc, #380]	; (80026bc <I3G450D_loop+0x768>)
 800253e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002540:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002544:	461a      	mov	r2, r3
 8002546:	4b61      	ldr	r3, [pc, #388]	; (80026cc <I3G450D_loop+0x778>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a62      	ldr	r2, [pc, #392]	; (80026d8 <I3G450D_loop+0x784>)
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e015      	b.n	800257e <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8002552:	4a5a      	ldr	r2, [pc, #360]	; (80026bc <I3G450D_loop+0x768>)
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800255a:	461a      	mov	r2, r3
 800255c:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <I3G450D_loop+0x778>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	4b5d      	ldr	r3, [pc, #372]	; (80026d8 <I3G450D_loop+0x784>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	425b      	negs	r3, r3
 8002568:	429a      	cmp	r2, r3
 800256a:	da08      	bge.n	800257e <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800256c:	4b57      	ldr	r3, [pc, #348]	; (80026cc <I3G450D_loop+0x778>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4952      	ldr	r1, [pc, #328]	; (80026bc <I3G450D_loop+0x768>)
 8002572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002574:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <I3G450D_loop+0x784>)
 800257c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <I3G450D_loop+0x76c>)
 8002580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002582:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002586:	461a      	mov	r2, r3
 8002588:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <I3G450D_loop+0x77c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	4b53      	ldr	r3, [pc, #332]	; (80026dc <I3G450D_loop+0x788>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	dd0a      	ble.n	80025ac <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8002596:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <I3G450D_loop+0x76c>)
 8002598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <I3G450D_loop+0x77c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <I3G450D_loop+0x788>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e015      	b.n	80025d8 <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 80025ac:	4a44      	ldr	r2, [pc, #272]	; (80026c0 <I3G450D_loop+0x76c>)
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <I3G450D_loop+0x77c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	1ad2      	subs	r2, r2, r3
 80025bc:	4b47      	ldr	r3, [pc, #284]	; (80026dc <I3G450D_loop+0x788>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	425b      	negs	r3, r3
 80025c2:	429a      	cmp	r2, r3
 80025c4:	da08      	bge.n	80025d8 <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <I3G450D_loop+0x77c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	493d      	ldr	r1, [pc, #244]	; (80026c0 <I3G450D_loop+0x76c>)
 80025cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ce:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	4a41      	ldr	r2, [pc, #260]	; (80026dc <I3G450D_loop+0x788>)
 80025d6:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 80025d8:	4a3a      	ldr	r2, [pc, #232]	; (80026c4 <I3G450D_loop+0x770>)
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <I3G450D_loop+0x780>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1ad2      	subs	r2, r2, r3
 80025e8:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <I3G450D_loop+0x78c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dd0a      	ble.n	8002606 <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <I3G450D_loop+0x770>)
 80025f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <I3G450D_loop+0x780>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <I3G450D_loop+0x78c>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e015      	b.n	8002632 <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <I3G450D_loop+0x770>)
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800260e:	461a      	mov	r2, r3
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <I3G450D_loop+0x780>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <I3G450D_loop+0x78c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	425b      	negs	r3, r3
 800261c:	429a      	cmp	r2, r3
 800261e:	da08      	bge.n	8002632 <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <I3G450D_loop+0x780>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4927      	ldr	r1, [pc, #156]	; (80026c4 <I3G450D_loop+0x770>)
 8002626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002628:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <I3G450D_loop+0x78c>)
 8002630:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	3301      	adds	r3, #1
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800263e:	f4ff af71 	bcc.w	8002524 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <I3G450D_loop+0x784>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80026e4 <I3G450D_loop+0x790>
 8002652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <I3G450D_loop+0x794>)
 8002658:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <I3G450D_loop+0x788>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002668:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80026e4 <I3G450D_loop+0x790>
 800266c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <I3G450D_loop+0x798>)
 8002672:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <I3G450D_loop+0x78c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80026e4 <I3G450D_loop+0x790>
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <I3G450D_loop+0x79c>)
 800268c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <I3G450D_loop+0x7a0>)
 8002692:	2202      	movs	r2, #2
 8002694:	701a      	strb	r2, [r3, #0]
							break;
 8002696:	e004      	b.n	80026a2 <I3G450D_loop+0x74e>
						break;
 8002698:	bf00      	nop
 800269a:	e002      	b.n	80026a2 <I3G450D_loop+0x74e>
						break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <I3G450D_loop+0x74e>
						break;
 80026a0:	bf00      	nop
			currentState=L3GD20_fisrt;
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <I3G450D_loop+0x7a4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <I3G450D_loop+0x7a8>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
			break;
 80026ae:	e000      	b.n	80026b2 <I3G450D_loop+0x75e>
				break;
 80026b0:	bf00      	nop

		}
}
 80026b2:	bf00      	nop
 80026b4:	3760      	adds	r7, #96	; 0x60
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000294 	.word	0x20000294
 80026c0:	20001234 	.word	0x20001234
 80026c4:	200021d4 	.word	0x200021d4
 80026c8:	66666667 	.word	0x66666667
 80026cc:	2000024c 	.word	0x2000024c
 80026d0:	20000250 	.word	0x20000250
 80026d4:	20000254 	.word	0x20000254
 80026d8:	2000027c 	.word	0x2000027c
 80026dc:	20000280 	.word	0x20000280
 80026e0:	20000284 	.word	0x20000284
 80026e4:	3d8f5c29 	.word	0x3d8f5c29
 80026e8:	20000258 	.word	0x20000258
 80026ec:	2000025c 	.word	0x2000025c
 80026f0:	20000260 	.word	0x20000260
 80026f4:	2000023d 	.word	0x2000023d
 80026f8:	2000023e 	.word	0x2000023e
 80026fc:	200000e4 	.word	0x200000e4

08002700 <GyroGetData>:
void GyroGetData(int16_t *x, int16_t*y, int16_t*z)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	*x = Angle_X;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <GyroGetData+0x54>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002716:	ee17 3a90 	vmov	r3, s15
 800271a:	b21a      	sxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	801a      	strh	r2, [r3, #0]
	*y = Angle_Y;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <GyroGetData+0x58>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272a:	ee17 3a90 	vmov	r3, s15
 800272e:	b21a      	sxth	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	801a      	strh	r2, [r3, #0]
	*z = Angle_Z;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <GyroGetData+0x5c>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273e:	ee17 3a90 	vmov	r3, s15
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	801a      	strh	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	20000264 	.word	0x20000264
 8002758:	20000268 	.word	0x20000268
 800275c:	2000026c 	.word	0x2000026c

08002760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002764:	f001 f924 	bl	80039b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002768:	f000 f828 	bl	80027bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800276c:	f000 fa7a 	bl	8002c64 <MX_GPIO_Init>
  MX_CRC_Init();
 8002770:	f000 f88e 	bl	8002890 <MX_CRC_Init>
  MX_FMC_Init();
 8002774:	f000 fa26 	bl	8002bc4 <MX_FMC_Init>
  MX_SPI5_Init();
 8002778:	f000 f8de 	bl	8002938 <MX_SPI5_Init>
  MX_TIM1_Init();
 800277c:	f000 f912 	bl	80029a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002780:	f000 f9d6 	bl	8002b30 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8002784:	f00e fa40 	bl	8010c08 <MX_USB_HOST_Init>
  MX_DMA_Init();
 8002788:	f000 f9fc 	bl	8002b84 <MX_DMA_Init>
  MX_I2C3_Init();
 800278c:	f000 f894 	bl	80028b8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002790:	f000 f958 	bl	8002a44 <MX_TIM2_Init>
  MX_FATFS_Init();
 8002794:	f008 ff5c 	bl	800b650 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <main+0x50>)
 800279a:	f000 fc2f 	bl	8002ffc <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <main+0x50>)
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <main+0x54>)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <main+0x58>)
 80027a4:	f7fe fd8c 	bl	80012c0 <SessionControllerInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 80027a8:	f7fe fdac 	bl	8001304 <SessionControllerProcess>
 80027ac:	e7fc      	b.n	80027a8 <main+0x48>
 80027ae:	bf00      	nop
 80027b0:	20003328 	.word	0x20003328
 80027b4:	200031e0 	.word	0x200031e0
 80027b8:	2000318c 	.word	0x2000318c

080027bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b094      	sub	sp, #80	; 0x50
 80027c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c2:	f107 0320 	add.w	r3, r7, #32
 80027c6:	2230      	movs	r2, #48	; 0x30
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00e fda6 	bl	801131c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <SystemClock_Config+0xcc>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <SystemClock_Config+0xcc>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <SystemClock_Config+0xcc>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <SystemClock_Config+0xd0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <SystemClock_Config+0xd0>)
 800280a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <SystemClock_Config+0xd0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281c:	2301      	movs	r3, #1
 800281e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002826:	2302      	movs	r3, #2
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800282a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002830:	2304      	movs	r3, #4
 8002832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002834:	2348      	movs	r3, #72	; 0x48
 8002836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002838:	2302      	movs	r3, #2
 800283a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800283c:	2303      	movs	r3, #3
 800283e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002840:	f107 0320 	add.w	r3, r7, #32
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fd31 	bl	80072ac <HAL_RCC_OscConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002850:	f000 fbce 	bl	8002ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002854:	230f      	movs	r3, #15
 8002856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002858:	2302      	movs	r3, #2
 800285a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f004 ff93 	bl	800779c <HAL_RCC_ClockConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800287c:	f000 fbb8 	bl	8002ff0 <Error_Handler>
  }
}
 8002880:	bf00      	nop
 8002882:	3750      	adds	r7, #80	; 0x50
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000

08002890 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_CRC_Init+0x20>)
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <MX_CRC_Init+0x24>)
 8002898:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_CRC_Init+0x20>)
 800289c:	f001 fa2f 	bl	8003cfe <HAL_CRC_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80028a6:	f000 fba3 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20003184 	.word	0x20003184
 80028b4:	40023000 	.word	0x40023000

080028b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <MX_I2C3_Init+0x74>)
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <MX_I2C3_Init+0x78>)
 80028c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <MX_I2C3_Init+0x74>)
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <MX_I2C3_Init+0x7c>)
 80028c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <MX_I2C3_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_I2C3_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <MX_I2C3_Init+0x74>)
 80028d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <MX_I2C3_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <MX_I2C3_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_I2C3_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <MX_I2C3_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <MX_I2C3_Init+0x74>)
 80028f6:	f003 fb9b 	bl	8006030 <HAL_I2C_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002900:	f000 fb76 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002904:	2100      	movs	r1, #0
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <MX_I2C3_Init+0x74>)
 8002908:	f004 fc55 	bl	80071b6 <HAL_I2CEx_ConfigAnalogFilter>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002912:	f000 fb6d 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002916:	2100      	movs	r1, #0
 8002918:	4804      	ldr	r0, [pc, #16]	; (800292c <MX_I2C3_Init+0x74>)
 800291a:	f004 fc88 	bl	800722e <HAL_I2CEx_ConfigDigitalFilter>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002924:	f000 fb64 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2000318c 	.word	0x2000318c
 8002930:	40005c00 	.word	0x40005c00
 8002934:	000186a0 	.word	0x000186a0

08002938 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_SPI5_Init+0x64>)
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <MX_SPI5_Init+0x68>)
 8002940:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_SPI5_Init+0x64>)
 8002944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002948:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_SPI5_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <MX_SPI5_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_SPI5_Init+0x64>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_SPI5_Init+0x64>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_SPI5_Init+0x64>)
 8002964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002968:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_SPI5_Init+0x64>)
 800296c:	2218      	movs	r2, #24
 800296e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <MX_SPI5_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_SPI5_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <MX_SPI5_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_SPI5_Init+0x64>)
 8002984:	220a      	movs	r2, #10
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_SPI5_Init+0x64>)
 800298a:	f005 f95b 	bl	8007c44 <HAL_SPI_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002994:	f000 fb2c 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200031e0 	.word	0x200031e0
 80029a0:	40015000 	.word	0x40015000

080029a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <MX_TIM1_Init+0x9c>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <MX_TIM1_Init+0x98>)
 80029ee:	f005 fed1 	bl	8008794 <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029f8:	f000 fafa 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <MX_TIM1_Init+0x98>)
 8002a0a:	f006 f82d 	bl	8008a68 <HAL_TIM_ConfigClockSource>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002a14:	f000 faec 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_TIM1_Init+0x98>)
 8002a26:	f006 fbd1 	bl	80091cc <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a30:	f000 fade 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20003238 	.word	0x20003238
 8002a40:	40010000 	.word	0x40010000

08002a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08e      	sub	sp, #56	; 0x38
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a58:	f107 0320 	add.w	r3, r7, #32
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	615a      	str	r2, [r3, #20]
 8002a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a7e:	2259      	movs	r2, #89	; 0x59
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a9c:	4823      	ldr	r0, [pc, #140]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002a9e:	f005 fe79 	bl	8008794 <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002aa8:	f000 faa2 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481c      	ldr	r0, [pc, #112]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002aba:	f005 ffd5 	bl	8008a68 <HAL_TIM_ConfigClockSource>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ac4:	f000 fa94 	bl	8002ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ac8:	4818      	ldr	r0, [pc, #96]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002aca:	f005 feb2 	bl	8008832 <HAL_TIM_PWM_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ad4:	f000 fa8c 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4811      	ldr	r0, [pc, #68]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002ae8:	f006 fb70 	bl	80091cc <HAL_TIMEx_MasterConfigSynchronization>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002af2:	f000 fa7d 	bl	8002ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af6:	2360      	movs	r3, #96	; 0x60
 8002af8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002b0e:	f005 fee9 	bl	80088e4 <HAL_TIM_PWM_ConfigChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b18:	f000 fa6a 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b1c:	4803      	ldr	r0, [pc, #12]	; (8002b2c <MX_TIM2_Init+0xe8>)
 8002b1e:	f000 fc97 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8002b22:	bf00      	nop
 8002b24:	3738      	adds	r7, #56	; 0x38
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20003280 	.word	0x20003280

08002b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <MX_USART1_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b68:	f006 fbac 	bl	80092c4 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f000 fa3d 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20003328 	.word	0x20003328
 8002b80:	40011000 	.word	0x40011000

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2010      	movs	r0, #16
 8002bac:	f001 f871 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bb0:	2010      	movs	r0, #16
 8002bb2:	f001 f88a 	bl	8003cca <HAL_NVIC_EnableIRQ>

}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
 8002bd8:	615a      	str	r2, [r3, #20]
 8002bda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <MX_FMC_Init+0x98>)
 8002bde:	4a20      	ldr	r2, [pc, #128]	; (8002c60 <MX_FMC_Init+0x9c>)
 8002be0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <MX_FMC_Init+0x98>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <MX_FMC_Init+0x98>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_FMC_Init+0x98>)
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <MX_FMC_Init+0x98>)
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_FMC_Init+0x98>)
 8002bfc:	2240      	movs	r2, #64	; 0x40
 8002bfe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c02:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c06:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c14:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002c24:	2302      	movs	r3, #2
 8002c26:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002c30:	2307      	movs	r3, #7
 8002c32:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002c34:	2303      	movs	r3, #3
 8002c36:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_FMC_Init+0x98>)
 8002c46:	f004 ffc9 	bl	8007bdc <HAL_SDRAM_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002c50:	f000 f9ce 	bl	8002ff0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000336c 	.word	0x2000336c
 8002c60:	a0000140 	.word	0xa0000140

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	4bb2      	ldr	r3, [pc, #712]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4ab1      	ldr	r2, [pc, #708]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4baf      	ldr	r3, [pc, #700]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	4bab      	ldr	r3, [pc, #684]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4aaa      	ldr	r2, [pc, #680]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4ba8      	ldr	r3, [pc, #672]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	4ba4      	ldr	r3, [pc, #656]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4aa3      	ldr	r2, [pc, #652]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4ba1      	ldr	r3, [pc, #644]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	4b9d      	ldr	r3, [pc, #628]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a9c      	ldr	r2, [pc, #624]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b9a      	ldr	r3, [pc, #616]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	4b96      	ldr	r3, [pc, #600]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a95      	ldr	r2, [pc, #596]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a8e      	ldr	r2, [pc, #568]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a87      	ldr	r2, [pc, #540]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a80      	ldr	r2, [pc, #512]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2116      	movs	r1, #22
 8002d5e:	487b      	ldr	r0, [pc, #492]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002d60:	f001 fd2a 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	4879      	ldr	r0, [pc, #484]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002d6a:	f001 fd25 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002d74:	4877      	ldr	r0, [pc, #476]	; (8002f54 <MX_GPIO_Init+0x2f0>)
 8002d76:	f001 fd1f 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002d80:	4875      	ldr	r0, [pc, #468]	; (8002f58 <MX_GPIO_Init+0x2f4>)
 8002d82:	f001 fd19 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d98:	230e      	movs	r3, #14
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	486e      	ldr	r0, [pc, #440]	; (8002f5c <MX_GPIO_Init+0x2f8>)
 8002da4:	f001 fb44 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002da8:	2316      	movs	r3, #22
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4863      	ldr	r0, [pc, #396]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002dc0:	f001 fb36 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	485d      	ldr	r0, [pc, #372]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002dda:	f001 fb29 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002dde:	f248 0306 	movw	r3, #32774	; 0x8006
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002de4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	4856      	ldr	r0, [pc, #344]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002df6:	f001 fb1b 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8002dfa:	2358      	movs	r3, #88	; 0x58
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e0a:	230e      	movs	r3, #14
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	4619      	mov	r1, r3
 8002e14:	484e      	ldr	r0, [pc, #312]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002e16:	f001 fb0b 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4847      	ldr	r0, [pc, #284]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002e32:	f001 fafd 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002e36:	2320      	movs	r3, #32
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4840      	ldr	r0, [pc, #256]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002e4c:	f001 faf0 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002e50:	2303      	movs	r3, #3
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e60:	2309      	movs	r3, #9
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	483d      	ldr	r0, [pc, #244]	; (8002f60 <MX_GPIO_Init+0x2fc>)
 8002e6c:	f001 fae0 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e70:	2304      	movs	r3, #4
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	4619      	mov	r1, r3
 8002e82:	4837      	ldr	r0, [pc, #220]	; (8002f60 <MX_GPIO_Init+0x2fc>)
 8002e84:	f001 fad4 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8002e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e9a:	230e      	movs	r3, #14
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	482e      	ldr	r0, [pc, #184]	; (8002f60 <MX_GPIO_Init+0x2fc>)
 8002ea6:	f001 fac3 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4825      	ldr	r0, [pc, #148]	; (8002f54 <MX_GPIO_Init+0x2f0>)
 8002ec0:	f001 fab6 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002ec4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	481d      	ldr	r0, [pc, #116]	; (8002f54 <MX_GPIO_Init+0x2f0>)
 8002ede:	f001 faa7 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 8002ee2:	23c0      	movs	r3, #192	; 0xc0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef2:	230e      	movs	r3, #14
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	4816      	ldr	r0, [pc, #88]	; (8002f58 <MX_GPIO_Init+0x2f4>)
 8002efe:	f001 fa97 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002f02:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f14:	230e      	movs	r3, #14
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480b      	ldr	r0, [pc, #44]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002f20:	f001 fa86 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002f3c:	f001 fa78 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002f40:	2348      	movs	r3, #72	; 0x48
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	e00d      	b.n	8002f64 <MX_GPIO_Init+0x300>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021800 	.word	0x40021800
 8002f5c:	40021400 	.word	0x40021400
 8002f60:	40020400 	.word	0x40020400
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f6e:	230e      	movs	r3, #14
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	4619      	mov	r1, r3
 8002f78:	481b      	ldr	r0, [pc, #108]	; (8002fe8 <MX_GPIO_Init+0x384>)
 8002f7a:	f001 fa59 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8002f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f90:	2309      	movs	r3, #9
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4814      	ldr	r0, [pc, #80]	; (8002fec <MX_GPIO_Init+0x388>)
 8002f9c:	f001 fa48 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002fa0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480c      	ldr	r0, [pc, #48]	; (8002fec <MX_GPIO_Init+0x388>)
 8002fba:	f001 fa39 	bl	8004430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2006      	movs	r0, #6
 8002fc4:	f000 fe65 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002fc8:	2006      	movs	r0, #6
 8002fca:	f000 fe7e 	bl	8003cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2017      	movs	r0, #23
 8002fd4:	f000 fe5d 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002fd8:	2017      	movs	r0, #23
 8002fda:	f000 fe76 	bl	8003cca <HAL_NVIC_EnableIRQ>

}
 8002fde:	bf00      	nop
 8002fe0:	3738      	adds	r7, #56	; 0x38
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021800 	.word	0x40021800

08002ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff4:	b672      	cpsid	i
}
 8002ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <Error_Handler+0x8>
	...

08002ffc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <RetargetInit+0x28>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <RetargetInit+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6898      	ldr	r0, [r3, #8]
 8003010:	2300      	movs	r3, #0
 8003012:	2202      	movs	r2, #2
 8003014:	2100      	movs	r1, #0
 8003016:	f00e faa7 	bl	8011568 <setvbuf>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200033a0 	.word	0x200033a0
 8003028:	20000118 	.word	0x20000118

0800302c <_isatty>:

int _isatty(int fd) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db04      	blt.n	8003044 <_isatty+0x18>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	dc01      	bgt.n	8003044 <_isatty+0x18>
    return 1;
 8003040:	2301      	movs	r3, #1
 8003042:	e005      	b.n	8003050 <_isatty+0x24>

  errno = EBADF;
 8003044:	f00e f922 	bl	801128c <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	2209      	movs	r2, #9
 800304c:	601a      	str	r2, [r3, #0]
  return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <_write>:

int _write(int fd, char* ptr, int len) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <_write+0x18>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d111      	bne.n	8003094 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <_write+0x54>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	b29a      	uxth	r2, r3
 8003078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	f006 f96e 	bl	800935e <HAL_UART_Transmit>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <_write+0x38>
      return len;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	e008      	b.n	80030a2 <_write+0x4a>
    else
      return EIO;
 8003090:	2305      	movs	r3, #5
 8003092:	e006      	b.n	80030a2 <_write+0x4a>
  }
  errno = EBADF;
 8003094:	f00e f8fa 	bl	801128c <__errno>
 8003098:	4603      	mov	r3, r0
 800309a:	2209      	movs	r2, #9
 800309c:	601a      	str	r2, [r3, #0]
  return -1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200033a0 	.word	0x200033a0

080030b0 <_close>:

int _close(int fd) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db04      	blt.n	80030c8 <_close+0x18>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	dc01      	bgt.n	80030c8 <_close+0x18>
    return 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e006      	b.n	80030d6 <_close+0x26>

  errno = EBADF;
 80030c8:	f00e f8e0 	bl	801128c <__errno>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2209      	movs	r2, #9
 80030d0:	601a      	str	r2, [r3, #0]
  return -1;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80030ea:	f00e f8cf 	bl	801128c <__errno>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2209      	movs	r2, #9
 80030f2:	601a      	str	r2, [r3, #0]
  return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_read>:

int _read(int fd, char* ptr, int len) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d110      	bne.n	8003134 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <_read+0x4c>)
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800311a:	2201      	movs	r2, #1
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	f006 f9b0 	bl	8009482 <HAL_UART_Receive>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <_read+0x30>
      return 1;
 800312c:	2301      	movs	r3, #1
 800312e:	e008      	b.n	8003142 <_read+0x42>
    else
      return EIO;
 8003130:	2305      	movs	r3, #5
 8003132:	e006      	b.n	8003142 <_read+0x42>
  }
  errno = EBADF;
 8003134:	f00e f8aa 	bl	801128c <__errno>
 8003138:	4603      	mov	r3, r0
 800313a:	2209      	movs	r2, #9
 800313c:	601a      	str	r2, [r3, #0]
  return -1;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200033a0 	.word	0x200033a0

08003150 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db08      	blt.n	8003172 <_fstat+0x22>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	dc05      	bgt.n	8003172 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800316c:	605a      	str	r2, [r3, #4]
    return 0;
 800316e:	2300      	movs	r3, #0
 8003170:	e005      	b.n	800317e <_fstat+0x2e>
  }

  errno = EBADF;
 8003172:	f00e f88b 	bl	801128c <__errno>
 8003176:	4603      	mov	r3, r0
 8003178:	2209      	movs	r2, #9
 800317a:	601a      	str	r2, [r3, #0]
  return 0;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_MspInit+0x4c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_MspInit+0x4c>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_MspInit+0x4c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_MspInit+0x4c>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <HAL_MspInit+0x4c>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_MspInit+0x4c>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_CRC_MspInit+0x3c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10d      	bne.n	8003206 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_CRC_MspInit+0x40>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_CRC_MspInit+0x40>)
 80031f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_CRC_MspInit+0x40>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023000 	.word	0x40023000
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <HAL_I2C_MspInit+0xc4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d14b      	bne.n	80032d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327c:	2312      	movs	r3, #18
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003288:	2304      	movs	r3, #4
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	4815      	ldr	r0, [pc, #84]	; (80032e8 <HAL_I2C_MspInit+0xcc>)
 8003294:	f001 f8cc 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800329c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329e:	2312      	movs	r3, #18
 80032a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032aa:	2304      	movs	r3, #4
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4619      	mov	r1, r3
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <HAL_I2C_MspInit+0xd0>)
 80032b6:	f001 f8bb 	bl	8004430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 80032c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032d6:	bf00      	nop
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40005c00 	.word	0x40005c00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020000 	.word	0x40020000

080032f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_SPI_MspInit+0x84>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12c      	bne.n	800336c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_SPI_MspInit+0x88>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <HAL_SPI_MspInit+0x88>)
 800331c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_SPI_MspInit+0x88>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_SPI_MspInit+0x88>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <HAL_SPI_MspInit+0x88>)
 8003338:	f043 0320 	orr.w	r3, r3, #32
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_SPI_MspInit+0x88>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800334a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800335c:	2305      	movs	r3, #5
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <HAL_SPI_MspInit+0x8c>)
 8003368:	f001 f862 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40015000 	.word	0x40015000
 8003378:	40023800 	.word	0x40023800
 800337c:	40021400 	.word	0x40021400

08003380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_TIM_Base_MspInit+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ae:	e042      	b.n	8003436 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d13d      	bne.n	8003436 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a20      	ldr	r2, [pc, #128]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_TIM_Base_MspInit+0xc4>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033d8:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_TIM_Base_MspInit+0xcc>)
 80033da:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033e2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ea:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 80033fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033fe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 8003402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003406:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 8003416:	2200      	movs	r2, #0
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800341a:	480b      	ldr	r0, [pc, #44]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 800341c:	f000 fc8c 	bl	8003d38 <HAL_DMA_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8003426:	f7ff fde3 	bl	8002ff0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a06      	ldr	r2, [pc, #24]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <HAL_TIM_Base_MspInit+0xc8>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40023800 	.word	0x40023800
 8003448:	200032c8 	.word	0x200032c8
 800344c:	40026088 	.word	0x40026088

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d11d      	bne.n	80034ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_TIM_MspPostInit+0x68>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_TIM_MspPostInit+0x68>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_TIM_MspPostInit+0x68>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800348e:	2320      	movs	r3, #32
 8003490:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4619      	mov	r1, r3
 80034a8:	4804      	ldr	r0, [pc, #16]	; (80034bc <HAL_TIM_MspPostInit+0x6c>)
 80034aa:	f000 ffc1 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034ae:	bf00      	nop
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020000 	.word	0x40020000

080034c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <HAL_UART_MspInit+0x94>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d134      	bne.n	800354c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_UART_MspInit+0x98>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_UART_MspInit+0x98>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_UART_MspInit+0x98>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_UART_MspInit+0x98>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_UART_MspInit+0x98>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_UART_MspInit+0x98>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800351a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800351e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
 800352a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800352c:	2307      	movs	r3, #7
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	4809      	ldr	r0, [pc, #36]	; (800355c <HAL_UART_MspInit+0x9c>)
 8003538:	f000 ff7a 	bl	8004430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	2025      	movs	r0, #37	; 0x25
 8003542:	f000 fba6 	bl	8003c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003546:	2025      	movs	r0, #37	; 0x25
 8003548:	f000 fbbf 	bl	8003cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40011000 	.word	0x40011000
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000

08003560 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_FMC_MspInit+0x104>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d16f      	bne.n	800365c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800357c:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_FMC_MspInit+0x104>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_FMC_MspInit+0x108>)
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4a37      	ldr	r2, [pc, #220]	; (8003668 <HAL_FMC_MspInit+0x108>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6393      	str	r3, [r2, #56]	; 0x38
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_FMC_MspInit+0x108>)
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800359e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035a2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035b0:	230c      	movs	r3, #12
 80035b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	482c      	ldr	r0, [pc, #176]	; (800366c <HAL_FMC_MspInit+0x10c>)
 80035ba:	f000 ff39 	bl	8004430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80035be:	2301      	movs	r3, #1
 80035c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035ce:	230c      	movs	r3, #12
 80035d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4826      	ldr	r0, [pc, #152]	; (8003670 <HAL_FMC_MspInit+0x110>)
 80035d8:	f000 ff2a 	bl	8004430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80035dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80035e0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035ee:	230c      	movs	r3, #12
 80035f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	481f      	ldr	r0, [pc, #124]	; (8003674 <HAL_FMC_MspInit+0x114>)
 80035f8:	f000 ff1a 	bl	8004430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80035fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003600:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800360e:	230c      	movs	r3, #12
 8003610:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4818      	ldr	r0, [pc, #96]	; (8003678 <HAL_FMC_MspInit+0x118>)
 8003618:	f000 ff0a 	bl	8004430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800361c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003620:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362a:	2303      	movs	r3, #3
 800362c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800362e:	230c      	movs	r3, #12
 8003630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4811      	ldr	r0, [pc, #68]	; (800367c <HAL_FMC_MspInit+0x11c>)
 8003638:	f000 fefa 	bl	8004430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800363c:	2360      	movs	r3, #96	; 0x60
 800363e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003648:	2303      	movs	r3, #3
 800364a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800364c:	230c      	movs	r3, #12
 800364e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	480a      	ldr	r0, [pc, #40]	; (8003680 <HAL_FMC_MspInit+0x120>)
 8003656:	f000 feeb 	bl	8004430 <HAL_GPIO_Init>
 800365a:	e000      	b.n	800365e <HAL_FMC_MspInit+0xfe>
    return;
 800365c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200033a4 	.word	0x200033a4
 8003668:	40023800 	.word	0x40023800
 800366c:	40021400 	.word	0x40021400
 8003670:	40020800 	.word	0x40020800
 8003674:	40021800 	.word	0x40021800
 8003678:	40021000 	.word	0x40021000
 800367c:	40020c00 	.word	0x40020c00
 8003680:	40020400 	.word	0x40020400

08003684 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800368c:	f7ff ff68 	bl	8003560 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800369c:	e7fe      	b.n	800369c <NMI_Handler+0x4>

0800369e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <HardFault_Handler+0x4>

080036a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <MemManage_Handler+0x4>

080036aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <BusFault_Handler+0x4>

080036b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <UsageFault_Handler+0x4>

080036b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036e4:	f000 f9b6 	bl	8003a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}

080036ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f001 f87b 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <DMA1_Stream5_IRQHandler+0x10>)
 8003702:	f000 fc59 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200032c8 	.word	0x200032c8

08003710 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003714:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003718:	f001 f868 	bl	80047ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <USART1_IRQHandler+0x10>)
 8003726:	f005 ff7f 	bl	8009628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20003328 	.word	0x20003328

08003734 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <OTG_HS_IRQHandler+0x10>)
 800373a:	f001 fad9 	bl	8004cf0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20003c38 	.word	0x20003c38

08003748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <_sbrk+0x5c>)
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <_sbrk+0x60>)
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <_sbrk+0x64>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <_sbrk+0x64>)
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <_sbrk+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <_sbrk+0x64>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d207      	bcs.n	8003788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003778:	f00d fd88 	bl	801128c <__errno>
 800377c:	4603      	mov	r3, r0
 800377e:	220c      	movs	r2, #12
 8003780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003786:	e009      	b.n	800379c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <_sbrk+0x64>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <_sbrk+0x64>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <_sbrk+0x64>)
 8003798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20030000 	.word	0x20030000
 80037a8:	00000400 	.word	0x00000400
 80037ac:	200033a8 	.word	0x200033a8
 80037b0:	20003f50 	.word	0x20003f50

080037b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <SystemInit+0x20>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <SystemInit+0x20>)
 80037c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <GetUserID>:
// change which userID is used in saving activity & usage data.
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}
int GetUserID()
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
	return userID;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <GetUserID+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	200000ec 	.word	0x200000ec

080037f0 <SetUserMainColour>:
void SetUserMainColour(int Red, int Green, int Blue)
{}
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DebugPrint>:
int debugLogging = 0;
int paused = 0;
int logMovementData = 0;
// system and user debugging need to be on to actually print.
void DebugPrint(char * buffer)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <DebugPrint+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <DebugPrint+0x3c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <DebugPrint+0x2e>
	{
		printf(buffer);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f00d fe5e 	bl	80114ec <iprintf>
		printf("\n");
 8003830:	200a      	movs	r0, #10
 8003832:	f00d fe73 	bl	801151c <putchar>
	}
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200033b0 	.word	0x200033b0
 8003844:	200033ac 	.word	0x200033ac

08003848 <SetUserDebugLogging>:
// user debugging
void SetUserDebugLogging ( int set )
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <SetUserDebugLogging+0x1c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6013      	str	r3, [r2, #0]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	200033ac 	.word	0x200033ac

08003868 <SetMovementUSBLogging>:
int GetDebugLogging( )
{
	return debugLogging;
}
stoneError_t SetMovementUSBLogging(int flag){
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	logMovementData = 1;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SetMovementUSBLogging+0x1c>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	200033b4 	.word	0x200033b4

08003888 <GetMovementUSBLogging>:
int GetMovementUSBLogging(){
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	return logMovementData;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <GetMovementUSBLogging+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	200033b4 	.word	0x200033b4

080038a0 <PauseDebugLogging>:
//  system debugging.
void PauseDebugLogging(){paused = 1;}
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <PauseDebugLogging+0x14>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	200033b0 	.word	0x200033b0

080038b8 <ResumeDebugLogging>:
void ResumeDebugLogging(){paused = 0;}
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <ResumeDebugLogging+0x14>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	200033b0 	.word	0x200033b0

080038d0 <colourChangeInit>:
void breathHoldOutput();
void breaingOutOutput();

// internal state table
//static stateTableEntry_t  stateTabel[]={};
int colourChangeInit(){
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0

	return 0;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <colourChangeProcess>:
int colourChangeProcess(){
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <colourChangeOnEnd>:
int colourChangeOnEnd(){
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	return 0;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <colourChangeGetTimeOut>:

int colourChangeGetTimeOut(){
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	return 0;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <meditationBreathingInit>:
// state tabel for the mode.
modeState_t currentModeState;
int timeOut = 8000;


int meditationBreathingInit(){
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	currentModeState = BREATHING_START;
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <meditationBreathingInit+0x18>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
	return 0;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	200033b8 	.word	0x200033b8

0800392c <meditationBreathingProcess>:
int meditationBreathingProcess(){
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0


}
 8003930:	bf00      	nop
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <meditationBreathingOnEnd>:
int meditationBreathingOnEnd(){
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0

}
 8003940:	bf00      	nop
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <meditationGetTimeOut>:
int meditationGetTimeOut()
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

}
 8003950:	bf00      	nop
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800396c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003978:	4c0b      	ldr	r4, [pc, #44]	; (80039a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003986:	f7ff ff15 	bl	80037b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398a:	f00d fc85 	bl	8011298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398e:	f7fe fee7 	bl	8002760 <main>
  bx  lr    
 8003992:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003994:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800399c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80039a0:	08013634 	.word	0x08013634
  ldr r2, =_sbss
 80039a4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80039a8:	20003f4c 	.word	0x20003f4c

080039ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC_IRQHandler>
	...

080039b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_Init+0x40>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_Init+0x40>)
 80039ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_Init+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_Init+0x40>)
 80039c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <HAL_Init+0x40>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d8:	2003      	movs	r0, #3
 80039da:	f000 f94f 	bl	8003c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039de:	200f      	movs	r0, #15
 80039e0:	f000 f808 	bl	80039f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e4:	f7ff fbd0 	bl	8003188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_InitTick+0x54>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_InitTick+0x58>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f967 	bl	8003ce6 <HAL_SYSTICK_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00e      	b.n	8003a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d80a      	bhi.n	8003a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a30:	f000 f92f 	bl	8003c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_InitTick+0x5c>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200000e8 	.word	0x200000e8
 8003a4c:	200000f4 	.word	0x200000f4
 8003a50:	200000f0 	.word	0x200000f0

08003a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x20>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_IncTick+0x24>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_IncTick+0x24>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	200000f4 	.word	0x200000f4
 8003a78:	200033bc 	.word	0x200033bc

08003a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_GetTick+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	200033bc 	.word	0x200033bc

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff ffee 	bl	8003a7c <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d005      	beq.n	8003aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_Delay+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aba:	bf00      	nop
 8003abc:	f7ff ffde 	bl	8003a7c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d8f7      	bhi.n	8003abc <HAL_Delay+0x28>
  {
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200000f4 	.word	0x200000f4

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4907      	ldr	r1, [pc, #28]	; (8003b78 <__NVIC_EnableIRQ+0x38>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c48:	d301      	bcc.n	8003c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00f      	b.n	8003c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <SysTick_Config+0x40>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c56:	210f      	movs	r1, #15
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c5c:	f7ff ff8e 	bl	8003b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <SysTick_Config+0x40>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <SysTick_Config+0x40>)
 8003c68:	2207      	movs	r2, #7
 8003c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff29 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca4:	f7ff ff3e 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ff8e 	bl	8003bd0 <NVIC_EncodePriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff5d 	bl	8003b7c <__NVIC_SetPriority>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff31 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffa2 	bl	8003c38 <SysTick_Config>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e00e      	b.n	8003d2e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	795b      	ldrb	r3, [r3, #5]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fa59 	bl	80031d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff fe9a 	bl	8003a7c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e099      	b.n	8003e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d74:	e00f      	b.n	8003d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d76:	f7ff fe81 	bl	8003a7c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d908      	bls.n	8003d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e078      	b.n	8003e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e8      	bne.n	8003d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <HAL_DMA_Init+0x158>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d107      	bne.n	8003e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d117      	bne.n	8003e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa7b 	bl	8004338 <DMA_CheckFifoParam>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e56:	2301      	movs	r3, #1
 8003e58:	e016      	b.n	8003e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa32 	bl	80042cc <DMA_CalcBaseAndBitshift>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	223f      	movs	r2, #63	; 0x3f
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	f010803f 	.word	0xf010803f

08003e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ea2:	f7ff fdeb 	bl	8003a7c <HAL_GetTick>
 8003ea6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d008      	beq.n	8003ec6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e052      	b.n	8003f6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0216 	bic.w	r2, r2, #22
 8003ed4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <HAL_DMA_Abort+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0208 	bic.w	r2, r2, #8
 8003f04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f16:	e013      	b.n	8003f40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f18:	f7ff fdb0 	bl	8003a7c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d90c      	bls.n	8003f40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e015      	b.n	8003f6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e4      	bne.n	8003f18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	223f      	movs	r2, #63	; 0x3f
 8003f54:	409a      	lsls	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e00c      	b.n	8003fac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2205      	movs	r2, #5
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fc4:	4b8e      	ldr	r3, [pc, #568]	; (8004200 <HAL_DMA_IRQHandler+0x248>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a8e      	ldr	r2, [pc, #568]	; (8004204 <HAL_DMA_IRQHandler+0x24c>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01a      	beq.n	8004024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	2208      	movs	r2, #8
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2201      	movs	r2, #1
 8004048:	409a      	lsls	r2, r3
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2204      	movs	r2, #4
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2204      	movs	r2, #4
 800407e:	409a      	lsls	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	2210      	movs	r2, #16
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d043      	beq.n	8004128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03c      	beq.n	8004128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2210      	movs	r2, #16
 80040b4:	409a      	lsls	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d018      	beq.n	80040fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d024      	beq.n	8004128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
 80040e6:	e01f      	b.n	8004128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
 80040f8:	e016      	b.n	8004128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0208 	bic.w	r2, r2, #8
 8004116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	2220      	movs	r2, #32
 800412e:	409a      	lsls	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 808f 	beq.w	8004258 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8087 	beq.w	8004258 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	2220      	movs	r2, #32
 8004150:	409a      	lsls	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b05      	cmp	r3, #5
 8004160:	d136      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0216 	bic.w	r2, r2, #22
 8004170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <HAL_DMA_IRQHandler+0x1da>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	223f      	movs	r2, #63	; 0x3f
 80041a8:	409a      	lsls	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d07e      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
        }
        return;
 80041ce:	e079      	b.n	80042c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01d      	beq.n	800421a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
 80041fc:	e02c      	b.n	8004258 <HAL_DMA_IRQHandler+0x2a0>
 80041fe:	bf00      	nop
 8004200:	200000e8 	.word	0x200000e8
 8004204:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e01e      	b.n	8004258 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0210 	bic.w	r2, r2, #16
 8004236:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	d032      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2205      	movs	r2, #5
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d307      	bcc.n	80042a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f2      	bne.n	8004284 <HAL_DMA_IRQHandler+0x2cc>
 800429e:	e000      	b.n	80042a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
 80042c2:	e000      	b.n	80042c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042c4:	bf00      	nop
    }
  }
}
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	3b10      	subs	r3, #16
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <DMA_CalcBaseAndBitshift+0x64>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <DMA_CalcBaseAndBitshift+0x68>)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d909      	bls.n	800430e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	659a      	str	r2, [r3, #88]	; 0x58
 800430c:	e007      	b.n	800431e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	aaaaaaab 	.word	0xaaaaaaab
 8004334:	080133ec 	.word	0x080133ec

08004338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11f      	bne.n	8004392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d856      	bhi.n	8004406 <DMA_CheckFifoParam+0xce>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <DMA_CheckFifoParam+0x28>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	08004383 	.word	0x08004383
 8004368:	08004371 	.word	0x08004371
 800436c:	08004407 	.word	0x08004407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d046      	beq.n	800440a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004380:	e043      	b.n	800440a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800438a:	d140      	bne.n	800440e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004390:	e03d      	b.n	800440e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439a:	d121      	bne.n	80043e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d837      	bhi.n	8004412 <DMA_CheckFifoParam+0xda>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <DMA_CheckFifoParam+0x70>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043bf 	.word	0x080043bf
 80043b0:	080043b9 	.word	0x080043b9
 80043b4:	080043d1 	.word	0x080043d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e030      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d025      	beq.n	8004416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ce:	e022      	b.n	8004416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d8:	d11f      	bne.n	800441a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043de:	e01c      	b.n	800441a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d903      	bls.n	80043ee <DMA_CheckFifoParam+0xb6>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d003      	beq.n	80043f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043ec:	e018      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      break;
 80043f2:	e015      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e00b      	b.n	800441e <DMA_CheckFifoParam+0xe6>
      break;
 8004406:	bf00      	nop
 8004408:	e00a      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;
 800440a:	bf00      	nop
 800440c:	e008      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;   
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
      break;
 800441e:	bf00      	nop
    }
  } 
  
  return status; 
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop

08004430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e177      	b.n	800473c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800444c:	2201      	movs	r2, #1
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	429a      	cmp	r2, r3
 8004466:	f040 8166 	bne.w	8004736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d005      	beq.n	8004482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800447e:	2b02      	cmp	r3, #2
 8004480:	d130      	bne.n	80044e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	2203      	movs	r2, #3
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b8:	2201      	movs	r2, #1
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0201 	and.w	r2, r3, #1
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d017      	beq.n	8004520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d123      	bne.n	8004574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	08da      	lsrs	r2, r3, #3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3208      	adds	r2, #8
 8004534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	220f      	movs	r2, #15
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	08da      	lsrs	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3208      	adds	r2, #8
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0203 	and.w	r2, r3, #3
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80c0 	beq.w	8004736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_GPIO_Init+0x324>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_GPIO_Init+0x324>)
 80045c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c4:	6453      	str	r3, [r2, #68]	; 0x44
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <HAL_GPIO_Init+0x324>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045d2:	4a61      	ldr	r2, [pc, #388]	; (8004758 <HAL_GPIO_Init+0x328>)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	220f      	movs	r2, #15
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_GPIO_Init+0x32c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d037      	beq.n	800466e <HAL_GPIO_Init+0x23e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a57      	ldr	r2, [pc, #348]	; (8004760 <HAL_GPIO_Init+0x330>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_GPIO_Init+0x23a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a56      	ldr	r2, [pc, #344]	; (8004764 <HAL_GPIO_Init+0x334>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <HAL_GPIO_Init+0x236>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a55      	ldr	r2, [pc, #340]	; (8004768 <HAL_GPIO_Init+0x338>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d025      	beq.n	8004662 <HAL_GPIO_Init+0x232>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a54      	ldr	r2, [pc, #336]	; (800476c <HAL_GPIO_Init+0x33c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01f      	beq.n	800465e <HAL_GPIO_Init+0x22e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a53      	ldr	r2, [pc, #332]	; (8004770 <HAL_GPIO_Init+0x340>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d019      	beq.n	800465a <HAL_GPIO_Init+0x22a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_GPIO_Init+0x344>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0x226>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a51      	ldr	r2, [pc, #324]	; (8004778 <HAL_GPIO_Init+0x348>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_GPIO_Init+0x222>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a50      	ldr	r2, [pc, #320]	; (800477c <HAL_GPIO_Init+0x34c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <HAL_GPIO_Init+0x21e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a4f      	ldr	r2, [pc, #316]	; (8004780 <HAL_GPIO_Init+0x350>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_GPIO_Init+0x21a>
 8004646:	2309      	movs	r3, #9
 8004648:	e012      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800464a:	230a      	movs	r3, #10
 800464c:	e010      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800464e:	2308      	movs	r3, #8
 8004650:	e00e      	b.n	8004670 <HAL_GPIO_Init+0x240>
 8004652:	2307      	movs	r3, #7
 8004654:	e00c      	b.n	8004670 <HAL_GPIO_Init+0x240>
 8004656:	2306      	movs	r3, #6
 8004658:	e00a      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800465a:	2305      	movs	r3, #5
 800465c:	e008      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800465e:	2304      	movs	r3, #4
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x240>
 8004662:	2303      	movs	r3, #3
 8004664:	e004      	b.n	8004670 <HAL_GPIO_Init+0x240>
 8004666:	2302      	movs	r3, #2
 8004668:	e002      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_GPIO_Init+0x240>
 800466e:	2300      	movs	r3, #0
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	f002 0203 	and.w	r2, r2, #3
 8004676:	0092      	lsls	r2, r2, #2
 8004678:	4093      	lsls	r3, r2
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004680:	4935      	ldr	r1, [pc, #212]	; (8004758 <HAL_GPIO_Init+0x328>)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	3302      	adds	r3, #2
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <HAL_GPIO_Init+0x354>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046b2:	4a34      	ldr	r2, [pc, #208]	; (8004784 <HAL_GPIO_Init+0x354>)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b8:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_GPIO_Init+0x354>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <HAL_GPIO_Init+0x354>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046e2:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_GPIO_Init+0x354>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_GPIO_Init+0x354>)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_GPIO_Init+0x354>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <HAL_GPIO_Init+0x354>)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3301      	adds	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	f67f ae84 	bls.w	800444c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	40013800 	.word	0x40013800
 800475c:	40020000 	.word	0x40020000
 8004760:	40020400 	.word	0x40020400
 8004764:	40020800 	.word	0x40020800
 8004768:	40020c00 	.word	0x40020c00
 800476c:	40021000 	.word	0x40021000
 8004770:	40021400 	.word	0x40021400
 8004774:	40021800 	.word	0x40021800
 8004778:	40021c00 	.word	0x40021c00
 800477c:	40022000 	.word	0x40022000
 8004780:	40022400 	.word	0x40022400
 8004784:	40013c00 	.word	0x40013c00

08004788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e001      	b.n	80047aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc ff16 	bl	800163c <HAL_GPIO_EXTI_Callback>
  }
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b08f      	sub	sp, #60	; 0x3c
 8004820:	af0a      	add	r7, sp, #40	; 0x28
 8004822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e054      	b.n	80048d8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f00c fa3b 	bl	8010cc4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2203      	movs	r2, #3
 8004852:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f005 ff7b 	bl	800a768 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	687e      	ldr	r6, [r7, #4]
 800487a:	466d      	mov	r5, sp
 800487c:	f106 0410 	add.w	r4, r6, #16
 8004880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004888:	e894 0003 	ldmia.w	r4, {r0, r1}
 800488c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004890:	1d33      	adds	r3, r6, #4
 8004892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f005 fef5 	bl	800a684 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f005 ff72 	bl	800a78a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	687e      	ldr	r6, [r7, #4]
 80048ae:	466d      	mov	r5, sp
 80048b0:	f106 0410 	add.w	r4, r6, #16
 80048b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80048c4:	1d33      	adds	r3, r6, #4
 80048c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c8:	6838      	ldr	r0, [r7, #0]
 80048ca:	f006 f8fb 	bl	800aac4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af04      	add	r7, sp, #16
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	70fb      	strb	r3, [r7, #3]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70bb      	strb	r3, [r7, #2]
 80048f6:	4613      	mov	r3, r2
 80048f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_HCD_HC_Init+0x28>
 8004904:	2302      	movs	r3, #2
 8004906:	e076      	b.n	80049f6 <HAL_HCD_HC_Init+0x116>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	333d      	adds	r3, #61	; 0x3d
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3338      	adds	r3, #56	; 0x38
 8004930:	787a      	ldrb	r2, [r7, #1]
 8004932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3340      	adds	r3, #64	; 0x40
 8004942:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004944:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	3339      	adds	r3, #57	; 0x39
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	212c      	movs	r1, #44	; 0x2c
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	4413      	add	r3, r2
 8004964:	333f      	adds	r3, #63	; 0x3f
 8004966:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800496a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	78ba      	ldrb	r2, [r7, #2]
 8004970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004974:	b2d0      	uxtb	r0, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	333a      	adds	r3, #58	; 0x3a
 8004982:	4602      	mov	r2, r0
 8004984:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004986:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800498a:	2b00      	cmp	r3, #0
 800498c:	da09      	bge.n	80049a2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	333b      	adds	r3, #59	; 0x3b
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e008      	b.n	80049b4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	333b      	adds	r3, #59	; 0x3b
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	333c      	adds	r3, #60	; 0x3c
 80049c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80049c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	787c      	ldrb	r4, [r7, #1]
 80049ce:	78ba      	ldrb	r2, [r7, #2]
 80049d0:	78f9      	ldrb	r1, [r7, #3]
 80049d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4623      	mov	r3, r4
 80049e4:	f006 f9f4 	bl	800add0 <USB_HC_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_HCD_HC_Halt+0x1e>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e00f      	b.n	8004a3c <HAL_HCD_HC_Halt+0x3e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f006 fc44 	bl	800b2ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	70fb      	strb	r3, [r7, #3]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70bb      	strb	r3, [r7, #2]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	333b      	adds	r3, #59	; 0x3b
 8004a6c:	78ba      	ldrb	r2, [r7, #2]
 8004a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	333f      	adds	r3, #63	; 0x3f
 8004a7e:	787a      	ldrb	r2, [r7, #1]
 8004a80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004a82:	7c3b      	ldrb	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d112      	bne.n	8004aae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3342      	adds	r3, #66	; 0x42
 8004a96:	2203      	movs	r2, #3
 8004a98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	333d      	adds	r3, #61	; 0x3d
 8004aa8:	7f3a      	ldrb	r2, [r7, #28]
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e008      	b.n	8004ac0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3342      	adds	r3, #66	; 0x42
 8004abc:	2202      	movs	r2, #2
 8004abe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ac0:	787b      	ldrb	r3, [r7, #1]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	f200 80c6 	bhi.w	8004c54 <HAL_HCD_HC_SubmitRequest+0x210>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004c41 	.word	0x08004c41
 8004ad8:	08004b45 	.word	0x08004b45
 8004adc:	08004bc3 	.word	0x08004bc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004ae0:	7c3b      	ldrb	r3, [r7, #16]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	f040 80b8 	bne.w	8004c58 <HAL_HCD_HC_SubmitRequest+0x214>
 8004ae8:	78bb      	ldrb	r3, [r7, #2]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 80b4 	bne.w	8004c58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004af0:	8b3b      	ldrh	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3355      	adds	r3, #85	; 0x55
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3355      	adds	r3, #85	; 0x55
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3342      	adds	r3, #66	; 0x42
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b2e:	e093      	b.n	8004c58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3342      	adds	r3, #66	; 0x42
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	e089      	b.n	8004c58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004b44:	78bb      	ldrb	r3, [r7, #2]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3355      	adds	r3, #85	; 0x55
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3342      	adds	r3, #66	; 0x42
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004b70:	e073      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	212c      	movs	r1, #44	; 0x2c
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3342      	adds	r3, #66	; 0x42
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]
      break;
 8004b84:	e069      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	212c      	movs	r1, #44	; 0x2c
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	3354      	adds	r3, #84	; 0x54
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3342      	adds	r3, #66	; 0x42
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
      break;
 8004bac:	e055      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	3342      	adds	r3, #66	; 0x42
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
      break;
 8004bc0:	e04b      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004bc2:	78bb      	ldrb	r3, [r7, #2]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11d      	bne.n	8004c04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3355      	adds	r3, #85	; 0x55
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3342      	adds	r3, #66	; 0x42
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bee:	e034      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3342      	adds	r3, #66	; 0x42
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]
      break;
 8004c02:	e02a      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	3354      	adds	r3, #84	; 0x54
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	3342      	adds	r3, #66	; 0x42
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e016      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3342      	adds	r3, #66	; 0x42
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e00c      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3342      	adds	r3, #66	; 0x42
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004c58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3344      	adds	r3, #68	; 0x44
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	8b3a      	ldrh	r2, [r7, #24]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	202c      	movs	r0, #44	; 0x2c
 8004c74:	fb00 f303 	mul.w	r3, r0, r3
 8004c78:	440b      	add	r3, r1
 8004c7a:	334c      	adds	r3, #76	; 0x4c
 8004c7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3360      	adds	r3, #96	; 0x60
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3350      	adds	r3, #80	; 0x50
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3339      	adds	r3, #57	; 0x39
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3361      	adds	r3, #97	; 0x61
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	222c      	movs	r2, #44	; 0x2c
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	3338      	adds	r3, #56	; 0x38
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	18d1      	adds	r1, r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f006 f998 	bl	800b014 <USB_HC_StartXfer>
 8004ce4:	4603      	mov	r3, r0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop

08004cf0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f005 fe99 	bl	800aa3e <USB_GetMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	f040 80f6 	bne.w	8004f00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f005 fe7d 	bl	800aa18 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80ec 	beq.w	8004efe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f005 fe74 	bl	800aa18 <USB_ReadInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d3a:	d104      	bne.n	8004d46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f005 fe64 	bl	800aa18 <USB_ReadInterrupts>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d104      	bne.n	8004d66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 fe54 	bl	800aa18 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d7a:	d104      	bne.n	8004d86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f005 fe44 	bl	800aa18 <USB_ReadInterrupts>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d103      	bne.n	8004da2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f005 fe36 	bl	800aa18 <USB_ReadInterrupts>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db6:	d11c      	bne.n	8004df2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004dc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	6938      	ldr	r0, [r7, #16]
 8004dd6:	f005 fd25 	bl	800a824 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f005 fd56 	bl	800a88c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f005 ff2c 	bl	800ac44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f00b ffe3 	bl	8010db8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f005 fe0e 	bl	800aa18 <USB_ReadInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e06:	d102      	bne.n	8004e0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 f89e 	bl	8005f4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f005 fe00 	bl	800aa18 <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d106      	bne.n	8004e30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f00b ffac 	bl	8010d80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f005 fdef 	bl	800aa18 <USB_ReadInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d101      	bne.n	8004e48 <HAL_HCD_IRQHandler+0x158>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_HCD_IRQHandler+0x15a>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0210 	bic.w	r2, r2, #16
 8004e5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 ffa1 	bl	8005da6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0210 	orr.w	r2, r2, #16
 8004e72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f005 fdcd 	bl	800aa18 <USB_ReadInterrupts>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e88:	d13a      	bne.n	8004f00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 fa02 	bl	800b298 <USB_HC_ReadInterrupt>
 8004e94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e025      	b.n	8004ee8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec6:	d106      	bne.n	8004ed6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8ab 	bl	800502a <HCD_HC_IN_IRQHandler>
 8004ed4:	e005      	b.n	8004ee2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fbf9 	bl	80056d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3d4      	bcc.n	8004e9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004efa:	615a      	str	r2, [r3, #20]
 8004efc:	e000      	b.n	8004f00 <HAL_HCD_IRQHandler+0x210>
      return;
 8004efe:	bf00      	nop
    }
  }
}
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_HCD_Start+0x16>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e013      	b.n	8004f44 <HAL_HCD_Start+0x3e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f005 feee 	bl	800ad0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f005 fc06 	bl	800a746 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_HCD_Stop+0x16>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e00d      	b.n	8004f7e <HAL_HCD_Stop+0x32>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f006 fadc 	bl	800b52c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f005 fe90 	bl	800acb8 <USB_ResetPort>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3360      	adds	r3, #96	; 0x60
 8004fbc:	781b      	ldrb	r3, [r3, #0]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3350      	adds	r3, #80	; 0x50
 8004fe4:	681b      	ldr	r3, [r3, #0]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f005 fed4 	bl	800adac <USB_GetCurrentFrame>
 8005004:	4603      	mov	r3, r0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f005 feaf 	bl	800ad7e <USB_GetHostSpeed>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d11a      	bne.n	8005090 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	461a      	mov	r2, r3
 8005068:	2304      	movs	r3, #4
 800506a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	212c      	movs	r1, #44	; 0x2c
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	3361      	adds	r3, #97	; 0x61
 800507a:	2206      	movs	r2, #6
 800507c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f006 f916 	bl	800b2ba <USB_HC_Halt>
 800508e:	e0af      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d11b      	bne.n	80050e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	3361      	adds	r3, #97	; 0x61
 80050ca:	2207      	movs	r2, #7
 80050cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f006 f8ee 	bl	800b2ba <USB_HC_Halt>
 80050de:	e087      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d109      	bne.n	800510a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	461a      	mov	r2, r3
 8005104:	2320      	movs	r3, #32
 8005106:	6093      	str	r3, [r2, #8]
 8005108:	e072      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d11a      	bne.n	8005156 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	461a      	mov	r2, r3
 800512e:	2308      	movs	r3, #8
 8005130:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	212c      	movs	r1, #44	; 0x2c
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	4413      	add	r3, r2
 800513e:	3361      	adds	r3, #97	; 0x61
 8005140:	2205      	movs	r2, #5
 8005142:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f006 f8b3 	bl	800b2ba <USB_HC_Halt>
 8005154:	e04c      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d11b      	bne.n	80051a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	461a      	mov	r2, r3
 800517c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	212c      	movs	r1, #44	; 0x2c
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	4413      	add	r3, r2
 800518e:	3361      	adds	r3, #97	; 0x61
 8005190:	2208      	movs	r2, #8
 8005192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f006 f88b 	bl	800b2ba <USB_HC_Halt>
 80051a4:	e024      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d119      	bne.n	80051f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	461a      	mov	r2, r3
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	212c      	movs	r1, #44	; 0x2c
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	4413      	add	r3, r2
 80051da:	3361      	adds	r3, #97	; 0x61
 80051dc:	2206      	movs	r2, #6
 80051de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f006 f865 	bl	800b2ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005206:	d112      	bne.n	800522e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f006 f851 	bl	800b2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	461a      	mov	r2, r3
 8005226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800522c:	e24e      	b.n	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 80df 	bne.w	8005404 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	3348      	adds	r3, #72	; 0x48
 800525c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	440b      	add	r3, r1
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	202c      	movs	r0, #44	; 0x2c
 8005278:	fb00 f303 	mul.w	r3, r0, r3
 800527c:	440b      	add	r3, r1
 800527e:	3350      	adds	r3, #80	; 0x50
 8005280:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	212c      	movs	r1, #44	; 0x2c
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	3361      	adds	r3, #97	; 0x61
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	212c      	movs	r1, #44	; 0x2c
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	4413      	add	r3, r2
 80052a0:	335c      	adds	r3, #92	; 0x5c
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	461a      	mov	r2, r3
 80052b4:	2301      	movs	r3, #1
 80052b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	333f      	adds	r3, #63	; 0x3f
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	212c      	movs	r1, #44	; 0x2c
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	333f      	adds	r3, #63	; 0x3f
 80052da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d111      	bne.n	8005304 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	4611      	mov	r1, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f005 ffe5 	bl	800b2ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	2310      	movs	r3, #16
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	e03a      	b.n	800537a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	333f      	adds	r3, #63	; 0x3f
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d009      	beq.n	800532c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	333f      	adds	r3, #63	; 0x3f
 8005326:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005328:	2b01      	cmp	r3, #1
 800532a:	d126      	bne.n	800537a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	440a      	add	r2, r1
 8005342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	3360      	adds	r3, #96	; 0x60
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	b2d9      	uxtb	r1, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	202c      	movs	r0, #44	; 0x2c
 8005368:	fb00 f303 	mul.w	r3, r0, r3
 800536c:	4413      	add	r3, r2
 800536e:	3360      	adds	r3, #96	; 0x60
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f00b fd2d 	bl	8010dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d12b      	bne.n	80053da <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	3348      	adds	r3, #72	; 0x48
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	202c      	movs	r0, #44	; 0x2c
 8005398:	fb00 f202 	mul.w	r2, r0, r2
 800539c:	440a      	add	r2, r1
 800539e:	3240      	adds	r2, #64	; 0x40
 80053a0:	8812      	ldrh	r2, [r2, #0]
 80053a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 818e 	beq.w	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3354      	adds	r3, #84	; 0x54
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2d8      	uxtb	r0, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3354      	adds	r3, #84	; 0x54
 80053d4:	4602      	mov	r2, r0
 80053d6:	701a      	strb	r2, [r3, #0]
}
 80053d8:	e178      	b.n	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	3354      	adds	r3, #84	; 0x54
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2d8      	uxtb	r0, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	3354      	adds	r3, #84	; 0x54
 80053fe:	4602      	mov	r2, r0
 8005400:	701a      	strb	r2, [r3, #0]
}
 8005402:	e163      	b.n	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	f040 80f6 	bne.w	8005608 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3361      	adds	r3, #97	; 0x61
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d109      	bne.n	8005444 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	3360      	adds	r3, #96	; 0x60
 800543e:	2201      	movs	r2, #1
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e0c9      	b.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	212c      	movs	r1, #44	; 0x2c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	3361      	adds	r3, #97	; 0x61
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b05      	cmp	r3, #5
 8005456:	d109      	bne.n	800546c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	212c      	movs	r1, #44	; 0x2c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3360      	adds	r3, #96	; 0x60
 8005466:	2205      	movs	r2, #5
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e0b5      	b.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3361      	adds	r3, #97	; 0x61
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d009      	beq.n	8005494 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	212c      	movs	r1, #44	; 0x2c
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	3361      	adds	r3, #97	; 0x61
 800548e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005490:	2b08      	cmp	r3, #8
 8005492:	d150      	bne.n	8005536 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	212c      	movs	r1, #44	; 0x2c
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	335c      	adds	r3, #92	; 0x5c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	202c      	movs	r0, #44	; 0x2c
 80054ac:	fb00 f303 	mul.w	r3, r0, r3
 80054b0:	440b      	add	r3, r1
 80054b2:	335c      	adds	r3, #92	; 0x5c
 80054b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	212c      	movs	r1, #44	; 0x2c
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	4413      	add	r3, r2
 80054c2:	335c      	adds	r3, #92	; 0x5c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d912      	bls.n	80054f0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	212c      	movs	r1, #44	; 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	335c      	adds	r3, #92	; 0x5c
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	212c      	movs	r1, #44	; 0x2c
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	3360      	adds	r3, #96	; 0x60
 80054ea:	2204      	movs	r2, #4
 80054ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ee:	e073      	b.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3360      	adds	r3, #96	; 0x60
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005518:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005520:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005534:	e050      	b.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	212c      	movs	r1, #44	; 0x2c
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	4413      	add	r3, r2
 8005542:	3361      	adds	r3, #97	; 0x61
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d122      	bne.n	8005590 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	212c      	movs	r1, #44	; 0x2c
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	4413      	add	r3, r2
 8005556:	3360      	adds	r3, #96	; 0x60
 8005558:	2202      	movs	r2, #2
 800555a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005572:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800557a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e023      	b.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	212c      	movs	r1, #44	; 0x2c
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	4413      	add	r3, r2
 800559c:	3361      	adds	r3, #97	; 0x61
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	d119      	bne.n	80055d8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	335c      	adds	r3, #92	; 0x5c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	202c      	movs	r0, #44	; 0x2c
 80055bc:	fb00 f303 	mul.w	r3, r0, r3
 80055c0:	440b      	add	r3, r1
 80055c2:	335c      	adds	r3, #92	; 0x5c
 80055c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	212c      	movs	r1, #44	; 0x2c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	3360      	adds	r3, #96	; 0x60
 80055d4:	2204      	movs	r2, #4
 80055d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	461a      	mov	r2, r3
 80055e6:	2302      	movs	r3, #2
 80055e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	202c      	movs	r0, #44	; 0x2c
 80055f4:	fb00 f303 	mul.w	r3, r0, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	3360      	adds	r3, #96	; 0x60
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f00b fbe7 	bl	8010dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005606:	e061      	b.n	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d156      	bne.n	80056cc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	212c      	movs	r1, #44	; 0x2c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	333f      	adds	r3, #63	; 0x3f
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d111      	bne.n	8005656 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	212c      	movs	r1, #44	; 0x2c
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	4413      	add	r3, r2
 800563e:	335c      	adds	r3, #92	; 0x5c
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f005 fe33 	bl	800b2ba <USB_HC_Halt>
 8005654:	e031      	b.n	80056ba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	212c      	movs	r1, #44	; 0x2c
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	333f      	adds	r3, #63	; 0x3f
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	212c      	movs	r1, #44	; 0x2c
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	4413      	add	r3, r2
 8005676:	333f      	adds	r3, #63	; 0x3f
 8005678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800567a:	2b02      	cmp	r3, #2
 800567c:	d11d      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	212c      	movs	r1, #44	; 0x2c
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	4413      	add	r3, r2
 800568a:	335c      	adds	r3, #92	; 0x5c
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d110      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	212c      	movs	r1, #44	; 0x2c
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	3361      	adds	r3, #97	; 0x61
 80056a6:	2203      	movs	r2, #3
 80056a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f005 fe00 	bl	800b2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	461a      	mov	r2, r3
 80056c8:	2310      	movs	r3, #16
 80056ca:	6093      	str	r3, [r2, #8]
}
 80056cc:	bf00      	nop
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d11a      	bne.n	800573a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	2304      	movs	r3, #4
 8005714:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	212c      	movs	r1, #44	; 0x2c
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	3361      	adds	r3, #97	; 0x61
 8005724:	2206      	movs	r2, #6
 8005726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	4611      	mov	r1, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f005 fdc1 	bl	800b2ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005738:	e331      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b20      	cmp	r3, #32
 800574e:	d12e      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	2320      	movs	r3, #32
 8005760:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	333d      	adds	r3, #61	; 0x3d
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	f040 8313 	bne.w	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	212c      	movs	r1, #44	; 0x2c
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	333d      	adds	r3, #61	; 0x3d
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	212c      	movs	r1, #44	; 0x2c
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	3360      	adds	r3, #96	; 0x60
 8005798:	2202      	movs	r2, #2
 800579a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f005 fd87 	bl	800b2ba <USB_HC_Halt>
}
 80057ac:	e2f7      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c4:	d112      	bne.n	80057ec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	461a      	mov	r2, r3
 80057d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f005 fd68 	bl	800b2ba <USB_HC_Halt>
}
 80057ea:	e2d8      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d140      	bne.n	8005884 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	335c      	adds	r3, #92	; 0x5c
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d111      	bne.n	800584e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	212c      	movs	r1, #44	; 0x2c
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	333d      	adds	r3, #61	; 0x3d
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	2301      	movs	r3, #1
 800585e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	212c      	movs	r1, #44	; 0x2c
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	3361      	adds	r3, #97	; 0x61
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f005 fd1c 	bl	800b2ba <USB_HC_Halt>
}
 8005882:	e28c      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d12c      	bne.n	80058f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3361      	adds	r3, #97	; 0x61
 80058a8:	2204      	movs	r2, #4
 80058aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	333d      	adds	r3, #61	; 0x3d
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	335c      	adds	r3, #92	; 0x5c
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f005 fced 	bl	800b2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ec:	461a      	mov	r2, r3
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	6093      	str	r3, [r2, #8]
}
 80058f2:	e254      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d11a      	bne.n	8005940 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	461a      	mov	r2, r3
 8005918:	2308      	movs	r3, #8
 800591a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	212c      	movs	r1, #44	; 0x2c
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3361      	adds	r3, #97	; 0x61
 800592a:	2205      	movs	r2, #5
 800592c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f005 fcbe 	bl	800b2ba <USB_HC_Halt>
}
 800593e:	e22e      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b10      	cmp	r3, #16
 8005954:	d140      	bne.n	80059d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	212c      	movs	r1, #44	; 0x2c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	335c      	adds	r3, #92	; 0x5c
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	212c      	movs	r1, #44	; 0x2c
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3361      	adds	r3, #97	; 0x61
 8005976:	2203      	movs	r2, #3
 8005978:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	333d      	adds	r3, #61	; 0x3d
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d112      	bne.n	80059b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	212c      	movs	r1, #44	; 0x2c
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	4413      	add	r3, r2
 800599a:	333c      	adds	r3, #60	; 0x3c
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d108      	bne.n	80059b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	212c      	movs	r1, #44	; 0x2c
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	333d      	adds	r3, #61	; 0x3d
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f005 fc7b 	bl	800b2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	461a      	mov	r2, r3
 80059d2:	2310      	movs	r3, #16
 80059d4:	6093      	str	r3, [r2, #8]
}
 80059d6:	e1e2      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d164      	bne.n	8005ab8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d111      	bne.n	8005a1a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	212c      	movs	r1, #44	; 0x2c
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	3361      	adds	r3, #97	; 0x61
 8005a04:	2206      	movs	r2, #6
 8005a06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f005 fc51 	bl	800b2ba <USB_HC_Halt>
 8005a18:	e044      	b.n	8005aa4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	212c      	movs	r1, #44	; 0x2c
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	335c      	adds	r3, #92	; 0x5c
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	202c      	movs	r0, #44	; 0x2c
 8005a32:	fb00 f303 	mul.w	r3, r0, r3
 8005a36:	440b      	add	r3, r1
 8005a38:	335c      	adds	r3, #92	; 0x5c
 8005a3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	212c      	movs	r1, #44	; 0x2c
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	335c      	adds	r3, #92	; 0x5c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d920      	bls.n	8005a92 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	212c      	movs	r1, #44	; 0x2c
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	335c      	adds	r3, #92	; 0x5c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3360      	adds	r3, #96	; 0x60
 8005a70:	2204      	movs	r2, #4
 8005a72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	b2d9      	uxtb	r1, r3
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	202c      	movs	r0, #44	; 0x2c
 8005a7e:	fb00 f303 	mul.w	r3, r0, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	3360      	adds	r3, #96	; 0x60
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f00b f9a2 	bl	8010dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a90:	e008      	b.n	8005aa4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	212c      	movs	r1, #44	; 0x2c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3360      	adds	r3, #96	; 0x60
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	6093      	str	r3, [r2, #8]
}
 8005ab6:	e172      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ace:	d11b      	bne.n	8005b08 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	212c      	movs	r1, #44	; 0x2c
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	3361      	adds	r3, #97	; 0x61
 8005ade:	2208      	movs	r2, #8
 8005ae0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f005 fbe4 	bl	800b2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	461a      	mov	r2, r3
 8005b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b04:	6093      	str	r3, [r2, #8]
}
 8005b06:	e14a      	b.n	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	f040 813f 	bne.w	8005d9e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	212c      	movs	r1, #44	; 0x2c
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3361      	adds	r3, #97	; 0x61
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d17d      	bne.n	8005c30 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	212c      	movs	r1, #44	; 0x2c
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	3360      	adds	r3, #96	; 0x60
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	212c      	movs	r1, #44	; 0x2c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	333f      	adds	r3, #63	; 0x3f
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d00a      	beq.n	8005b70 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	212c      	movs	r1, #44	; 0x2c
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	333f      	adds	r3, #63	; 0x3f
 8005b68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	f040 8100 	bne.w	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	212c      	movs	r1, #44	; 0x2c
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	3355      	adds	r3, #85	; 0x55
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f083 0301 	eor.w	r3, r3, #1
 8005b8c:	b2d8      	uxtb	r0, r3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3355      	adds	r3, #85	; 0x55
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 80e3 	bne.w	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	212c      	movs	r1, #44	; 0x2c
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	334c      	adds	r3, #76	; 0x4c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80d8 	beq.w	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	334c      	adds	r3, #76	; 0x4c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	202c      	movs	r0, #44	; 0x2c
 8005bd6:	fb00 f202 	mul.w	r2, r0, r2
 8005bda:	440a      	add	r2, r1
 8005bdc:	3240      	adds	r2, #64	; 0x40
 8005bde:	8812      	ldrh	r2, [r2, #0]
 8005be0:	4413      	add	r3, r2
 8005be2:	3b01      	subs	r3, #1
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	202c      	movs	r0, #44	; 0x2c
 8005bea:	fb00 f202 	mul.w	r2, r0, r2
 8005bee:	440a      	add	r2, r1
 8005bf0:	3240      	adds	r2, #64	; 0x40
 8005bf2:	8812      	ldrh	r2, [r2, #0]
 8005bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b5 	beq.w	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3355      	adds	r3, #85	; 0x55
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f083 0301 	eor.w	r3, r3, #1
 8005c1a:	b2d8      	uxtb	r0, r3
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	212c      	movs	r1, #44	; 0x2c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3355      	adds	r3, #85	; 0x55
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e09f      	b.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	212c      	movs	r1, #44	; 0x2c
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3361      	adds	r3, #97	; 0x61
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d109      	bne.n	8005c58 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	212c      	movs	r1, #44	; 0x2c
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3360      	adds	r3, #96	; 0x60
 8005c52:	2202      	movs	r2, #2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e08b      	b.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	212c      	movs	r1, #44	; 0x2c
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	3361      	adds	r3, #97	; 0x61
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d109      	bne.n	8005c80 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	3360      	adds	r3, #96	; 0x60
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e077      	b.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3361      	adds	r3, #97	; 0x61
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d109      	bne.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	212c      	movs	r1, #44	; 0x2c
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3360      	adds	r3, #96	; 0x60
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	e063      	b.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	212c      	movs	r1, #44	; 0x2c
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3361      	adds	r3, #97	; 0x61
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b06      	cmp	r3, #6
 8005cba:	d009      	beq.n	8005cd0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3361      	adds	r3, #97	; 0x61
 8005cca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d14f      	bne.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	212c      	movs	r1, #44	; 0x2c
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	335c      	adds	r3, #92	; 0x5c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	202c      	movs	r0, #44	; 0x2c
 8005ce8:	fb00 f303 	mul.w	r3, r0, r3
 8005cec:	440b      	add	r3, r1
 8005cee:	335c      	adds	r3, #92	; 0x5c
 8005cf0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	212c      	movs	r1, #44	; 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	335c      	adds	r3, #92	; 0x5c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d912      	bls.n	8005d2c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	212c      	movs	r1, #44	; 0x2c
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	335c      	adds	r3, #92	; 0x5c
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	212c      	movs	r1, #44	; 0x2c
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	3360      	adds	r3, #96	; 0x60
 8005d26:	2204      	movs	r2, #4
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e021      	b.n	8005d70 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	212c      	movs	r1, #44	; 0x2c
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	3360      	adds	r3, #96	; 0x60
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2302      	movs	r3, #2
 8005d80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	b2d9      	uxtb	r1, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	202c      	movs	r0, #44	; 0x2c
 8005d8c:	fb00 f303 	mul.w	r3, r0, r3
 8005d90:	4413      	add	r3, r2
 8005d92:	3360      	adds	r3, #96	; 0x60
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f00b f81b 	bl	8010dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005d9e:	bf00      	nop
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	; 0x28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	0c5b      	lsrs	r3, r3, #17
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d004      	beq.n	8005dec <HCD_RXQLVL_IRQHandler+0x46>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	f000 80a9 	beq.w	8005f3c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005dea:	e0aa      	b.n	8005f42 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80a6 	beq.w	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	212c      	movs	r1, #44	; 0x2c
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	3344      	adds	r3, #68	; 0x44
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 809b 	beq.w	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	212c      	movs	r1, #44	; 0x2c
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	3350      	adds	r3, #80	; 0x50
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	202c      	movs	r0, #44	; 0x2c
 8005e24:	fb00 f303 	mul.w	r3, r0, r3
 8005e28:	440b      	add	r3, r1
 8005e2a:	334c      	adds	r3, #76	; 0x4c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d87a      	bhi.n	8005f28 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	212c      	movs	r1, #44	; 0x2c
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	3344      	adds	r3, #68	; 0x44
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f004 fd8c 	bl	800a968 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	212c      	movs	r1, #44	; 0x2c
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3344      	adds	r3, #68	; 0x44
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	441a      	add	r2, r3
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	202c      	movs	r0, #44	; 0x2c
 8005e6a:	fb00 f303 	mul.w	r3, r0, r3
 8005e6e:	440b      	add	r3, r1
 8005e70:	3344      	adds	r3, #68	; 0x44
 8005e72:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	212c      	movs	r1, #44	; 0x2c
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	3350      	adds	r3, #80	; 0x50
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	441a      	add	r2, r3
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	202c      	movs	r0, #44	; 0x2c
 8005e8e:	fb00 f303 	mul.w	r3, r0, r3
 8005e92:	440b      	add	r3, r1
 8005e94:	3350      	adds	r3, #80	; 0x50
 8005e96:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	0cdb      	lsrs	r3, r3, #19
 8005ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	212c      	movs	r1, #44	; 0x2c
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	3340      	adds	r3, #64	; 0x40
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d13c      	bne.n	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d039      	beq.n	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ee2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	212c      	movs	r1, #44	; 0x2c
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	3354      	adds	r3, #84	; 0x54
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f083 0301 	eor.w	r3, r3, #1
 8005f12:	b2d8      	uxtb	r0, r3
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	212c      	movs	r1, #44	; 0x2c
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	3354      	adds	r3, #84	; 0x54
 8005f22:	4602      	mov	r2, r0
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e00b      	b.n	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	212c      	movs	r1, #44	; 0x2c
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	3360      	adds	r3, #96	; 0x60
 8005f36:	2204      	movs	r2, #4
 8005f38:	701a      	strb	r2, [r3, #0]
      break;
 8005f3a:	e001      	b.n	8005f40 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005f3c:	bf00      	nop
 8005f3e:	e000      	b.n	8005f42 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005f40:	bf00      	nop
  }
}
 8005f42:	bf00      	nop
 8005f44:	3728      	adds	r7, #40	; 0x28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d10b      	bne.n	8005f9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d102      	bne.n	8005f92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f00a ff05 	bl	8010d9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d132      	bne.n	800600a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f043 0308 	orr.w	r3, r3, #8
 8005faa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d126      	bne.n	8006004 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d113      	bne.n	8005fe6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fc8:	d106      	bne.n	8005fd8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f004 fe37 	bl	800ac44 <USB_InitFSLSPClkSel>
 8005fd6:	e011      	b.n	8005ffc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f004 fe30 	bl	800ac44 <USB_InitFSLSPClkSel>
 8005fe4:	e00a      	b.n	8005ffc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d106      	bne.n	8005ffc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ffa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f00a fef7 	bl	8010df0 <HAL_HCD_PortEnabled_Callback>
 8006002:	e002      	b.n	800600a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f00a ff01 	bl	8010e0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d103      	bne.n	800601c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f043 0320 	orr.w	r3, r3, #32
 800601a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6013      	str	r3, [r2, #0]
}
 8006028:	bf00      	nop
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e12b      	b.n	800629a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fd f8e0 	bl	800321c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006094:	f001 fd7a 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 8006098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4a81      	ldr	r2, [pc, #516]	; (80062a4 <HAL_I2C_Init+0x274>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d807      	bhi.n	80060b4 <HAL_I2C_Init+0x84>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a80      	ldr	r2, [pc, #512]	; (80062a8 <HAL_I2C_Init+0x278>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bf94      	ite	ls
 80060ac:	2301      	movls	r3, #1
 80060ae:	2300      	movhi	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e006      	b.n	80060c2 <HAL_I2C_Init+0x92>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a7d      	ldr	r2, [pc, #500]	; (80062ac <HAL_I2C_Init+0x27c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bf94      	ite	ls
 80060bc:	2301      	movls	r3, #1
 80060be:	2300      	movhi	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e0e7      	b.n	800629a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a78      	ldr	r2, [pc, #480]	; (80062b0 <HAL_I2C_Init+0x280>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	0c9b      	lsrs	r3, r3, #18
 80060d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a6a      	ldr	r2, [pc, #424]	; (80062a4 <HAL_I2C_Init+0x274>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d802      	bhi.n	8006104 <HAL_I2C_Init+0xd4>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3301      	adds	r3, #1
 8006102:	e009      	b.n	8006118 <HAL_I2C_Init+0xe8>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	4a69      	ldr	r2, [pc, #420]	; (80062b4 <HAL_I2C_Init+0x284>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	099b      	lsrs	r3, r3, #6
 8006116:	3301      	adds	r3, #1
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	430b      	orrs	r3, r1
 800611e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800612a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	495c      	ldr	r1, [pc, #368]	; (80062a4 <HAL_I2C_Init+0x274>)
 8006134:	428b      	cmp	r3, r1
 8006136:	d819      	bhi.n	800616c <HAL_I2C_Init+0x13c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	1e59      	subs	r1, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	fbb1 f3f3 	udiv	r3, r1, r3
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	f640 73fc 	movw	r3, #4092	; 0xffc
 800614c:	400b      	ands	r3, r1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_I2C_Init+0x138>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1e59      	subs	r1, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006160:	3301      	adds	r3, #1
 8006162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006166:	e051      	b.n	800620c <HAL_I2C_Init+0x1dc>
 8006168:	2304      	movs	r3, #4
 800616a:	e04f      	b.n	800620c <HAL_I2C_Init+0x1dc>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d111      	bne.n	8006198 <HAL_I2C_Init+0x168>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1e58      	subs	r0, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	440b      	add	r3, r1
 8006182:	fbb0 f3f3 	udiv	r3, r0, r3
 8006186:	3301      	adds	r3, #1
 8006188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e012      	b.n	80061be <HAL_I2C_Init+0x18e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	0099      	lsls	r1, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_Init+0x196>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_I2C_Init+0x1dc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10e      	bne.n	80061ec <HAL_I2C_Init+0x1bc>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1e58      	subs	r0, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	440b      	add	r3, r1
 80061dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e0:	3301      	adds	r3, #1
 80061e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	e00f      	b.n	800620c <HAL_I2C_Init+0x1dc>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1e58      	subs	r0, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	0099      	lsls	r1, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006202:	3301      	adds	r3, #1
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	6809      	ldr	r1, [r1, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800623a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6911      	ldr	r1, [r2, #16]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	000186a0 	.word	0x000186a0
 80062a8:	001e847f 	.word	0x001e847f
 80062ac:	003d08ff 	.word	0x003d08ff
 80062b0:	431bde83 	.word	0x431bde83
 80062b4:	10624dd3 	.word	0x10624dd3

080062b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	461a      	mov	r2, r3
 80062c4:	460b      	mov	r3, r1
 80062c6:	817b      	strh	r3, [r7, #10]
 80062c8:	4613      	mov	r3, r2
 80062ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062cc:	f7fd fbd6 	bl	8003a7c <HAL_GetTick>
 80062d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b20      	cmp	r3, #32
 80062dc:	f040 80e0 	bne.w	80064a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	2319      	movs	r3, #25
 80062e6:	2201      	movs	r2, #1
 80062e8:	4970      	ldr	r1, [pc, #448]	; (80064ac <HAL_I2C_Master_Transmit+0x1f4>)
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fd86 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0d3      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_I2C_Master_Transmit+0x50>
 8006304:	2302      	movs	r3, #2
 8006306:	e0cc      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d007      	beq.n	800632e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0201 	orr.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2221      	movs	r2, #33	; 0x21
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2210      	movs	r2, #16
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	893a      	ldrh	r2, [r7, #8]
 800635e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a50      	ldr	r2, [pc, #320]	; (80064b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006370:	8979      	ldrh	r1, [r7, #10]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fbf0 	bl	8006b5c <I2C_MasterRequestWrite>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e08d      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800639c:	e066      	b.n	800646c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	6a39      	ldr	r1, [r7, #32]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fe00 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d107      	bne.n	80063c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06b      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b04      	cmp	r3, #4
 8006406:	d11b      	bne.n	8006440 <HAL_I2C_Master_Transmit+0x188>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	6a39      	ldr	r1, [r7, #32]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fdf0 	bl	800702a <I2C_WaitOnBTFFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	2b04      	cmp	r3, #4
 8006456:	d107      	bne.n	8006468 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006466:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e01a      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d194      	bne.n	800639e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	00100002 	.word	0x00100002
 80064b0:	ffff0000 	.word	0xffff0000

080064b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08c      	sub	sp, #48	; 0x30
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	461a      	mov	r2, r3
 80064c0:	460b      	mov	r3, r1
 80064c2:	817b      	strh	r3, [r7, #10]
 80064c4:	4613      	mov	r3, r2
 80064c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064c8:	f7fd fad8 	bl	8003a7c <HAL_GetTick>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	f040 820b 	bne.w	80068f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	2319      	movs	r3, #25
 80064e2:	2201      	movs	r2, #1
 80064e4:	497c      	ldr	r1, [pc, #496]	; (80066d8 <HAL_I2C_Master_Receive+0x224>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fc88 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	e1fe      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_I2C_Master_Receive+0x50>
 8006500:	2302      	movs	r3, #2
 8006502:	e1f7      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d007      	beq.n	800652a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2222      	movs	r2, #34	; 0x22
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2210      	movs	r2, #16
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	893a      	ldrh	r2, [r7, #8]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <HAL_I2C_Master_Receive+0x228>)
 800656a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800656c:	8979      	ldrh	r1, [r7, #10]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fb74 	bl	8006c60 <I2C_MasterRequestRead>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e1b8      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d113      	bne.n	80065b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658a:	2300      	movs	r3, #0
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e18c      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d11b      	bne.n	80065f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e16c      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d11b      	bne.n	8006632 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661a:	2300      	movs	r3, #0
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	e14c      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006658:	e138      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665e:	2b03      	cmp	r3, #3
 8006660:	f200 80f1 	bhi.w	8006846 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b01      	cmp	r3, #1
 800666a:	d123      	bne.n	80066b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fd1b 	bl	80070ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e139      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066b2:	e10b      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d14e      	bne.n	800675a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <HAL_I2C_Master_Receive+0x22c>)
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fb98 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e10e      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
 80066d6:	bf00      	nop
 80066d8:	00100002 	.word	0x00100002
 80066dc:	ffff0000 	.word	0xffff0000
 80066e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006758:	e0b8      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2200      	movs	r2, #0
 8006762:	4966      	ldr	r1, [pc, #408]	; (80068fc <HAL_I2C_Master_Receive+0x448>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fb49 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0bf      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	2200      	movs	r2, #0
 80067be:	494f      	ldr	r1, [pc, #316]	; (80068fc <HAL_I2C_Master_Receive+0x448>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fb1b 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e091      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006844:	e042      	b.n	80068cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 fc2e 	bl	80070ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e04c      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d118      	bne.n	80068cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f47f aec2 	bne.w	800665a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3728      	adds	r7, #40	; 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	00010004 	.word	0x00010004

08006900 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	460b      	mov	r3, r1
 800690e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006910:	f7fd f8b4 	bl	8003a7c <HAL_GetTick>
 8006914:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b20      	cmp	r3, #32
 8006924:	f040 8111 	bne.w	8006b4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2319      	movs	r3, #25
 800692e:	2201      	movs	r2, #1
 8006930:	4988      	ldr	r1, [pc, #544]	; (8006b54 <HAL_I2C_IsDeviceReady+0x254>)
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fa62 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
 8006940:	e104      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_I2C_IsDeviceReady+0x50>
 800694c:	2302      	movs	r3, #2
 800694e:	e0fd      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d007      	beq.n	8006976 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2224      	movs	r2, #36	; 0x24
 800698a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a70      	ldr	r2, [pc, #448]	; (8006b58 <HAL_I2C_IsDeviceReady+0x258>)
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fa20 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d0:	d103      	bne.n	80069da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0b6      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80069ee:	f7fd f845 	bl	8003a7c <HAL_GetTick>
 80069f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006a22:	e025      	b.n	8006a70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a24:	f7fd f82a 	bl	8003a7c <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <HAL_I2C_IsDeviceReady+0x13a>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22a0      	movs	r2, #160	; 0xa0
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2ba0      	cmp	r3, #160	; 0xa0
 8006a7a:	d005      	beq.n	8006a88 <HAL_I2C_IsDeviceReady+0x188>
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <HAL_I2C_IsDeviceReady+0x188>
 8006a82:	7dbb      	ldrb	r3, [r7, #22]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0cd      	beq.n	8006a24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d129      	bne.n	8006af2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2319      	movs	r3, #25
 8006aca:	2201      	movs	r2, #1
 8006acc:	4921      	ldr	r1, [pc, #132]	; (8006b54 <HAL_I2C_IsDeviceReady+0x254>)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f994 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e036      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e02c      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2319      	movs	r3, #25
 8006b12:	2201      	movs	r2, #1
 8006b14:	490f      	ldr	r1, [pc, #60]	; (8006b54 <HAL_I2C_IsDeviceReady+0x254>)
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f970 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e012      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	f4ff af32 	bcc.w	800699a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	00100002 	.word	0x00100002
 8006b58:	ffff0000 	.word	0xffff0000

08006b5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d006      	beq.n	8006b86 <I2C_MasterRequestWrite+0x2a>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d003      	beq.n	8006b86 <I2C_MasterRequestWrite+0x2a>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b84:	d108      	bne.n	8006b98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e00b      	b.n	8006bb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	2b12      	cmp	r3, #18
 8006b9e:	d107      	bne.n	8006bb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f91d 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00d      	beq.n	8006be4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd6:	d103      	bne.n	8006be0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e035      	b.n	8006c50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bec:	d108      	bne.n	8006c00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bee:	897b      	ldrh	r3, [r7, #10]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	e01b      	b.n	8006c38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c00:	897b      	ldrh	r3, [r7, #10]
 8006c02:	11db      	asrs	r3, r3, #7
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f003 0306 	and.w	r3, r3, #6
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f063 030f 	orn	r3, r3, #15
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	490e      	ldr	r1, [pc, #56]	; (8006c58 <I2C_MasterRequestWrite+0xfc>)
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f943 	bl	8006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e010      	b.n	8006c50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c2e:	897b      	ldrh	r3, [r7, #10]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4907      	ldr	r1, [pc, #28]	; (8006c5c <I2C_MasterRequestWrite+0x100>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f933 	bl	8006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	00010008 	.word	0x00010008
 8006c5c:	00010002 	.word	0x00010002

08006c60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d006      	beq.n	8006c9a <I2C_MasterRequestRead+0x3a>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d003      	beq.n	8006c9a <I2C_MasterRequestRead+0x3a>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c98:	d108      	bne.n	8006cac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e00b      	b.n	8006cc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b11      	cmp	r3, #17
 8006cb2:	d107      	bne.n	8006cc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f893 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cea:	d103      	bne.n	8006cf4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e079      	b.n	8006dec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d00:	d108      	bne.n	8006d14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d02:	897b      	ldrh	r3, [r7, #10]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	611a      	str	r2, [r3, #16]
 8006d12:	e05f      	b.n	8006dd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d14:	897b      	ldrh	r3, [r7, #10]
 8006d16:	11db      	asrs	r3, r3, #7
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0306 	and.w	r3, r3, #6
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f063 030f 	orn	r3, r3, #15
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4930      	ldr	r1, [pc, #192]	; (8006df4 <I2C_MasterRequestRead+0x194>)
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f8b9 	bl	8006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e054      	b.n	8006dec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4929      	ldr	r1, [pc, #164]	; (8006df8 <I2C_MasterRequestRead+0x198>)
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f8a9 	bl	8006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e044      	b.n	8006dec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f831 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d103      	bne.n	8006db8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e017      	b.n	8006dec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006dbc:	897b      	ldrh	r3, [r7, #10]
 8006dbe:	11db      	asrs	r3, r3, #7
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0306 	and.w	r3, r3, #6
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f063 030e 	orn	r3, r3, #14
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4907      	ldr	r1, [pc, #28]	; (8006df8 <I2C_MasterRequestRead+0x198>)
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f865 	bl	8006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	00010008 	.word	0x00010008
 8006df8:	00010002 	.word	0x00010002

08006dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e0c:	e025      	b.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e14:	d021      	beq.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fc fe31 	bl	8003a7c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d116      	bne.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f043 0220 	orr.w	r2, r3, #32
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e023      	b.n	8006ea2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d10d      	bne.n	8006e80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	bf0c      	ite	eq
 8006e76:	2301      	moveq	r3, #1
 8006e78:	2300      	movne	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	e00c      	b.n	8006e9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	43da      	mvns	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d0b6      	beq.n	8006e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eb8:	e051      	b.n	8006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d123      	bne.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ee2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f043 0204 	orr.w	r2, r3, #4
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e046      	b.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f18:	d021      	beq.n	8006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fc fdaf 	bl	8003a7c <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d116      	bne.n	8006f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e020      	b.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d10c      	bne.n	8006f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	43da      	mvns	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf14      	ite	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2300      	moveq	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	e00b      	b.n	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	43da      	mvns	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d18d      	bne.n	8006eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fb4:	e02d      	b.n	8007012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f8ce 	bl	8007158 <I2C_IsAcknowledgeFailed>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e02d      	b.n	8007022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fcc:	d021      	beq.n	8007012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fce:	f7fc fd55 	bl	8003a7c <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d116      	bne.n	8007012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0220 	orr.w	r2, r3, #32
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e007      	b.n	8007022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d1ca      	bne.n	8006fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007036:	e02d      	b.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f88d 	bl	8007158 <I2C_IsAcknowledgeFailed>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e02d      	b.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704e:	d021      	beq.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007050:	f7fc fd14 	bl	8003a7c <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	429a      	cmp	r2, r3
 800705e:	d302      	bcc.n	8007066 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	f043 0220 	orr.w	r2, r3, #32
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e007      	b.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d1ca      	bne.n	8007038 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070b8:	e042      	b.n	8007140 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d119      	bne.n	80070fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0210 	mvn.w	r2, #16
 80070d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e029      	b.n	8007150 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fc:	f7fc fcbe 	bl	8003a7c <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e007      	b.n	8007150 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b40      	cmp	r3, #64	; 0x40
 800714c:	d1b5      	bne.n	80070ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800716e:	d11b      	bne.n	80071a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007178:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	f043 0204 	orr.w	r2, r3, #4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d129      	bne.n	8007220 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	; 0x24
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0210 	bic.w	r2, r2, #16
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b20      	cmp	r3, #32
 8007246:	d12a      	bne.n	800729e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2224      	movs	r2, #36	; 0x24
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	89fb      	ldrh	r3, [r7, #14]
 8007276:	4313      	orrs	r3, r2
 8007278:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	89fa      	ldrh	r2, [r7, #14]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e267      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d075      	beq.n	80073b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ca:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d00c      	beq.n	80072f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072d6:	4b85      	ldr	r3, [pc, #532]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d112      	bne.n	8007308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e2:	4b82      	ldr	r3, [pc, #520]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ee:	d10b      	bne.n	8007308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f0:	4b7e      	ldr	r3, [pc, #504]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05b      	beq.n	80073b4 <HAL_RCC_OscConfig+0x108>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d157      	bne.n	80073b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e242      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d106      	bne.n	8007320 <HAL_RCC_OscConfig+0x74>
 8007312:	4b76      	ldr	r3, [pc, #472]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a75      	ldr	r2, [pc, #468]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e01d      	b.n	800735c <HAL_RCC_OscConfig+0xb0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x98>
 800732a:	4b70      	ldr	r3, [pc, #448]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6f      	ldr	r2, [pc, #444]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b6d      	ldr	r3, [pc, #436]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6c      	ldr	r2, [pc, #432]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e00b      	b.n	800735c <HAL_RCC_OscConfig+0xb0>
 8007344:	4b69      	ldr	r3, [pc, #420]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a68      	ldr	r2, [pc, #416]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a65      	ldr	r2, [pc, #404]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007364:	f7fc fb8a 	bl	8003a7c <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800736c:	f7fc fb86 	bl	8003a7c <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e207      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737e:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0xc0>
 800738a:	e014      	b.n	80073b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738c:	f7fc fb76 	bl	8003a7c <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007394:	f7fc fb72 	bl	8003a7c <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e1f3      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a6:	4b51      	ldr	r3, [pc, #324]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0xe8>
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d063      	beq.n	800748a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073c2:	4b4a      	ldr	r3, [pc, #296]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ce:	4b47      	ldr	r3, [pc, #284]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d11c      	bne.n	8007414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073da:	4b44      	ldr	r3, [pc, #272]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d116      	bne.n	8007414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <HAL_RCC_OscConfig+0x152>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d001      	beq.n	80073fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e1c7      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fe:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4937      	ldr	r1, [pc, #220]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007412:	e03a      	b.n	800748a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d020      	beq.n	800745e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800741c:	4b34      	ldr	r3, [pc, #208]	; (80074f0 <HAL_RCC_OscConfig+0x244>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007422:	f7fc fb2b 	bl	8003a7c <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800742a:	f7fc fb27 	bl	8003a7c <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e1a8      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743c:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007448:	4b28      	ldr	r3, [pc, #160]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	4925      	ldr	r1, [pc, #148]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007458:	4313      	orrs	r3, r2
 800745a:	600b      	str	r3, [r1, #0]
 800745c:	e015      	b.n	800748a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800745e:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <HAL_RCC_OscConfig+0x244>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fc fb0a 	bl	8003a7c <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800746c:	f7fc fb06 	bl	8003a7c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e187      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747e:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d036      	beq.n	8007504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <HAL_RCC_OscConfig+0x248>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fc faea 	bl	8003a7c <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ac:	f7fc fae6 	bl	8003a7c <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e167      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80074c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x200>
 80074ca:	e01b      	b.n	8007504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <HAL_RCC_OscConfig+0x248>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d2:	f7fc fad3 	bl	8003a7c <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074d8:	e00e      	b.n	80074f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074da:	f7fc facf 	bl	8003a7c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d907      	bls.n	80074f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e150      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470000 	.word	0x42470000
 80074f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f8:	4b88      	ldr	r3, [pc, #544]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80074fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ea      	bne.n	80074da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8097 	beq.w	8007640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007516:	4b81      	ldr	r3, [pc, #516]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10f      	bne.n	8007542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	4b7d      	ldr	r3, [pc, #500]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4a7c      	ldr	r2, [pc, #496]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800752c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007530:	6413      	str	r3, [r2, #64]	; 0x40
 8007532:	4b7a      	ldr	r3, [pc, #488]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753e:	2301      	movs	r3, #1
 8007540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007542:	4b77      	ldr	r3, [pc, #476]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d118      	bne.n	8007580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800754e:	4b74      	ldr	r3, [pc, #464]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a73      	ldr	r2, [pc, #460]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800755a:	f7fc fa8f 	bl	8003a7c <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007562:	f7fc fa8b 	bl	8003a7c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e10c      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007574:	4b6a      	ldr	r3, [pc, #424]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <HAL_RCC_OscConfig+0x2ea>
 8007588:	4b64      	ldr	r3, [pc, #400]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	4a63      	ldr	r2, [pc, #396]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	; 0x70
 8007594:	e01c      	b.n	80075d0 <HAL_RCC_OscConfig+0x324>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b05      	cmp	r3, #5
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x30c>
 800759e:	4b5f      	ldr	r3, [pc, #380]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a5e      	ldr	r2, [pc, #376]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075a4:	f043 0304 	orr.w	r3, r3, #4
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
 80075aa:	4b5c      	ldr	r3, [pc, #368]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a5b      	ldr	r2, [pc, #364]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	e00b      	b.n	80075d0 <HAL_RCC_OscConfig+0x324>
 80075b8:	4b58      	ldr	r3, [pc, #352]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	4a57      	ldr	r2, [pc, #348]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	6713      	str	r3, [r2, #112]	; 0x70
 80075c4:	4b55      	ldr	r3, [pc, #340]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a54      	ldr	r2, [pc, #336]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ca:	f023 0304 	bic.w	r3, r3, #4
 80075ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fc fa50 	bl	8003a7c <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075de:	e00a      	b.n	80075f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e0:	f7fc fa4c 	bl	8003a7c <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e0cb      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f6:	4b49      	ldr	r3, [pc, #292]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ee      	beq.n	80075e0 <HAL_RCC_OscConfig+0x334>
 8007602:	e014      	b.n	800762e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007604:	f7fc fa3a 	bl	8003a7c <HAL_GetTick>
 8007608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760a:	e00a      	b.n	8007622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800760c:	f7fc fa36 	bl	8003a7c <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	; 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e0b5      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1ee      	bne.n	800760c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d105      	bne.n	8007640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007634:	4b39      	ldr	r3, [pc, #228]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	4a38      	ldr	r2, [pc, #224]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800763a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800763e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80a1 	beq.w	800778c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800764a:	4b34      	ldr	r3, [pc, #208]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b08      	cmp	r3, #8
 8007654:	d05c      	beq.n	8007710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d141      	bne.n	80076e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765e:	4b31      	ldr	r3, [pc, #196]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007664:	f7fc fa0a 	bl	8003a7c <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800766c:	f7fc fa06 	bl	8003a7c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e087      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69da      	ldr	r2, [r3, #28]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	019b      	lsls	r3, r3, #6
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	3b01      	subs	r3, #1
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	061b      	lsls	r3, r3, #24
 80076ae:	491b      	ldr	r1, [pc, #108]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b4:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ba:	f7fc f9df 	bl	8003a7c <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c2:	f7fc f9db 	bl	8003a7c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e05c      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0x416>
 80076e0:	e054      	b.n	800778c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fc f9c8 	bl	8003a7c <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fc f9c4 	bl	8003a7c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e045      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0x444>
 800770e:	e03d      	b.n	800778c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e038      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
 800771c:	40023800 	.word	0x40023800
 8007720:	40007000 	.word	0x40007000
 8007724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007728:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <HAL_RCC_OscConfig+0x4ec>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d028      	beq.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d121      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774e:	429a      	cmp	r2, r3
 8007750:	d11a      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007758:	4013      	ands	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800775e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007760:	4293      	cmp	r3, r2
 8007762:	d111      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	3b01      	subs	r3, #1
 8007772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d107      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800

0800779c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0cc      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077b0:	4b68      	ldr	r3, [pc, #416]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d90c      	bls.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077be:	4b65      	ldr	r3, [pc, #404]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c6:	4b63      	ldr	r3, [pc, #396]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d001      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0b8      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d020      	beq.n	8007826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077f0:	4b59      	ldr	r3, [pc, #356]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4a58      	ldr	r2, [pc, #352]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007808:	4b53      	ldr	r3, [pc, #332]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a52      	ldr	r2, [pc, #328]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007814:	4b50      	ldr	r3, [pc, #320]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	494d      	ldr	r1, [pc, #308]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d044      	beq.n	80078bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d107      	bne.n	800784a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d119      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e07f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d003      	beq.n	800785a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007856:	2b03      	cmp	r3, #3
 8007858:	d107      	bne.n	800786a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e06f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e067      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800787a:	4b37      	ldr	r3, [pc, #220]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0203 	bic.w	r2, r3, #3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4934      	ldr	r1, [pc, #208]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800788c:	f7fc f8f6 	bl	8003a7c <HAL_GetTick>
 8007890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	e00a      	b.n	80078aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007894:	f7fc f8f2 	bl	8003a7c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e04f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 020c 	and.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1eb      	bne.n	8007894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078bc:	4b25      	ldr	r3, [pc, #148]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d20c      	bcs.n	80078e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d001      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e032      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4916      	ldr	r1, [pc, #88]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	490e      	ldr	r1, [pc, #56]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007922:	f000 f821 	bl	8007968 <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	490a      	ldr	r1, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x1c0>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	4a09      	ldr	r2, [pc, #36]	; (8007960 <HAL_RCC_ClockConfig+0x1c4>)
 800793c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f7fc f856 	bl	80039f4 <HAL_InitTick>

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023c00 	.word	0x40023c00
 8007958:	40023800 	.word	0x40023800
 800795c:	080133d4 	.word	0x080133d4
 8007960:	200000e8 	.word	0x200000e8
 8007964:	200000f0 	.word	0x200000f0

08007968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800796c:	b094      	sub	sp, #80	; 0x50
 800796e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	647b      	str	r3, [r7, #68]	; 0x44
 8007974:	2300      	movs	r3, #0
 8007976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007978:	2300      	movs	r3, #0
 800797a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007980:	4b79      	ldr	r3, [pc, #484]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 030c 	and.w	r3, r3, #12
 8007988:	2b08      	cmp	r3, #8
 800798a:	d00d      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0x40>
 800798c:	2b08      	cmp	r3, #8
 800798e:	f200 80e1 	bhi.w	8007b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_RCC_GetSysClockFreq+0x34>
 8007996:	2b04      	cmp	r3, #4
 8007998:	d003      	beq.n	80079a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800799a:	e0db      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800799c:	4b73      	ldr	r3, [pc, #460]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800799e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079a0:	e0db      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079a2:	4b73      	ldr	r3, [pc, #460]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80079a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079a6:	e0d8      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079a8:	4b6f      	ldr	r3, [pc, #444]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079b2:	4b6d      	ldr	r3, [pc, #436]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d063      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079be:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	2200      	movs	r2, #0
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d0:	633b      	str	r3, [r7, #48]	; 0x30
 80079d2:	2300      	movs	r3, #0
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	f04f 0000 	mov.w	r0, #0
 80079e2:	f04f 0100 	mov.w	r1, #0
 80079e6:	0159      	lsls	r1, r3, #5
 80079e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079ec:	0150      	lsls	r0, r2, #5
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4621      	mov	r1, r4
 80079f4:	1a51      	subs	r1, r2, r1
 80079f6:	6139      	str	r1, [r7, #16]
 80079f8:	4629      	mov	r1, r5
 80079fa:	eb63 0301 	sbc.w	r3, r3, r1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	018b      	lsls	r3, r1, #6
 8007a10:	4651      	mov	r1, sl
 8007a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a16:	4651      	mov	r1, sl
 8007a18:	018a      	lsls	r2, r1, #6
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a20:	4659      	mov	r1, fp
 8007a22:	eb63 0901 	sbc.w	r9, r3, r1
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a3a:	4690      	mov	r8, r2
 8007a3c:	4699      	mov	r9, r3
 8007a3e:	4623      	mov	r3, r4
 8007a40:	eb18 0303 	adds.w	r3, r8, r3
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	462b      	mov	r3, r5
 8007a48:	eb49 0303 	adc.w	r3, r9, r3
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	024b      	lsls	r3, r1, #9
 8007a5e:	4621      	mov	r1, r4
 8007a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a64:	4621      	mov	r1, r4
 8007a66:	024a      	lsls	r2, r1, #9
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a6e:	2200      	movs	r2, #0
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a78:	f7f8 fc0a 	bl	8000290 <__aeabi_uldivmod>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4613      	mov	r3, r2
 8007a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a84:	e058      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a86:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	099b      	lsrs	r3, r3, #6
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	4611      	mov	r1, r2
 8007a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a96:	623b      	str	r3, [r7, #32]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f04f 0100 	mov.w	r1, #0
 8007aac:	0159      	lsls	r1, r3, #5
 8007aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab2:	0150      	lsls	r0, r2, #5
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4641      	mov	r1, r8
 8007aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8007abe:	4649      	mov	r1, r9
 8007ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8007adc:	eb63 050b 	sbc.w	r5, r3, fp
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	00eb      	lsls	r3, r5, #3
 8007aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aee:	00e2      	lsls	r2, r4, #3
 8007af0:	4614      	mov	r4, r2
 8007af2:	461d      	mov	r5, r3
 8007af4:	4643      	mov	r3, r8
 8007af6:	18e3      	adds	r3, r4, r3
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	464b      	mov	r3, r9
 8007afc:	eb45 0303 	adc.w	r3, r5, r3
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b0e:	4629      	mov	r1, r5
 8007b10:	028b      	lsls	r3, r1, #10
 8007b12:	4621      	mov	r1, r4
 8007b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b18:	4621      	mov	r1, r4
 8007b1a:	028a      	lsls	r2, r1, #10
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b22:	2200      	movs	r2, #0
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	61fa      	str	r2, [r7, #28]
 8007b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2c:	f7f8 fbb0 	bl	8000290 <__aeabi_uldivmod>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4613      	mov	r3, r2
 8007b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	3301      	adds	r3, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b52:	e002      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3750      	adds	r7, #80	; 0x50
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	007a1200 	.word	0x007a1200

08007b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	200000e8 	.word	0x200000e8

08007b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b90:	f7ff fff0 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0a9b      	lsrs	r3, r3, #10
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	080133e4 	.word	0x080133e4

08007bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bb8:	f7ff ffdc 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	0b5b      	lsrs	r3, r3, #13
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	4903      	ldr	r1, [pc, #12]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bca:	5ccb      	ldrb	r3, [r1, r3]
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	080133e4 	.word	0x080133e4

08007bdc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e025      	b.n	8007c3c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fb fd3d 	bl	8003684 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f002 fc6b 	bl	800a4f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	f002 fcc0 	bl	800a5b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e07b      	b.n	8007d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d108      	bne.n	8007c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c66:	d009      	beq.n	8007c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	61da      	str	r2, [r3, #28]
 8007c6e:	e005      	b.n	8007c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fb fb2a 	bl	80032f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	ea42 0103 	orr.w	r1, r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	0c1b      	lsrs	r3, r3, #16
 8007d1a:	f003 0104 	and.w	r1, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	f003 0210 	and.w	r2, r3, #16
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4613      	mov	r3, r2
 8007d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_SPI_Transmit+0x22>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e126      	b.n	8007fc6 <HAL_SPI_Transmit+0x270>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d80:	f7fb fe7c 	bl	8003a7c <HAL_GetTick>
 8007d84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d002      	beq.n	8007d9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d96:	2302      	movs	r3, #2
 8007d98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d9a:	e10b      	b.n	8007fb4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_SPI_Transmit+0x52>
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dac:	e102      	b.n	8007fb4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2203      	movs	r2, #3
 8007db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	88fa      	ldrh	r2, [r7, #6]
 8007dc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df4:	d10f      	bne.n	8007e16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d007      	beq.n	8007e34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3c:	d14b      	bne.n	8007ed6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_Transmit+0xf6>
 8007e46:	8afb      	ldrh	r3, [r7, #22]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d13e      	bne.n	8007eca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e70:	e02b      	b.n	8007eca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d112      	bne.n	8007ea6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	881a      	ldrh	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	1c9a      	adds	r2, r3, #2
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ea4:	e011      	b.n	8007eca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ea6:	f7fb fde9 	bl	8003a7c <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d803      	bhi.n	8007ebe <HAL_SPI_Transmit+0x168>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ebc:	d102      	bne.n	8007ec4 <HAL_SPI_Transmit+0x16e>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ec8:	e074      	b.n	8007fb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ce      	bne.n	8007e72 <HAL_SPI_Transmit+0x11c>
 8007ed4:	e04c      	b.n	8007f70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_SPI_Transmit+0x18e>
 8007ede:	8afb      	ldrh	r3, [r7, #22]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d140      	bne.n	8007f66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f0a:	e02c      	b.n	8007f66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d113      	bne.n	8007f42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f40:	e011      	b.n	8007f66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f42:	f7fb fd9b 	bl	8003a7c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d803      	bhi.n	8007f5a <HAL_SPI_Transmit+0x204>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f58:	d102      	bne.n	8007f60 <HAL_SPI_Transmit+0x20a>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f64:	e026      	b.n	8007fb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1cd      	bne.n	8007f0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fbcb 	bl	8008710 <SPI_EndRxTxTransaction>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	77fb      	strb	r3, [r7, #31]
 8007fb0:	e000      	b.n	8007fb4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b088      	sub	sp, #32
 8007fd2:	af02      	add	r7, sp, #8
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fea:	d112      	bne.n	8008012 <HAL_SPI_Receive+0x44>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10e      	bne.n	8008012 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f8f1 	bl	80081f0 <HAL_SPI_TransmitReceive>
 800800e:	4603      	mov	r3, r0
 8008010:	e0ea      	b.n	80081e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_SPI_Receive+0x52>
 800801c:	2302      	movs	r3, #2
 800801e:	e0e3      	b.n	80081e8 <HAL_SPI_Receive+0x21a>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008028:	f7fb fd28 	bl	8003a7c <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b01      	cmp	r3, #1
 8008038:	d002      	beq.n	8008040 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800803a:	2302      	movs	r3, #2
 800803c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800803e:	e0ca      	b.n	80081d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_SPI_Receive+0x7e>
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008050:	e0c1      	b.n	80081d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2204      	movs	r2, #4
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008098:	d10f      	bne.n	80080ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d007      	beq.n	80080d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d162      	bne.n	80081a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80080e0:	e02e      	b.n	8008140 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d115      	bne.n	800811c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f103 020c 	add.w	r2, r3, #12
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	7812      	ldrb	r2, [r2, #0]
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	87da      	strh	r2, [r3, #62]	; 0x3e
 800811a:	e011      	b.n	8008140 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811c:	f7fb fcae 	bl	8003a7c <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d803      	bhi.n	8008134 <HAL_SPI_Receive+0x166>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008132:	d102      	bne.n	800813a <HAL_SPI_Receive+0x16c>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800813e:	e04a      	b.n	80081d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1cb      	bne.n	80080e2 <HAL_SPI_Receive+0x114>
 800814a:	e031      	b.n	80081b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b01      	cmp	r3, #1
 8008158:	d113      	bne.n	8008182 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	b292      	uxth	r2, r2
 8008166:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	1c9a      	adds	r2, r3, #2
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008180:	e011      	b.n	80081a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008182:	f7fb fc7b 	bl	8003a7c <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d803      	bhi.n	800819a <HAL_SPI_Receive+0x1cc>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008198:	d102      	bne.n	80081a0 <HAL_SPI_Receive+0x1d2>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081a4:	e017      	b.n	80081d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1cd      	bne.n	800814c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fa45 	bl	8008644 <SPI_EndRxTransaction>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
 80081d2:	e000      	b.n	80081d6 <HAL_SPI_Receive+0x208>
  }

error :
 80081d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081fe:	2301      	movs	r3, #1
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_SPI_TransmitReceive+0x26>
 8008212:	2302      	movs	r3, #2
 8008214:	e18a      	b.n	800852c <HAL_SPI_TransmitReceive+0x33c>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800821e:	f7fb fc2d 	bl	8003a7c <HAL_GetTick>
 8008222:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800822a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008234:	887b      	ldrh	r3, [r7, #2]
 8008236:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800823c:	2b01      	cmp	r3, #1
 800823e:	d00f      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x70>
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008246:	d107      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x68>
 8008250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008254:	2b04      	cmp	r3, #4
 8008256:	d003      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008258:	2302      	movs	r3, #2
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800825e:	e15b      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <HAL_SPI_TransmitReceive+0x82>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_SPI_TransmitReceive+0x82>
 800826c:	887b      	ldrh	r3, [r7, #2]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008278:	e14e      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b04      	cmp	r3, #4
 8008284:	d003      	beq.n	800828e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2205      	movs	r2, #5
 800828a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	887a      	ldrh	r2, [r7, #2]
 800829e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	887a      	ldrh	r2, [r7, #2]
 80082a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	887a      	ldrh	r2, [r7, #2]
 80082b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	887a      	ldrh	r2, [r7, #2]
 80082b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d007      	beq.n	80082e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ea:	d178      	bne.n	80083de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SPI_TransmitReceive+0x10a>
 80082f4:	8b7b      	ldrh	r3, [r7, #26]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d166      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	881a      	ldrh	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	1c9a      	adds	r2, r3, #2
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800831e:	e053      	b.n	80083c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d11b      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x176>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d016      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x176>
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	2b01      	cmp	r3, #1
 800833c:	d113      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	881a      	ldrh	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834e:	1c9a      	adds	r2, r3, #2
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008358:	b29b      	uxth	r3, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b01      	cmp	r3, #1
 8008372:	d119      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x1b8>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d014      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	b292      	uxth	r2, r2
 800838a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	1c9a      	adds	r2, r3, #2
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083a4:	2301      	movs	r3, #1
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083a8:	f7fb fb68 	bl	8003a7c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d807      	bhi.n	80083c8 <HAL_SPI_TransmitReceive+0x1d8>
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083be:	d003      	beq.n	80083c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083c6:	e0a7      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1a6      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x130>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1a1      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x130>
 80083dc:	e07c      	b.n	80084d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_SPI_TransmitReceive+0x1fc>
 80083e6:	8b7b      	ldrh	r3, [r7, #26]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d16b      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008412:	e057      	b.n	80084c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b02      	cmp	r3, #2
 8008420:	d11c      	bne.n	800845c <HAL_SPI_TransmitReceive+0x26c>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008426:	b29b      	uxth	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d017      	beq.n	800845c <HAL_SPI_TransmitReceive+0x26c>
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b01      	cmp	r3, #1
 8008430:	d114      	bne.n	800845c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	330c      	adds	r3, #12
 800843c:	7812      	ldrb	r2, [r2, #0]
 800843e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008458:	2300      	movs	r3, #0
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d119      	bne.n	800849e <HAL_SPI_TransmitReceive+0x2ae>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846e:	b29b      	uxth	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d014      	beq.n	800849e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800849a:	2301      	movs	r3, #1
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800849e:	f7fb faed 	bl	8003a7c <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d803      	bhi.n	80084b6 <HAL_SPI_TransmitReceive+0x2c6>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b4:	d102      	bne.n	80084bc <HAL_SPI_TransmitReceive+0x2cc>
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d103      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084c2:	e029      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1a2      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x224>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d19d      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f917 	bl	8008710 <SPI_EndRxTxTransaction>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084f4:	e010      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10b      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	e000      	b.n	8008518 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008516:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800852c:	4618      	mov	r0, r3
 800852e:	3730      	adds	r7, #48	; 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008544:	f7fb fa9a 	bl	8003a7c <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	4413      	add	r3, r2
 8008552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008554:	f7fb fa92 	bl	8003a7c <HAL_GetTick>
 8008558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800855a:	4b39      	ldr	r3, [pc, #228]	; (8008640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	015b      	lsls	r3, r3, #5
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800856a:	e054      	b.n	8008616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008572:	d050      	beq.n	8008616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008574:	f7fb fa82 	bl	8003a7c <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	429a      	cmp	r2, r3
 8008582:	d902      	bls.n	800858a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d13d      	bne.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a2:	d111      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ac:	d004      	beq.n	80085b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b6:	d107      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d0:	d10f      	bne.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e017      	b.n	8008636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3b01      	subs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4013      	ands	r3, r2
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	bf0c      	ite	eq
 8008626:	2301      	moveq	r3, #1
 8008628:	2300      	movne	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	429a      	cmp	r2, r3
 8008632:	d19b      	bne.n	800856c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200000e8 	.word	0x200000e8

08008644 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008658:	d111      	bne.n	800867e <SPI_EndRxTransaction+0x3a>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008662:	d004      	beq.n	800866e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866c:	d107      	bne.n	800867e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008686:	d12a      	bne.n	80086de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008690:	d012      	beq.n	80086b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff ff49 	bl	8008534 <SPI_WaitFlagStateUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d02d      	beq.n	8008704 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ac:	f043 0220 	orr.w	r2, r3, #32
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e026      	b.n	8008706 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	2101      	movs	r1, #1
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7ff ff36 	bl	8008534 <SPI_WaitFlagStateUntilTimeout>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01a      	beq.n	8008704 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f043 0220 	orr.w	r2, r3, #32
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e013      	b.n	8008706 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2101      	movs	r1, #1
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff ff23 	bl	8008534 <SPI_WaitFlagStateUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f8:	f043 0220 	orr.w	r2, r3, #32
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e000      	b.n	8008706 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800871c:	4b1b      	ldr	r3, [pc, #108]	; (800878c <SPI_EndRxTxTransaction+0x7c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <SPI_EndRxTxTransaction+0x80>)
 8008722:	fba2 2303 	umull	r2, r3, r2, r3
 8008726:	0d5b      	lsrs	r3, r3, #21
 8008728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800872c:	fb02 f303 	mul.w	r3, r2, r3
 8008730:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800873a:	d112      	bne.n	8008762 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2200      	movs	r2, #0
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fef4 	bl	8008534 <SPI_WaitFlagStateUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d016      	beq.n	8008780 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f043 0220 	orr.w	r2, r3, #32
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e00f      	b.n	8008782 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	3b01      	subs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008778:	2b80      	cmp	r3, #128	; 0x80
 800877a:	d0f2      	beq.n	8008762 <SPI_EndRxTxTransaction+0x52>
 800877c:	e000      	b.n	8008780 <SPI_EndRxTxTransaction+0x70>
        break;
 800877e:	bf00      	nop
  }

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200000e8 	.word	0x200000e8
 8008790:	165e9f81 	.word	0x165e9f81

08008794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e041      	b.n	800882a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fa fde0 	bl	8003380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f000 fa10 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e041      	b.n	80088c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d106      	bne.n	800885e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f839 	bl	80088d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f000 f9c1 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088fe:	2302      	movs	r3, #2
 8008900:	e0ae      	b.n	8008a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b0c      	cmp	r3, #12
 800890e:	f200 809f 	bhi.w	8008a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	0800894d 	.word	0x0800894d
 800891c:	08008a51 	.word	0x08008a51
 8008920:	08008a51 	.word	0x08008a51
 8008924:	08008a51 	.word	0x08008a51
 8008928:	0800898d 	.word	0x0800898d
 800892c:	08008a51 	.word	0x08008a51
 8008930:	08008a51 	.word	0x08008a51
 8008934:	08008a51 	.word	0x08008a51
 8008938:	080089cf 	.word	0x080089cf
 800893c:	08008a51 	.word	0x08008a51
 8008940:	08008a51 	.word	0x08008a51
 8008944:	08008a51 	.word	0x08008a51
 8008948:	08008a0f 	.word	0x08008a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f9f0 	bl	8008d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0208 	orr.w	r2, r2, #8
 8008966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0204 	bic.w	r2, r2, #4
 8008976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6999      	ldr	r1, [r3, #24]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	619a      	str	r2, [r3, #24]
      break;
 800898a:	e064      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fa40 	bl	8008e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6999      	ldr	r1, [r3, #24]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	021a      	lsls	r2, r3, #8
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	619a      	str	r2, [r3, #24]
      break;
 80089cc:	e043      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fa95 	bl	8008f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0208 	orr.w	r2, r2, #8
 80089e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0204 	bic.w	r2, r2, #4
 80089f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69d9      	ldr	r1, [r3, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	61da      	str	r2, [r3, #28]
      break;
 8008a0c:	e023      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fae9 	bl	8008fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69d9      	ldr	r1, [r3, #28]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	021a      	lsls	r2, r3, #8
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	61da      	str	r2, [r3, #28]
      break;
 8008a4e:	e002      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	75fb      	strb	r3, [r7, #23]
      break;
 8008a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIM_ConfigClockSource+0x1c>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e0b4      	b.n	8008bee <HAL_TIM_ConfigClockSource+0x186>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008abc:	d03e      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0xd4>
 8008abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac2:	f200 8087 	bhi.w	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aca:	f000 8086 	beq.w	8008bda <HAL_TIM_ConfigClockSource+0x172>
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad2:	d87f      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad4:	2b70      	cmp	r3, #112	; 0x70
 8008ad6:	d01a      	beq.n	8008b0e <HAL_TIM_ConfigClockSource+0xa6>
 8008ad8:	2b70      	cmp	r3, #112	; 0x70
 8008ada:	d87b      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008adc:	2b60      	cmp	r3, #96	; 0x60
 8008ade:	d050      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x11a>
 8008ae0:	2b60      	cmp	r3, #96	; 0x60
 8008ae2:	d877      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ae4:	2b50      	cmp	r3, #80	; 0x50
 8008ae6:	d03c      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0xfa>
 8008ae8:	2b50      	cmp	r3, #80	; 0x50
 8008aea:	d873      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d058      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8008af0:	2b40      	cmp	r3, #64	; 0x40
 8008af2:	d86f      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008af4:	2b30      	cmp	r3, #48	; 0x30
 8008af6:	d064      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008af8:	2b30      	cmp	r3, #48	; 0x30
 8008afa:	d86b      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d060      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d867      	bhi.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d05c      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	d05a      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b0c:	e062      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6899      	ldr	r1, [r3, #8]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f000 fb35 	bl	800918c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	609a      	str	r2, [r3, #8]
      break;
 8008b3a:	e04f      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	6899      	ldr	r1, [r3, #8]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f000 fb1e 	bl	800918c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b5e:	609a      	str	r2, [r3, #8]
      break;
 8008b60:	e03c      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f000 fa92 	bl	8009098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2150      	movs	r1, #80	; 0x50
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 faeb 	bl	8009156 <TIM_ITRx_SetConfig>
      break;
 8008b80:	e02c      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6859      	ldr	r1, [r3, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f000 fab1 	bl	80090f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2160      	movs	r1, #96	; 0x60
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fadb 	bl	8009156 <TIM_ITRx_SetConfig>
      break;
 8008ba0:	e01c      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	6859      	ldr	r1, [r3, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f000 fa72 	bl	8009098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2140      	movs	r1, #64	; 0x40
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 facb 	bl	8009156 <TIM_ITRx_SetConfig>
      break;
 8008bc0:	e00c      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f000 fac2 	bl	8009156 <TIM_ITRx_SetConfig>
      break;
 8008bd2:	e003      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd8:	e000      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a40      	ldr	r2, [pc, #256]	; (8008d0c <TIM_Base_SetConfig+0x114>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c16:	d00f      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a3d      	ldr	r2, [pc, #244]	; (8008d10 <TIM_Base_SetConfig+0x118>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a3c      	ldr	r2, [pc, #240]	; (8008d14 <TIM_Base_SetConfig+0x11c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a3b      	ldr	r2, [pc, #236]	; (8008d18 <TIM_Base_SetConfig+0x120>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a3a      	ldr	r2, [pc, #232]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a2f      	ldr	r2, [pc, #188]	; (8008d0c <TIM_Base_SetConfig+0x114>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d02b      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c58:	d027      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a2c      	ldr	r2, [pc, #176]	; (8008d10 <TIM_Base_SetConfig+0x118>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d023      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a2b      	ldr	r2, [pc, #172]	; (8008d14 <TIM_Base_SetConfig+0x11c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01f      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a2a      	ldr	r2, [pc, #168]	; (8008d18 <TIM_Base_SetConfig+0x120>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d01b      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a29      	ldr	r2, [pc, #164]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d017      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <TIM_Base_SetConfig+0x128>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d013      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a27      	ldr	r2, [pc, #156]	; (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00f      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a26      	ldr	r2, [pc, #152]	; (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00b      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a25      	ldr	r2, [pc, #148]	; (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d007      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a24      	ldr	r2, [pc, #144]	; (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d003      	beq.n	8008caa <TIM_Base_SetConfig+0xb2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a23      	ldr	r2, [pc, #140]	; (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d108      	bne.n	8008cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <TIM_Base_SetConfig+0x114>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a0c      	ldr	r2, [pc, #48]	; (8008d1c <TIM_Base_SetConfig+0x124>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d103      	bne.n	8008cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	615a      	str	r2, [r3, #20]
}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	40010000 	.word	0x40010000
 8008d10:	40000400 	.word	0x40000400
 8008d14:	40000800 	.word	0x40000800
 8008d18:	40000c00 	.word	0x40000c00
 8008d1c:	40010400 	.word	0x40010400
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800
 8008d2c:	40001800 	.word	0x40001800
 8008d30:	40001c00 	.word	0x40001c00
 8008d34:	40002000 	.word	0x40002000

08008d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f023 0302 	bic.w	r3, r3, #2
 8008d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a20      	ldr	r2, [pc, #128]	; (8008e10 <TIM_OC1_SetConfig+0xd8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d003      	beq.n	8008d9c <TIM_OC1_SetConfig+0x64>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1f      	ldr	r2, [pc, #124]	; (8008e14 <TIM_OC1_SetConfig+0xdc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d10c      	bne.n	8008db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f023 0308 	bic.w	r3, r3, #8
 8008da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f023 0304 	bic.w	r3, r3, #4
 8008db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <TIM_OC1_SetConfig+0xd8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_OC1_SetConfig+0x8e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a14      	ldr	r2, [pc, #80]	; (8008e14 <TIM_OC1_SetConfig+0xdc>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d111      	bne.n	8008dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	621a      	str	r2, [r3, #32]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40010000 	.word	0x40010000
 8008e14:	40010400 	.word	0x40010400

08008e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	f023 0210 	bic.w	r2, r3, #16
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	021b      	lsls	r3, r3, #8
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0320 	bic.w	r3, r3, #32
 8008e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a22      	ldr	r2, [pc, #136]	; (8008efc <TIM_OC2_SetConfig+0xe4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_OC2_SetConfig+0x68>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a21      	ldr	r2, [pc, #132]	; (8008f00 <TIM_OC2_SetConfig+0xe8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d10d      	bne.n	8008e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a17      	ldr	r2, [pc, #92]	; (8008efc <TIM_OC2_SetConfig+0xe4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_OC2_SetConfig+0x94>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a16      	ldr	r2, [pc, #88]	; (8008f00 <TIM_OC2_SetConfig+0xe8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d113      	bne.n	8008ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40010400 	.word	0x40010400

08008f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a21      	ldr	r2, [pc, #132]	; (8008fe4 <TIM_OC3_SetConfig+0xe0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d003      	beq.n	8008f6a <TIM_OC3_SetConfig+0x66>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <TIM_OC3_SetConfig+0xe4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d10d      	bne.n	8008f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <TIM_OC3_SetConfig+0xe0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d003      	beq.n	8008f96 <TIM_OC3_SetConfig+0x92>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <TIM_OC3_SetConfig+0xe4>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d113      	bne.n	8008fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	621a      	str	r2, [r3, #32]
}
 8008fd8:	bf00      	nop
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	40010000 	.word	0x40010000
 8008fe8:	40010400 	.word	0x40010400

08008fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	031b      	lsls	r3, r3, #12
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a12      	ldr	r2, [pc, #72]	; (8009090 <TIM_OC4_SetConfig+0xa4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_OC4_SetConfig+0x68>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a11      	ldr	r2, [pc, #68]	; (8009094 <TIM_OC4_SetConfig+0xa8>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d109      	bne.n	8009068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800905a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	019b      	lsls	r3, r3, #6
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	621a      	str	r2, [r3, #32]
}
 8009082:	bf00      	nop
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40010000 	.word	0x40010000
 8009094:	40010400 	.word	0x40010400

08009098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0201 	bic.w	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f023 030a 	bic.w	r3, r3, #10
 80090d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f023 0210 	bic.w	r2, r3, #16
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a1b      	ldr	r3, [r3, #32]
 8009118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	031b      	lsls	r3, r3, #12
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	621a      	str	r2, [r3, #32]
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	f043 0307 	orr.w	r3, r3, #7
 8009178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	609a      	str	r2, [r3, #8]
}
 8009180:	bf00      	nop
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	021a      	lsls	r2, r3, #8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	609a      	str	r2, [r3, #8]
}
 80091c0:	bf00      	nop
 80091c2:	371c      	adds	r7, #28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e05a      	b.n	800929a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a21      	ldr	r2, [pc, #132]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d022      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009230:	d01d      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d018      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1b      	ldr	r2, [pc, #108]	; (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d013      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1a      	ldr	r2, [pc, #104]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00e      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d009      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a17      	ldr	r2, [pc, #92]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d004      	beq.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d10c      	bne.n	8009288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	4313      	orrs	r3, r2
 800927e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40000400 	.word	0x40000400
 80092b0:	40000800 	.word	0x40000800
 80092b4:	40000c00 	.word	0x40000c00
 80092b8:	40010400 	.word	0x40010400
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40001800 	.word	0x40001800

080092c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e03f      	b.n	8009356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fa f8e8 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2224      	movs	r2, #36	; 0x24
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fe81 	bl	800a010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800931c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800932c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800933c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b08a      	sub	sp, #40	; 0x28
 8009362:	af02      	add	r7, sp, #8
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4613      	mov	r3, r2
 800936c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b20      	cmp	r3, #32
 800937c:	d17c      	bne.n	8009478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_UART_Transmit+0x2c>
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e075      	b.n	800947a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <HAL_UART_Transmit+0x3e>
 8009398:	2302      	movs	r3, #2
 800939a:	e06e      	b.n	800947a <HAL_UART_Transmit+0x11c>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2221      	movs	r2, #33	; 0x21
 80093ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093b2:	f7fa fb63 	bl	8003a7c <HAL_GetTick>
 80093b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	88fa      	ldrh	r2, [r7, #6]
 80093c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093cc:	d108      	bne.n	80093e0 <HAL_UART_Transmit+0x82>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e003      	b.n	80093e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80093f0:	e02a      	b.n	8009448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2180      	movs	r1, #128	; 0x80
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fbc1 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e036      	b.n	800947a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	3302      	adds	r3, #2
 8009426:	61bb      	str	r3, [r7, #24]
 8009428:	e007      	b.n	800943a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800943e:	b29b      	uxth	r3, r3
 8009440:	3b01      	subs	r3, #1
 8009442:	b29a      	uxth	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1cf      	bne.n	80093f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2200      	movs	r2, #0
 800945a:	2140      	movs	r1, #64	; 0x40
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fb91 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e006      	b.n	800947a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	e000      	b.n	800947a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009478:	2302      	movs	r3, #2
  }
}
 800947a:	4618      	mov	r0, r3
 800947c:	3720      	adds	r7, #32
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b08a      	sub	sp, #40	; 0x28
 8009486:	af02      	add	r7, sp, #8
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b20      	cmp	r3, #32
 80094a0:	f040 808c 	bne.w	80095bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_UART_Receive+0x2e>
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e084      	b.n	80095be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d101      	bne.n	80094c2 <HAL_UART_Receive+0x40>
 80094be:	2302      	movs	r3, #2
 80094c0:	e07d      	b.n	80095be <HAL_UART_Receive+0x13c>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2222      	movs	r2, #34	; 0x22
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094de:	f7fa facd 	bl	8003a7c <HAL_GetTick>
 80094e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	88fa      	ldrh	r2, [r7, #6]
 80094e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f8:	d108      	bne.n	800950c <HAL_UART_Receive+0x8a>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d104      	bne.n	800950c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	e003      	b.n	8009514 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800951c:	e043      	b.n	80095a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	2120      	movs	r1, #32
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fb2b 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e042      	b.n	80095be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	b29b      	uxth	r3, r3
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	b29a      	uxth	r2, r3
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	3302      	adds	r3, #2
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e01f      	b.n	8009598 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009560:	d007      	beq.n	8009572 <HAL_UART_Receive+0xf0>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <HAL_UART_Receive+0xfe>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d106      	bne.n	8009580 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	b2da      	uxtb	r2, r3
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	e008      	b.n	8009592 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958c:	b2da      	uxtb	r2, r3
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	3301      	adds	r3, #1
 8009596:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1b6      	bne.n	800951e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e000      	b.n	80095be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80095bc:	2302      	movs	r3, #2
  }
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	4613      	mov	r3, r2
 80095d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d11d      	bne.n	800961c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <HAL_UART_Receive_IT+0x26>
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e016      	b.n	800961e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_UART_Receive_IT+0x38>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e00f      	b.n	800961e <HAL_UART_Receive_IT+0x58>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	461a      	mov	r2, r3
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fb24 	bl	8009c60 <UART_Start_Receive_IT>
 8009618:	4603      	mov	r3, r0
 800961a:	e000      	b.n	800961e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800961c:	2302      	movs	r3, #2
  }
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b0ba      	sub	sp, #232	; 0xe8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800964e:	2300      	movs	r3, #0
 8009650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10f      	bne.n	800968e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800966e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <HAL_UART_IRQHandler+0x66>
 800967a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fc07 	bl	8009e9a <UART_Receive_IT>
      return;
 800968c:	e256      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800968e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80de 	beq.w	8009854 <HAL_UART_IRQHandler+0x22c>
 8009698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80d1 	beq.w	8009854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <HAL_UART_IRQHandler+0xae>
 80096be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	f043 0201 	orr.w	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <HAL_UART_IRQHandler+0xd2>
 80096e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	f043 0202 	orr.w	r2, r3, #2
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <HAL_UART_IRQHandler+0xf6>
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	f043 0204 	orr.w	r2, r3, #4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800971e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d011      	beq.n	800974e <HAL_UART_IRQHandler+0x126>
 800972a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	f043 0208 	orr.w	r2, r3, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 81ed 	beq.w	8009b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <HAL_UART_IRQHandler+0x14e>
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb92 	bl	8009e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	bf0c      	ite	eq
 8009784:	2301      	moveq	r3, #1
 8009786:	2300      	movne	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <HAL_UART_IRQHandler+0x17a>
 800979a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d04f      	beq.n	8009842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa9a 	bl	8009cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d141      	bne.n	800983a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3314      	adds	r3, #20
 80097bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1d9      	bne.n	80097b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	4a7d      	ldr	r2, [pc, #500]	; (8009a04 <HAL_UART_IRQHandler+0x3dc>)
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	4618      	mov	r0, r3
 8009818:	f7fa fbac 	bl	8003f74 <HAL_DMA_Abort_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d016      	beq.n	8009850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009830:	e00e      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f990 	bl	8009b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009838:	e00a      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f98c 	bl	8009b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009840:	e006      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f988 	bl	8009b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800984e:	e170      	b.n	8009b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009850:	bf00      	nop
    return;
 8009852:	e16e      	b.n	8009b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009858:	2b01      	cmp	r3, #1
 800985a:	f040 814a 	bne.w	8009af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800985e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8143 	beq.w	8009af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800986c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 813c 	beq.w	8009af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800987a:	2300      	movs	r3, #0
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	60bb      	str	r3, [r7, #8]
 800988e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989a:	2b40      	cmp	r3, #64	; 0x40
 800989c:	f040 80b4 	bne.w	8009a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8140 	beq.w	8009b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098be:	429a      	cmp	r2, r3
 80098c0:	f080 8139 	bcs.w	8009b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d6:	f000 8088 	beq.w	80099ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	330c      	adds	r3, #12
 80098e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	330c      	adds	r3, #12
 8009902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800990a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800991e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1d9      	bne.n	80098da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3314      	adds	r3, #20
 800992c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009938:	f023 0301 	bic.w	r3, r3, #1
 800993c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3314      	adds	r3, #20
 8009946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800994a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800994e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800995c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e1      	bne.n	8009926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3314      	adds	r3, #20
 8009968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3314      	adds	r3, #20
 8009982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800998c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e3      	bne.n	8009962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	330c      	adds	r3, #12
 80099ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ba:	f023 0310 	bic.w	r3, r3, #16
 80099be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	330c      	adds	r3, #12
 80099c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80099ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e3      	bne.n	80099a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fa fa55 	bl	8003e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8b6 	bl	8009b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a00:	e099      	b.n	8009b36 <HAL_UART_IRQHandler+0x50e>
 8009a02:	bf00      	nop
 8009a04:	08009da3 	.word	0x08009da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 808b 	beq.w	8009b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8086 	beq.w	8009b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	330c      	adds	r3, #12
 8009a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a52:	647a      	str	r2, [r7, #68]	; 0x44
 8009a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e3      	bne.n	8009a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3314      	adds	r3, #20
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	623b      	str	r3, [r7, #32]
   return(result);
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3314      	adds	r3, #20
 8009a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e3      	bne.n	8009a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	330c      	adds	r3, #12
 8009ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0310 	bic.w	r3, r3, #16
 8009ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	330c      	adds	r3, #12
 8009acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ad0:	61fa      	str	r2, [r7, #28]
 8009ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69b9      	ldr	r1, [r7, #24]
 8009ad6:	69fa      	ldr	r2, [r7, #28]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e3      	bne.n	8009aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f83e 	bl	8009b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009af0:	e023      	b.n	8009b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <HAL_UART_IRQHandler+0x4ea>
 8009afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f95d 	bl	8009dca <UART_Transmit_IT>
    return;
 8009b10:	e014      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00e      	beq.n	8009b3c <HAL_UART_IRQHandler+0x514>
 8009b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d008      	beq.n	8009b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f99d 	bl	8009e6a <UART_EndTransmit_IT>
    return;
 8009b30:	e004      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
    return;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
      return;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
      return;
 8009b3a:	bf00      	nop
  }
}
 8009b3c:	37e8      	adds	r7, #232	; 0xe8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop

08009b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b090      	sub	sp, #64	; 0x40
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b94:	e050      	b.n	8009c38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b9c:	d04c      	beq.n	8009c38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ba4:	f7f9 ff6a 	bl	8003a7c <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d241      	bcs.n	8009c38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	330c      	adds	r3, #12
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	330c      	adds	r3, #12
 8009bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bd4:	637a      	str	r2, [r7, #52]	; 0x34
 8009bd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e5      	bne.n	8009bb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3314      	adds	r3, #20
 8009bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 0301 	bic.w	r3, r3, #1
 8009bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3314      	adds	r3, #20
 8009c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c08:	623a      	str	r2, [r7, #32]
 8009c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	69f9      	ldr	r1, [r7, #28]
 8009c0e:	6a3a      	ldr	r2, [r7, #32]
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e5      	bne.n	8009be8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e00f      	b.n	8009c58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4013      	ands	r3, r2
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	bf0c      	ite	eq
 8009c48:	2301      	moveq	r3, #1
 8009c4a:	2300      	movne	r3, #0
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d09f      	beq.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3740      	adds	r7, #64	; 0x40
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	88fa      	ldrh	r2, [r7, #6]
 8009c78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	88fa      	ldrh	r2, [r7, #6]
 8009c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2222      	movs	r2, #34	; 0x22
 8009c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	695a      	ldr	r2, [r3, #20]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 0201 	orr.w	r2, r2, #1
 8009cbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0220 	orr.w	r2, r2, #32
 8009ccc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b095      	sub	sp, #84	; 0x54
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	330c      	adds	r3, #12
 8009d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d04:	643a      	str	r2, [r7, #64]	; 0x40
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e5      	bne.n	8009ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	f023 0301 	bic.w	r3, r3, #1
 8009d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3314      	adds	r3, #20
 8009d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e5      	bne.n	8009d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d119      	bne.n	8009d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	330c      	adds	r3, #12
 8009d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	330c      	adds	r3, #12
 8009d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d74:	61ba      	str	r2, [r7, #24]
 8009d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6979      	ldr	r1, [r7, #20]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	613b      	str	r3, [r7, #16]
   return(result);
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e5      	bne.n	8009d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d96:	bf00      	nop
 8009d98:	3754      	adds	r7, #84	; 0x54
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7ff fecb 	bl	8009b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b21      	cmp	r3, #33	; 0x21
 8009ddc:	d13e      	bne.n	8009e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de6:	d114      	bne.n	8009e12 <UART_Transmit_IT+0x48>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d110      	bne.n	8009e12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	1c9a      	adds	r2, r3, #2
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	621a      	str	r2, [r3, #32]
 8009e10:	e008      	b.n	8009e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	1c59      	adds	r1, r3, #1
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6211      	str	r1, [r2, #32]
 8009e1c:	781a      	ldrb	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	4619      	mov	r1, r3
 8009e32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10f      	bne.n	8009e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e000      	b.n	8009e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e5c:	2302      	movs	r3, #2
  }
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fe5a 	bl	8009b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b08c      	sub	sp, #48	; 0x30
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b22      	cmp	r3, #34	; 0x22
 8009eac:	f040 80ab 	bne.w	800a006 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb8:	d117      	bne.n	8009eea <UART_Receive_IT+0x50>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d113      	bne.n	8009eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	1c9a      	adds	r2, r3, #2
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ee8:	e026      	b.n	8009f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efc:	d007      	beq.n	8009f0e <UART_Receive_IT+0x74>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10a      	bne.n	8009f1c <UART_Receive_IT+0x82>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f18:	701a      	strb	r2, [r3, #0]
 8009f1a:	e008      	b.n	8009f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	4619      	mov	r1, r3
 8009f46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d15a      	bne.n	800a002 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0220 	bic.w	r2, r2, #32
 8009f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695a      	ldr	r2, [r3, #20]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 0201 	bic.w	r2, r2, #1
 8009f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d135      	bne.n	8009ff8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	330c      	adds	r3, #12
 8009f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f023 0310 	bic.w	r3, r3, #16
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	330c      	adds	r3, #12
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb2:	623a      	str	r2, [r7, #32]
 8009fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	69f9      	ldr	r1, [r7, #28]
 8009fb8:	6a3a      	ldr	r2, [r7, #32]
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e5      	bne.n	8009f92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0310 	and.w	r3, r3, #16
 8009fd0:	2b10      	cmp	r3, #16
 8009fd2:	d10a      	bne.n	8009fea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff fdbb 	bl	8009b6c <HAL_UARTEx_RxEventCallback>
 8009ff6:	e002      	b.n	8009ffe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7f7 f869 	bl	80010d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e002      	b.n	800a008 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	e000      	b.n	800a008 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a006:	2302      	movs	r3, #2
  }
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a014:	b0c0      	sub	sp, #256	; 0x100
 800a016:	af00      	add	r7, sp, #0
 800a018:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a02c:	68d9      	ldr	r1, [r3, #12]
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	ea40 0301 	orr.w	r3, r0, r1
 800a038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	431a      	orrs	r2, r3
 800a048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	431a      	orrs	r2, r3
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	4313      	orrs	r3, r2
 800a058:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a068:	f021 010c 	bic.w	r1, r1, #12
 800a06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a076:	430b      	orrs	r3, r1
 800a078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08a:	6999      	ldr	r1, [r3, #24]
 800a08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	ea40 0301 	orr.w	r3, r0, r1
 800a096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b8f      	ldr	r3, [pc, #572]	; (800a2dc <UART_SetConfig+0x2cc>)
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d005      	beq.n	800a0b0 <UART_SetConfig+0xa0>
 800a0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4b8d      	ldr	r3, [pc, #564]	; (800a2e0 <UART_SetConfig+0x2d0>)
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d104      	bne.n	800a0ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7fd fd80 	bl	8007bb4 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a0b8:	e003      	b.n	800a0c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0ba:	f7fd fd67 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 800a0be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0cc:	f040 810c 	bne.w	800a2e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a0de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	1891      	adds	r1, r2, r2
 800a0e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0ea:	415b      	adcs	r3, r3
 800a0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	eb12 0801 	adds.w	r8, r2, r1
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	eb43 0901 	adc.w	r9, r3, r1
 800a0fe:	f04f 0200 	mov.w	r2, #0
 800a102:	f04f 0300 	mov.w	r3, #0
 800a106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a10a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a10e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a112:	4690      	mov	r8, r2
 800a114:	4699      	mov	r9, r3
 800a116:	4623      	mov	r3, r4
 800a118:	eb18 0303 	adds.w	r3, r8, r3
 800a11c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a120:	462b      	mov	r3, r5
 800a122:	eb49 0303 	adc.w	r3, r9, r3
 800a126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a136:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a13a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a13e:	460b      	mov	r3, r1
 800a140:	18db      	adds	r3, r3, r3
 800a142:	653b      	str	r3, [r7, #80]	; 0x50
 800a144:	4613      	mov	r3, r2
 800a146:	eb42 0303 	adc.w	r3, r2, r3
 800a14a:	657b      	str	r3, [r7, #84]	; 0x54
 800a14c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a154:	f7f6 f89c 	bl	8000290 <__aeabi_uldivmod>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4b61      	ldr	r3, [pc, #388]	; (800a2e4 <UART_SetConfig+0x2d4>)
 800a15e:	fba3 2302 	umull	r2, r3, r3, r2
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	011c      	lsls	r4, r3, #4
 800a166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a170:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	1891      	adds	r1, r2, r2
 800a17e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a180:	415b      	adcs	r3, r3
 800a182:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a188:	4641      	mov	r1, r8
 800a18a:	eb12 0a01 	adds.w	sl, r2, r1
 800a18e:	4649      	mov	r1, r9
 800a190:	eb43 0b01 	adc.w	fp, r3, r1
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	f04f 0300 	mov.w	r3, #0
 800a19c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1a8:	4692      	mov	sl, r2
 800a1aa:	469b      	mov	fp, r3
 800a1ac:	4643      	mov	r3, r8
 800a1ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a1b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a1bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a1d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	18db      	adds	r3, r3, r3
 800a1d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a1da:	4613      	mov	r3, r2
 800a1dc:	eb42 0303 	adc.w	r3, r2, r3
 800a1e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a1e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a1ea:	f7f6 f851 	bl	8000290 <__aeabi_uldivmod>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4b3b      	ldr	r3, [pc, #236]	; (800a2e4 <UART_SetConfig+0x2d4>)
 800a1f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	2264      	movs	r2, #100	; 0x64
 800a1fe:	fb02 f303 	mul.w	r3, r2, r3
 800a202:	1acb      	subs	r3, r1, r3
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a20a:	4b36      	ldr	r3, [pc, #216]	; (800a2e4 <UART_SetConfig+0x2d4>)
 800a20c:	fba3 2302 	umull	r2, r3, r3, r2
 800a210:	095b      	lsrs	r3, r3, #5
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a218:	441c      	add	r4, r3
 800a21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a224:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a22c:	4642      	mov	r2, r8
 800a22e:	464b      	mov	r3, r9
 800a230:	1891      	adds	r1, r2, r2
 800a232:	63b9      	str	r1, [r7, #56]	; 0x38
 800a234:	415b      	adcs	r3, r3
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a23c:	4641      	mov	r1, r8
 800a23e:	1851      	adds	r1, r2, r1
 800a240:	6339      	str	r1, [r7, #48]	; 0x30
 800a242:	4649      	mov	r1, r9
 800a244:	414b      	adcs	r3, r1
 800a246:	637b      	str	r3, [r7, #52]	; 0x34
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a254:	4659      	mov	r1, fp
 800a256:	00cb      	lsls	r3, r1, #3
 800a258:	4651      	mov	r1, sl
 800a25a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a25e:	4651      	mov	r1, sl
 800a260:	00ca      	lsls	r2, r1, #3
 800a262:	4610      	mov	r0, r2
 800a264:	4619      	mov	r1, r3
 800a266:	4603      	mov	r3, r0
 800a268:	4642      	mov	r2, r8
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a270:	464b      	mov	r3, r9
 800a272:	460a      	mov	r2, r1
 800a274:	eb42 0303 	adc.w	r3, r2, r3
 800a278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a288:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a28c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a290:	460b      	mov	r3, r1
 800a292:	18db      	adds	r3, r3, r3
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
 800a296:	4613      	mov	r3, r2
 800a298:	eb42 0303 	adc.w	r3, r2, r3
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a29e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a2a6:	f7f5 fff3 	bl	8000290 <__aeabi_uldivmod>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <UART_SetConfig+0x2d4>)
 800a2b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	2164      	movs	r1, #100	; 0x64
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	3332      	adds	r3, #50	; 0x32
 800a2c2:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <UART_SetConfig+0x2d4>)
 800a2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c8:	095b      	lsrs	r3, r3, #5
 800a2ca:	f003 0207 	and.w	r2, r3, #7
 800a2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4422      	add	r2, r4
 800a2d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2d8:	e105      	b.n	800a4e6 <UART_SetConfig+0x4d6>
 800a2da:	bf00      	nop
 800a2dc:	40011000 	.word	0x40011000
 800a2e0:	40011400 	.word	0x40011400
 800a2e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a2f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	1891      	adds	r1, r2, r2
 800a300:	6239      	str	r1, [r7, #32]
 800a302:	415b      	adcs	r3, r3
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
 800a306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a30a:	4641      	mov	r1, r8
 800a30c:	1854      	adds	r4, r2, r1
 800a30e:	4649      	mov	r1, r9
 800a310:	eb43 0501 	adc.w	r5, r3, r1
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	f04f 0300 	mov.w	r3, #0
 800a31c:	00eb      	lsls	r3, r5, #3
 800a31e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a322:	00e2      	lsls	r2, r4, #3
 800a324:	4614      	mov	r4, r2
 800a326:	461d      	mov	r5, r3
 800a328:	4643      	mov	r3, r8
 800a32a:	18e3      	adds	r3, r4, r3
 800a32c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a330:	464b      	mov	r3, r9
 800a332:	eb45 0303 	adc.w	r3, r5, r3
 800a336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a356:	4629      	mov	r1, r5
 800a358:	008b      	lsls	r3, r1, #2
 800a35a:	4621      	mov	r1, r4
 800a35c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a360:	4621      	mov	r1, r4
 800a362:	008a      	lsls	r2, r1, #2
 800a364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a368:	f7f5 ff92 	bl	8000290 <__aeabi_uldivmod>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4b60      	ldr	r3, [pc, #384]	; (800a4f4 <UART_SetConfig+0x4e4>)
 800a372:	fba3 2302 	umull	r2, r3, r3, r2
 800a376:	095b      	lsrs	r3, r3, #5
 800a378:	011c      	lsls	r4, r3, #4
 800a37a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a38c:	4642      	mov	r2, r8
 800a38e:	464b      	mov	r3, r9
 800a390:	1891      	adds	r1, r2, r2
 800a392:	61b9      	str	r1, [r7, #24]
 800a394:	415b      	adcs	r3, r3
 800a396:	61fb      	str	r3, [r7, #28]
 800a398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a39c:	4641      	mov	r1, r8
 800a39e:	1851      	adds	r1, r2, r1
 800a3a0:	6139      	str	r1, [r7, #16]
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	414b      	adcs	r3, r1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	00cb      	lsls	r3, r1, #3
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3be:	4651      	mov	r1, sl
 800a3c0:	00ca      	lsls	r2, r1, #3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	189b      	adds	r3, r3, r2
 800a3cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3d0:	464b      	mov	r3, r9
 800a3d2:	460a      	mov	r2, r1
 800a3d4:	eb42 0303 	adc.w	r3, r2, r3
 800a3d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	f04f 0300 	mov.w	r3, #0
 800a3f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	008b      	lsls	r3, r1, #2
 800a3f8:	4641      	mov	r1, r8
 800a3fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3fe:	4641      	mov	r1, r8
 800a400:	008a      	lsls	r2, r1, #2
 800a402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a406:	f7f5 ff43 	bl	8000290 <__aeabi_uldivmod>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4b39      	ldr	r3, [pc, #228]	; (800a4f4 <UART_SetConfig+0x4e4>)
 800a410:	fba3 1302 	umull	r1, r3, r3, r2
 800a414:	095b      	lsrs	r3, r3, #5
 800a416:	2164      	movs	r1, #100	; 0x64
 800a418:	fb01 f303 	mul.w	r3, r1, r3
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	3332      	adds	r3, #50	; 0x32
 800a422:	4a34      	ldr	r2, [pc, #208]	; (800a4f4 <UART_SetConfig+0x4e4>)
 800a424:	fba2 2303 	umull	r2, r3, r2, r3
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a42e:	441c      	add	r4, r3
 800a430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a434:	2200      	movs	r2, #0
 800a436:	673b      	str	r3, [r7, #112]	; 0x70
 800a438:	677a      	str	r2, [r7, #116]	; 0x74
 800a43a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a43e:	4642      	mov	r2, r8
 800a440:	464b      	mov	r3, r9
 800a442:	1891      	adds	r1, r2, r2
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	415b      	adcs	r3, r3
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a44e:	4641      	mov	r1, r8
 800a450:	1851      	adds	r1, r2, r1
 800a452:	6039      	str	r1, [r7, #0]
 800a454:	4649      	mov	r1, r9
 800a456:	414b      	adcs	r3, r1
 800a458:	607b      	str	r3, [r7, #4]
 800a45a:	f04f 0200 	mov.w	r2, #0
 800a45e:	f04f 0300 	mov.w	r3, #0
 800a462:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a466:	4659      	mov	r1, fp
 800a468:	00cb      	lsls	r3, r1, #3
 800a46a:	4651      	mov	r1, sl
 800a46c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a470:	4651      	mov	r1, sl
 800a472:	00ca      	lsls	r2, r1, #3
 800a474:	4610      	mov	r0, r2
 800a476:	4619      	mov	r1, r3
 800a478:	4603      	mov	r3, r0
 800a47a:	4642      	mov	r2, r8
 800a47c:	189b      	adds	r3, r3, r2
 800a47e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a480:	464b      	mov	r3, r9
 800a482:	460a      	mov	r2, r1
 800a484:	eb42 0303 	adc.w	r3, r2, r3
 800a488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	663b      	str	r3, [r7, #96]	; 0x60
 800a494:	667a      	str	r2, [r7, #100]	; 0x64
 800a496:	f04f 0200 	mov.w	r2, #0
 800a49a:	f04f 0300 	mov.w	r3, #0
 800a49e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	008b      	lsls	r3, r1, #2
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	008a      	lsls	r2, r1, #2
 800a4b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a4b4:	f7f5 feec 	bl	8000290 <__aeabi_uldivmod>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <UART_SetConfig+0x4e4>)
 800a4be:	fba3 1302 	umull	r1, r3, r3, r2
 800a4c2:	095b      	lsrs	r3, r3, #5
 800a4c4:	2164      	movs	r1, #100	; 0x64
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	3332      	adds	r3, #50	; 0x32
 800a4d0:	4a08      	ldr	r2, [pc, #32]	; (800a4f4 <UART_SetConfig+0x4e4>)
 800a4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	f003 020f 	and.w	r2, r3, #15
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4422      	add	r2, r4
 800a4e4:	609a      	str	r2, [r3, #8]
}
 800a4e6:	bf00      	nop
 800a4e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4f2:	bf00      	nop
 800a4f4:	51eb851f 	.word	0x51eb851f

0800a4f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d123      	bne.n	800a552 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	6851      	ldr	r1, [r2, #4]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	6892      	ldr	r2, [r2, #8]
 800a51e:	4311      	orrs	r1, r2
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	68d2      	ldr	r2, [r2, #12]
 800a524:	4311      	orrs	r1, r2
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	6912      	ldr	r2, [r2, #16]
 800a52a:	4311      	orrs	r1, r2
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	6952      	ldr	r2, [r2, #20]
 800a530:	4311      	orrs	r1, r2
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	6992      	ldr	r2, [r2, #24]
 800a536:	4311      	orrs	r1, r2
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	69d2      	ldr	r2, [r2, #28]
 800a53c:	4311      	orrs	r1, r2
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	6a12      	ldr	r2, [r2, #32]
 800a542:	4311      	orrs	r1, r2
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a548:	430a      	orrs	r2, r1
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	e028      	b.n	800a5a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	69d9      	ldr	r1, [r3, #28]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	4319      	orrs	r1, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	430b      	orrs	r3, r1
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	6851      	ldr	r1, [r2, #4]
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	6892      	ldr	r2, [r2, #8]
 800a584:	4311      	orrs	r1, r2
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	68d2      	ldr	r2, [r2, #12]
 800a58a:	4311      	orrs	r1, r2
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	6912      	ldr	r2, [r2, #16]
 800a590:	4311      	orrs	r1, r2
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	6952      	ldr	r2, [r2, #20]
 800a596:	4311      	orrs	r1, r2
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	6992      	ldr	r2, [r2, #24]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d128      	bne.n	800a616 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	1e59      	subs	r1, r3, #1
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	4319      	orrs	r1, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	4319      	orrs	r1, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	031b      	lsls	r3, r3, #12
 800a5ee:	4319      	orrs	r1, r3
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	041b      	lsls	r3, r3, #16
 800a5f8:	4319      	orrs	r1, r3
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	051b      	lsls	r3, r3, #20
 800a602:	4319      	orrs	r1, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	3b01      	subs	r3, #1
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	430b      	orrs	r3, r1
 800a60e:	431a      	orrs	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	609a      	str	r2, [r3, #8]
 800a614:	e02f      	b.n	800a676 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a61e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	68d2      	ldr	r2, [r2, #12]
 800a626:	3a01      	subs	r2, #1
 800a628:	0311      	lsls	r1, r2, #12
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	6952      	ldr	r2, [r2, #20]
 800a62e:	3a01      	subs	r2, #1
 800a630:	0512      	lsls	r2, r2, #20
 800a632:	430a      	orrs	r2, r1
 800a634:	431a      	orrs	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	1e59      	subs	r1, r3, #1
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	4319      	orrs	r1, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	3b01      	subs	r3, #1
 800a658:	021b      	lsls	r3, r3, #8
 800a65a:	4319      	orrs	r1, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	3b01      	subs	r3, #1
 800a662:	041b      	lsls	r3, r3, #16
 800a664:	4319      	orrs	r1, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	061b      	lsls	r3, r3, #24
 800a66e:	430b      	orrs	r3, r1
 800a670:	431a      	orrs	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a684:	b084      	sub	sp, #16
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	f107 001c 	add.w	r0, r7, #28
 800a692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d122      	bne.n	800a6e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d105      	bne.n	800a6d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f9c0 	bl	800aa5c <USB_CoreReset>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]
 800a6e0:	e01a      	b.n	800a718 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f9b4 	bl	800aa5c <USB_CoreReset>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	639a      	str	r2, [r3, #56]	; 0x38
 800a70a:	e005      	b.n	800a718 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d10b      	bne.n	800a736 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f043 0206 	orr.w	r2, r3, #6
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f043 0220 	orr.w	r2, r3, #32
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a742:	b004      	add	sp, #16
 800a744:	4770      	bx	lr

0800a746 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f043 0201 	orr.w	r2, r3, #1
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f023 0201 	bic.w	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d115      	bne.n	800a7d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f7f9 f96b 	bl	8003a94 <HAL_Delay>
      ms++;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f93a 	bl	800aa3e <USB_GetMode>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d01e      	beq.n	800a80e <USB_SetCurrentMode+0x84>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b31      	cmp	r3, #49	; 0x31
 800a7d4:	d9f0      	bls.n	800a7b8 <USB_SetCurrentMode+0x2e>
 800a7d6:	e01a      	b.n	800a80e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d115      	bne.n	800a80a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	f7f9 f952 	bl	8003a94 <HAL_Delay>
      ms++;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f921 	bl	800aa3e <USB_GetMode>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <USB_SetCurrentMode+0x84>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b31      	cmp	r3, #49	; 0x31
 800a806:	d9f0      	bls.n	800a7ea <USB_SetCurrentMode+0x60>
 800a808:	e001      	b.n	800a80e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e005      	b.n	800a81a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b32      	cmp	r3, #50	; 0x32
 800a812:	d101      	bne.n	800a818 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e000      	b.n	800a81a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3301      	adds	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4a13      	ldr	r2, [pc, #76]	; (800a888 <USB_FlushTxFifo+0x64>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d901      	bls.n	800a844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e01b      	b.n	800a87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	daf2      	bge.n	800a832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	019b      	lsls	r3, r3, #6
 800a854:	f043 0220 	orr.w	r2, r3, #32
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4a08      	ldr	r2, [pc, #32]	; (800a888 <USB_FlushTxFifo+0x64>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d901      	bls.n	800a86e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e006      	b.n	800a87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b20      	cmp	r3, #32
 800a878:	d0f0      	beq.n	800a85c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	00030d40 	.word	0x00030d40

0800a88c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4a11      	ldr	r2, [pc, #68]	; (800a8e8 <USB_FlushRxFifo+0x5c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d901      	bls.n	800a8aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e018      	b.n	800a8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	daf2      	bge.n	800a898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2210      	movs	r2, #16
 800a8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4a08      	ldr	r2, [pc, #32]	; (800a8e8 <USB_FlushRxFifo+0x5c>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d901      	bls.n	800a8ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e006      	b.n	800a8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f003 0310 	and.w	r3, r3, #16
 800a8d6:	2b10      	cmp	r3, #16
 800a8d8:	d0f0      	beq.n	800a8bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	00030d40 	.word	0x00030d40

0800a8ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b089      	sub	sp, #36	; 0x24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	71fb      	strb	r3, [r7, #7]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a90a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d123      	bne.n	800a95a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a912:	88bb      	ldrh	r3, [r7, #4]
 800a914:	3303      	adds	r3, #3
 800a916:	089b      	lsrs	r3, r3, #2
 800a918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	e018      	b.n	800a952 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	031a      	lsls	r2, r3, #12
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	4413      	add	r3, r2
 800a928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92c:	461a      	mov	r2, r3
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	3301      	adds	r3, #1
 800a938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	3301      	adds	r3, #1
 800a944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	3301      	adds	r3, #1
 800a94a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	3301      	adds	r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3e2      	bcc.n	800a920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3724      	adds	r7, #36	; 0x24
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a968:	b480      	push	{r7}
 800a96a:	b08b      	sub	sp, #44	; 0x2c
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	4613      	mov	r3, r2
 800a974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	089b      	lsrs	r3, r3, #2
 800a982:	b29b      	uxth	r3, r3
 800a984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a98e:	2300      	movs	r3, #0
 800a990:	623b      	str	r3, [r7, #32]
 800a992:	e014      	b.n	800a9be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	623b      	str	r3, [r7, #32]
 800a9be:	6a3a      	ldr	r2, [r7, #32]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d3e6      	bcc.n	800a994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9c6:	8bfb      	ldrh	r3, [r7, #30]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01e      	beq.n	800aa0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f107 0310 	add.w	r3, r7, #16
 800a9dc:	6812      	ldr	r2, [r2, #0]
 800a9de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	701a      	strb	r2, [r3, #0]
      i++;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9fe:	8bfb      	ldrh	r3, [r7, #30]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa04:	8bfb      	ldrh	r3, [r7, #30]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1ea      	bne.n	800a9e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	372c      	adds	r7, #44	; 0x2c
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa30:	68fb      	ldr	r3, [r7, #12]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
	...

0800aa5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <USB_CoreReset+0x64>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d901      	bls.n	800aa7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e01b      	b.n	800aab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	daf2      	bge.n	800aa68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	f043 0201 	orr.w	r2, r3, #1
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <USB_CoreReset+0x64>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d901      	bls.n	800aaa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e006      	b.n	800aab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d0f0      	beq.n	800aa92 <USB_CoreReset+0x36>

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	00030d40 	.word	0x00030d40

0800aac4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aac4:	b084      	sub	sp, #16
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aae4:	461a      	mov	r2, r3
 800aae6:	2300      	movs	r3, #0
 800aae8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d018      	beq.n	800ab4c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10a      	bne.n	800ab36 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab2e:	f043 0304 	orr.w	r3, r3, #4
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e014      	b.n	800ab60 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab44:	f023 0304 	bic.w	r3, r3, #4
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	e009      	b.n	800ab60 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab5a:	f023 0304 	bic.w	r3, r3, #4
 800ab5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab60:	2110      	movs	r1, #16
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff fe5e 	bl	800a824 <USB_FlushTxFifo>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fe8a 	bl	800a88c <USB_FlushRxFifo>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab82:	2300      	movs	r3, #0
 800ab84:	613b      	str	r3, [r7, #16]
 800ab86:	e015      	b.n	800abb4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	015a      	lsls	r2, r3, #5
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab94:	461a      	mov	r2, r3
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba8:	461a      	mov	r2, r3
 800abaa:	2300      	movs	r3, #0
 800abac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	3301      	adds	r3, #1
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d3e5      	bcc.n	800ab88 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <USB_HostInit+0x16c>)
 800abe2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a13      	ldr	r2, [pc, #76]	; (800ac34 <USB_HostInit+0x170>)
 800abe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800abec:	e009      	b.n	800ac02 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2280      	movs	r2, #128	; 0x80
 800abf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a10      	ldr	r2, [pc, #64]	; (800ac38 <USB_HostInit+0x174>)
 800abf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a0f      	ldr	r2, [pc, #60]	; (800ac3c <USB_HostInit+0x178>)
 800abfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f043 0210 	orr.w	r2, r3, #16
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	699a      	ldr	r2, [r3, #24]
 800ac18:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <USB_HostInit+0x17c>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac2c:	b004      	add	sp, #16
 800ac2e:	4770      	bx	lr
 800ac30:	01000200 	.word	0x01000200
 800ac34:	00e00300 	.word	0x00e00300
 800ac38:	00600080 	.word	0x00600080
 800ac3c:	004000e0 	.word	0x004000e0
 800ac40:	a3200008 	.word	0xa3200008

0800ac44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d107      	bne.n	800ac96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac92:	6053      	str	r3, [r2, #4]
 800ac94:	e009      	b.n	800acaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d106      	bne.n	800acaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aca2:	461a      	mov	r2, r3
 800aca4:	f241 7370 	movw	r3, #6000	; 0x1770
 800aca8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800acd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ace2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ace8:	2064      	movs	r0, #100	; 0x64
 800acea:	f7f8 fed3 	bl	8003a94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800acf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800acfc:	200a      	movs	r0, #10
 800acfe:	f7f8 fec9 	bl	8003a94 <HAL_Delay>

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ad30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <USB_DriveVbus+0x44>
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d106      	bne.n	800ad50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5a:	d109      	bne.n	800ad70 <USB_DriveVbus+0x64>
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b085      	sub	sp, #20
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	0c5b      	lsrs	r3, r3, #17
 800ad9c:	f003 0303 	and.w	r3, r3, #3
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	b29b      	uxth	r3, r3
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	4608      	mov	r0, r1
 800adda:	4611      	mov	r1, r2
 800addc:	461a      	mov	r2, r3
 800adde:	4603      	mov	r3, r0
 800ade0:	70fb      	strb	r3, [r7, #3]
 800ade2:	460b      	mov	r3, r1
 800ade4:	70bb      	strb	r3, [r7, #2]
 800ade6:	4613      	mov	r3, r2
 800ade8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfe:	461a      	mov	r2, r3
 800ae00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ae06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d87e      	bhi.n	800af0c <USB_HC_Init+0x13c>
 800ae0e:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <USB_HC_Init+0x44>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800aecf 	.word	0x0800aecf
 800ae1c:	0800ae25 	.word	0x0800ae25
 800ae20:	0800ae91 	.word	0x0800ae91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae24:	78fb      	ldrb	r3, [r7, #3]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae30:	461a      	mov	r2, r3
 800ae32:	f240 439d 	movw	r3, #1181	; 0x49d
 800ae36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ae38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da10      	bge.n	800ae62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	0151      	lsls	r1, r2, #5
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	440a      	add	r2, r1
 800ae56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ae60:	e057      	b.n	800af12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d051      	beq.n	800af12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae8c:	60d3      	str	r3, [r2, #12]
      break;
 800ae8e:	e040      	b.n	800af12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f240 639d 	movw	r3, #1693	; 0x69d
 800aea2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da34      	bge.n	800af16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aecc:	e023      	b.n	800af16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeda:	461a      	mov	r2, r3
 800aedc:	f240 2325 	movw	r3, #549	; 0x225
 800aee0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	da17      	bge.n	800af1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800af08:	60d3      	str	r3, [r2, #12]
      }
      break;
 800af0a:	e006      	b.n	800af1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	77fb      	strb	r3, [r7, #31]
      break;
 800af10:	e004      	b.n	800af1c <USB_HC_Init+0x14c>
      break;
 800af12:	bf00      	nop
 800af14:	e002      	b.n	800af1c <USB_HC_Init+0x14c>
      break;
 800af16:	bf00      	nop
 800af18:	e000      	b.n	800af1c <USB_HC_Init+0x14c>
      break;
 800af1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800af1c:	78fb      	ldrb	r3, [r7, #3]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	4413      	add	r3, r2
 800af24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	440a      	add	r2, r1
 800af32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af36:	f043 0302 	orr.w	r3, r3, #2
 800af3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	2101      	movs	r1, #1
 800af4c:	fa01 f303 	lsl.w	r3, r1, r3
 800af50:	6939      	ldr	r1, [r7, #16]
 800af52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800af56:	4313      	orrs	r3, r2
 800af58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800af66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da03      	bge.n	800af76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800af6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af72:	61bb      	str	r3, [r7, #24]
 800af74:	e001      	b.n	800af7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff feff 	bl	800ad7e <USB_GetHostSpeed>
 800af80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800af82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af86:	2b02      	cmp	r3, #2
 800af88:	d106      	bne.n	800af98 <USB_HC_Init+0x1c8>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d003      	beq.n	800af98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800af90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	e001      	b.n	800af9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af9c:	787b      	ldrb	r3, [r7, #1]
 800af9e:	059b      	lsls	r3, r3, #22
 800afa0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800afa4:	78bb      	ldrb	r3, [r7, #2]
 800afa6:	02db      	lsls	r3, r3, #11
 800afa8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800afac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800afae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afb2:	049b      	lsls	r3, r3, #18
 800afb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800afb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800afbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800afc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	0159      	lsls	r1, r3, #5
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	440b      	add	r3, r1
 800afce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800afd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800afda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d003      	beq.n	800afea <USB_HC_Init+0x21a>
 800afe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d10f      	bne.n	800b00a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	78fa      	ldrb	r2, [r7, #3]
 800affa:	0151      	lsls	r1, r2, #5
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	440a      	add	r2, r1
 800b000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b008:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b00a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3720      	adds	r7, #32
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08c      	sub	sp, #48	; 0x30
 800b018:	af02      	add	r7, sp, #8
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	4613      	mov	r3, r2
 800b020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b030:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d02d      	beq.n	800b09a <USB_HC_StartXfer+0x86>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	791b      	ldrb	r3, [r3, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d129      	bne.n	800b09a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d117      	bne.n	800b07c <USB_HC_StartXfer+0x68>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	79db      	ldrb	r3, [r3, #7]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <USB_HC_StartXfer+0x48>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	79db      	ldrb	r3, [r3, #7]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d10f      	bne.n	800b07c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	4413      	add	r3, r2
 800b064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	69fa      	ldr	r2, [r7, #28]
 800b06c:	0151      	lsls	r1, r2, #5
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	440a      	add	r2, r1
 800b072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b07c:	79fb      	ldrb	r3, [r7, #7]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10b      	bne.n	800b09a <USB_HC_StartXfer+0x86>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	795b      	ldrb	r3, [r3, #5]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d107      	bne.n	800b09a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	4619      	mov	r1, r3
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 fa0f 	bl	800b4b4 <USB_DoPing>
      return HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	e0f8      	b.n	800b28c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d018      	beq.n	800b0d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	8912      	ldrh	r2, [r2, #8]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	8912      	ldrh	r2, [r2, #8]
 800b0b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b0b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b0ba:	8b7b      	ldrh	r3, [r7, #26]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d90b      	bls.n	800b0d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b0c0:	8b7b      	ldrh	r3, [r7, #26]
 800b0c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	8912      	ldrh	r2, [r2, #8]
 800b0ca:	fb03 f202 	mul.w	r2, r3, r2
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	611a      	str	r2, [r3, #16]
 800b0d2:	e001      	b.n	800b0d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	78db      	ldrb	r3, [r3, #3]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d007      	beq.n	800b0f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	8912      	ldrh	r2, [r2, #8]
 800b0e6:	fb03 f202 	mul.w	r2, r3, r2
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	611a      	str	r2, [r3, #16]
 800b0ee:	e003      	b.n	800b0f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	695a      	ldr	r2, [r3, #20]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b102:	04d9      	lsls	r1, r3, #19
 800b104:	4b63      	ldr	r3, [pc, #396]	; (800b294 <USB_HC_StartXfer+0x280>)
 800b106:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b108:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	7a9b      	ldrb	r3, [r3, #10]
 800b10e:	075b      	lsls	r3, r3, #29
 800b110:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	0148      	lsls	r0, r1, #5
 800b118:	6a39      	ldr	r1, [r7, #32]
 800b11a:	4401      	add	r1, r0
 800b11c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b120:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b122:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	68d9      	ldr	r1, [r3, #12]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	4413      	add	r3, r2
 800b136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b13a:	460a      	mov	r2, r1
 800b13c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bf0c      	ite	eq
 800b14e:	2301      	moveq	r3, #1
 800b150:	2300      	movne	r3, #0
 800b152:	b2db      	uxtb	r3, r3
 800b154:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	0151      	lsls	r1, r2, #5
 800b168:	6a3a      	ldr	r2, [r7, #32]
 800b16a:	440a      	add	r2, r1
 800b16c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b170:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b174:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	7e7b      	ldrb	r3, [r7, #25]
 800b186:	075b      	lsls	r3, r3, #29
 800b188:	69f9      	ldr	r1, [r7, #28]
 800b18a:	0148      	lsls	r0, r1, #5
 800b18c:	6a39      	ldr	r1, [r7, #32]
 800b18e:	4401      	add	r1, r0
 800b190:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b194:	4313      	orrs	r3, r2
 800b196:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	78db      	ldrb	r3, [r3, #3]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	e003      	b.n	800b1ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1de:	461a      	mov	r2, r3
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e04e      	b.n	800b28c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	78db      	ldrb	r3, [r3, #3]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d149      	bne.n	800b28a <USB_HC_StartXfer+0x276>
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d045      	beq.n	800b28a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	79db      	ldrb	r3, [r3, #7]
 800b202:	2b03      	cmp	r3, #3
 800b204:	d830      	bhi.n	800b268 <USB_HC_StartXfer+0x254>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <USB_HC_StartXfer+0x1f8>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b241 	.word	0x0800b241
 800b214:	0800b21d 	.word	0x0800b21d
 800b218:	0800b241 	.word	0x0800b241
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	3303      	adds	r3, #3
 800b222:	089b      	lsrs	r3, r3, #2
 800b224:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b226:	8afa      	ldrh	r2, [r7, #22]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	429a      	cmp	r2, r3
 800b230:	d91c      	bls.n	800b26c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f043 0220 	orr.w	r2, r3, #32
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b23e:	e015      	b.n	800b26c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	3303      	adds	r3, #3
 800b246:	089b      	lsrs	r3, r3, #2
 800b248:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b24a:	8afa      	ldrh	r2, [r7, #22]
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	b29b      	uxth	r3, r3
 800b256:	429a      	cmp	r2, r3
 800b258:	d90a      	bls.n	800b270 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	619a      	str	r2, [r3, #24]
        }
        break;
 800b266:	e003      	b.n	800b270 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <USB_HC_StartXfer+0x25e>
        break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <USB_HC_StartXfer+0x25e>
        break;
 800b270:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	68d9      	ldr	r1, [r3, #12]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	785a      	ldrb	r2, [r3, #1]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	2000      	movs	r0, #0
 800b282:	9000      	str	r0, [sp, #0]
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f7ff fb31 	bl	800a8ec <USB_WritePacket>
  }

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3728      	adds	r7, #40	; 0x28
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	1ff80000 	.word	0x1ff80000

0800b298 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	b29b      	uxth	r3, r3
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b089      	sub	sp, #36	; 0x24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	0c9b      	lsrs	r3, r3, #18
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	0fdb      	lsrs	r3, r3, #31
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b20      	cmp	r3, #32
 800b308:	d104      	bne.n	800b314 <USB_HC_Halt+0x5a>
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	e0c8      	b.n	800b4a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <USB_HC_Halt+0x66>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d163      	bne.n	800b3e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	4413      	add	r3, r2
 800b328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	440a      	add	r2, r1
 800b336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b33a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b33e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f040 80ab 	bne.w	800b4a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d133      	bne.n	800b3c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	015a      	lsls	r2, r3, #5
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	4413      	add	r3, r2
 800b362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	0151      	lsls	r1, r2, #5
 800b36c:	69fa      	ldr	r2, [r7, #28]
 800b36e:	440a      	add	r2, r1
 800b370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b378:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b398:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3a6:	d81d      	bhi.n	800b3e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3be:	d0ec      	beq.n	800b39a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b3c0:	e070      	b.n	800b4a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b3e2:	e05f      	b.n	800b4a4 <USB_HC_Halt+0x1ea>
            break;
 800b3e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b3e6:	e05d      	b.n	800b4a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	69fa      	ldr	r2, [r7, #28]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b406:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d133      	bne.n	800b480 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	0151      	lsls	r1, r2, #5
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	440a      	add	r2, r1
 800b42e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b436:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	0151      	lsls	r1, r2, #5
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	440a      	add	r2, r1
 800b44e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b456:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b464:	d81d      	bhi.n	800b4a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b47c:	d0ec      	beq.n	800b458 <USB_HC_Halt+0x19e>
 800b47e:	e011      	b.n	800b4a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	4413      	add	r3, r2
 800b488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	0151      	lsls	r1, r2, #5
 800b492:	69fa      	ldr	r2, [r7, #28]
 800b494:	440a      	add	r2, r1
 800b496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b49a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	e000      	b.n	800b4a4 <USB_HC_Halt+0x1ea>
          break;
 800b4a2:	bf00      	nop
    }
  }

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3724      	adds	r7, #36	; 0x24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	04da      	lsls	r2, r3, #19
 800b4d0:	4b15      	ldr	r3, [pc, #84]	; (800b528 <USB_DoPing+0x74>)
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b504:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b512:	461a      	mov	r2, r3
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	1ff80000 	.word	0x1ff80000

0800b52c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff f911 	bl	800a768 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b546:	2110      	movs	r1, #16
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff f96b 	bl	800a824 <USB_FlushTxFifo>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff f997 	bl	800a88c <USB_FlushRxFifo>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]
 800b56c:	e01f      	b.n	800b5ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	4413      	add	r3, r2
 800b576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b584:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b58c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b594:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b0f      	cmp	r3, #15
 800b5b2:	d9dc      	bls.n	800b56e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61bb      	str	r3, [r7, #24]
 800b5b8:	e034      	b.n	800b624 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	015a      	lsls	r2, r3, #5
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b600:	d80c      	bhi.n	800b61c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b618:	d0ec      	beq.n	800b5f4 <USB_StopHost+0xc8>
 800b61a:	e000      	b.n	800b61e <USB_StopHost+0xf2>
        break;
 800b61c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	3301      	adds	r3, #1
 800b622:	61bb      	str	r3, [r7, #24]
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b0f      	cmp	r3, #15
 800b628:	d9c7      	bls.n	800b5ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b630:	461a      	mov	r2, r3
 800b632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b636:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b63e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff f880 	bl	800a746 <USB_EnableGlobalInt>

  return ret;
 800b646:	7ffb      	ldrb	r3, [r7, #31]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <MX_FATFS_Init+0x18>)
 800b656:	4805      	ldr	r0, [pc, #20]	; (800b66c <MX_FATFS_Init+0x1c>)
 800b658:	f005 faba 	bl	8010bd0 <FATFS_LinkDriver>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	4b03      	ldr	r3, [pc, #12]	; (800b670 <MX_FATFS_Init+0x20>)
 800b662:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b664:	bf00      	nop
 800b666:	bd80      	pop	{r7, pc}
 800b668:	200033c4 	.word	0x200033c4
 800b66c:	080133f4 	.word	0x080133f4
 800b670:	200033c0 	.word	0x200033c0

0800b674 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b678:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4808      	ldr	r0, [pc, #32]	; (800b6d0 <USBH_status+0x34>)
 800b6b0:	f000 fe32 	bl	800c318 <USBH_MSC_UnitIsReady>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <USBH_status+0x24>
  {
    res = RES_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	e001      	b.n	800b6c4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000385c 	.word	0x2000385c

0800b6d4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b094      	sub	sp, #80	; 0x50
 800b6d8:	af02      	add	r7, sp, #8
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	607a      	str	r2, [r7, #4]
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b6ea:	7bf9      	ldrb	r1, [r7, #15]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	4813      	ldr	r0, [pc, #76]	; (800b744 <USBH_read+0x70>)
 800b6f6:	f000 fe59 	bl	800c3ac <USBH_MSC_Read>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d103      	bne.n	800b708 <USBH_read+0x34>
  {
    res = RES_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b706:	e017      	b.n	800b738 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b708:	f107 0210 	add.w	r2, r7, #16
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	4619      	mov	r1, r3
 800b710:	480c      	ldr	r0, [pc, #48]	; (800b744 <USBH_read+0x70>)
 800b712:	f000 fe27 	bl	800c364 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b716:	7f7b      	ldrb	r3, [r7, #29]
 800b718:	2b3a      	cmp	r3, #58	; 0x3a
 800b71a:	d005      	beq.n	800b728 <USBH_read+0x54>
 800b71c:	2b3a      	cmp	r3, #58	; 0x3a
 800b71e:	dc07      	bgt.n	800b730 <USBH_read+0x5c>
 800b720:	2b04      	cmp	r3, #4
 800b722:	d001      	beq.n	800b728 <USBH_read+0x54>
 800b724:	2b28      	cmp	r3, #40	; 0x28
 800b726:	d103      	bne.n	800b730 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b728:	2303      	movs	r3, #3
 800b72a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b72e:	e003      	b.n	800b738 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b736:	bf00      	nop
    }
  }

  return res;
 800b738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3748      	adds	r7, #72	; 0x48
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	2000385c 	.word	0x2000385c

0800b748 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b094      	sub	sp, #80	; 0x50
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	4603      	mov	r3, r0
 800b756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b75e:	7bf9      	ldrb	r1, [r7, #15]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4817      	ldr	r0, [pc, #92]	; (800b7c8 <USBH_write+0x80>)
 800b76a:	f000 fe88 	bl	800c47e <USBH_MSC_Write>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d103      	bne.n	800b77c <USBH_write+0x34>
  {
    res = RES_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b77a:	e01f      	b.n	800b7bc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b77c:	f107 0210 	add.w	r2, r7, #16
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	4619      	mov	r1, r3
 800b784:	4810      	ldr	r0, [pc, #64]	; (800b7c8 <USBH_write+0x80>)
 800b786:	f000 fded 	bl	800c364 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b78a:	7f7b      	ldrb	r3, [r7, #29]
 800b78c:	2b3a      	cmp	r3, #58	; 0x3a
 800b78e:	d00d      	beq.n	800b7ac <USBH_write+0x64>
 800b790:	2b3a      	cmp	r3, #58	; 0x3a
 800b792:	dc0f      	bgt.n	800b7b4 <USBH_write+0x6c>
 800b794:	2b28      	cmp	r3, #40	; 0x28
 800b796:	d009      	beq.n	800b7ac <USBH_write+0x64>
 800b798:	2b28      	cmp	r3, #40	; 0x28
 800b79a:	dc0b      	bgt.n	800b7b4 <USBH_write+0x6c>
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d005      	beq.n	800b7ac <USBH_write+0x64>
 800b7a0:	2b27      	cmp	r3, #39	; 0x27
 800b7a2:	d107      	bne.n	800b7b4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b7aa:	e007      	b.n	800b7bc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b7b2:	e003      	b.n	800b7bc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b7ba:	bf00      	nop
    }
  }

  return res;
 800b7bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3748      	adds	r7, #72	; 0x48
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	2000385c 	.word	0x2000385c

0800b7cc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b090      	sub	sp, #64	; 0x40
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	603a      	str	r2, [r7, #0]
 800b7d6:	71fb      	strb	r3, [r7, #7]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b7e2:	79bb      	ldrb	r3, [r7, #6]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d852      	bhi.n	800b88e <USBH_ioctl+0xc2>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <USBH_ioctl+0x24>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b809 	.word	0x0800b809
 800b7f8:	0800b833 	.word	0x0800b833
 800b7fc:	0800b85f 	.word	0x0800b85f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b806:	e045      	b.n	800b894 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b808:	f107 0208 	add.w	r2, r7, #8
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	4619      	mov	r1, r3
 800b810:	4823      	ldr	r0, [pc, #140]	; (800b8a0 <USBH_ioctl+0xd4>)
 800b812:	f000 fda7 	bl	800c364 <USBH_MSC_GetLUNInfo>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b828:	e034      	b.n	800b894 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b830:	e030      	b.n	800b894 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b832:	f107 0208 	add.w	r2, r7, #8
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	4619      	mov	r1, r3
 800b83a:	4819      	ldr	r0, [pc, #100]	; (800b8a0 <USBH_ioctl+0xd4>)
 800b83c:	f000 fd92 	bl	800c364 <USBH_MSC_GetLUNInfo>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b846:	8a3b      	ldrh	r3, [r7, #16]
 800b848:	461a      	mov	r2, r3
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b854:	e01e      	b.n	800b894 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b85c:	e01a      	b.n	800b894 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b85e:	f107 0208 	add.w	r2, r7, #8
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	4619      	mov	r1, r3
 800b866:	480e      	ldr	r0, [pc, #56]	; (800b8a0 <USBH_ioctl+0xd4>)
 800b868:	f000 fd7c 	bl	800c364 <USBH_MSC_GetLUNInfo>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d109      	bne.n	800b886 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b872:	8a3b      	ldrh	r3, [r7, #16]
 800b874:	0a5b      	lsrs	r3, r3, #9
 800b876:	b29b      	uxth	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b884:	e006      	b.n	800b894 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b88c:	e002      	b.n	800b894 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b88e:	2304      	movs	r3, #4
 800b890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3740      	adds	r7, #64	; 0x40
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	2000385c 	.word	0x2000385c

0800b8a4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b8a4:	b590      	push	{r4, r7, lr}
 800b8a6:	b089      	sub	sp, #36	; 0x24
 800b8a8:	af04      	add	r7, sp, #16
 800b8aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8b2:	7919      	ldrb	r1, [r3, #4]
 800b8b4:	2350      	movs	r3, #80	; 0x50
 800b8b6:	2206      	movs	r2, #6
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 fc6b 	bl	800d194 <USBH_FindInterface>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	2bff      	cmp	r3, #255	; 0xff
 800b8c6:	d002      	beq.n	800b8ce <USBH_MSC_InterfaceInit+0x2a>
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d901      	bls.n	800b8d2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e106      	b.n	800bae0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 fc40 	bl	800d15c <USBH_SelectInterface>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	e0fa      	b.n	800bae0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b8f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8f4:	f005 fcf4 	bl	80112e0 <malloc>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b90c:	2302      	movs	r3, #2
 800b90e:	e0e7      	b.n	800bae0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b910:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b914:	2100      	movs	r1, #0
 800b916:	68b8      	ldr	r0, [r7, #8]
 800b918:	f005 fd00 	bl	801131c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	211a      	movs	r1, #26
 800b922:	fb01 f303 	mul.w	r3, r1, r3
 800b926:	4413      	add	r3, r2
 800b928:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	b25b      	sxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	da16      	bge.n	800b962 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	211a      	movs	r1, #26
 800b93a:	fb01 f303 	mul.w	r3, r1, r3
 800b93e:	4413      	add	r3, r2
 800b940:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b944:	781a      	ldrb	r2, [r3, #0]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	211a      	movs	r1, #26
 800b950:	fb01 f303 	mul.w	r3, r1, r3
 800b954:	4413      	add	r3, r2
 800b956:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b95a:	881a      	ldrh	r2, [r3, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	815a      	strh	r2, [r3, #10]
 800b960:	e015      	b.n	800b98e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	211a      	movs	r1, #26
 800b968:	fb01 f303 	mul.w	r3, r1, r3
 800b96c:	4413      	add	r3, r2
 800b96e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b972:	781a      	ldrb	r2, [r3, #0]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	211a      	movs	r1, #26
 800b97e:	fb01 f303 	mul.w	r3, r1, r3
 800b982:	4413      	add	r3, r2
 800b984:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b988:	881a      	ldrh	r2, [r3, #0]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	211a      	movs	r1, #26
 800b994:	fb01 f303 	mul.w	r3, r1, r3
 800b998:	4413      	add	r3, r2
 800b99a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	b25b      	sxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	da16      	bge.n	800b9d4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	211a      	movs	r1, #26
 800b9ac:	fb01 f303 	mul.w	r3, r1, r3
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b9b6:	781a      	ldrb	r2, [r3, #0]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	211a      	movs	r1, #26
 800b9c2:	fb01 f303 	mul.w	r3, r1, r3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b9cc:	881a      	ldrh	r2, [r3, #0]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	815a      	strh	r2, [r3, #10]
 800b9d2:	e015      	b.n	800ba00 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	211a      	movs	r1, #26
 800b9da:	fb01 f303 	mul.w	r3, r1, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	211a      	movs	r1, #26
 800b9f0:	fb01 f303 	mul.w	r3, r1, r3
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b9fa:	881a      	ldrh	r2, [r3, #0]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2200      	movs	r2, #0
 800ba04:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	799b      	ldrb	r3, [r3, #6]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f002 fed6 	bl	800e7ca <USBH_AllocPipe>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461a      	mov	r2, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	79db      	ldrb	r3, [r3, #7]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f002 fecc 	bl	800e7ca <USBH_AllocPipe>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461a      	mov	r2, r3
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fdc4 	bl	800c5c8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	799b      	ldrb	r3, [r3, #6]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01e      	beq.n	800ba86 <USBH_MSC_InterfaceInit+0x1e2>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	891b      	ldrh	r3, [r3, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d01a      	beq.n	800ba86 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	7959      	ldrb	r1, [r3, #5]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	7998      	ldrb	r0, [r3, #6]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	8912      	ldrh	r2, [r2, #8]
 800ba68:	9202      	str	r2, [sp, #8]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	9201      	str	r2, [sp, #4]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	4623      	mov	r3, r4
 800ba72:	4602      	mov	r2, r0
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f002 fe79 	bl	800e76c <USBH_OpenPipe>
 800ba7a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	79db      	ldrb	r3, [r3, #7]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02c      	beq.n	800bade <USBH_MSC_InterfaceInit+0x23a>
 800ba84:	e001      	b.n	800ba8a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e02a      	b.n	800bae0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	895b      	ldrh	r3, [r3, #10]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d025      	beq.n	800bade <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	7919      	ldrb	r1, [r3, #4]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	79d8      	ldrb	r0, [r3, #7]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	8952      	ldrh	r2, [r2, #10]
 800baaa:	9202      	str	r2, [sp, #8]
 800baac:	2202      	movs	r2, #2
 800baae:	9201      	str	r2, [sp, #4]
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	4623      	mov	r3, r4
 800bab4:	4602      	mov	r2, r0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f002 fe58 	bl	800e76c <USBH_OpenPipe>
 800babc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	791b      	ldrb	r3, [r3, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f005 fb28 	bl	801111c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	795b      	ldrb	r3, [r3, #5]
 800bad0:	2200      	movs	r2, #0
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f005 fb21 	bl	801111c <USBH_LL_SetToggle>

  return USBH_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	e000      	b.n	800bae0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800bade:	2303      	movs	r3, #3
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd90      	pop	{r4, r7, pc}

0800bae8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	795b      	ldrb	r3, [r3, #5]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00e      	beq.n	800bb20 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	795b      	ldrb	r3, [r3, #5]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f002 fe4e 	bl	800e7aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	795b      	ldrb	r3, [r3, #5]
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f002 fe79 	bl	800e80c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	791b      	ldrb	r3, [r3, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00e      	beq.n	800bb46 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	791b      	ldrb	r3, [r3, #4]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f002 fe3b 	bl	800e7aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	791b      	ldrb	r3, [r3, #4]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f002 fe66 	bl	800e80c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f005 fbc8 	bl	80112f0 <free>
    phost->pActiveClass->pData = 0U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb66:	2200      	movs	r2, #0
 800bb68:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb86:	2301      	movs	r3, #1
 800bb88:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	7b9b      	ldrb	r3, [r3, #14]
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d041      	beq.n	800bc16 <USBH_MSC_ClassRequest+0xa2>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	dc4b      	bgt.n	800bc2e <USBH_MSC_ClassRequest+0xba>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <USBH_MSC_ClassRequest+0x2a>
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d147      	bne.n	800bc2e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fcf1 	bl	800c58a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d104      	bne.n	800bbbc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d137      	bne.n	800bc32 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d804      	bhi.n	800bbd4 <USBH_MSC_ClassRequest+0x60>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	e000      	b.n	800bbd6 <USBH_MSC_ClassRequest+0x62>
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73bb      	strb	r3, [r7, #14]
 800bbde:	e014      	b.n	800bc0a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	2134      	movs	r1, #52	; 0x34
 800bbe6:	fb01 f303 	mul.w	r3, r1, r3
 800bbea:	4413      	add	r3, r2
 800bbec:	3392      	adds	r3, #146	; 0x92
 800bbee:	2202      	movs	r2, #2
 800bbf0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	2134      	movs	r1, #52	; 0x34
 800bbf8:	fb01 f303 	mul.w	r3, r1, r3
 800bbfc:	4413      	add	r3, r2
 800bbfe:	33c1      	adds	r3, #193	; 0xc1
 800bc00:	2200      	movs	r2, #0
 800bc02:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	3301      	adds	r3, #1
 800bc08:	73bb      	strb	r3, [r7, #14]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	7bba      	ldrb	r2, [r7, #14]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d3e5      	bcc.n	800bbe0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800bc14:	e00d      	b.n	800bc32 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800bc16:	2100      	movs	r1, #0
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f002 f888 	bl	800dd2e <USBH_ClrFeature>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d108      	bne.n	800bc36 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	7bda      	ldrb	r2, [r3, #15]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800bc2c:	e003      	b.n	800bc36 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800bc2e:	bf00      	nop
 800bc30:	e002      	b.n	800bc38 <USBH_MSC_ClassRequest+0xc4>
      break;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <USBH_MSC_ClassRequest+0xc4>
      break;
 800bc36:	bf00      	nop
  }

  return status;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800bc56:	2301      	movs	r3, #1
 800bc58:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	7b1b      	ldrb	r3, [r3, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <USBH_MSC_Process+0x2e>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	f000 8271 	beq.w	800c152 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800bc70:	e272      	b.n	800c158 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f080 824f 	bcs.w	800c122 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	2334      	movs	r3, #52	; 0x34
 800bc90:	fb01 f303 	mul.w	r3, r1, r3
 800bc94:	4413      	add	r3, r2
 800bc96:	3391      	adds	r3, #145	; 0x91
 800bc98:	2201      	movs	r2, #1
 800bc9a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bca2:	4619      	mov	r1, r3
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	2334      	movs	r3, #52	; 0x34
 800bca8:	fb01 f303 	mul.w	r3, r1, r3
 800bcac:	4413      	add	r3, r2
 800bcae:	3390      	adds	r3, #144	; 0x90
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	f200 8243 	bhi.w	800c13e <USBH_MSC_Process+0x4fa>
 800bcb8:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <USBH_MSC_Process+0x7c>)
 800bcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbe:	bf00      	nop
 800bcc0:	0800bce5 	.word	0x0800bce5
 800bcc4:	0800c13f 	.word	0x0800c13f
 800bcc8:	0800bdad 	.word	0x0800bdad
 800bccc:	0800bf31 	.word	0x0800bf31
 800bcd0:	0800bd0b 	.word	0x0800bd0b
 800bcd4:	0800bffd 	.word	0x0800bffd
 800bcd8:	0800c13f 	.word	0x0800c13f
 800bcdc:	0800c13f 	.word	0x0800c13f
 800bce0:	0800c111 	.word	0x0800c111
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcea:	4619      	mov	r1, r3
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	2334      	movs	r3, #52	; 0x34
 800bcf0:	fb01 f303 	mul.w	r3, r1, r3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	3390      	adds	r3, #144	; 0x90
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800bd08:	e222      	b.n	800c150 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd10:	b2d9      	uxtb	r1, r3
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd18:	461a      	mov	r2, r3
 800bd1a:	2334      	movs	r3, #52	; 0x34
 800bd1c:	fb02 f303 	mul.w	r3, r2, r3
 800bd20:	3398      	adds	r3, #152	; 0x98
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	4413      	add	r3, r2
 800bd26:	3307      	adds	r3, #7
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 ff6a 	bl	800cc04 <USBH_MSC_SCSI_Inquiry>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10b      	bne.n	800bd52 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd40:	4619      	mov	r1, r3
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	2334      	movs	r3, #52	; 0x34
 800bd46:	fb01 f303 	mul.w	r3, r1, r3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	3390      	adds	r3, #144	; 0x90
 800bd4e:	2202      	movs	r2, #2
 800bd50:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d10c      	bne.n	800bd72 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd5e:	4619      	mov	r1, r3
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	2334      	movs	r3, #52	; 0x34
 800bd64:	fb01 f303 	mul.w	r3, r1, r3
 800bd68:	4413      	add	r3, r2
 800bd6a:	3390      	adds	r3, #144	; 0x90
 800bd6c:	2205      	movs	r2, #5
 800bd6e:	701a      	strb	r2, [r3, #0]
            break;
 800bd70:	e1e7      	b.n	800c142 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	f040 81e4 	bne.w	800c142 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd80:	4619      	mov	r1, r3
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	2334      	movs	r3, #52	; 0x34
 800bd86:	fb01 f303 	mul.w	r3, r1, r3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	3390      	adds	r3, #144	; 0x90
 800bd8e:	2201      	movs	r2, #1
 800bd90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd98:	4619      	mov	r1, r3
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	2334      	movs	r3, #52	; 0x34
 800bd9e:	fb01 f303 	mul.w	r3, r1, r3
 800bda2:	4413      	add	r3, r2
 800bda4:	3391      	adds	r3, #145	; 0x91
 800bda6:	2202      	movs	r2, #2
 800bda8:	701a      	strb	r2, [r3, #0]
            break;
 800bdaa:	e1ca      	b.n	800c142 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fe66 	bl	800ca88 <USBH_MSC_SCSI_TestUnitReady>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d149      	bne.n	800be5a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdcc:	4619      	mov	r1, r3
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	2334      	movs	r3, #52	; 0x34
 800bdd2:	fb01 f303 	mul.w	r3, r1, r3
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3392      	adds	r3, #146	; 0x92
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00c      	beq.n	800bdfa <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bde6:	4619      	mov	r1, r3
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	2334      	movs	r3, #52	; 0x34
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	33c1      	adds	r3, #193	; 0xc1
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e00b      	b.n	800be12 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be00:	4619      	mov	r1, r3
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	2334      	movs	r3, #52	; 0x34
 800be06:	fb01 f303 	mul.w	r3, r1, r3
 800be0a:	4413      	add	r3, r2
 800be0c:	33c1      	adds	r3, #193	; 0xc1
 800be0e:	2200      	movs	r2, #0
 800be10:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be18:	4619      	mov	r1, r3
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	2334      	movs	r3, #52	; 0x34
 800be1e:	fb01 f303 	mul.w	r3, r1, r3
 800be22:	4413      	add	r3, r2
 800be24:	3390      	adds	r3, #144	; 0x90
 800be26:	2203      	movs	r2, #3
 800be28:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be30:	4619      	mov	r1, r3
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	2334      	movs	r3, #52	; 0x34
 800be36:	fb01 f303 	mul.w	r3, r1, r3
 800be3a:	4413      	add	r3, r2
 800be3c:	3391      	adds	r3, #145	; 0x91
 800be3e:	2200      	movs	r2, #0
 800be40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be48:	4619      	mov	r1, r3
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	2334      	movs	r3, #52	; 0x34
 800be4e:	fb01 f303 	mul.w	r3, r1, r3
 800be52:	4413      	add	r3, r2
 800be54:	3392      	adds	r3, #146	; 0x92
 800be56:	2200      	movs	r2, #0
 800be58:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d14a      	bne.n	800bef6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be66:	4619      	mov	r1, r3
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	2334      	movs	r3, #52	; 0x34
 800be6c:	fb01 f303 	mul.w	r3, r1, r3
 800be70:	4413      	add	r3, r2
 800be72:	3392      	adds	r3, #146	; 0x92
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b02      	cmp	r3, #2
 800be78:	d00c      	beq.n	800be94 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be80:	4619      	mov	r1, r3
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	2334      	movs	r3, #52	; 0x34
 800be86:	fb01 f303 	mul.w	r3, r1, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	33c1      	adds	r3, #193	; 0xc1
 800be8e:	2201      	movs	r2, #1
 800be90:	701a      	strb	r2, [r3, #0]
 800be92:	e00b      	b.n	800beac <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be9a:	4619      	mov	r1, r3
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	2334      	movs	r3, #52	; 0x34
 800bea0:	fb01 f303 	mul.w	r3, r1, r3
 800bea4:	4413      	add	r3, r2
 800bea6:	33c1      	adds	r3, #193	; 0xc1
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800beb2:	4619      	mov	r1, r3
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	2334      	movs	r3, #52	; 0x34
 800beb8:	fb01 f303 	mul.w	r3, r1, r3
 800bebc:	4413      	add	r3, r2
 800bebe:	3390      	adds	r3, #144	; 0x90
 800bec0:	2205      	movs	r2, #5
 800bec2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800beca:	4619      	mov	r1, r3
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	2334      	movs	r3, #52	; 0x34
 800bed0:	fb01 f303 	mul.w	r3, r1, r3
 800bed4:	4413      	add	r3, r2
 800bed6:	3391      	adds	r3, #145	; 0x91
 800bed8:	2201      	movs	r2, #1
 800beda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bee2:	4619      	mov	r1, r3
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	2334      	movs	r3, #52	; 0x34
 800bee8:	fb01 f303 	mul.w	r3, r1, r3
 800beec:	4413      	add	r3, r2
 800beee:	3392      	adds	r3, #146	; 0x92
 800bef0:	2202      	movs	r2, #2
 800bef2:	701a      	strb	r2, [r3, #0]
            break;
 800bef4:	e127      	b.n	800c146 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b04      	cmp	r3, #4
 800befa:	f040 8124 	bne.w	800c146 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf04:	4619      	mov	r1, r3
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	2334      	movs	r3, #52	; 0x34
 800bf0a:	fb01 f303 	mul.w	r3, r1, r3
 800bf0e:	4413      	add	r3, r2
 800bf10:	3390      	adds	r3, #144	; 0x90
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	2334      	movs	r3, #52	; 0x34
 800bf22:	fb01 f303 	mul.w	r3, r1, r3
 800bf26:	4413      	add	r3, r2
 800bf28:	3391      	adds	r3, #145	; 0x91
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	701a      	strb	r2, [r3, #0]
            break;
 800bf2e:	e10a      	b.n	800c146 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf36:	b2d9      	uxtb	r1, r3
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf3e:	461a      	mov	r2, r3
 800bf40:	2334      	movs	r3, #52	; 0x34
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	3390      	adds	r3, #144	; 0x90
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fddc 	bl	800cb0e <USBH_MSC_SCSI_ReadCapacity>
 800bf56:	4603      	mov	r3, r0
 800bf58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d120      	bne.n	800bfa2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf66:	4619      	mov	r1, r3
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	2334      	movs	r3, #52	; 0x34
 800bf6c:	fb01 f303 	mul.w	r3, r1, r3
 800bf70:	4413      	add	r3, r2
 800bf72:	3390      	adds	r3, #144	; 0x90
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf7e:	4619      	mov	r1, r3
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	2334      	movs	r3, #52	; 0x34
 800bf84:	fb01 f303 	mul.w	r3, r1, r3
 800bf88:	4413      	add	r3, r2
 800bf8a:	3391      	adds	r3, #145	; 0x91
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf96:	3301      	adds	r3, #1
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bfa0:	e0d3      	b.n	800c14a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d10c      	bne.n	800bfc2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfae:	4619      	mov	r1, r3
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	2334      	movs	r3, #52	; 0x34
 800bfb4:	fb01 f303 	mul.w	r3, r1, r3
 800bfb8:	4413      	add	r3, r2
 800bfba:	3390      	adds	r3, #144	; 0x90
 800bfbc:	2205      	movs	r2, #5
 800bfbe:	701a      	strb	r2, [r3, #0]
            break;
 800bfc0:	e0c3      	b.n	800c14a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	f040 80c0 	bne.w	800c14a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	2334      	movs	r3, #52	; 0x34
 800bfd6:	fb01 f303 	mul.w	r3, r1, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	3390      	adds	r3, #144	; 0x90
 800bfde:	2201      	movs	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfe8:	4619      	mov	r1, r3
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	2334      	movs	r3, #52	; 0x34
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	4413      	add	r3, r2
 800bff4:	3391      	adds	r3, #145	; 0x91
 800bff6:	2202      	movs	r2, #2
 800bff8:	701a      	strb	r2, [r3, #0]
            break;
 800bffa:	e0a6      	b.n	800c14a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c002:	b2d9      	uxtb	r1, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c00a:	461a      	mov	r2, r3
 800c00c:	2334      	movs	r3, #52	; 0x34
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	3398      	adds	r3, #152	; 0x98
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4413      	add	r3, r2
 800c018:	3304      	adds	r3, #4
 800c01a:	461a      	mov	r2, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fe96 	bl	800cd4e <USBH_MSC_SCSI_RequestSense>
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c026:	7bfb      	ldrb	r3, [r7, #15]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d145      	bne.n	800c0b8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c032:	4619      	mov	r1, r3
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	2334      	movs	r3, #52	; 0x34
 800c038:	fb01 f303 	mul.w	r3, r1, r3
 800c03c:	4413      	add	r3, r2
 800c03e:	339c      	adds	r3, #156	; 0x9c
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b06      	cmp	r3, #6
 800c044:	d00c      	beq.n	800c060 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c04c:	4619      	mov	r1, r3
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	2334      	movs	r3, #52	; 0x34
 800c052:	fb01 f303 	mul.w	r3, r1, r3
 800c056:	4413      	add	r3, r2
 800c058:	339c      	adds	r3, #156	; 0x9c
 800c05a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d117      	bne.n	800c090 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	f242 720f 	movw	r2, #9999	; 0x270f
 800c072:	4293      	cmp	r3, r2
 800c074:	d80c      	bhi.n	800c090 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c07c:	4619      	mov	r1, r3
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	2334      	movs	r3, #52	; 0x34
 800c082:	fb01 f303 	mul.w	r3, r1, r3
 800c086:	4413      	add	r3, r2
 800c088:	3390      	adds	r3, #144	; 0x90
 800c08a:	2202      	movs	r2, #2
 800c08c:	701a      	strb	r2, [r3, #0]
                  break;
 800c08e:	e05f      	b.n	800c150 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c096:	4619      	mov	r1, r3
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	2334      	movs	r3, #52	; 0x34
 800c09c:	fb01 f303 	mul.w	r3, r1, r3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	3390      	adds	r3, #144	; 0x90
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d10c      	bne.n	800c0d8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	2334      	movs	r3, #52	; 0x34
 800c0ca:	fb01 f303 	mul.w	r3, r1, r3
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3390      	adds	r3, #144	; 0x90
 800c0d2:	2208      	movs	r2, #8
 800c0d4:	701a      	strb	r2, [r3, #0]
            break;
 800c0d6:	e03a      	b.n	800c14e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d137      	bne.n	800c14e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	2334      	movs	r3, #52	; 0x34
 800c0ea:	fb01 f303 	mul.w	r3, r1, r3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	3390      	adds	r3, #144	; 0x90
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	2334      	movs	r3, #52	; 0x34
 800c102:	fb01 f303 	mul.w	r3, r1, r3
 800c106:	4413      	add	r3, r2
 800c108:	3391      	adds	r3, #145	; 0x91
 800c10a:	2202      	movs	r2, #2
 800c10c:	701a      	strb	r2, [r3, #0]
            break;
 800c10e:	e01e      	b.n	800c14e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c116:	3301      	adds	r3, #1
 800c118:	b29a      	uxth	r2, r3
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800c120:	e016      	b.n	800c150 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2200      	movs	r2, #0
 800c126:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2201      	movs	r2, #1
 800c12e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c136:	2102      	movs	r1, #2
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	4798      	blx	r3
      break;
 800c13c:	e00c      	b.n	800c158 <USBH_MSC_Process+0x514>
            break;
 800c13e:	bf00      	nop
 800c140:	e00a      	b.n	800c158 <USBH_MSC_Process+0x514>
            break;
 800c142:	bf00      	nop
 800c144:	e008      	b.n	800c158 <USBH_MSC_Process+0x514>
            break;
 800c146:	bf00      	nop
 800c148:	e006      	b.n	800c158 <USBH_MSC_Process+0x514>
            break;
 800c14a:	bf00      	nop
 800c14c:	e004      	b.n	800c158 <USBH_MSC_Process+0x514>
            break;
 800c14e:	bf00      	nop
      break;
 800c150:	e002      	b.n	800c158 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]
      break;
 800c156:	bf00      	nop
  }
  return error;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop

0800c164 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b088      	sub	sp, #32
 800c17e:	af02      	add	r7, sp, #8
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800c190:	2301      	movs	r3, #1
 800c192:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800c194:	2301      	movs	r3, #1
 800c196:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800c198:	78fb      	ldrb	r3, [r7, #3]
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	2134      	movs	r1, #52	; 0x34
 800c19e:	fb01 f303 	mul.w	r3, r1, r3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3390      	adds	r3, #144	; 0x90
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b07      	cmp	r3, #7
 800c1aa:	d03c      	beq.n	800c226 <USBH_MSC_RdWrProcess+0xac>
 800c1ac:	2b07      	cmp	r3, #7
 800c1ae:	f300 80a7 	bgt.w	800c300 <USBH_MSC_RdWrProcess+0x186>
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d06c      	beq.n	800c290 <USBH_MSC_RdWrProcess+0x116>
 800c1b6:	2b06      	cmp	r3, #6
 800c1b8:	f040 80a2 	bne.w	800c300 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800c1bc:	78f9      	ldrb	r1, [r7, #3]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fea5 	bl	800cf16 <USBH_MSC_SCSI_Read>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10b      	bne.n	800c1ee <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	2134      	movs	r1, #52	; 0x34
 800c1dc:	fb01 f303 	mul.w	r3, r1, r3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3390      	adds	r3, #144	; 0x90
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c1ec:	e08a      	b.n	800c304 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800c1ee:	7bfb      	ldrb	r3, [r7, #15]
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d109      	bne.n	800c208 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	2134      	movs	r1, #52	; 0x34
 800c1fa:	fb01 f303 	mul.w	r3, r1, r3
 800c1fe:	4413      	add	r3, r2
 800c200:	3390      	adds	r3, #144	; 0x90
 800c202:	2205      	movs	r2, #5
 800c204:	701a      	strb	r2, [r3, #0]
      break;
 800c206:	e07d      	b.n	800c304 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	2b04      	cmp	r3, #4
 800c20c:	d17a      	bne.n	800c304 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	2134      	movs	r1, #52	; 0x34
 800c214:	fb01 f303 	mul.w	r3, r1, r3
 800c218:	4413      	add	r3, r2
 800c21a:	3390      	adds	r3, #144	; 0x90
 800c21c:	2208      	movs	r2, #8
 800c21e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c220:	2302      	movs	r3, #2
 800c222:	75fb      	strb	r3, [r7, #23]
      break;
 800c224:	e06e      	b.n	800c304 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800c226:	78f9      	ldrb	r1, [r7, #3]
 800c228:	2300      	movs	r3, #0
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	2300      	movs	r3, #0
 800c22e:	2200      	movs	r2, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fe05 	bl	800ce40 <USBH_MSC_SCSI_Write>
 800c236:	4603      	mov	r3, r0
 800c238:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	2134      	movs	r1, #52	; 0x34
 800c246:	fb01 f303 	mul.w	r3, r1, r3
 800c24a:	4413      	add	r3, r2
 800c24c:	3390      	adds	r3, #144	; 0x90
 800c24e:	2201      	movs	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c256:	e057      	b.n	800c308 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d109      	bne.n	800c272 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	2134      	movs	r1, #52	; 0x34
 800c264:	fb01 f303 	mul.w	r3, r1, r3
 800c268:	4413      	add	r3, r2
 800c26a:	3390      	adds	r3, #144	; 0x90
 800c26c:	2205      	movs	r2, #5
 800c26e:	701a      	strb	r2, [r3, #0]
      break;
 800c270:	e04a      	b.n	800c308 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2b04      	cmp	r3, #4
 800c276:	d147      	bne.n	800c308 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c278:	78fb      	ldrb	r3, [r7, #3]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	2134      	movs	r1, #52	; 0x34
 800c27e:	fb01 f303 	mul.w	r3, r1, r3
 800c282:	4413      	add	r3, r2
 800c284:	3390      	adds	r3, #144	; 0x90
 800c286:	2208      	movs	r2, #8
 800c288:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c28a:	2302      	movs	r3, #2
 800c28c:	75fb      	strb	r3, [r7, #23]
      break;
 800c28e:	e03b      	b.n	800c308 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	2234      	movs	r2, #52	; 0x34
 800c294:	fb02 f303 	mul.w	r3, r2, r3
 800c298:	3398      	adds	r3, #152	; 0x98
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4413      	add	r3, r2
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fd52 	bl	800cd4e <USBH_MSC_SCSI_RequestSense>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d113      	bne.n	800c2dc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	2134      	movs	r1, #52	; 0x34
 800c2ba:	fb01 f303 	mul.w	r3, r1, r3
 800c2be:	4413      	add	r3, r2
 800c2c0:	3390      	adds	r3, #144	; 0x90
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800c2c6:	78fb      	ldrb	r3, [r7, #3]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	2134      	movs	r1, #52	; 0x34
 800c2cc:	fb01 f303 	mul.w	r3, r1, r3
 800c2d0:	4413      	add	r3, r2
 800c2d2:	3391      	adds	r3, #145	; 0x91
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800c2d8:	2302      	movs	r3, #2
 800c2da:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d014      	beq.n	800c30c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	d111      	bne.n	800c30c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	2134      	movs	r1, #52	; 0x34
 800c2ee:	fb01 f303 	mul.w	r3, r1, r3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3390      	adds	r3, #144	; 0x90
 800c2f6:	2208      	movs	r2, #8
 800c2f8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c2fe:	e005      	b.n	800c30c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800c300:	bf00      	nop
 800c302:	e004      	b.n	800c30e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c304:	bf00      	nop
 800c306:	e002      	b.n	800c30e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c308:	bf00      	nop
 800c30a:	e000      	b.n	800c30e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c30c:	bf00      	nop

  }
  return error;
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b0b      	cmp	r3, #11
 800c336:	d10c      	bne.n	800c352 <USBH_MSC_UnitIsReady+0x3a>
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	2134      	movs	r1, #52	; 0x34
 800c33e:	fb01 f303 	mul.w	r3, r1, r3
 800c342:	4413      	add	r3, r2
 800c344:	3391      	adds	r3, #145	; 0x91
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c34c:	2301      	movs	r3, #1
 800c34e:	73fb      	strb	r3, [r7, #15]
 800c350:	e001      	b.n	800c356 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	460b      	mov	r3, r1
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c378:	69db      	ldr	r3, [r3, #28]
 800c37a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b0b      	cmp	r3, #11
 800c384:	d10d      	bne.n	800c3a2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c386:	7afb      	ldrb	r3, [r7, #11]
 800c388:	2234      	movs	r2, #52	; 0x34
 800c38a:	fb02 f303 	mul.w	r3, r2, r3
 800c38e:	3390      	adds	r3, #144	; 0x90
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	4413      	add	r3, r2
 800c394:	2234      	movs	r2, #52	; 0x34
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f004 ffb1 	bl	8011300 <memcpy>
    return USBH_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e000      	b.n	800c3a4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c3a2:	2302      	movs	r3, #2
  }
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af02      	add	r7, sp, #8
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00e      	beq.n	800c3f0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c3d8:	2b0b      	cmp	r3, #11
 800c3da:	d109      	bne.n	800c3f0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	2134      	movs	r1, #52	; 0x34
 800c3e2:	fb01 f303 	mul.w	r3, r1, r3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	3390      	adds	r3, #144	; 0x90
 800c3ea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d001      	beq.n	800c3f4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	e040      	b.n	800c476 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c3fa:	7afb      	ldrb	r3, [r7, #11]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	2134      	movs	r1, #52	; 0x34
 800c400:	fb01 f303 	mul.w	r3, r1, r3
 800c404:	4413      	add	r3, r2
 800c406:	3390      	adds	r3, #144	; 0x90
 800c408:	2206      	movs	r2, #6
 800c40a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	b29a      	uxth	r2, r3
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c416:	7af9      	ldrb	r1, [r7, #11]
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 fd78 	bl	800cf16 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c42c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c42e:	e016      	b.n	800c45e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad2      	subs	r2, r2, r3
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	f242 7110 	movw	r1, #10000	; 0x2710
 800c440:	fb01 f303 	mul.w	r3, r1, r3
 800c444:	429a      	cmp	r2, r3
 800c446:	d805      	bhi.n	800c454 <USBH_MSC_Read+0xa8>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d104      	bne.n	800c45e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2201      	movs	r2, #1
 800c458:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c45a:	2302      	movs	r3, #2
 800c45c:	e00b      	b.n	800c476 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	4619      	mov	r1, r3
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f7ff fe89 	bl	800c17a <USBH_MSC_RdWrProcess>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d0e0      	beq.n	800c430 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	2201      	movs	r2, #1
 800c472:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3718      	adds	r7, #24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b088      	sub	sp, #32
 800c482:	af02      	add	r7, sp, #8
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00e      	beq.n	800c4c2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c4aa:	2b0b      	cmp	r3, #11
 800c4ac:	d109      	bne.n	800c4c2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	2134      	movs	r1, #52	; 0x34
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3390      	adds	r3, #144	; 0x90
 800c4bc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d001      	beq.n	800c4c6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e040      	b.n	800c548 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2207      	movs	r2, #7
 800c4ca:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c4cc:	7afb      	ldrb	r3, [r7, #11]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	2134      	movs	r1, #52	; 0x34
 800c4d2:	fb01 f303 	mul.w	r3, r1, r3
 800c4d6:	4413      	add	r3, r2
 800c4d8:	3390      	adds	r3, #144	; 0x90
 800c4da:	2207      	movs	r2, #7
 800c4dc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c4de:	7afb      	ldrb	r3, [r7, #11]
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c4e8:	7af9      	ldrb	r1, [r7, #11]
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fca4 	bl	800ce40 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4fe:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c500:	e016      	b.n	800c530 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	f242 7110 	movw	r1, #10000	; 0x2710
 800c512:	fb01 f303 	mul.w	r3, r1, r3
 800c516:	429a      	cmp	r2, r3
 800c518:	d805      	bhi.n	800c526 <USBH_MSC_Write+0xa8>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2201      	movs	r2, #1
 800c52a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c52c:	2302      	movs	r3, #2
 800c52e:	e00b      	b.n	800c548 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	4619      	mov	r1, r3
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fe20 	bl	800c17a <USBH_MSC_RdWrProcess>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d0e0      	beq.n	800c502 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	2201      	movs	r2, #1
 800c544:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2221      	movs	r2, #33	; 0x21
 800c55c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	22ff      	movs	r2, #255	; 0xff
 800c562:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c576:	2200      	movs	r2, #0
 800c578:	2100      	movs	r1, #0
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f001 fea4 	bl	800e2c8 <USBH_CtlReq>
 800c580:	4603      	mov	r3, r0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	22a1      	movs	r2, #161	; 0xa1
 800c598:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	22fe      	movs	r2, #254	; 0xfe
 800c59e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f001 fe86 	bl	800e2c8 <USBH_CtlReq>
 800c5bc:	4603      	mov	r3, r0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	4a09      	ldr	r2, [pc, #36]	; (800c604 <USBH_MSC_BOT_Init+0x3c>)
 800c5de:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4a09      	ldr	r2, [pc, #36]	; (800c608 <USBH_MSC_BOT_Init+0x40>)
 800c5e4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr
 800c604:	43425355 	.word	0x43425355
 800c608:	20304050 	.word	0x20304050

0800c60c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af02      	add	r7, sp, #8
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c618:	2301      	movs	r3, #1
 800c61a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c61c:	2301      	movs	r3, #1
 800c61e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c620:	2301      	movs	r3, #1
 800c622:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c624:	2300      	movs	r3, #0
 800c626:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c63c:	3b01      	subs	r3, #1
 800c63e:	2b0a      	cmp	r3, #10
 800c640:	f200 819e 	bhi.w	800c980 <USBH_MSC_BOT_Process+0x374>
 800c644:	a201      	add	r2, pc, #4	; (adr r2, 800c64c <USBH_MSC_BOT_Process+0x40>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	0800c6a1 	.word	0x0800c6a1
 800c654:	0800c70b 	.word	0x0800c70b
 800c658:	0800c729 	.word	0x0800c729
 800c65c:	0800c7ad 	.word	0x0800c7ad
 800c660:	0800c7cf 	.word	0x0800c7cf
 800c664:	0800c867 	.word	0x0800c867
 800c668:	0800c883 	.word	0x0800c883
 800c66c:	0800c8d5 	.word	0x0800c8d5
 800c670:	0800c905 	.word	0x0800c905
 800c674:	0800c967 	.word	0x0800c967
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	78fa      	ldrb	r2, [r7, #3]
 800c67c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2202      	movs	r2, #2
 800c684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	795b      	ldrb	r3, [r3, #5]
 800c692:	2201      	movs	r2, #1
 800c694:	9200      	str	r2, [sp, #0]
 800c696:	221f      	movs	r2, #31
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f002 f824 	bl	800e6e6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c69e:	e17e      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	795b      	ldrb	r3, [r3, #5]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f004 fd0e 	bl	80110c8 <USBH_LL_GetURBState>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c6b0:	7d3b      	ldrb	r3, [r7, #20]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d118      	bne.n	800c6e8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00f      	beq.n	800c6de <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c6c4:	b25b      	sxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da04      	bge.n	800c6d4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	2203      	movs	r2, #3
 800c6ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6d2:	e157      	b.n	800c984 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	2205      	movs	r2, #5
 800c6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c6dc:	e152      	b.n	800c984 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c6e6:	e14d      	b.n	800c984 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c6e8:	7d3b      	ldrb	r3, [r7, #20]
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d104      	bne.n	800c6f8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c6f6:	e145      	b.n	800c984 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c6f8:	7d3b      	ldrb	r3, [r7, #20]
 800c6fa:	2b05      	cmp	r3, #5
 800c6fc:	f040 8142 	bne.w	800c984 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	220a      	movs	r2, #10
 800c704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c708:	e13c      	b.n	800c984 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	895a      	ldrh	r2, [r3, #10]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	791b      	ldrb	r3, [r3, #4]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f002 f809 	bl	800e730 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2204      	movs	r2, #4
 800c722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c726:	e13a      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	791b      	ldrb	r3, [r3, #4]
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f004 fcca 	bl	80110c8 <USBH_LL_GetURBState>
 800c734:	4603      	mov	r3, r0
 800c736:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c738:	7d3b      	ldrb	r3, [r7, #20]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d12d      	bne.n	800c79a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	8952      	ldrh	r2, [r2, #10]
 800c746:	4293      	cmp	r3, r2
 800c748:	d910      	bls.n	800c76c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	8952      	ldrh	r2, [r2, #10]
 800c754:	441a      	add	r2, r3
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	8952      	ldrh	r2, [r2, #10]
 800c764:	1a9a      	subs	r2, r3, r2
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	65da      	str	r2, [r3, #92]	; 0x5c
 800c76a:	e002      	b.n	800c772 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2200      	movs	r2, #0
 800c770:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	895a      	ldrh	r2, [r3, #10]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	791b      	ldrb	r3, [r3, #4]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 ffd1 	bl	800e730 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c78e:	e0fb      	b.n	800c988 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2207      	movs	r2, #7
 800c794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c798:	e0f6      	b.n	800c988 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c79a:	7d3b      	ldrb	r3, [r7, #20]
 800c79c:	2b05      	cmp	r3, #5
 800c79e:	f040 80f3 	bne.w	800c988 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	2209      	movs	r2, #9
 800c7a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c7aa:	e0ed      	b.n	800c988 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	891a      	ldrh	r2, [r3, #8]
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	795b      	ldrb	r3, [r3, #5]
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	9000      	str	r0, [sp, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 ff91 	bl	800e6e6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2206      	movs	r2, #6
 800c7c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c7cc:	e0e7      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	795b      	ldrb	r3, [r3, #5]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f004 fc77 	bl	80110c8 <USBH_LL_GetURBState>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c7de:	7d3b      	ldrb	r3, [r7, #20]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d12f      	bne.n	800c844 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	8912      	ldrh	r2, [r2, #8]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d910      	bls.n	800c812 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	8912      	ldrh	r2, [r2, #8]
 800c7fa:	441a      	add	r2, r3
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	8912      	ldrh	r2, [r2, #8]
 800c80a:	1a9a      	subs	r2, r3, r2
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	65da      	str	r2, [r3, #92]	; 0x5c
 800c810:	e002      	b.n	800c818 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2200      	movs	r2, #0
 800c816:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00c      	beq.n	800c83a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	891a      	ldrh	r2, [r3, #8]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	795b      	ldrb	r3, [r3, #5]
 800c82e:	2001      	movs	r0, #1
 800c830:	9000      	str	r0, [sp, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f001 ff57 	bl	800e6e6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c838:	e0a8      	b.n	800c98c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	2207      	movs	r2, #7
 800c83e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c842:	e0a3      	b.n	800c98c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c844:	7d3b      	ldrb	r3, [r7, #20]
 800c846:	2b02      	cmp	r3, #2
 800c848:	d104      	bne.n	800c854 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2205      	movs	r2, #5
 800c84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c852:	e09b      	b.n	800c98c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c854:	7d3b      	ldrb	r3, [r7, #20]
 800c856:	2b05      	cmp	r3, #5
 800c858:	f040 8098 	bne.w	800c98c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	220a      	movs	r2, #10
 800c860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c864:	e092      	b.n	800c98c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	791b      	ldrb	r3, [r3, #4]
 800c870:	220d      	movs	r2, #13
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 ff5c 	bl	800e730 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	2208      	movs	r2, #8
 800c87c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c880:	e08d      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	791b      	ldrb	r3, [r3, #4]
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f004 fc1d 	bl	80110c8 <USBH_LL_GetURBState>
 800c88e:	4603      	mov	r3, r0
 800c890:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c892:	7d3b      	ldrb	r3, [r7, #20]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d115      	bne.n	800c8c4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f8a9 	bl	800ca00 <USBH_MSC_DecodeCSW>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c8b2:	7d7b      	ldrb	r3, [r7, #21]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c8bc:	e068      	b.n	800c990 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	75fb      	strb	r3, [r7, #23]
      break;
 800c8c2:	e065      	b.n	800c990 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c8c4:	7d3b      	ldrb	r3, [r7, #20]
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d162      	bne.n	800c990 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	2209      	movs	r2, #9
 800c8ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c8d2:	e05d      	b.n	800c990 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f864 	bl	800c9a8 <USBH_MSC_BOT_Abort>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c8e4:	7dbb      	ldrb	r3, [r7, #22]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d104      	bne.n	800c8f4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2207      	movs	r2, #7
 800c8ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c8f2:	e04f      	b.n	800c994 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c8f4:	7dbb      	ldrb	r3, [r7, #22]
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	d14c      	bne.n	800c994 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	220b      	movs	r2, #11
 800c8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c902:	e047      	b.n	800c994 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	2201      	movs	r2, #1
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f84c 	bl	800c9a8 <USBH_MSC_BOT_Abort>
 800c910:	4603      	mov	r3, r0
 800c912:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c914:	7dbb      	ldrb	r3, [r7, #22]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d11d      	bne.n	800c956 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	795b      	ldrb	r3, [r3, #5]
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f004 fc2b 	bl	801117c <USBH_LL_GetToggle>
 800c926:	4603      	mov	r3, r0
 800c928:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	7959      	ldrb	r1, [r3, #5]
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	f1c3 0301 	rsb	r3, r3, #1
 800c934:	b2db      	uxtb	r3, r3
 800c936:	461a      	mov	r2, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f004 fbef 	bl	801111c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	791b      	ldrb	r3, [r3, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f004 fbe8 	bl	801111c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	2209      	movs	r2, #9
 800c950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c954:	e020      	b.n	800c998 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c956:	7dbb      	ldrb	r3, [r7, #22]
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d11d      	bne.n	800c998 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	220b      	movs	r2, #11
 800c960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c964:	e018      	b.n	800c998 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff fdf2 	bl	800c550 <USBH_MSC_BOT_REQ_Reset>
 800c96c:	4603      	mov	r3, r0
 800c96e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c970:	7dfb      	ldrb	r3, [r7, #23]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d112      	bne.n	800c99c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c97e:	e00d      	b.n	800c99c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c980:	bf00      	nop
 800c982:	e00c      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c984:	bf00      	nop
 800c986:	e00a      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c988:	bf00      	nop
 800c98a:	e008      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c98c:	bf00      	nop
 800c98e:	e006      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c990:	bf00      	nop
 800c992:	e004      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c994:	bf00      	nop
 800c996:	e002      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c998:	bf00      	nop
 800c99a:	e000      	b.n	800c99e <USBH_MSC_BOT_Process+0x392>
      break;
 800c99c:	bf00      	nop
  }
  return status;
 800c99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9c2:	69db      	ldr	r3, [r3, #28]
 800c9c4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c9c6:	78bb      	ldrb	r3, [r7, #2]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <USBH_MSC_BOT_Abort+0x2a>
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d009      	beq.n	800c9e4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c9d0:	e011      	b.n	800c9f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	79db      	ldrb	r3, [r3, #7]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f001 f9a8 	bl	800dd2e <USBH_ClrFeature>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e2:	e008      	b.n	800c9f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	799b      	ldrb	r3, [r3, #6]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 f99f 	bl	800dd2e <USBH_ClrFeature>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f4:	bf00      	nop
  }
  return status;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ca12:	2301      	movs	r3, #1
 800ca14:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	791b      	ldrb	r3, [r3, #4]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f004 fac1 	bl	8010fa4 <USBH_LL_GetLastXferSize>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b0d      	cmp	r3, #13
 800ca26:	d002      	beq.n	800ca2e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	73fb      	strb	r3, [r7, #15]
 800ca2c:	e024      	b.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca32:	4a14      	ldr	r2, [pc, #80]	; (800ca84 <USBH_MSC_DecodeCSW+0x84>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d11d      	bne.n	800ca74 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d119      	bne.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73fb      	strb	r3, [r7, #15]
 800ca52:	e011      	b.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d102      	bne.n	800ca64 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	73fb      	strb	r3, [r7, #15]
 800ca62:	e009      	b.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d104      	bne.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ca6e:	2302      	movs	r3, #2
 800ca70:	73fb      	strb	r3, [r7, #15]
 800ca72:	e001      	b.n	800ca78 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ca74:	2302      	movs	r3, #2
 800ca76:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	53425355 	.word	0x53425355

0800ca88 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ca94:	2302      	movs	r3, #2
 800ca96:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d002      	beq.n	800cab2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800caac:	2b02      	cmp	r3, #2
 800caae:	d021      	beq.n	800caf4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cab0:	e028      	b.n	800cb04 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2200      	movs	r2, #0
 800cab6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	220a      	movs	r2, #10
 800cac4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	3363      	adds	r3, #99	; 0x63
 800cacc:	2210      	movs	r2, #16
 800cace:	2100      	movs	r1, #0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f004 fc23 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2202      	movs	r2, #2
 800caea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800caee:	2301      	movs	r3, #1
 800caf0:	73fb      	strb	r3, [r7, #15]
      break;
 800caf2:	e007      	b.n	800cb04 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fd87 	bl	800c60c <USBH_MSC_BOT_Process>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]
      break;
 800cb02:	bf00      	nop
  }

  return error;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b086      	sub	sp, #24
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	460b      	mov	r3, r1
 800cb18:	607a      	str	r2, [r7, #4]
 800cb1a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d002      	beq.n	800cb3a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d027      	beq.n	800cb88 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800cb38:	e05f      	b.n	800cbfa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	2280      	movs	r2, #128	; 0x80
 800cb44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	220a      	movs	r2, #10
 800cb4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	3363      	adds	r3, #99	; 0x63
 800cb54:	2210      	movs	r2, #16
 800cb56:	2100      	movs	r1, #0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f004 fbdf 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2225      	movs	r2, #37	; 0x25
 800cb62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2202      	movs	r2, #2
 800cb72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f103 0210 	add.w	r2, r3, #16
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
      break;
 800cb86:	e038      	b.n	800cbfa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fd3d 	bl	800c60c <USBH_MSC_BOT_Process>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d12d      	bne.n	800cbf8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba2:	3303      	adds	r3, #3
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbae:	3302      	adds	r3, #2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	021b      	lsls	r3, r3, #8
 800cbb4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cbc2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	061b      	lsls	r3, r3, #24
 800cbce:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbda:	3307      	adds	r3, #7
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbe6:	3306      	adds	r3, #6
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	809a      	strh	r2, [r3, #4]
      break;
 800cbf8:	bf00      	nop
  }

  return error;
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b086      	sub	sp, #24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800cc12:	2302      	movs	r3, #2
 800cc14:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d002      	beq.n	800cc30 <USBH_MSC_SCSI_Inquiry+0x2c>
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d03d      	beq.n	800ccaa <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800cc2e:	e089      	b.n	800cd44 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2224      	movs	r2, #36	; 0x24
 800cc34:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2280      	movs	r2, #128	; 0x80
 800cc3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	220a      	movs	r2, #10
 800cc42:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	3363      	adds	r3, #99	; 0x63
 800cc4a:	220a      	movs	r2, #10
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f004 fb64 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2212      	movs	r2, #18
 800cc58:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	015b      	lsls	r3, r3, #5
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	2224      	movs	r2, #36	; 0x24
 800cc7c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2202      	movs	r2, #2
 800cc94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f103 0210 	add.w	r2, r3, #16
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cca4:	2301      	movs	r3, #1
 800cca6:	75fb      	strb	r3, [r7, #23]
      break;
 800cca8:	e04c      	b.n	800cd44 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	4619      	mov	r1, r3
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7ff fcac 	bl	800c60c <USBH_MSC_BOT_Process>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d141      	bne.n	800cd42 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ccbe:	2222      	movs	r2, #34	; 0x22
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f004 fb2a 	bl	801131c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f003 031f 	and.w	r3, r3, #31
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	095b      	lsrs	r3, r3, #5
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	b25b      	sxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	da03      	bge.n	800cd02 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	709a      	strb	r2, [r3, #2]
 800cd00:	e002      	b.n	800cd08 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	1cd8      	adds	r0, r3, #3
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd12:	3308      	adds	r3, #8
 800cd14:	2208      	movs	r2, #8
 800cd16:	4619      	mov	r1, r3
 800cd18:	f004 faf2 	bl	8011300 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f103 000c 	add.w	r0, r3, #12
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd28:	3310      	adds	r3, #16
 800cd2a:	2210      	movs	r2, #16
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	f004 fae7 	bl	8011300 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	331d      	adds	r3, #29
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800cd3c:	3220      	adds	r2, #32
 800cd3e:	6812      	ldr	r2, [r2, #0]
 800cd40:	601a      	str	r2, [r3, #0]
      break;
 800cd42:	bf00      	nop
  }

  return error;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b086      	sub	sp, #24
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	460b      	mov	r3, r1
 800cd58:	607a      	str	r2, [r7, #4]
 800cd5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d002      	beq.n	800cd7a <USBH_MSC_SCSI_RequestSense+0x2c>
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d03d      	beq.n	800cdf4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800cd78:	e05d      	b.n	800ce36 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	220e      	movs	r2, #14
 800cd7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2280      	movs	r2, #128	; 0x80
 800cd84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	220a      	movs	r2, #10
 800cd8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	3363      	adds	r3, #99	; 0x63
 800cd94:	2210      	movs	r2, #16
 800cd96:	2100      	movs	r1, #0
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f004 fabf 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2203      	movs	r2, #3
 800cda2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	015b      	lsls	r3, r3, #5
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	220e      	movs	r2, #14
 800cdc6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f103 0210 	add.w	r2, r3, #16
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	75fb      	strb	r3, [r7, #23]
      break;
 800cdf2:	e020      	b.n	800ce36 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cdf4:	7afb      	ldrb	r3, [r7, #11]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f7ff fc07 	bl	800c60c <USBH_MSC_BOT_Process>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d115      	bne.n	800ce34 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce0e:	3302      	adds	r3, #2
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	f003 030f 	and.w	r3, r3, #15
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce22:	7b1a      	ldrb	r2, [r3, #12]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2e:	7b5a      	ldrb	r2, [r3, #13]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	709a      	strb	r2, [r3, #2]
      break;
 800ce34:	bf00      	nop
  }

  return error;
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	607a      	str	r2, [r7, #4]
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ce50:	2302      	movs	r3, #2
 800ce52:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d002      	beq.n	800ce6e <USBH_MSC_SCSI_Write+0x2e>
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d047      	beq.n	800cefc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ce6c:	e04e      	b.n	800cf0c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ce74:	461a      	mov	r2, r3
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	fb03 f202 	mul.w	r2, r3, r2
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	220a      	movs	r2, #10
 800ce8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	3363      	adds	r3, #99	; 0x63
 800ce94:	2210      	movs	r2, #16
 800ce96:	2100      	movs	r1, #0
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f004 fa3f 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	222a      	movs	r2, #42	; 0x2a
 800cea2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cea6:	79fa      	ldrb	r2, [r7, #7]
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ceae:	79ba      	ldrb	r2, [r7, #6]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ceb6:	797a      	ldrb	r2, [r7, #5]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cebe:	1d3b      	adds	r3, r7, #4
 800cec0:	781a      	ldrb	r2, [r3, #0]
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cec8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ced2:	f107 0320 	add.w	r3, r7, #32
 800ced6:	781a      	ldrb	r2, [r3, #0]
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2202      	movs	r2, #2
 800ceea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cef6:	2301      	movs	r3, #1
 800cef8:	75fb      	strb	r3, [r7, #23]
      break;
 800cefa:	e007      	b.n	800cf0c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cefc:	7afb      	ldrb	r3, [r7, #11]
 800cefe:	4619      	mov	r1, r3
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7ff fb83 	bl	800c60c <USBH_MSC_BOT_Process>
 800cf06:	4603      	mov	r3, r0
 800cf08:	75fb      	strb	r3, [r7, #23]
      break;
 800cf0a:	bf00      	nop
  }

  return error;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b086      	sub	sp, #24
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	60f8      	str	r0, [r7, #12]
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	603b      	str	r3, [r7, #0]
 800cf22:	460b      	mov	r3, r1
 800cf24:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cf26:	2302      	movs	r3, #2
 800cf28:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d002      	beq.n	800cf44 <USBH_MSC_SCSI_Read+0x2e>
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d047      	beq.n	800cfd2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cf42:	e04e      	b.n	800cfe2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	fb03 f202 	mul.w	r2, r3, r2
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2280      	movs	r2, #128	; 0x80
 800cf5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	220a      	movs	r2, #10
 800cf62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3363      	adds	r3, #99	; 0x63
 800cf6a:	2210      	movs	r2, #16
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f004 f9d4 	bl	801131c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2228      	movs	r2, #40	; 0x28
 800cf78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cf7c:	79fa      	ldrb	r2, [r7, #7]
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cf84:	79ba      	ldrb	r2, [r7, #6]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cf8c:	797a      	ldrb	r2, [r7, #5]
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cf94:	1d3b      	adds	r3, r7, #4
 800cf96:	781a      	ldrb	r2, [r3, #0]
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cf9e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cfa8:	f107 0320 	add.w	r3, r7, #32
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	75fb      	strb	r3, [r7, #23]
      break;
 800cfd0:	e007      	b.n	800cfe2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f7ff fb18 	bl	800c60c <USBH_MSC_BOT_Process>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	75fb      	strb	r3, [r7, #23]
      break;
 800cfe0:	bf00      	nop
  }

  return error;
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d000:	2302      	movs	r3, #2
 800d002:	e029      	b.n	800d058 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	79fa      	ldrb	r2, [r7, #7]
 800d008:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 f81f 	bl	800d060 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f003 fee9 	bl	8010e28 <USBH_LL_Init>

  return USBH_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e009      	b.n	800d086 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	33e0      	adds	r3, #224	; 0xe0
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	2200      	movs	r2, #0
 800d07e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b0f      	cmp	r3, #15
 800d08a:	d9f2      	bls.n	800d072 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e009      	b.n	800d0a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4413      	add	r3, r2
 800d098:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d09c:	2200      	movs	r2, #0
 800d09e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0ac:	d3f1      	bcc.n	800d092 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2240      	movs	r2, #64	; 0x40
 800d0d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d016      	beq.n	800d14a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10e      	bne.n	800d144 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d12c:	1c59      	adds	r1, r3, #1
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	33de      	adds	r3, #222	; 0xde
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]
 800d142:	e004      	b.n	800d14e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d144:	2302      	movs	r3, #2
 800d146:	73fb      	strb	r3, [r7, #15]
 800d148:	e001      	b.n	800d14e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d14a:	2302      	movs	r3, #2
 800d14c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	429a      	cmp	r2, r3
 800d176:	d204      	bcs.n	800d182 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d180:	e001      	b.n	800d186 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d182:	2302      	movs	r3, #2
 800d184:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d186:	7bfb      	ldrb	r3, [r7, #15]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	4608      	mov	r0, r1
 800d19e:	4611      	mov	r1, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	70fb      	strb	r3, [r7, #3]
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	70bb      	strb	r3, [r7, #2]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d1bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1be:	e025      	b.n	800d20c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	221a      	movs	r2, #26
 800d1c4:	fb02 f303 	mul.w	r3, r2, r3
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	3302      	adds	r3, #2
 800d1d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	795b      	ldrb	r3, [r3, #5]
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d002      	beq.n	800d1e2 <USBH_FindInterface+0x4e>
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	2bff      	cmp	r3, #255	; 0xff
 800d1e0:	d111      	bne.n	800d206 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1e6:	78ba      	ldrb	r2, [r7, #2]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d002      	beq.n	800d1f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1ec:	78bb      	ldrb	r3, [r7, #2]
 800d1ee:	2bff      	cmp	r3, #255	; 0xff
 800d1f0:	d109      	bne.n	800d206 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1f6:	787a      	ldrb	r2, [r7, #1]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d002      	beq.n	800d202 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1fc:	787b      	ldrb	r3, [r7, #1]
 800d1fe:	2bff      	cmp	r3, #255	; 0xff
 800d200:	d101      	bne.n	800d206 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	e006      	b.n	800d214 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	3301      	adds	r3, #1
 800d20a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d9d6      	bls.n	800d1c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d212:	23ff      	movs	r3, #255	; 0xff
}
 800d214:	4618      	mov	r0, r3
 800d216:	371c      	adds	r7, #28
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f003 fe43 	bl	8010eb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d22e:	2101      	movs	r1, #1
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f003 ff5c 	bl	80110ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af04      	add	r7, sp, #16
 800d246:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d248:	2302      	movs	r3, #2
 800d24a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d102      	bne.n	800d262 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2203      	movs	r2, #3
 800d260:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b0b      	cmp	r3, #11
 800d26a:	f200 81be 	bhi.w	800d5ea <USBH_Process+0x3aa>
 800d26e:	a201      	add	r2, pc, #4	; (adr r2, 800d274 <USBH_Process+0x34>)
 800d270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d274:	0800d2a5 	.word	0x0800d2a5
 800d278:	0800d2d7 	.word	0x0800d2d7
 800d27c:	0800d33f 	.word	0x0800d33f
 800d280:	0800d585 	.word	0x0800d585
 800d284:	0800d5eb 	.word	0x0800d5eb
 800d288:	0800d3e3 	.word	0x0800d3e3
 800d28c:	0800d52b 	.word	0x0800d52b
 800d290:	0800d419 	.word	0x0800d419
 800d294:	0800d439 	.word	0x0800d439
 800d298:	0800d459 	.word	0x0800d459
 800d29c:	0800d49d 	.word	0x0800d49d
 800d2a0:	0800d56d 	.word	0x0800d56d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 819e 	beq.w	800d5ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d2b8:	20c8      	movs	r0, #200	; 0xc8
 800d2ba:	f003 ff8f 	bl	80111dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f003 fe55 	bl	8010f6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d2d4:	e18b      	b.n	800d5ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d107      	bne.n	800d2f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d2ee:	e18d      	b.n	800d60c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2fa:	d914      	bls.n	800d326 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d302:	3301      	adds	r3, #1
 800d304:	b2da      	uxtb	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d312:	2b03      	cmp	r3, #3
 800d314:	d903      	bls.n	800d31e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	220d      	movs	r2, #13
 800d31a:	701a      	strb	r2, [r3, #0]
      break;
 800d31c:	e176      	b.n	800d60c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	701a      	strb	r2, [r3, #0]
      break;
 800d324:	e172      	b.n	800d60c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d32c:	f103 020a 	add.w	r2, r3, #10
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d336:	200a      	movs	r0, #10
 800d338:	f003 ff50 	bl	80111dc <USBH_Delay>
      break;
 800d33c:	e166      	b.n	800d60c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d005      	beq.n	800d354 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d34e:	2104      	movs	r1, #4
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d354:	2064      	movs	r0, #100	; 0x64
 800d356:	f003 ff41 	bl	80111dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f003 fde0 	bl	8010f20 <USBH_LL_GetSpeed>
 800d360:	4603      	mov	r3, r0
 800d362:	461a      	mov	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2205      	movs	r2, #5
 800d36e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d370:	2100      	movs	r1, #0
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f001 fa29 	bl	800e7ca <USBH_AllocPipe>
 800d378:	4603      	mov	r3, r0
 800d37a:	461a      	mov	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d380:	2180      	movs	r1, #128	; 0x80
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f001 fa21 	bl	800e7ca <USBH_AllocPipe>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7919      	ldrb	r1, [r3, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3a4:	b292      	uxth	r2, r2
 800d3a6:	9202      	str	r2, [sp, #8]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	9201      	str	r2, [sp, #4]
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2280      	movs	r2, #128	; 0x80
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f001 f9da 	bl	800e76c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7959      	ldrb	r1, [r3, #5]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3cc:	b292      	uxth	r2, r2
 800d3ce:	9202      	str	r2, [sp, #8]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	9201      	str	r2, [sp, #4]
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2200      	movs	r2, #0
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 f9c6 	bl	800e76c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d3e0:	e114      	b.n	800d60c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f918 	bl	800d618 <USBH_HandleEnum>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f040 80fe 	bne.w	800d5f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d404:	2b01      	cmp	r3, #1
 800d406:	d103      	bne.n	800d410 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2208      	movs	r2, #8
 800d40c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d40e:	e0f0      	b.n	800d5f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2207      	movs	r2, #7
 800d414:	701a      	strb	r2, [r3, #0]
      break;
 800d416:	e0ec      	b.n	800d5f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 80e9 	beq.w	800d5f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d42a:	2101      	movs	r1, #1
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2208      	movs	r2, #8
 800d434:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d436:	e0de      	b.n	800d5f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d43e:	b29b      	uxth	r3, r3
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fc2c 	bl	800dca0 <USBH_SetCfg>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f040 80d5 	bne.w	800d5fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2209      	movs	r2, #9
 800d454:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d456:	e0d0      	b.n	800d5fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d45e:	f003 0320 	and.w	r3, r3, #32
 800d462:	2b00      	cmp	r3, #0
 800d464:	d016      	beq.n	800d494 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d466:	2101      	movs	r1, #1
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fc3c 	bl	800dce6 <USBH_SetFeature>
 800d46e:	4603      	mov	r3, r0
 800d470:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d103      	bne.n	800d482 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	220a      	movs	r2, #10
 800d47e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d480:	e0bd      	b.n	800d5fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b03      	cmp	r3, #3
 800d488:	f040 80b9 	bne.w	800d5fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	220a      	movs	r2, #10
 800d490:	701a      	strb	r2, [r3, #0]
      break;
 800d492:	e0b4      	b.n	800d5fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	220a      	movs	r2, #10
 800d498:	701a      	strb	r2, [r3, #0]
      break;
 800d49a:	e0b0      	b.n	800d5fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 80ad 	beq.w	800d602 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
 800d4b4:	e016      	b.n	800d4e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d4b6:	7bfa      	ldrb	r2, [r7, #15]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	32de      	adds	r2, #222	; 0xde
 800d4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c0:	791a      	ldrb	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d108      	bne.n	800d4de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d4cc:	7bfa      	ldrb	r2, [r7, #15]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	32de      	adds	r2, #222	; 0xde
 800d4d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d4dc:	e005      	b.n	800d4ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	73fb      	strb	r3, [r7, #15]
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0e5      	beq.n	800d4b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d016      	beq.n	800d522 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	4798      	blx	r3
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2206      	movs	r2, #6
 800d50a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d512:	2103      	movs	r1, #3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d518:	e073      	b.n	800d602 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	220d      	movs	r2, #13
 800d51e:	701a      	strb	r2, [r3, #0]
      break;
 800d520:	e06f      	b.n	800d602 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	220d      	movs	r2, #13
 800d526:	701a      	strb	r2, [r3, #0]
      break;
 800d528:	e06b      	b.n	800d602 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d530:	2b00      	cmp	r3, #0
 800d532:	d017      	beq.n	800d564 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	4798      	blx	r3
 800d540:	4603      	mov	r3, r0
 800d542:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	220b      	movs	r2, #11
 800d550:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d552:	e058      	b.n	800d606 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d154      	bne.n	800d606 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	220d      	movs	r2, #13
 800d560:	701a      	strb	r2, [r3, #0]
      break;
 800d562:	e050      	b.n	800d606 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	220d      	movs	r2, #13
 800d568:	701a      	strb	r2, [r3, #0]
      break;
 800d56a:	e04c      	b.n	800d606 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d572:	2b00      	cmp	r3, #0
 800d574:	d049      	beq.n	800d60a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	4798      	blx	r3
      }
      break;
 800d582:	e042      	b.n	800d60a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff fd67 	bl	800d060 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d009      	beq.n	800d5b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5c0:	2105      	movs	r1, #5
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d107      	bne.n	800d5e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff fe20 	bl	800d220 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d5e0:	e014      	b.n	800d60c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f003 fc66 	bl	8010eb4 <USBH_LL_Start>
      break;
 800d5e8:	e010      	b.n	800d60c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5ea:	bf00      	nop
 800d5ec:	e00e      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d5ee:	bf00      	nop
 800d5f0:	e00c      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d5f2:	bf00      	nop
 800d5f4:	e00a      	b.n	800d60c <USBH_Process+0x3cc>
    break;
 800d5f6:	bf00      	nop
 800d5f8:	e008      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d5fa:	bf00      	nop
 800d5fc:	e006      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d5fe:	bf00      	nop
 800d600:	e004      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d602:	bf00      	nop
 800d604:	e002      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d606:	bf00      	nop
 800d608:	e000      	b.n	800d60c <USBH_Process+0x3cc>
      break;
 800d60a:	bf00      	nop
  }
  return USBH_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop

0800d618 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af04      	add	r7, sp, #16
 800d61e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d620:	2301      	movs	r3, #1
 800d622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d624:	2301      	movs	r3, #1
 800d626:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	785b      	ldrb	r3, [r3, #1]
 800d62c:	2b07      	cmp	r3, #7
 800d62e:	f200 81c1 	bhi.w	800d9b4 <USBH_HandleEnum+0x39c>
 800d632:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <USBH_HandleEnum+0x20>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d659 	.word	0x0800d659
 800d63c:	0800d717 	.word	0x0800d717
 800d640:	0800d781 	.word	0x0800d781
 800d644:	0800d80f 	.word	0x0800d80f
 800d648:	0800d879 	.word	0x0800d879
 800d64c:	0800d8e9 	.word	0x0800d8e9
 800d650:	0800d92f 	.word	0x0800d92f
 800d654:	0800d975 	.word	0x0800d975
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d658:	2108      	movs	r1, #8
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fa50 	bl	800db00 <USBH_Get_DevDesc>
 800d660:	4603      	mov	r3, r0
 800d662:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d664:	7bbb      	ldrb	r3, [r7, #14]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d130      	bne.n	800d6cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7919      	ldrb	r1, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d68e:	b292      	uxth	r2, r2
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	2200      	movs	r2, #0
 800d694:	9201      	str	r2, [sp, #4]
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	4603      	mov	r3, r0
 800d69a:	2280      	movs	r2, #128	; 0x80
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f001 f865 	bl	800e76c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7959      	ldrb	r1, [r3, #5]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6b6:	b292      	uxth	r2, r2
 800d6b8:	9202      	str	r2, [sp, #8]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	9201      	str	r2, [sp, #4]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f001 f851 	bl	800e76c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6ca:	e175      	b.n	800d9b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	f040 8172 	bne.w	800d9b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6da:	3301      	adds	r3, #1
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d903      	bls.n	800d6f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	220d      	movs	r2, #13
 800d6f2:	701a      	strb	r2, [r3, #0]
      break;
 800d6f4:	e160      	b.n	800d9b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	795b      	ldrb	r3, [r3, #5]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f001 f885 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	791b      	ldrb	r3, [r3, #4]
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 f87f 	bl	800e80c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	701a      	strb	r2, [r3, #0]
      break;
 800d714:	e150      	b.n	800d9b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d716:	2112      	movs	r1, #18
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f9f1 	bl	800db00 <USBH_Get_DevDesc>
 800d71e:	4603      	mov	r3, r0
 800d720:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d103      	bne.n	800d730 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2202      	movs	r2, #2
 800d72c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d72e:	e145      	b.n	800d9bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	2b03      	cmp	r3, #3
 800d734:	f040 8142 	bne.w	800d9bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d73e:	3301      	adds	r3, #1
 800d740:	b2da      	uxtb	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d903      	bls.n	800d75a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	220d      	movs	r2, #13
 800d756:	701a      	strb	r2, [r3, #0]
      break;
 800d758:	e130      	b.n	800d9bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	795b      	ldrb	r3, [r3, #5]
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f001 f853 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	791b      	ldrb	r3, [r3, #4]
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f001 f84d 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
      break;
 800d77e:	e11d      	b.n	800d9bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d780:	2101      	movs	r1, #1
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fa68 	bl	800dc58 <USBH_SetAddress>
 800d788:	4603      	mov	r3, r0
 800d78a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d132      	bne.n	800d7f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d792:	2002      	movs	r0, #2
 800d794:	f003 fd22 	bl	80111dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2203      	movs	r2, #3
 800d7a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7919      	ldrb	r1, [r3, #4]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d7ba:	b292      	uxth	r2, r2
 800d7bc:	9202      	str	r2, [sp, #8]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	9201      	str	r2, [sp, #4]
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2280      	movs	r2, #128	; 0x80
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 ffcf 	bl	800e76c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	7959      	ldrb	r1, [r3, #5]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7e2:	b292      	uxth	r2, r2
 800d7e4:	9202      	str	r2, [sp, #8]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	9201      	str	r2, [sp, #4]
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 ffbb 	bl	800e76c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d7f6:	e0e3      	b.n	800d9c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7f8:	7bbb      	ldrb	r3, [r7, #14]
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	f040 80e0 	bne.w	800d9c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	220d      	movs	r2, #13
 800d804:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	705a      	strb	r2, [r3, #1]
      break;
 800d80c:	e0d8      	b.n	800d9c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d80e:	2109      	movs	r1, #9
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f99d 	bl	800db50 <USBH_Get_CfgDesc>
 800d816:	4603      	mov	r3, r0
 800d818:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d103      	bne.n	800d828 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2204      	movs	r2, #4
 800d824:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d826:	e0cd      	b.n	800d9c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	f040 80ca 	bne.w	800d9c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d836:	3301      	adds	r3, #1
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d846:	2b03      	cmp	r3, #3
 800d848:	d903      	bls.n	800d852 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	220d      	movs	r2, #13
 800d84e:	701a      	strb	r2, [r3, #0]
      break;
 800d850:	e0b8      	b.n	800d9c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	795b      	ldrb	r3, [r3, #5]
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 ffd7 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	791b      	ldrb	r3, [r3, #4]
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 ffd1 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
      break;
 800d876:	e0a5      	b.n	800d9c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f965 	bl	800db50 <USBH_Get_CfgDesc>
 800d886:	4603      	mov	r3, r0
 800d888:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d88a:	7bbb      	ldrb	r3, [r7, #14]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d103      	bne.n	800d898 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2205      	movs	r2, #5
 800d894:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d896:	e097      	b.n	800d9c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	f040 8094 	bne.w	800d9c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d903      	bls.n	800d8c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	220d      	movs	r2, #13
 800d8be:	701a      	strb	r2, [r3, #0]
      break;
 800d8c0:	e082      	b.n	800d9c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	795b      	ldrb	r3, [r3, #5]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 ff9f 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	791b      	ldrb	r3, [r3, #4]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 ff99 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
      break;
 800d8e6:	e06f      	b.n	800d9c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d019      	beq.n	800d926 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8fe:	23ff      	movs	r3, #255	; 0xff
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f949 	bl	800db98 <USBH_Get_StringDesc>
 800d906:	4603      	mov	r3, r0
 800d908:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d103      	bne.n	800d918 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2206      	movs	r2, #6
 800d914:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d916:	e059      	b.n	800d9cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d156      	bne.n	800d9cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2206      	movs	r2, #6
 800d922:	705a      	strb	r2, [r3, #1]
      break;
 800d924:	e052      	b.n	800d9cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2206      	movs	r2, #6
 800d92a:	705a      	strb	r2, [r3, #1]
      break;
 800d92c:	e04e      	b.n	800d9cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d934:	2b00      	cmp	r3, #0
 800d936:	d019      	beq.n	800d96c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d944:	23ff      	movs	r3, #255	; 0xff
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f926 	bl	800db98 <USBH_Get_StringDesc>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d950:	7bbb      	ldrb	r3, [r7, #14]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d103      	bne.n	800d95e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2207      	movs	r2, #7
 800d95a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d95c:	e038      	b.n	800d9d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	2b03      	cmp	r3, #3
 800d962:	d135      	bne.n	800d9d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2207      	movs	r2, #7
 800d968:	705a      	strb	r2, [r3, #1]
      break;
 800d96a:	e031      	b.n	800d9d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2207      	movs	r2, #7
 800d970:	705a      	strb	r2, [r3, #1]
      break;
 800d972:	e02d      	b.n	800d9d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d017      	beq.n	800d9ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d98a:	23ff      	movs	r3, #255	; 0xff
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f903 	bl	800db98 <USBH_Get_StringDesc>
 800d992:	4603      	mov	r3, r0
 800d994:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d9a0:	e018      	b.n	800d9d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	2b03      	cmp	r3, #3
 800d9a6:	d115      	bne.n	800d9d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ac:	e012      	b.n	800d9d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d9b2:	e00f      	b.n	800d9d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d9b4:	bf00      	nop
 800d9b6:	e00e      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9b8:	bf00      	nop
 800d9ba:	e00c      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9bc:	bf00      	nop
 800d9be:	e00a      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9c0:	bf00      	nop
 800d9c2:	e008      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9c4:	bf00      	nop
 800d9c6:	e006      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9c8:	bf00      	nop
 800d9ca:	e004      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9cc:	bf00      	nop
 800d9ce:	e002      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9d0:	bf00      	nop
 800d9d2:	e000      	b.n	800d9d6 <USBH_HandleEnum+0x3be>
      break;
 800d9d4:	bf00      	nop
  }
  return Status;
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d9f2:	bf00      	nop
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f804 	bl	800da22 <USBH_HandleSof>
}
 800da1a:	bf00      	nop
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b0b      	cmp	r3, #11
 800da32:	d10a      	bne.n	800da4a <USBH_HandleSof+0x28>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d005      	beq.n	800da4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	4798      	blx	r3
  }
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800da62:	bf00      	nop
}
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800da7e:	bf00      	nop
}
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800da8a:	b480      	push	{r7}
 800da8c:	b083      	sub	sp, #12
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f003 fa06 	bl	8010eea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	791b      	ldrb	r3, [r3, #4]
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fe91 	bl	800e80c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	795b      	ldrb	r3, [r3, #5]
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fe8b 	bl	800e80c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af02      	add	r7, sp, #8
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800db12:	78fb      	ldrb	r3, [r7, #3]
 800db14:	b29b      	uxth	r3, r3
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	4613      	mov	r3, r2
 800db1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db1e:	2100      	movs	r1, #0
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f864 	bl	800dbee <USBH_GetDescriptor>
 800db26:	4603      	mov	r3, r0
 800db28:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10a      	bne.n	800db46 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db3c:	78fa      	ldrb	r2, [r7, #3]
 800db3e:	b292      	uxth	r2, r2
 800db40:	4619      	mov	r1, r3
 800db42:	f000 f918 	bl	800dd76 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db46:	7bfb      	ldrb	r3, [r7, #15]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af02      	add	r7, sp, #8
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	331c      	adds	r3, #28
 800db60:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db62:	887b      	ldrh	r3, [r7, #2]
 800db64:	9300      	str	r3, [sp, #0]
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db6c:	2100      	movs	r1, #0
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f83d 	bl	800dbee <USBH_GetDescriptor>
 800db74:	4603      	mov	r3, r0
 800db76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d107      	bne.n	800db8e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800db7e:	887b      	ldrh	r3, [r7, #2]
 800db80:	461a      	mov	r2, r3
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f987 	bl	800de98 <USBH_ParseCfgDesc>
 800db8a:	4603      	mov	r3, r0
 800db8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af02      	add	r7, sp, #8
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	607a      	str	r2, [r7, #4]
 800dba2:	461a      	mov	r2, r3
 800dba4:	460b      	mov	r3, r1
 800dba6:	72fb      	strb	r3, [r7, #11]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800dbac:	7afb      	ldrb	r3, [r7, #11]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dbb4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dbbc:	893b      	ldrh	r3, [r7, #8]
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 f812 	bl	800dbee <USBH_GetDescriptor>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d107      	bne.n	800dbe4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbda:	893a      	ldrh	r2, [r7, #8]
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fb24 	bl	800e22c <USBH_ParseStringDesc>
  }

  return status;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	607b      	str	r3, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	72fb      	strb	r3, [r7, #11]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	789b      	ldrb	r3, [r3, #2]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d11c      	bne.n	800dc42 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dc08:	7afb      	ldrb	r3, [r7, #11]
 800dc0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2206      	movs	r2, #6
 800dc18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	893a      	ldrh	r2, [r7, #8]
 800dc1e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dc20:	893b      	ldrh	r3, [r7, #8]
 800dc22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc2a:	d104      	bne.n	800dc36 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f240 4209 	movw	r2, #1033	; 0x409
 800dc32:	829a      	strh	r2, [r3, #20]
 800dc34:	e002      	b.n	800dc3c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	8b3a      	ldrh	r2, [r7, #24]
 800dc40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc42:	8b3b      	ldrh	r3, [r7, #24]
 800dc44:	461a      	mov	r2, r3
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 fb3d 	bl	800e2c8 <USBH_CtlReq>
 800dc4e:	4603      	mov	r3, r0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d10f      	bne.n	800dc8c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2205      	movs	r2, #5
 800dc76:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc78:	78fb      	ldrb	r3, [r7, #3]
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fb19 	bl	800e2c8 <USBH_CtlReq>
 800dc96:	4603      	mov	r3, r0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	789b      	ldrb	r3, [r3, #2]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d10e      	bne.n	800dcd2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2209      	movs	r2, #9
 800dcbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	887a      	ldrh	r2, [r7, #2]
 800dcc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 faf6 	bl	800e2c8 <USBH_CtlReq>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	789b      	ldrb	r3, [r3, #2]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d10f      	bne.n	800dd1a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2203      	movs	r2, #3
 800dd04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fad2 	bl	800e2c8 <USBH_CtlReq>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b082      	sub	sp, #8
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	789b      	ldrb	r3, [r3, #2]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d10f      	bne.n	800dd62 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2202      	movs	r2, #2
 800dd46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd54:	78fb      	ldrb	r3, [r7, #3]
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800dd62:	2200      	movs	r2, #0
 800dd64:	2100      	movs	r1, #0
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 faae 	bl	800e2c8 <USBH_CtlReq>
 800dd6c:	4603      	mov	r3, r0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	60f8      	str	r0, [r7, #12]
 800dd7e:	60b9      	str	r1, [r7, #8]
 800dd80:	4613      	mov	r3, r2
 800dd82:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	781a      	ldrb	r2, [r3, #0]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	785a      	ldrb	r2, [r3, #1]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	3302      	adds	r3, #2
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	3303      	adds	r3, #3
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	021b      	lsls	r3, r3, #8
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	791a      	ldrb	r2, [r3, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	795a      	ldrb	r2, [r3, #5]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	799a      	ldrb	r2, [r3, #6]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	79da      	ldrb	r2, [r3, #7]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	79db      	ldrb	r3, [r3, #7]
 800ddd4:	2b20      	cmp	r3, #32
 800ddd6:	dc11      	bgt.n	800ddfc <USBH_ParseDevDesc+0x86>
 800ddd8:	2b08      	cmp	r3, #8
 800ddda:	db16      	blt.n	800de0a <USBH_ParseDevDesc+0x94>
 800dddc:	3b08      	subs	r3, #8
 800ddde:	2201      	movs	r2, #1
 800dde0:	fa02 f303 	lsl.w	r3, r2, r3
 800dde4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800dde8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bf14      	ite	ne
 800ddf0:	2301      	movne	r3, #1
 800ddf2:	2300      	moveq	r3, #0
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <USBH_ParseDevDesc+0x8a>
 800ddfa:	e006      	b.n	800de0a <USBH_ParseDevDesc+0x94>
 800ddfc:	2b40      	cmp	r3, #64	; 0x40
 800ddfe:	d104      	bne.n	800de0a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	79da      	ldrb	r2, [r3, #7]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	71da      	strb	r2, [r3, #7]
      break;
 800de08:	e003      	b.n	800de12 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2240      	movs	r2, #64	; 0x40
 800de0e:	71da      	strb	r2, [r3, #7]
      break;
 800de10:	bf00      	nop
  }

  if (length > 8U)
 800de12:	88fb      	ldrh	r3, [r7, #6]
 800de14:	2b08      	cmp	r3, #8
 800de16:	d939      	bls.n	800de8c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	3308      	adds	r3, #8
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	b29a      	uxth	r2, r3
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	3309      	adds	r3, #9
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	021b      	lsls	r3, r3, #8
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	4313      	orrs	r3, r2
 800de2e:	b29a      	uxth	r2, r3
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	330a      	adds	r3, #10
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	330b      	adds	r3, #11
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	b29b      	uxth	r3, r3
 800de44:	021b      	lsls	r3, r3, #8
 800de46:	b29b      	uxth	r3, r3
 800de48:	4313      	orrs	r3, r2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	330c      	adds	r3, #12
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	b29a      	uxth	r2, r3
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	330d      	adds	r3, #13
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	021b      	lsls	r3, r3, #8
 800de62:	b29b      	uxth	r3, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	b29a      	uxth	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	7b9a      	ldrb	r2, [r3, #14]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	7bda      	ldrb	r2, [r3, #15]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	7c1a      	ldrb	r2, [r3, #16]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	7c5a      	ldrb	r2, [r3, #17]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	745a      	strb	r2, [r3, #17]
  }
}
 800de8c:	bf00      	nop
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08c      	sub	sp, #48	; 0x30
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	4613      	mov	r3, r2
 800dea4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800deac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800debe:	2300      	movs	r3, #0
 800dec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	781a      	ldrb	r2, [r3, #0]
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	785a      	ldrb	r2, [r3, #1]
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	3302      	adds	r3, #2
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	b29a      	uxth	r2, r3
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	3303      	adds	r3, #3
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	021b      	lsls	r3, r3, #8
 800deea:	b29b      	uxth	r3, r3
 800deec:	4313      	orrs	r3, r2
 800deee:	b29b      	uxth	r3, r3
 800def0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800def4:	bf28      	it	cs
 800def6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800defa:	b29a      	uxth	r2, r3
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	791a      	ldrb	r2, [r3, #4]
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	795a      	ldrb	r2, [r3, #5]
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	799a      	ldrb	r2, [r3, #6]
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	79da      	ldrb	r2, [r3, #7]
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	7a1a      	ldrb	r2, [r3, #8]
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b09      	cmp	r3, #9
 800df2e:	d002      	beq.n	800df36 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	2209      	movs	r2, #9
 800df34:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800df36:	88fb      	ldrh	r3, [r7, #6]
 800df38:	2b09      	cmp	r3, #9
 800df3a:	f240 809d 	bls.w	800e078 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800df3e:	2309      	movs	r3, #9
 800df40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800df42:	2300      	movs	r3, #0
 800df44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df46:	e081      	b.n	800e04c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df48:	f107 0316 	add.w	r3, r7, #22
 800df4c:	4619      	mov	r1, r3
 800df4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df50:	f000 f99f 	bl	800e292 <USBH_GetNextDesc>
 800df54:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800df56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df58:	785b      	ldrb	r3, [r3, #1]
 800df5a:	2b04      	cmp	r3, #4
 800df5c:	d176      	bne.n	800e04c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	2b09      	cmp	r3, #9
 800df64:	d002      	beq.n	800df6c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	2209      	movs	r2, #9
 800df6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800df6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df70:	221a      	movs	r2, #26
 800df72:	fb02 f303 	mul.w	r3, r2, r3
 800df76:	3308      	adds	r3, #8
 800df78:	6a3a      	ldr	r2, [r7, #32]
 800df7a:	4413      	add	r3, r2
 800df7c:	3302      	adds	r3, #2
 800df7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800df80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df82:	69f8      	ldr	r0, [r7, #28]
 800df84:	f000 f87e 	bl	800e084 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800df8e:	2300      	movs	r3, #0
 800df90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df92:	e043      	b.n	800e01c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df94:	f107 0316 	add.w	r3, r7, #22
 800df98:	4619      	mov	r1, r3
 800df9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df9c:	f000 f979 	bl	800e292 <USBH_GetNextDesc>
 800dfa0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	785b      	ldrb	r3, [r3, #1]
 800dfa6:	2b05      	cmp	r3, #5
 800dfa8:	d138      	bne.n	800e01c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	795b      	ldrb	r3, [r3, #5]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d10f      	bne.n	800dfd2 <USBH_ParseCfgDesc+0x13a>
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	799b      	ldrb	r3, [r3, #6]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d10b      	bne.n	800dfd2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	79db      	ldrb	r3, [r3, #7]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10f      	bne.n	800dfe2 <USBH_ParseCfgDesc+0x14a>
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	2b09      	cmp	r3, #9
 800dfc8:	d00b      	beq.n	800dfe2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800dfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfcc:	2209      	movs	r2, #9
 800dfce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dfd0:	e007      	b.n	800dfe2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b07      	cmp	r3, #7
 800dfd8:	d004      	beq.n	800dfe4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	2207      	movs	r2, #7
 800dfde:	701a      	strb	r2, [r3, #0]
 800dfe0:	e000      	b.n	800dfe4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dfe2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dfec:	3201      	adds	r2, #1
 800dfee:	00d2      	lsls	r2, r2, #3
 800dff0:	211a      	movs	r1, #26
 800dff2:	fb01 f303 	mul.w	r3, r1, r3
 800dff6:	4413      	add	r3, r2
 800dff8:	3308      	adds	r3, #8
 800dffa:	6a3a      	ldr	r2, [r7, #32]
 800dffc:	4413      	add	r3, r2
 800dffe:	3304      	adds	r3, #4
 800e000:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e004:	69b9      	ldr	r1, [r7, #24]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f000 f86b 	bl	800e0e2 <USBH_ParseEPDesc>
 800e00c:	4603      	mov	r3, r0
 800e00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e016:	3301      	adds	r3, #1
 800e018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	791b      	ldrb	r3, [r3, #4]
 800e020:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e024:	429a      	cmp	r2, r3
 800e026:	d204      	bcs.n	800e032 <USBH_ParseCfgDesc+0x19a>
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	885a      	ldrh	r2, [r3, #2]
 800e02c:	8afb      	ldrh	r3, [r7, #22]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d8b0      	bhi.n	800df94 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	791b      	ldrb	r3, [r3, #4]
 800e036:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d201      	bcs.n	800e042 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e03e:	2303      	movs	r3, #3
 800e040:	e01c      	b.n	800e07c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e046:	3301      	adds	r3, #1
 800e048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e050:	2b01      	cmp	r3, #1
 800e052:	d805      	bhi.n	800e060 <USBH_ParseCfgDesc+0x1c8>
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	885a      	ldrh	r2, [r3, #2]
 800e058:	8afb      	ldrh	r3, [r7, #22]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	f63f af74 	bhi.w	800df48 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	791b      	ldrb	r3, [r3, #4]
 800e064:	2b02      	cmp	r3, #2
 800e066:	bf28      	it	cs
 800e068:	2302      	movcs	r3, #2
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e070:	429a      	cmp	r2, r3
 800e072:	d201      	bcs.n	800e078 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e074:	2303      	movs	r3, #3
 800e076:	e001      	b.n	800e07c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3730      	adds	r7, #48	; 0x30
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781a      	ldrb	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	785a      	ldrb	r2, [r3, #1]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	789a      	ldrb	r2, [r3, #2]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	78da      	ldrb	r2, [r3, #3]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	791a      	ldrb	r2, [r3, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	795a      	ldrb	r2, [r3, #5]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	799a      	ldrb	r2, [r3, #6]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	79da      	ldrb	r2, [r3, #7]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	7a1a      	ldrb	r2, [r3, #8]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	721a      	strb	r2, [r3, #8]
}
 800e0d6:	bf00      	nop
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b087      	sub	sp, #28
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	60f8      	str	r0, [r7, #12]
 800e0ea:	60b9      	str	r1, [r7, #8]
 800e0ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	785a      	ldrb	r2, [r3, #1]
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	789a      	ldrb	r2, [r3, #2]
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	78da      	ldrb	r2, [r3, #3]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3304      	adds	r3, #4
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3305      	adds	r3, #5
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	b29b      	uxth	r3, r3
 800e122:	021b      	lsls	r3, r3, #8
 800e124:	b29b      	uxth	r3, r3
 800e126:	4313      	orrs	r3, r2
 800e128:	b29a      	uxth	r2, r3
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	799a      	ldrb	r2, [r3, #6]
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	889b      	ldrh	r3, [r3, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d102      	bne.n	800e144 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e13e:	2303      	movs	r3, #3
 800e140:	75fb      	strb	r3, [r7, #23]
 800e142:	e033      	b.n	800e1ac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	889b      	ldrh	r3, [r3, #4]
 800e148:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e14c:	f023 0307 	bic.w	r3, r3, #7
 800e150:	b29a      	uxth	r2, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	889b      	ldrh	r3, [r3, #4]
 800e15a:	b21a      	sxth	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3304      	adds	r3, #4
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	b299      	uxth	r1, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3305      	adds	r3, #5
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	b29b      	uxth	r3, r3
 800e170:	430b      	orrs	r3, r1
 800e172:	b29b      	uxth	r3, r3
 800e174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d110      	bne.n	800e19e <USBH_ParseEPDesc+0xbc>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3304      	adds	r3, #4
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	b299      	uxth	r1, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3305      	adds	r3, #5
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	021b      	lsls	r3, r3, #8
 800e18e:	b29b      	uxth	r3, r3
 800e190:	430b      	orrs	r3, r1
 800e192:	b29b      	uxth	r3, r3
 800e194:	b21b      	sxth	r3, r3
 800e196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e19a:	b21b      	sxth	r3, r3
 800e19c:	e001      	b.n	800e1a2 <USBH_ParseEPDesc+0xc0>
 800e19e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d116      	bne.n	800e1e4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	78db      	ldrb	r3, [r3, #3]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d005      	beq.n	800e1ce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	78db      	ldrb	r3, [r3, #3]
 800e1c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d127      	bne.n	800e21e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	799b      	ldrb	r3, [r3, #6]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <USBH_ParseEPDesc+0xfc>
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	799b      	ldrb	r3, [r3, #6]
 800e1da:	2b10      	cmp	r3, #16
 800e1dc:	d91f      	bls.n	800e21e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	75fb      	strb	r3, [r7, #23]
 800e1e2:	e01c      	b.n	800e21e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	78db      	ldrb	r3, [r3, #3]
 800e1e8:	f003 0303 	and.w	r3, r3, #3
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d10a      	bne.n	800e206 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	799b      	ldrb	r3, [r3, #6]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d003      	beq.n	800e200 <USBH_ParseEPDesc+0x11e>
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	799b      	ldrb	r3, [r3, #6]
 800e1fc:	2b10      	cmp	r3, #16
 800e1fe:	d90e      	bls.n	800e21e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e200:	2303      	movs	r3, #3
 800e202:	75fb      	strb	r3, [r7, #23]
 800e204:	e00b      	b.n	800e21e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	78db      	ldrb	r3, [r3, #3]
 800e20a:	f003 0303 	and.w	r3, r3, #3
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d105      	bne.n	800e21e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	799b      	ldrb	r3, [r3, #6]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d101      	bne.n	800e21e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e21a:	2303      	movs	r3, #3
 800e21c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e220:	4618      	mov	r0, r3
 800e222:	371c      	adds	r7, #28
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b087      	sub	sp, #28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	4613      	mov	r3, r2
 800e238:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b03      	cmp	r3, #3
 800e242:	d120      	bne.n	800e286 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	1e9a      	subs	r2, r3, #2
 800e24a:	88fb      	ldrh	r3, [r7, #6]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	bf28      	it	cs
 800e250:	4613      	movcs	r3, r2
 800e252:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3302      	adds	r3, #2
 800e258:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e25a:	2300      	movs	r3, #0
 800e25c:	82fb      	strh	r3, [r7, #22]
 800e25e:	e00b      	b.n	800e278 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e260:	8afb      	ldrh	r3, [r7, #22]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	781a      	ldrb	r2, [r3, #0]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	3301      	adds	r3, #1
 800e270:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e272:	8afb      	ldrh	r3, [r7, #22]
 800e274:	3302      	adds	r3, #2
 800e276:	82fb      	strh	r3, [r7, #22]
 800e278:	8afa      	ldrh	r2, [r7, #22]
 800e27a:	8abb      	ldrh	r3, [r7, #20]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d3ef      	bcc.n	800e260 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	701a      	strb	r2, [r3, #0]
  }
}
 800e286:	bf00      	nop
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e292:	b480      	push	{r7}
 800e294:	b085      	sub	sp, #20
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	881a      	ldrh	r2, [r3, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	4413      	add	r3, r2
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	789b      	ldrb	r3, [r3, #2]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d002      	beq.n	800e2e8 <USBH_CtlReq+0x20>
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d00f      	beq.n	800e306 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e2e6:	e027      	b.n	800e338 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	88fa      	ldrh	r2, [r7, #6]
 800e2f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2202      	movs	r2, #2
 800e2fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e300:	2301      	movs	r3, #1
 800e302:	75fb      	strb	r3, [r7, #23]
      break;
 800e304:	e018      	b.n	800e338 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 f81c 	bl	800e344 <USBH_HandleControl>
 800e30c:	4603      	mov	r3, r0
 800e30e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e310:	7dfb      	ldrb	r3, [r7, #23]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <USBH_CtlReq+0x54>
 800e316:	7dfb      	ldrb	r3, [r7, #23]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d106      	bne.n	800e32a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2201      	movs	r2, #1
 800e320:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	761a      	strb	r2, [r3, #24]
      break;
 800e328:	e005      	b.n	800e336 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d102      	bne.n	800e336 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2201      	movs	r2, #1
 800e334:	709a      	strb	r2, [r3, #2]
      break;
 800e336:	bf00      	nop
  }
  return status;
 800e338:	7dfb      	ldrb	r3, [r7, #23]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af02      	add	r7, sp, #8
 800e34a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e34c:	2301      	movs	r3, #1
 800e34e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e350:	2300      	movs	r3, #0
 800e352:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	7e1b      	ldrb	r3, [r3, #24]
 800e358:	3b01      	subs	r3, #1
 800e35a:	2b0a      	cmp	r3, #10
 800e35c:	f200 8156 	bhi.w	800e60c <USBH_HandleControl+0x2c8>
 800e360:	a201      	add	r2, pc, #4	; (adr r2, 800e368 <USBH_HandleControl+0x24>)
 800e362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e366:	bf00      	nop
 800e368:	0800e395 	.word	0x0800e395
 800e36c:	0800e3af 	.word	0x0800e3af
 800e370:	0800e419 	.word	0x0800e419
 800e374:	0800e43f 	.word	0x0800e43f
 800e378:	0800e477 	.word	0x0800e477
 800e37c:	0800e4a1 	.word	0x0800e4a1
 800e380:	0800e4f3 	.word	0x0800e4f3
 800e384:	0800e515 	.word	0x0800e515
 800e388:	0800e551 	.word	0x0800e551
 800e38c:	0800e577 	.word	0x0800e577
 800e390:	0800e5b5 	.word	0x0800e5b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f103 0110 	add.w	r1, r3, #16
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	795b      	ldrb	r3, [r3, #5]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f943 	bl	800e62c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	761a      	strb	r2, [r3, #24]
      break;
 800e3ac:	e139      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	795b      	ldrb	r3, [r3, #5]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f002 fe87 	bl	80110c8 <USBH_LL_GetURBState>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d11e      	bne.n	800e402 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7c1b      	ldrb	r3, [r3, #16]
 800e3c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e3cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	8adb      	ldrh	r3, [r3, #22]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00a      	beq.n	800e3ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e3d6:	7b7b      	ldrb	r3, [r7, #13]
 800e3d8:	2b80      	cmp	r3, #128	; 0x80
 800e3da:	d103      	bne.n	800e3e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3e2:	e115      	b.n	800e610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	761a      	strb	r2, [r3, #24]
      break;
 800e3ea:	e111      	b.n	800e610 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e3ec:	7b7b      	ldrb	r3, [r7, #13]
 800e3ee:	2b80      	cmp	r3, #128	; 0x80
 800e3f0:	d103      	bne.n	800e3fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2209      	movs	r2, #9
 800e3f6:	761a      	strb	r2, [r3, #24]
      break;
 800e3f8:	e10a      	b.n	800e610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2207      	movs	r2, #7
 800e3fe:	761a      	strb	r2, [r3, #24]
      break;
 800e400:	e106      	b.n	800e610 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b04      	cmp	r3, #4
 800e406:	d003      	beq.n	800e410 <USBH_HandleControl+0xcc>
 800e408:	7bbb      	ldrb	r3, [r7, #14]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	f040 8100 	bne.w	800e610 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	220b      	movs	r2, #11
 800e414:	761a      	strb	r2, [r3, #24]
      break;
 800e416:	e0fb      	b.n	800e610 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6899      	ldr	r1, [r3, #8]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	899a      	ldrh	r2, [r3, #12]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	791b      	ldrb	r3, [r3, #4]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f93a 	bl	800e6aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2204      	movs	r2, #4
 800e43a:	761a      	strb	r2, [r3, #24]
      break;
 800e43c:	e0f1      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	791b      	ldrb	r3, [r3, #4]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f002 fe3f 	bl	80110c8 <USBH_LL_GetURBState>
 800e44a:	4603      	mov	r3, r0
 800e44c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d102      	bne.n	800e45a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2209      	movs	r2, #9
 800e458:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e45a:	7bbb      	ldrb	r3, [r7, #14]
 800e45c:	2b05      	cmp	r3, #5
 800e45e:	d102      	bne.n	800e466 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e460:	2303      	movs	r3, #3
 800e462:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e464:	e0d6      	b.n	800e614 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	2b04      	cmp	r3, #4
 800e46a:	f040 80d3 	bne.w	800e614 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	220b      	movs	r2, #11
 800e472:	761a      	strb	r2, [r3, #24]
      break;
 800e474:	e0ce      	b.n	800e614 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6899      	ldr	r1, [r3, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	899a      	ldrh	r2, [r3, #12]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	795b      	ldrb	r3, [r3, #5]
 800e482:	2001      	movs	r0, #1
 800e484:	9000      	str	r0, [sp, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f8ea 	bl	800e660 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2206      	movs	r2, #6
 800e49c:	761a      	strb	r2, [r3, #24]
      break;
 800e49e:	e0c0      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	795b      	ldrb	r3, [r3, #5]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f002 fe0e 	bl	80110c8 <USBH_LL_GetURBState>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d103      	bne.n	800e4be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2207      	movs	r2, #7
 800e4ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e4bc:	e0ac      	b.n	800e618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e4be:	7bbb      	ldrb	r3, [r7, #14]
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	d105      	bne.n	800e4d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	220c      	movs	r2, #12
 800e4c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e4ce:	e0a3      	b.n	800e618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d103      	bne.n	800e4de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2205      	movs	r2, #5
 800e4da:	761a      	strb	r2, [r3, #24]
      break;
 800e4dc:	e09c      	b.n	800e618 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	f040 8099 	bne.w	800e618 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	220b      	movs	r2, #11
 800e4ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e4f0:	e092      	b.n	800e618 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	791b      	ldrb	r3, [r3, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f8d5 	bl	800e6aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e506:	b29a      	uxth	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2208      	movs	r2, #8
 800e510:	761a      	strb	r2, [r3, #24]

      break;
 800e512:	e086      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	791b      	ldrb	r3, [r3, #4]
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f002 fdd4 	bl	80110c8 <USBH_LL_GetURBState>
 800e520:	4603      	mov	r3, r0
 800e522:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d105      	bne.n	800e536 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	220d      	movs	r2, #13
 800e52e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e534:	e072      	b.n	800e61c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e536:	7bbb      	ldrb	r3, [r7, #14]
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d103      	bne.n	800e544 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	220b      	movs	r2, #11
 800e540:	761a      	strb	r2, [r3, #24]
      break;
 800e542:	e06b      	b.n	800e61c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	2b05      	cmp	r3, #5
 800e548:	d168      	bne.n	800e61c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e54a:	2303      	movs	r3, #3
 800e54c:	73fb      	strb	r3, [r7, #15]
      break;
 800e54e:	e065      	b.n	800e61c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	795b      	ldrb	r3, [r3, #5]
 800e554:	2201      	movs	r2, #1
 800e556:	9200      	str	r2, [sp, #0]
 800e558:	2200      	movs	r2, #0
 800e55a:	2100      	movs	r1, #0
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f87f 	bl	800e660 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	220a      	movs	r2, #10
 800e572:	761a      	strb	r2, [r3, #24]
      break;
 800e574:	e055      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	795b      	ldrb	r3, [r3, #5]
 800e57a:	4619      	mov	r1, r3
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f002 fda3 	bl	80110c8 <USBH_LL_GetURBState>
 800e582:	4603      	mov	r3, r0
 800e584:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d105      	bne.n	800e598 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	220d      	movs	r2, #13
 800e594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e596:	e043      	b.n	800e620 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d103      	bne.n	800e5a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2209      	movs	r2, #9
 800e5a2:	761a      	strb	r2, [r3, #24]
      break;
 800e5a4:	e03c      	b.n	800e620 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	2b04      	cmp	r3, #4
 800e5aa:	d139      	bne.n	800e620 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	220b      	movs	r2, #11
 800e5b0:	761a      	strb	r2, [r3, #24]
      break;
 800e5b2:	e035      	b.n	800e620 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7e5b      	ldrb	r3, [r3, #25]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	765a      	strb	r2, [r3, #25]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	7e5b      	ldrb	r3, [r3, #25]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d806      	bhi.n	800e5d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e5d4:	e025      	b.n	800e622 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5dc:	2106      	movs	r1, #6
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	795b      	ldrb	r3, [r3, #5]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f90c 	bl	800e80c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	791b      	ldrb	r3, [r3, #4]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f906 	bl	800e80c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e606:	2302      	movs	r3, #2
 800e608:	73fb      	strb	r3, [r7, #15]
      break;
 800e60a:	e00a      	b.n	800e622 <USBH_HandleControl+0x2de>

    default:
      break;
 800e60c:	bf00      	nop
 800e60e:	e008      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e610:	bf00      	nop
 800e612:	e006      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e614:	bf00      	nop
 800e616:	e004      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e618:	bf00      	nop
 800e61a:	e002      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e61c:	bf00      	nop
 800e61e:	e000      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e620:	bf00      	nop
  }

  return status;
 800e622:	7bfb      	ldrb	r3, [r7, #15]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af04      	add	r7, sp, #16
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e63a:	79f9      	ldrb	r1, [r7, #7]
 800e63c:	2300      	movs	r3, #0
 800e63e:	9303      	str	r3, [sp, #12]
 800e640:	2308      	movs	r3, #8
 800e642:	9302      	str	r3, [sp, #8]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	2300      	movs	r3, #0
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	2300      	movs	r3, #0
 800e64e:	2200      	movs	r2, #0
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f002 fd08 	bl	8011066 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b088      	sub	sp, #32
 800e664:	af04      	add	r7, sp, #16
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	4611      	mov	r1, r2
 800e66c:	461a      	mov	r2, r3
 800e66e:	460b      	mov	r3, r1
 800e670:	80fb      	strh	r3, [r7, #6]
 800e672:	4613      	mov	r3, r2
 800e674:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e684:	7979      	ldrb	r1, [r7, #5]
 800e686:	7e3b      	ldrb	r3, [r7, #24]
 800e688:	9303      	str	r3, [sp, #12]
 800e68a:	88fb      	ldrh	r3, [r7, #6]
 800e68c:	9302      	str	r3, [sp, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	9301      	str	r3, [sp, #4]
 800e692:	2301      	movs	r3, #1
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	2300      	movs	r3, #0
 800e698:	2200      	movs	r2, #0
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f002 fce3 	bl	8011066 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b088      	sub	sp, #32
 800e6ae:	af04      	add	r7, sp, #16
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	80fb      	strh	r3, [r7, #6]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e6c0:	7979      	ldrb	r1, [r7, #5]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9303      	str	r3, [sp, #12]
 800e6c6:	88fb      	ldrh	r3, [r7, #6]
 800e6c8:	9302      	str	r3, [sp, #8]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f002 fcc5 	bl	8011066 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e6dc:	2300      	movs	r3, #0

}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b088      	sub	sp, #32
 800e6ea:	af04      	add	r7, sp, #16
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	80fb      	strh	r3, [r7, #6]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e706:	2300      	movs	r3, #0
 800e708:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e70a:	7979      	ldrb	r1, [r7, #5]
 800e70c:	7e3b      	ldrb	r3, [r7, #24]
 800e70e:	9303      	str	r3, [sp, #12]
 800e710:	88fb      	ldrh	r3, [r7, #6]
 800e712:	9302      	str	r3, [sp, #8]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	2301      	movs	r3, #1
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	2302      	movs	r3, #2
 800e71e:	2200      	movs	r2, #0
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f002 fca0 	bl	8011066 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af04      	add	r7, sp, #16
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	4611      	mov	r1, r2
 800e73c:	461a      	mov	r2, r3
 800e73e:	460b      	mov	r3, r1
 800e740:	80fb      	strh	r3, [r7, #6]
 800e742:	4613      	mov	r3, r2
 800e744:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e746:	7979      	ldrb	r1, [r7, #5]
 800e748:	2300      	movs	r3, #0
 800e74a:	9303      	str	r3, [sp, #12]
 800e74c:	88fb      	ldrh	r3, [r7, #6]
 800e74e:	9302      	str	r3, [sp, #8]
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	2301      	movs	r3, #1
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	2302      	movs	r3, #2
 800e75a:	2201      	movs	r2, #1
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f002 fc82 	bl	8011066 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af04      	add	r7, sp, #16
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	4608      	mov	r0, r1
 800e776:	4611      	mov	r1, r2
 800e778:	461a      	mov	r2, r3
 800e77a:	4603      	mov	r3, r0
 800e77c:	70fb      	strb	r3, [r7, #3]
 800e77e:	460b      	mov	r3, r1
 800e780:	70bb      	strb	r3, [r7, #2]
 800e782:	4613      	mov	r3, r2
 800e784:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e786:	7878      	ldrb	r0, [r7, #1]
 800e788:	78ba      	ldrb	r2, [r7, #2]
 800e78a:	78f9      	ldrb	r1, [r7, #3]
 800e78c:	8b3b      	ldrh	r3, [r7, #24]
 800e78e:	9302      	str	r3, [sp, #8]
 800e790:	7d3b      	ldrb	r3, [r7, #20]
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	7c3b      	ldrb	r3, [r7, #16]
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	4603      	mov	r3, r0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f002 fc15 	bl	8010fca <USBH_LL_OpenPipe>

  return USBH_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f002 fc34 	bl	8011028 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f836 	bl	800e848 <USBH_GetFreePipe>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e7e0:	89fb      	ldrh	r3, [r7, #14]
 800e7e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d00a      	beq.n	800e800 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	89fb      	ldrh	r3, [r7, #14]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e7f6:	6879      	ldr	r1, [r7, #4]
 800e7f8:	33e0      	adds	r3, #224	; 0xe0
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	440b      	add	r3, r1
 800e7fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e800:	89fb      	ldrh	r3, [r7, #14]
 800e802:	b2db      	uxtb	r3, r3
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e818:	78fb      	ldrb	r3, [r7, #3]
 800e81a:	2b0f      	cmp	r3, #15
 800e81c:	d80d      	bhi.n	800e83a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	33e0      	adds	r3, #224	; 0xe0
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e830:	6879      	ldr	r1, [r7, #4]
 800e832:	33e0      	adds	r3, #224	; 0xe0
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	440b      	add	r3, r1
 800e838:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e854:	2300      	movs	r3, #0
 800e856:	73fb      	strb	r3, [r7, #15]
 800e858:	e00f      	b.n	800e87a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	33e0      	adds	r3, #224	; 0xe0
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d102      	bne.n	800e874 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	b29b      	uxth	r3, r3
 800e872:	e007      	b.n	800e884 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	3301      	adds	r3, #1
 800e878:	73fb      	strb	r3, [r7, #15]
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	2b0f      	cmp	r3, #15
 800e87e:	d9ec      	bls.n	800e85a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e880:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	4a08      	ldr	r2, [pc, #32]	; (800e8c0 <disk_status+0x30>)
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	79fa      	ldrb	r2, [r7, #7]
 800e8a8:	4905      	ldr	r1, [pc, #20]	; (800e8c0 <disk_status+0x30>)
 800e8aa:	440a      	add	r2, r1
 800e8ac:	7a12      	ldrb	r2, [r2, #8]
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	4798      	blx	r3
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	20003850 	.word	0x20003850

0800e8c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	4a0d      	ldr	r2, [pc, #52]	; (800e90c <disk_initialize+0x48>)
 800e8d6:	5cd3      	ldrb	r3, [r2, r3]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d111      	bne.n	800e900 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	4a0b      	ldr	r2, [pc, #44]	; (800e90c <disk_initialize+0x48>)
 800e8e0:	2101      	movs	r1, #1
 800e8e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e8e4:	79fb      	ldrb	r3, [r7, #7]
 800e8e6:	4a09      	ldr	r2, [pc, #36]	; (800e90c <disk_initialize+0x48>)
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	79fa      	ldrb	r2, [r7, #7]
 800e8f2:	4906      	ldr	r1, [pc, #24]	; (800e90c <disk_initialize+0x48>)
 800e8f4:	440a      	add	r2, r1
 800e8f6:	7a12      	ldrb	r2, [r2, #8]
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	4798      	blx	r3
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e900:	7bfb      	ldrb	r3, [r7, #15]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20003850 	.word	0x20003850

0800e910 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b087      	sub	sp, #28
 800e914:	af00      	add	r7, sp, #0
 800e916:	60b9      	str	r1, [r7, #8]
 800e918:	607a      	str	r2, [r7, #4]
 800e91a:	603b      	str	r3, [r7, #0]
 800e91c:	4603      	mov	r3, r0
 800e91e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e920:	7bfb      	ldrb	r3, [r7, #15]
 800e922:	4a0a      	ldr	r2, [pc, #40]	; (800e94c <disk_read+0x3c>)
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	689c      	ldr	r4, [r3, #8]
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	4a07      	ldr	r2, [pc, #28]	; (800e94c <disk_read+0x3c>)
 800e930:	4413      	add	r3, r2
 800e932:	7a18      	ldrb	r0, [r3, #8]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	68b9      	ldr	r1, [r7, #8]
 800e93a:	47a0      	blx	r4
 800e93c:	4603      	mov	r3, r0
 800e93e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
}
 800e942:	4618      	mov	r0, r3
 800e944:	371c      	adds	r7, #28
 800e946:	46bd      	mov	sp, r7
 800e948:	bd90      	pop	{r4, r7, pc}
 800e94a:	bf00      	nop
 800e94c:	20003850 	.word	0x20003850

0800e950 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e950:	b590      	push	{r4, r7, lr}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	60b9      	str	r1, [r7, #8]
 800e958:	607a      	str	r2, [r7, #4]
 800e95a:	603b      	str	r3, [r7, #0]
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	4a0a      	ldr	r2, [pc, #40]	; (800e98c <disk_write+0x3c>)
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4413      	add	r3, r2
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	68dc      	ldr	r4, [r3, #12]
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
 800e96e:	4a07      	ldr	r2, [pc, #28]	; (800e98c <disk_write+0x3c>)
 800e970:	4413      	add	r3, r2
 800e972:	7a18      	ldrb	r0, [r3, #8]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	68b9      	ldr	r1, [r7, #8]
 800e97a:	47a0      	blx	r4
 800e97c:	4603      	mov	r3, r0
 800e97e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e980:	7dfb      	ldrb	r3, [r7, #23]
}
 800e982:	4618      	mov	r0, r3
 800e984:	371c      	adds	r7, #28
 800e986:	46bd      	mov	sp, r7
 800e988:	bd90      	pop	{r4, r7, pc}
 800e98a:	bf00      	nop
 800e98c:	20003850 	.word	0x20003850

0800e990 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	4603      	mov	r3, r0
 800e998:	603a      	str	r2, [r7, #0]
 800e99a:	71fb      	strb	r3, [r7, #7]
 800e99c:	460b      	mov	r3, r1
 800e99e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	4a09      	ldr	r2, [pc, #36]	; (800e9c8 <disk_ioctl+0x38>)
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	79fa      	ldrb	r2, [r7, #7]
 800e9ae:	4906      	ldr	r1, [pc, #24]	; (800e9c8 <disk_ioctl+0x38>)
 800e9b0:	440a      	add	r2, r1
 800e9b2:	7a10      	ldrb	r0, [r2, #8]
 800e9b4:	79b9      	ldrb	r1, [r7, #6]
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	4798      	blx	r3
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	20003850 	.word	0x20003850

0800e9cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
 800e9de:	021b      	lsls	r3, r3, #8
 800e9e0:	b21a      	sxth	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	b21b      	sxth	r3, r3
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	b21b      	sxth	r3, r3
 800e9ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e9ee:	89fb      	ldrh	r3, [r7, #14]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3714      	adds	r7, #20
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3303      	adds	r3, #3
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	021b      	lsls	r3, r3, #8
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	3202      	adds	r2, #2
 800ea14:	7812      	ldrb	r2, [r2, #0]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	021b      	lsls	r3, r3, #8
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	3201      	adds	r2, #1
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	021b      	lsls	r3, r3, #8
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	7812      	ldrb	r2, [r2, #0]
 800ea30:	4313      	orrs	r3, r2
 800ea32:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea34:	68fb      	ldr	r3, [r7, #12]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	887a      	ldrh	r2, [r7, #2]
 800ea56:	b2d2      	uxtb	r2, r2
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	887b      	ldrh	r3, [r7, #2]
 800ea5c:	0a1b      	lsrs	r3, r3, #8
 800ea5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	887a      	ldrh	r2, [r7, #2]
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	1c5a      	adds	r2, r3, #1
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	b2d2      	uxtb	r2, r2
 800ea8c:	701a      	strb	r2, [r3, #0]
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	0a1b      	lsrs	r3, r3, #8
 800ea92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	607a      	str	r2, [r7, #4]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	b2d2      	uxtb	r2, r2
 800ea9e:	701a      	strb	r2, [r3, #0]
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	b2d2      	uxtb	r2, r2
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	0a1b      	lsrs	r3, r3, #8
 800eab6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	607a      	str	r2, [r7, #4]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ead0:	b480      	push	{r7}
 800ead2:	b087      	sub	sp, #28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00d      	beq.n	800eb06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	1c53      	adds	r3, r2, #1
 800eaee:	613b      	str	r3, [r7, #16]
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	1c59      	adds	r1, r3, #1
 800eaf4:	6179      	str	r1, [r7, #20]
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1f1      	bne.n	800eaea <mem_cpy+0x1a>
	}
}
 800eb06:	bf00      	nop
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb12:	b480      	push	{r7}
 800eb14:	b087      	sub	sp, #28
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	1c5a      	adds	r2, r3, #1
 800eb26:	617a      	str	r2, [r7, #20]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	b2d2      	uxtb	r2, r2
 800eb2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3b01      	subs	r3, #1
 800eb32:	607b      	str	r3, [r7, #4]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1f3      	bne.n	800eb22 <mem_set+0x10>
}
 800eb3a:	bf00      	nop
 800eb3c:	bf00      	nop
 800eb3e:	371c      	adds	r7, #28
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb48:	b480      	push	{r7}
 800eb4a:	b089      	sub	sp, #36	; 0x24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	61fa      	str	r2, [r7, #28]
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	61ba      	str	r2, [r7, #24]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	1acb      	subs	r3, r1, r3
 800eb74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	607b      	str	r3, [r7, #4]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <mem_cmp+0x40>
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d0eb      	beq.n	800eb60 <mem_cmp+0x18>

	return r;
 800eb88:	697b      	ldr	r3, [r7, #20]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3724      	adds	r7, #36	; 0x24
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eb96:	b480      	push	{r7}
 800eb98:	b083      	sub	sp, #12
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eba0:	e002      	b.n	800eba8 <chk_chr+0x12>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	3301      	adds	r3, #1
 800eba6:	607b      	str	r3, [r7, #4]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <chk_chr+0x26>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d1f2      	bne.n	800eba2 <chk_chr+0xc>
	return *str;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	781b      	ldrb	r3, [r3, #0]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60bb      	str	r3, [r7, #8]
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	60fb      	str	r3, [r7, #12]
 800ebde:	e029      	b.n	800ec34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ebe0:	4a27      	ldr	r2, [pc, #156]	; (800ec80 <chk_lock+0xb4>)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	011b      	lsls	r3, r3, #4
 800ebe6:	4413      	add	r3, r2
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d01d      	beq.n	800ec2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ebee:	4a24      	ldr	r2, [pc, #144]	; (800ec80 <chk_lock+0xb4>)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	011b      	lsls	r3, r3, #4
 800ebf4:	4413      	add	r3, r2
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d116      	bne.n	800ec2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec00:	4a1f      	ldr	r2, [pc, #124]	; (800ec80 <chk_lock+0xb4>)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	011b      	lsls	r3, r3, #4
 800ec06:	4413      	add	r3, r2
 800ec08:	3304      	adds	r3, #4
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d10c      	bne.n	800ec2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec14:	4a1a      	ldr	r2, [pc, #104]	; (800ec80 <chk_lock+0xb4>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	011b      	lsls	r3, r3, #4
 800ec1a:	4413      	add	r3, r2
 800ec1c:	3308      	adds	r3, #8
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d102      	bne.n	800ec2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec28:	e007      	b.n	800ec3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3301      	adds	r3, #1
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d9d2      	bls.n	800ebe0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d109      	bne.n	800ec54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <chk_lock+0x80>
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d101      	bne.n	800ec50 <chk_lock+0x84>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	e010      	b.n	800ec72 <chk_lock+0xa6>
 800ec50:	2312      	movs	r3, #18
 800ec52:	e00e      	b.n	800ec72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d108      	bne.n	800ec6c <chk_lock+0xa0>
 800ec5a:	4a09      	ldr	r2, [pc, #36]	; (800ec80 <chk_lock+0xb4>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	011b      	lsls	r3, r3, #4
 800ec60:	4413      	add	r3, r2
 800ec62:	330c      	adds	r3, #12
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec6a:	d101      	bne.n	800ec70 <chk_lock+0xa4>
 800ec6c:	2310      	movs	r3, #16
 800ec6e:	e000      	b.n	800ec72 <chk_lock+0xa6>
 800ec70:	2300      	movs	r3, #0
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3714      	adds	r7, #20
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	20003830 	.word	0x20003830

0800ec84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	607b      	str	r3, [r7, #4]
 800ec8e:	e002      	b.n	800ec96 <enq_lock+0x12>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3301      	adds	r3, #1
 800ec94:	607b      	str	r3, [r7, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d806      	bhi.n	800ecaa <enq_lock+0x26>
 800ec9c:	4a09      	ldr	r2, [pc, #36]	; (800ecc4 <enq_lock+0x40>)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4413      	add	r3, r2
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1f2      	bne.n	800ec90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	bf14      	ite	ne
 800ecb0:	2301      	movne	r3, #1
 800ecb2:	2300      	moveq	r3, #0
 800ecb4:	b2db      	uxtb	r3, r3
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	20003830 	.word	0x20003830

0800ecc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
 800ecd6:	e01f      	b.n	800ed18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ecd8:	4a41      	ldr	r2, [pc, #260]	; (800ede0 <inc_lock+0x118>)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	4413      	add	r3, r2
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d113      	bne.n	800ed12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ecea:	4a3d      	ldr	r2, [pc, #244]	; (800ede0 <inc_lock+0x118>)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	011b      	lsls	r3, r3, #4
 800ecf0:	4413      	add	r3, r2
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d109      	bne.n	800ed12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ecfe:	4a38      	ldr	r2, [pc, #224]	; (800ede0 <inc_lock+0x118>)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	011b      	lsls	r3, r3, #4
 800ed04:	4413      	add	r3, r2
 800ed06:	3308      	adds	r3, #8
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d006      	beq.n	800ed20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	3301      	adds	r3, #1
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d9dc      	bls.n	800ecd8 <inc_lock+0x10>
 800ed1e:	e000      	b.n	800ed22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ed20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d132      	bne.n	800ed8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	e002      	b.n	800ed34 <inc_lock+0x6c>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3301      	adds	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d806      	bhi.n	800ed48 <inc_lock+0x80>
 800ed3a:	4a29      	ldr	r2, [pc, #164]	; (800ede0 <inc_lock+0x118>)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	011b      	lsls	r3, r3, #4
 800ed40:	4413      	add	r3, r2
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1f2      	bne.n	800ed2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d101      	bne.n	800ed52 <inc_lock+0x8a>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e040      	b.n	800edd4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	4922      	ldr	r1, [pc, #136]	; (800ede0 <inc_lock+0x118>)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	011b      	lsls	r3, r3, #4
 800ed5c:	440b      	add	r3, r1
 800ed5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	689a      	ldr	r2, [r3, #8]
 800ed64:	491e      	ldr	r1, [pc, #120]	; (800ede0 <inc_lock+0x118>)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	011b      	lsls	r3, r3, #4
 800ed6a:	440b      	add	r3, r1
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	695a      	ldr	r2, [r3, #20]
 800ed74:	491a      	ldr	r1, [pc, #104]	; (800ede0 <inc_lock+0x118>)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	011b      	lsls	r3, r3, #4
 800ed7a:	440b      	add	r3, r1
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ed80:	4a17      	ldr	r2, [pc, #92]	; (800ede0 <inc_lock+0x118>)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	011b      	lsls	r3, r3, #4
 800ed86:	4413      	add	r3, r2
 800ed88:	330c      	adds	r3, #12
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d009      	beq.n	800eda8 <inc_lock+0xe0>
 800ed94:	4a12      	ldr	r2, [pc, #72]	; (800ede0 <inc_lock+0x118>)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	011b      	lsls	r3, r3, #4
 800ed9a:	4413      	add	r3, r2
 800ed9c:	330c      	adds	r3, #12
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <inc_lock+0xe0>
 800eda4:	2300      	movs	r3, #0
 800eda6:	e015      	b.n	800edd4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d108      	bne.n	800edc0 <inc_lock+0xf8>
 800edae:	4a0c      	ldr	r2, [pc, #48]	; (800ede0 <inc_lock+0x118>)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	011b      	lsls	r3, r3, #4
 800edb4:	4413      	add	r3, r2
 800edb6:	330c      	adds	r3, #12
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	3301      	adds	r3, #1
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	e001      	b.n	800edc4 <inc_lock+0xfc>
 800edc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edc4:	4906      	ldr	r1, [pc, #24]	; (800ede0 <inc_lock+0x118>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	440b      	add	r3, r1
 800edcc:	330c      	adds	r3, #12
 800edce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	20003830 	.word	0x20003830

0800ede4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3b01      	subs	r3, #1
 800edf0:	607b      	str	r3, [r7, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d825      	bhi.n	800ee44 <dec_lock+0x60>
		n = Files[i].ctr;
 800edf8:	4a17      	ldr	r2, [pc, #92]	; (800ee58 <dec_lock+0x74>)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	011b      	lsls	r3, r3, #4
 800edfe:	4413      	add	r3, r2
 800ee00:	330c      	adds	r3, #12
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee06:	89fb      	ldrh	r3, [r7, #14]
 800ee08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee0c:	d101      	bne.n	800ee12 <dec_lock+0x2e>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee12:	89fb      	ldrh	r3, [r7, #14]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d002      	beq.n	800ee1e <dec_lock+0x3a>
 800ee18:	89fb      	ldrh	r3, [r7, #14]
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ee1e:	4a0e      	ldr	r2, [pc, #56]	; (800ee58 <dec_lock+0x74>)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	4413      	add	r3, r2
 800ee26:	330c      	adds	r3, #12
 800ee28:	89fa      	ldrh	r2, [r7, #14]
 800ee2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ee2c:	89fb      	ldrh	r3, [r7, #14]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d105      	bne.n	800ee3e <dec_lock+0x5a>
 800ee32:	4a09      	ldr	r2, [pc, #36]	; (800ee58 <dec_lock+0x74>)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	011b      	lsls	r3, r3, #4
 800ee38:	4413      	add	r3, r2
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	737b      	strb	r3, [r7, #13]
 800ee42:	e001      	b.n	800ee48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ee44:	2302      	movs	r3, #2
 800ee46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ee48:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	20003830 	.word	0x20003830

0800ee5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee64:	2300      	movs	r3, #0
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	e010      	b.n	800ee8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee6a:	4a0d      	ldr	r2, [pc, #52]	; (800eea0 <clear_lock+0x44>)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	4413      	add	r3, r2
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d105      	bne.n	800ee86 <clear_lock+0x2a>
 800ee7a:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <clear_lock+0x44>)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	4413      	add	r3, r2
 800ee82:	2200      	movs	r2, #0
 800ee84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d9eb      	bls.n	800ee6a <clear_lock+0xe>
	}
}
 800ee92:	bf00      	nop
 800ee94:	bf00      	nop
 800ee96:	3714      	adds	r7, #20
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr
 800eea0:	20003830 	.word	0x20003830

0800eea4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	78db      	ldrb	r3, [r3, #3]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d034      	beq.n	800ef22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	7858      	ldrb	r0, [r3, #1]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eec8:	2301      	movs	r3, #1
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	f7ff fd40 	bl	800e950 <disk_write>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <sync_window+0x38>
			res = FR_DISK_ERR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	73fb      	strb	r3, [r7, #15]
 800eeda:	e022      	b.n	800ef22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	697a      	ldr	r2, [r7, #20]
 800eee8:	1ad2      	subs	r2, r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d217      	bcs.n	800ef22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	789b      	ldrb	r3, [r3, #2]
 800eef6:	613b      	str	r3, [r7, #16]
 800eef8:	e010      	b.n	800ef1c <sync_window+0x78>
					wsect += fs->fsize;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	699b      	ldr	r3, [r3, #24]
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4413      	add	r3, r2
 800ef02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	7858      	ldrb	r0, [r3, #1]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef0e:	2301      	movs	r3, #1
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	f7ff fd1d 	bl	800e950 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	613b      	str	r3, [r7, #16]
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d8eb      	bhi.n	800eefa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d01b      	beq.n	800ef7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff ffad 	bl	800eea4 <sync_window>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d113      	bne.n	800ef7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7858      	ldrb	r0, [r3, #1]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef5e:	2301      	movs	r3, #1
 800ef60:	683a      	ldr	r2, [r7, #0]
 800ef62:	f7ff fcd5 	bl	800e910 <disk_read>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
	...

0800ef88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ff87 	bl	800eea4 <sync_window>
 800ef96:	4603      	mov	r3, r0
 800ef98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d158      	bne.n	800f052 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	d148      	bne.n	800f03a <sync_fs+0xb2>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	791b      	ldrb	r3, [r3, #4]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d144      	bne.n	800f03a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3330      	adds	r3, #48	; 0x30
 800efb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efb8:	2100      	movs	r1, #0
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fda9 	bl	800eb12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3330      	adds	r3, #48	; 0x30
 800efc4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800efc8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff fd38 	bl	800ea42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3330      	adds	r3, #48	; 0x30
 800efd6:	4921      	ldr	r1, [pc, #132]	; (800f05c <sync_fs+0xd4>)
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff fd4d 	bl	800ea78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3330      	adds	r3, #48	; 0x30
 800efe2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800efe6:	491e      	ldr	r1, [pc, #120]	; (800f060 <sync_fs+0xd8>)
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fd45 	bl	800ea78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	3330      	adds	r3, #48	; 0x30
 800eff2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7ff fd3b 	bl	800ea78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3330      	adds	r3, #48	; 0x30
 800f006:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	4619      	mov	r1, r3
 800f010:	4610      	mov	r0, r2
 800f012:	f7ff fd31 	bl	800ea78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	1c5a      	adds	r2, r3, #1
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7858      	ldrb	r0, [r3, #1]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f02e:	2301      	movs	r3, #1
 800f030:	f7ff fc8e 	bl	800e950 <disk_write>
			fs->fsi_flag = 0;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	785b      	ldrb	r3, [r3, #1]
 800f03e:	2200      	movs	r2, #0
 800f040:	2100      	movs	r1, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fca4 	bl	800e990 <disk_ioctl>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <sync_fs+0xca>
 800f04e:	2301      	movs	r3, #1
 800f050:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f052:	7bfb      	ldrb	r3, [r7, #15]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	41615252 	.word	0x41615252
 800f060:	61417272 	.word	0x61417272

0800f064 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	3b02      	subs	r3, #2
 800f072:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	3b02      	subs	r3, #2
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d301      	bcc.n	800f084 <clust2sect+0x20>
 800f080:	2300      	movs	r3, #0
 800f082:	e008      	b.n	800f096 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	895b      	ldrh	r3, [r3, #10]
 800f088:	461a      	mov	r2, r3
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	fb03 f202 	mul.w	r2, r3, r2
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f094:	4413      	add	r3, r2
}
 800f096:	4618      	mov	r0, r3
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b086      	sub	sp, #24
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d904      	bls.n	800f0c2 <get_fat+0x20>
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d302      	bcc.n	800f0c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	617b      	str	r3, [r7, #20]
 800f0c6:	e08f      	b.n	800f1e8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d062      	beq.n	800f19c <get_fat+0xfa>
 800f0d6:	2b03      	cmp	r3, #3
 800f0d8:	dc7c      	bgt.n	800f1d4 <get_fat+0x132>
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d002      	beq.n	800f0e4 <get_fat+0x42>
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d042      	beq.n	800f168 <get_fat+0xc6>
 800f0e2:	e077      	b.n	800f1d4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	085b      	lsrs	r3, r3, #1
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	6a1a      	ldr	r2, [r3, #32]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	0a5b      	lsrs	r3, r3, #9
 800f0fa:	4413      	add	r3, r2
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6938      	ldr	r0, [r7, #16]
 800f100:	f7ff ff14 	bl	800ef2c <move_window>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d167      	bne.n	800f1da <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	60fa      	str	r2, [r7, #12]
 800f110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f114:	693a      	ldr	r2, [r7, #16]
 800f116:	4413      	add	r3, r2
 800f118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f11c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	6a1a      	ldr	r2, [r3, #32]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	0a5b      	lsrs	r3, r3, #9
 800f126:	4413      	add	r3, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	6938      	ldr	r0, [r7, #16]
 800f12c:	f7ff fefe 	bl	800ef2c <move_window>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d153      	bne.n	800f1de <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	4413      	add	r3, r2
 800f140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f144:	021b      	lsls	r3, r3, #8
 800f146:	461a      	mov	r2, r3
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	f003 0301 	and.w	r3, r3, #1
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <get_fat+0xbc>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	091b      	lsrs	r3, r3, #4
 800f15c:	e002      	b.n	800f164 <get_fat+0xc2>
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f164:	617b      	str	r3, [r7, #20]
			break;
 800f166:	e03f      	b.n	800f1e8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	6a1a      	ldr	r2, [r3, #32]
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	0a1b      	lsrs	r3, r3, #8
 800f170:	4413      	add	r3, r2
 800f172:	4619      	mov	r1, r3
 800f174:	6938      	ldr	r0, [r7, #16]
 800f176:	f7ff fed9 	bl	800ef2c <move_window>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d130      	bne.n	800f1e2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f18e:	4413      	add	r3, r2
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fc1b 	bl	800e9cc <ld_word>
 800f196:	4603      	mov	r3, r0
 800f198:	617b      	str	r3, [r7, #20]
			break;
 800f19a:	e025      	b.n	800f1e8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	6a1a      	ldr	r2, [r3, #32]
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	09db      	lsrs	r3, r3, #7
 800f1a4:	4413      	add	r3, r2
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	6938      	ldr	r0, [r7, #16]
 800f1aa:	f7ff febf 	bl	800ef2c <move_window>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d118      	bne.n	800f1e6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f1c2:	4413      	add	r3, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff fc19 	bl	800e9fc <ld_dword>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f1d0:	617b      	str	r3, [r7, #20]
			break;
 800f1d2:	e009      	b.n	800f1e8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	617b      	str	r3, [r7, #20]
 800f1d8:	e006      	b.n	800f1e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1da:	bf00      	nop
 800f1dc:	e004      	b.n	800f1e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1de:	bf00      	nop
 800f1e0:	e002      	b.n	800f1e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1e2:	bf00      	nop
 800f1e4:	e000      	b.n	800f1e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1e6:	bf00      	nop
		}
	}

	return val;
 800f1e8:	697b      	ldr	r3, [r7, #20]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f1f2:	b590      	push	{r4, r7, lr}
 800f1f4:	b089      	sub	sp, #36	; 0x24
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	60f8      	str	r0, [r7, #12]
 800f1fa:	60b9      	str	r1, [r7, #8]
 800f1fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f1fe:	2302      	movs	r3, #2
 800f200:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b01      	cmp	r3, #1
 800f206:	f240 80d2 	bls.w	800f3ae <put_fat+0x1bc>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	429a      	cmp	r2, r3
 800f212:	f080 80cc 	bcs.w	800f3ae <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	f000 8096 	beq.w	800f34c <put_fat+0x15a>
 800f220:	2b03      	cmp	r3, #3
 800f222:	f300 80cd 	bgt.w	800f3c0 <put_fat+0x1ce>
 800f226:	2b01      	cmp	r3, #1
 800f228:	d002      	beq.n	800f230 <put_fat+0x3e>
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d06e      	beq.n	800f30c <put_fat+0x11a>
 800f22e:	e0c7      	b.n	800f3c0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	61bb      	str	r3, [r7, #24]
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	085b      	lsrs	r3, r3, #1
 800f238:	69ba      	ldr	r2, [r7, #24]
 800f23a:	4413      	add	r3, r2
 800f23c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6a1a      	ldr	r2, [r3, #32]
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	0a5b      	lsrs	r3, r3, #9
 800f246:	4413      	add	r3, r2
 800f248:	4619      	mov	r1, r3
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fe6e 	bl	800ef2c <move_window>
 800f250:	4603      	mov	r3, r0
 800f252:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f254:	7ffb      	ldrb	r3, [r7, #31]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f040 80ab 	bne.w	800f3b2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	1c59      	adds	r1, r3, #1
 800f266:	61b9      	str	r1, [r7, #24]
 800f268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f26c:	4413      	add	r3, r2
 800f26e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f003 0301 	and.w	r3, r3, #1
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00d      	beq.n	800f296 <put_fat+0xa4>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	b25b      	sxtb	r3, r3
 800f280:	f003 030f 	and.w	r3, r3, #15
 800f284:	b25a      	sxtb	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	011b      	lsls	r3, r3, #4
 800f28c:	b25b      	sxtb	r3, r3
 800f28e:	4313      	orrs	r3, r2
 800f290:	b25b      	sxtb	r3, r3
 800f292:	b2db      	uxtb	r3, r3
 800f294:	e001      	b.n	800f29a <put_fat+0xa8>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	697a      	ldr	r2, [r7, #20]
 800f29c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6a1a      	ldr	r2, [r3, #32]
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	0a5b      	lsrs	r3, r3, #9
 800f2ac:	4413      	add	r3, r2
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fe3b 	bl	800ef2c <move_window>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2ba:	7ffb      	ldrb	r3, [r7, #31]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d17a      	bne.n	800f3b6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2cc:	4413      	add	r3, r2
 800f2ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d003      	beq.n	800f2e2 <put_fat+0xf0>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	091b      	lsrs	r3, r3, #4
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	e00e      	b.n	800f300 <put_fat+0x10e>
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	b25b      	sxtb	r3, r3
 800f2e8:	f023 030f 	bic.w	r3, r3, #15
 800f2ec:	b25a      	sxtb	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	0a1b      	lsrs	r3, r3, #8
 800f2f2:	b25b      	sxtb	r3, r3
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	b25b      	sxtb	r3, r3
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2201      	movs	r2, #1
 800f308:	70da      	strb	r2, [r3, #3]
			break;
 800f30a:	e059      	b.n	800f3c0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6a1a      	ldr	r2, [r3, #32]
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	0a1b      	lsrs	r3, r3, #8
 800f314:	4413      	add	r3, r2
 800f316:	4619      	mov	r1, r3
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f7ff fe07 	bl	800ef2c <move_window>
 800f31e:	4603      	mov	r3, r0
 800f320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d148      	bne.n	800f3ba <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f336:	4413      	add	r3, r2
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	b292      	uxth	r2, r2
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff fb7f 	bl	800ea42 <st_word>
			fs->wflag = 1;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2201      	movs	r2, #1
 800f348:	70da      	strb	r2, [r3, #3]
			break;
 800f34a:	e039      	b.n	800f3c0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6a1a      	ldr	r2, [r3, #32]
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	09db      	lsrs	r3, r3, #7
 800f354:	4413      	add	r3, r2
 800f356:	4619      	mov	r1, r3
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f7ff fde7 	bl	800ef2c <move_window>
 800f35e:	4603      	mov	r3, r0
 800f360:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d12a      	bne.n	800f3be <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f37c:	4413      	add	r3, r2
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fb3c 	bl	800e9fc <ld_dword>
 800f384:	4603      	mov	r3, r0
 800f386:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f38a:	4323      	orrs	r3, r4
 800f38c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f39c:	4413      	add	r3, r2
 800f39e:	6879      	ldr	r1, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fb69 	bl	800ea78 <st_dword>
			fs->wflag = 1;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	70da      	strb	r2, [r3, #3]
			break;
 800f3ac:	e008      	b.n	800f3c0 <put_fat+0x1ce>
		}
	}
 800f3ae:	bf00      	nop
 800f3b0:	e006      	b.n	800f3c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3b2:	bf00      	nop
 800f3b4:	e004      	b.n	800f3c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3b6:	bf00      	nop
 800f3b8:	e002      	b.n	800f3c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3ba:	bf00      	nop
 800f3bc:	e000      	b.n	800f3c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3be:	bf00      	nop
	return res;
 800f3c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3724      	adds	r7, #36	; 0x24
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd90      	pop	{r4, r7, pc}

0800f3ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b088      	sub	sp, #32
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	60f8      	str	r0, [r7, #12]
 800f3d2:	60b9      	str	r1, [r7, #8]
 800f3d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d904      	bls.n	800f3f0 <remove_chain+0x26>
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d301      	bcc.n	800f3f4 <remove_chain+0x2a>
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	e04b      	b.n	800f48c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f3fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3fe:	6879      	ldr	r1, [r7, #4]
 800f400:	69b8      	ldr	r0, [r7, #24]
 800f402:	f7ff fef6 	bl	800f1f2 <put_fat>
 800f406:	4603      	mov	r3, r0
 800f408:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f40a:	7ffb      	ldrb	r3, [r7, #31]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <remove_chain+0x4a>
 800f410:	7ffb      	ldrb	r3, [r7, #31]
 800f412:	e03b      	b.n	800f48c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f414:	68b9      	ldr	r1, [r7, #8]
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f7ff fe43 	bl	800f0a2 <get_fat>
 800f41c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d031      	beq.n	800f488 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d101      	bne.n	800f42e <remove_chain+0x64>
 800f42a:	2302      	movs	r3, #2
 800f42c:	e02e      	b.n	800f48c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f434:	d101      	bne.n	800f43a <remove_chain+0x70>
 800f436:	2301      	movs	r3, #1
 800f438:	e028      	b.n	800f48c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f43a:	2200      	movs	r2, #0
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	69b8      	ldr	r0, [r7, #24]
 800f440:	f7ff fed7 	bl	800f1f2 <put_fat>
 800f444:	4603      	mov	r3, r0
 800f446:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f448:	7ffb      	ldrb	r3, [r7, #31]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <remove_chain+0x88>
 800f44e:	7ffb      	ldrb	r3, [r7, #31]
 800f450:	e01c      	b.n	800f48c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	691a      	ldr	r2, [r3, #16]
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	3b02      	subs	r3, #2
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d20b      	bcs.n	800f478 <remove_chain+0xae>
			fs->free_clst++;
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	791b      	ldrb	r3, [r3, #4]
 800f46e:	f043 0301 	orr.w	r3, r3, #1
 800f472:	b2da      	uxtb	r2, r3
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	429a      	cmp	r2, r3
 800f484:	d3c6      	bcc.n	800f414 <remove_chain+0x4a>
 800f486:	e000      	b.n	800f48a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f488:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3720      	adds	r7, #32
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10d      	bne.n	800f4c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <create_chain+0x2c>
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d31b      	bcc.n	800f4f8 <create_chain+0x64>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	61bb      	str	r3, [r7, #24]
 800f4c4:	e018      	b.n	800f4f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff fdea 	bl	800f0a2 <get_fat>
 800f4ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d801      	bhi.n	800f4da <create_chain+0x46>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e070      	b.n	800f5bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4e0:	d101      	bne.n	800f4e6 <create_chain+0x52>
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	e06a      	b.n	800f5bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	695b      	ldr	r3, [r3, #20]
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d201      	bcs.n	800f4f4 <create_chain+0x60>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	e063      	b.n	800f5bc <create_chain+0x128>
		scl = clst;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	3301      	adds	r3, #1
 800f500:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	695b      	ldr	r3, [r3, #20]
 800f506:	69fa      	ldr	r2, [r7, #28]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d307      	bcc.n	800f51c <create_chain+0x88>
				ncl = 2;
 800f50c:	2302      	movs	r3, #2
 800f50e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	429a      	cmp	r2, r3
 800f516:	d901      	bls.n	800f51c <create_chain+0x88>
 800f518:	2300      	movs	r3, #0
 800f51a:	e04f      	b.n	800f5bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f51c:	69f9      	ldr	r1, [r7, #28]
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7ff fdbf 	bl	800f0a2 <get_fat>
 800f524:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00e      	beq.n	800f54a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d003      	beq.n	800f53a <create_chain+0xa6>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f538:	d101      	bne.n	800f53e <create_chain+0xaa>
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	e03e      	b.n	800f5bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f53e:	69fa      	ldr	r2, [r7, #28]
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	429a      	cmp	r2, r3
 800f544:	d1da      	bne.n	800f4fc <create_chain+0x68>
 800f546:	2300      	movs	r3, #0
 800f548:	e038      	b.n	800f5bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f54a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f550:	69f9      	ldr	r1, [r7, #28]
 800f552:	6938      	ldr	r0, [r7, #16]
 800f554:	f7ff fe4d 	bl	800f1f2 <put_fat>
 800f558:	4603      	mov	r3, r0
 800f55a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <create_chain+0xe2>
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d006      	beq.n	800f576 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f568:	69fa      	ldr	r2, [r7, #28]
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6938      	ldr	r0, [r7, #16]
 800f56e:	f7ff fe40 	bl	800f1f2 <put_fat>
 800f572:	4603      	mov	r3, r0
 800f574:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f576:	7dfb      	ldrb	r3, [r7, #23]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d116      	bne.n	800f5aa <create_chain+0x116>
		fs->last_clst = ncl;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	69fa      	ldr	r2, [r7, #28]
 800f580:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	691a      	ldr	r2, [r3, #16]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	3b02      	subs	r3, #2
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d804      	bhi.n	800f59a <create_chain+0x106>
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	1e5a      	subs	r2, r3, #1
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	791b      	ldrb	r3, [r3, #4]
 800f59e:	f043 0301 	orr.w	r3, r3, #1
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	711a      	strb	r2, [r3, #4]
 800f5a8:	e007      	b.n	800f5ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d102      	bne.n	800f5b6 <create_chain+0x122>
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5b4:	e000      	b.n	800f5b8 <create_chain+0x124>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f5ba:	69fb      	ldr	r3, [r7, #28]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3720      	adds	r7, #32
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5da:	d204      	bcs.n	800f5e6 <dir_sdi+0x22>
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	f003 031f 	and.w	r3, r3, #31
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	e063      	b.n	800f6b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d106      	bne.n	800f60a <dir_sdi+0x46>
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b02      	cmp	r3, #2
 800f602:	d902      	bls.n	800f60a <dir_sdi+0x46>
		clst = fs->dirbase;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f608:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d10c      	bne.n	800f62a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	095b      	lsrs	r3, r3, #5
 800f614:	693a      	ldr	r2, [r7, #16]
 800f616:	8912      	ldrh	r2, [r2, #8]
 800f618:	4293      	cmp	r3, r2
 800f61a:	d301      	bcc.n	800f620 <dir_sdi+0x5c>
 800f61c:	2302      	movs	r3, #2
 800f61e:	e048      	b.n	800f6b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	61da      	str	r2, [r3, #28]
 800f628:	e029      	b.n	800f67e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	895b      	ldrh	r3, [r3, #10]
 800f62e:	025b      	lsls	r3, r3, #9
 800f630:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f632:	e019      	b.n	800f668 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6979      	ldr	r1, [r7, #20]
 800f638:	4618      	mov	r0, r3
 800f63a:	f7ff fd32 	bl	800f0a2 <get_fat>
 800f63e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f646:	d101      	bne.n	800f64c <dir_sdi+0x88>
 800f648:	2301      	movs	r3, #1
 800f64a:	e032      	b.n	800f6b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d904      	bls.n	800f65c <dir_sdi+0x98>
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d301      	bcc.n	800f660 <dir_sdi+0x9c>
 800f65c:	2302      	movs	r3, #2
 800f65e:	e028      	b.n	800f6b2 <dir_sdi+0xee>
			ofs -= csz;
 800f660:	683a      	ldr	r2, [r7, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f668:	683a      	ldr	r2, [r7, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d2e1      	bcs.n	800f634 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f670:	6979      	ldr	r1, [r7, #20]
 800f672:	6938      	ldr	r0, [r7, #16]
 800f674:	f7ff fcf6 	bl	800f064 <clust2sect>
 800f678:	4602      	mov	r2, r0
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	69db      	ldr	r3, [r3, #28]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d101      	bne.n	800f690 <dir_sdi+0xcc>
 800f68c:	2302      	movs	r3, #2
 800f68e:	e010      	b.n	800f6b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	69da      	ldr	r2, [r3, #28]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	0a5b      	lsrs	r3, r3, #9
 800f698:	441a      	add	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6aa:	441a      	add	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b086      	sub	sp, #24
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695b      	ldr	r3, [r3, #20]
 800f6ce:	3320      	adds	r3, #32
 800f6d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	69db      	ldr	r3, [r3, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d003      	beq.n	800f6e2 <dir_next+0x28>
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6e0:	d301      	bcc.n	800f6e6 <dir_next+0x2c>
 800f6e2:	2304      	movs	r3, #4
 800f6e4:	e0aa      	b.n	800f83c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f040 8098 	bne.w	800f822 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	69db      	ldr	r3, [r3, #28]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	699b      	ldr	r3, [r3, #24]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d10b      	bne.n	800f71c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	095b      	lsrs	r3, r3, #5
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	8912      	ldrh	r2, [r2, #8]
 800f70c:	4293      	cmp	r3, r2
 800f70e:	f0c0 8088 	bcc.w	800f822 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	61da      	str	r2, [r3, #28]
 800f718:	2304      	movs	r3, #4
 800f71a:	e08f      	b.n	800f83c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	0a5b      	lsrs	r3, r3, #9
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	8952      	ldrh	r2, [r2, #10]
 800f724:	3a01      	subs	r2, #1
 800f726:	4013      	ands	r3, r2
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d17a      	bne.n	800f822 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	4619      	mov	r1, r3
 800f734:	4610      	mov	r0, r2
 800f736:	f7ff fcb4 	bl	800f0a2 <get_fat>
 800f73a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d801      	bhi.n	800f746 <dir_next+0x8c>
 800f742:	2302      	movs	r3, #2
 800f744:	e07a      	b.n	800f83c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f74c:	d101      	bne.n	800f752 <dir_next+0x98>
 800f74e:	2301      	movs	r3, #1
 800f750:	e074      	b.n	800f83c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d358      	bcc.n	800f80e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d104      	bne.n	800f76c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	61da      	str	r2, [r3, #28]
 800f768:	2304      	movs	r3, #4
 800f76a:	e067      	b.n	800f83c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	4619      	mov	r1, r3
 800f774:	4610      	mov	r0, r2
 800f776:	f7ff fe8d 	bl	800f494 <create_chain>
 800f77a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <dir_next+0xcc>
 800f782:	2307      	movs	r3, #7
 800f784:	e05a      	b.n	800f83c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d101      	bne.n	800f790 <dir_next+0xd6>
 800f78c:	2302      	movs	r3, #2
 800f78e:	e055      	b.n	800f83c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f796:	d101      	bne.n	800f79c <dir_next+0xe2>
 800f798:	2301      	movs	r3, #1
 800f79a:	e04f      	b.n	800f83c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f7ff fb81 	bl	800eea4 <sync_window>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <dir_next+0xf2>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e047      	b.n	800f83c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3330      	adds	r3, #48	; 0x30
 800f7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7ff f9ab 	bl	800eb12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7bc:	2300      	movs	r3, #0
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	6979      	ldr	r1, [r7, #20]
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f7ff fc4e 	bl	800f064 <clust2sect>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800f7ce:	e012      	b.n	800f7f6 <dir_next+0x13c>
						fs->wflag = 1;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff fb64 	bl	800eea4 <sync_window>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <dir_next+0x12c>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e02a      	b.n	800f83c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	613b      	str	r3, [r7, #16]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	895b      	ldrh	r3, [r3, #10]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d3e6      	bcc.n	800f7d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	1ad2      	subs	r2, r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f814:	6979      	ldr	r1, [r7, #20]
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff fc24 	bl	800f064 <clust2sect>
 800f81c:	4602      	mov	r2, r0
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f834:	441a      	add	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f854:	2100      	movs	r1, #0
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff feb4 	bl	800f5c4 <dir_sdi>
 800f85c:	4603      	mov	r3, r0
 800f85e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d12b      	bne.n	800f8be <dir_alloc+0x7a>
		n = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	69db      	ldr	r3, [r3, #28]
 800f86e:	4619      	mov	r1, r3
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7ff fb5b 	bl	800ef2c <move_window>
 800f876:	4603      	mov	r3, r0
 800f878:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d11d      	bne.n	800f8bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	2be5      	cmp	r3, #229	; 0xe5
 800f888:	d004      	beq.n	800f894 <dir_alloc+0x50>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d107      	bne.n	800f8a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	3301      	adds	r3, #1
 800f898:	613b      	str	r3, [r7, #16]
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d102      	bne.n	800f8a8 <dir_alloc+0x64>
 800f8a2:	e00c      	b.n	800f8be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f7ff ff05 	bl	800f6ba <dir_next>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d0d7      	beq.n	800f86a <dir_alloc+0x26>
 800f8ba:	e000      	b.n	800f8be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f8bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f8be:	7dfb      	ldrb	r3, [r7, #23]
 800f8c0:	2b04      	cmp	r3, #4
 800f8c2:	d101      	bne.n	800f8c8 <dir_alloc+0x84>
 800f8c4:	2307      	movs	r3, #7
 800f8c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3718      	adds	r7, #24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	331a      	adds	r3, #26
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff f873 	bl	800e9cc <ld_word>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d109      	bne.n	800f906 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	3314      	adds	r3, #20
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff f868 	bl	800e9cc <ld_word>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	041b      	lsls	r3, r3, #16
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	4313      	orrs	r3, r2
 800f904:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f906:	68fb      	ldr	r3, [r7, #12]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	331a      	adds	r3, #26
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	b292      	uxth	r2, r2
 800f924:	4611      	mov	r1, r2
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff f88b 	bl	800ea42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2b03      	cmp	r3, #3
 800f932:	d109      	bne.n	800f948 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	f103 0214 	add.w	r2, r3, #20
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	0c1b      	lsrs	r3, r3, #16
 800f93e:	b29b      	uxth	r3, r3
 800f940:	4619      	mov	r1, r3
 800f942:	4610      	mov	r0, r2
 800f944:	f7ff f87d 	bl	800ea42 <st_word>
	}
}
 800f948:	bf00      	nop
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f95e:	2100      	movs	r1, #0
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7ff fe2f 	bl	800f5c4 <dir_sdi>
 800f966:	4603      	mov	r3, r0
 800f968:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f96a:	7dfb      	ldrb	r3, [r7, #23]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <dir_find+0x24>
 800f970:	7dfb      	ldrb	r3, [r7, #23]
 800f972:	e03e      	b.n	800f9f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	69db      	ldr	r3, [r3, #28]
 800f978:	4619      	mov	r1, r3
 800f97a:	6938      	ldr	r0, [r7, #16]
 800f97c:	f7ff fad6 	bl	800ef2c <move_window>
 800f980:	4603      	mov	r3, r0
 800f982:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d12f      	bne.n	800f9ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d102      	bne.n	800f99e <dir_find+0x4e>
 800f998:	2304      	movs	r3, #4
 800f99a:	75fb      	strb	r3, [r7, #23]
 800f99c:	e028      	b.n	800f9f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	330b      	adds	r3, #11
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9aa:	b2da      	uxtb	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a1b      	ldr	r3, [r3, #32]
 800f9b4:	330b      	adds	r3, #11
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	f003 0308 	and.w	r3, r3, #8
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10a      	bne.n	800f9d6 <dir_find+0x86>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a18      	ldr	r0, [r3, #32]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3324      	adds	r3, #36	; 0x24
 800f9c8:	220b      	movs	r2, #11
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f7ff f8bc 	bl	800eb48 <mem_cmp>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00b      	beq.n	800f9ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fe6e 	bl	800f6ba <dir_next>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d0c5      	beq.n	800f974 <dir_find+0x24>
 800f9e8:	e002      	b.n	800f9f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f9ea:	bf00      	nop
 800f9ec:	e000      	b.n	800f9f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f9ee:	bf00      	nop

	return res;
 800f9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fa08:	2101      	movs	r1, #1
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff ff1a 	bl	800f844 <dir_alloc>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d11c      	bne.n	800fa54 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	69db      	ldr	r3, [r3, #28]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	68b8      	ldr	r0, [r7, #8]
 800fa22:	f7ff fa83 	bl	800ef2c <move_window>
 800fa26:	4603      	mov	r3, r0
 800fa28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa2a:	7bfb      	ldrb	r3, [r7, #15]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d111      	bne.n	800fa54 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	2220      	movs	r2, #32
 800fa36:	2100      	movs	r1, #0
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff f86a 	bl	800eb12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a18      	ldr	r0, [r3, #32]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3324      	adds	r3, #36	; 0x24
 800fa46:	220b      	movs	r2, #11
 800fa48:	4619      	mov	r1, r3
 800fa4a:	f7ff f841 	bl	800ead0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2201      	movs	r2, #1
 800fa52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b086      	sub	sp, #24
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d04e      	beq.n	800fb14 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	613b      	str	r3, [r7, #16]
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fa7e:	e021      	b.n	800fac4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1a      	ldr	r2, [r3, #32]
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	1c59      	adds	r1, r3, #1
 800fa88:	6179      	str	r1, [r7, #20]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	d100      	bne.n	800fa98 <get_fileinfo+0x3a>
 800fa96:	e015      	b.n	800fac4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	2b05      	cmp	r3, #5
 800fa9c:	d101      	bne.n	800faa2 <get_fileinfo+0x44>
 800fa9e:	23e5      	movs	r3, #229	; 0xe5
 800faa0:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b09      	cmp	r3, #9
 800faa6:	d106      	bne.n	800fab6 <get_fileinfo+0x58>
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	613a      	str	r2, [r7, #16]
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	4413      	add	r3, r2
 800fab2:	222e      	movs	r2, #46	; 0x2e
 800fab4:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	1c5a      	adds	r2, r3, #1
 800faba:	613a      	str	r2, [r7, #16]
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	4413      	add	r3, r2
 800fac0:	7bfa      	ldrb	r2, [r7, #15]
 800fac2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	2b0a      	cmp	r3, #10
 800fac8:	d9da      	bls.n	800fa80 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	4413      	add	r3, r2
 800fad0:	3309      	adds	r3, #9
 800fad2:	2200      	movs	r2, #0
 800fad4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	7ada      	ldrb	r2, [r3, #11]
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a1b      	ldr	r3, [r3, #32]
 800fae4:	331c      	adds	r3, #28
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe ff88 	bl	800e9fc <ld_dword>
 800faec:	4602      	mov	r2, r0
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a1b      	ldr	r3, [r3, #32]
 800faf6:	3316      	adds	r3, #22
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe ff7f 	bl	800e9fc <ld_dword>
 800fafe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	80da      	strh	r2, [r3, #6]
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	0c1b      	lsrs	r3, r3, #16
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	809a      	strh	r2, [r3, #4]
 800fb12:	e000      	b.n	800fb16 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fb14:	bf00      	nop
}
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b088      	sub	sp, #32
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	60fb      	str	r3, [r7, #12]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3324      	adds	r3, #36	; 0x24
 800fb30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fb32:	220b      	movs	r2, #11
 800fb34:	2120      	movs	r1, #32
 800fb36:	68b8      	ldr	r0, [r7, #8]
 800fb38:	f7fe ffeb 	bl	800eb12 <mem_set>
	si = i = 0; ni = 8;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	613b      	str	r3, [r7, #16]
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	61fb      	str	r3, [r7, #28]
 800fb44:	2308      	movs	r3, #8
 800fb46:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	61fa      	str	r2, [r7, #28]
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	4413      	add	r3, r2
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb56:	7efb      	ldrb	r3, [r7, #27]
 800fb58:	2b20      	cmp	r3, #32
 800fb5a:	d94e      	bls.n	800fbfa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fb5c:	7efb      	ldrb	r3, [r7, #27]
 800fb5e:	2b2f      	cmp	r3, #47	; 0x2f
 800fb60:	d006      	beq.n	800fb70 <create_name+0x54>
 800fb62:	7efb      	ldrb	r3, [r7, #27]
 800fb64:	2b5c      	cmp	r3, #92	; 0x5c
 800fb66:	d110      	bne.n	800fb8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb68:	e002      	b.n	800fb70 <create_name+0x54>
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	61fb      	str	r3, [r7, #28]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	4413      	add	r3, r2
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b2f      	cmp	r3, #47	; 0x2f
 800fb7a:	d0f6      	beq.n	800fb6a <create_name+0x4e>
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	4413      	add	r3, r2
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	2b5c      	cmp	r3, #92	; 0x5c
 800fb86:	d0f0      	beq.n	800fb6a <create_name+0x4e>
			break;
 800fb88:	e038      	b.n	800fbfc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fb8a:	7efb      	ldrb	r3, [r7, #27]
 800fb8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb8e:	d003      	beq.n	800fb98 <create_name+0x7c>
 800fb90:	693a      	ldr	r2, [r7, #16]
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d30c      	bcc.n	800fbb2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	2b0b      	cmp	r3, #11
 800fb9c:	d002      	beq.n	800fba4 <create_name+0x88>
 800fb9e:	7efb      	ldrb	r3, [r7, #27]
 800fba0:	2b2e      	cmp	r3, #46	; 0x2e
 800fba2:	d001      	beq.n	800fba8 <create_name+0x8c>
 800fba4:	2306      	movs	r3, #6
 800fba6:	e044      	b.n	800fc32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fba8:	2308      	movs	r3, #8
 800fbaa:	613b      	str	r3, [r7, #16]
 800fbac:	230b      	movs	r3, #11
 800fbae:	617b      	str	r3, [r7, #20]
			continue;
 800fbb0:	e022      	b.n	800fbf8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fbb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	da04      	bge.n	800fbc4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fbba:	7efb      	ldrb	r3, [r7, #27]
 800fbbc:	3b80      	subs	r3, #128	; 0x80
 800fbbe:	4a1f      	ldr	r2, [pc, #124]	; (800fc3c <create_name+0x120>)
 800fbc0:	5cd3      	ldrb	r3, [r2, r3]
 800fbc2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fbc4:	7efb      	ldrb	r3, [r7, #27]
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	481d      	ldr	r0, [pc, #116]	; (800fc40 <create_name+0x124>)
 800fbca:	f7fe ffe4 	bl	800eb96 <chk_chr>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <create_name+0xbc>
 800fbd4:	2306      	movs	r3, #6
 800fbd6:	e02c      	b.n	800fc32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fbd8:	7efb      	ldrb	r3, [r7, #27]
 800fbda:	2b60      	cmp	r3, #96	; 0x60
 800fbdc:	d905      	bls.n	800fbea <create_name+0xce>
 800fbde:	7efb      	ldrb	r3, [r7, #27]
 800fbe0:	2b7a      	cmp	r3, #122	; 0x7a
 800fbe2:	d802      	bhi.n	800fbea <create_name+0xce>
 800fbe4:	7efb      	ldrb	r3, [r7, #27]
 800fbe6:	3b20      	subs	r3, #32
 800fbe8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	613a      	str	r2, [r7, #16]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	7efa      	ldrb	r2, [r7, #27]
 800fbf6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fbf8:	e7a6      	b.n	800fb48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fbfa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	441a      	add	r2, r3
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <create_name+0xf4>
 800fc0c:	2306      	movs	r3, #6
 800fc0e:	e010      	b.n	800fc32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	2be5      	cmp	r3, #229	; 0xe5
 800fc16:	d102      	bne.n	800fc1e <create_name+0x102>
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2205      	movs	r2, #5
 800fc1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fc1e:	7efb      	ldrb	r3, [r7, #27]
 800fc20:	2b20      	cmp	r3, #32
 800fc22:	d801      	bhi.n	800fc28 <create_name+0x10c>
 800fc24:	2204      	movs	r2, #4
 800fc26:	e000      	b.n	800fc2a <create_name+0x10e>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	330b      	adds	r3, #11
 800fc2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fc30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3720      	adds	r7, #32
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08013408 	.word	0x08013408
 800fc40:	08012fe8 	.word	0x08012fe8

0800fc44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b086      	sub	sp, #24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc58:	e002      	b.n	800fc60 <follow_path+0x1c>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	2b2f      	cmp	r3, #47	; 0x2f
 800fc66:	d0f8      	beq.n	800fc5a <follow_path+0x16>
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b5c      	cmp	r3, #92	; 0x5c
 800fc6e:	d0f4      	beq.n	800fc5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	2200      	movs	r2, #0
 800fc74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b1f      	cmp	r3, #31
 800fc7c:	d80a      	bhi.n	800fc94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2280      	movs	r2, #128	; 0x80
 800fc82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc86:	2100      	movs	r1, #0
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff fc9b 	bl	800f5c4 <dir_sdi>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	75fb      	strb	r3, [r7, #23]
 800fc92:	e043      	b.n	800fd1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc94:	463b      	mov	r3, r7
 800fc96:	4619      	mov	r1, r3
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7ff ff3f 	bl	800fb1c <create_name>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d134      	bne.n	800fd12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff fe51 	bl	800f950 <dir_find>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00a      	beq.n	800fcd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fcc0:	7dfb      	ldrb	r3, [r7, #23]
 800fcc2:	2b04      	cmp	r3, #4
 800fcc4:	d127      	bne.n	800fd16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fcc6:	7afb      	ldrb	r3, [r7, #11]
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d122      	bne.n	800fd16 <follow_path+0xd2>
 800fcd0:	2305      	movs	r3, #5
 800fcd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fcd4:	e01f      	b.n	800fd16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcd6:	7afb      	ldrb	r3, [r7, #11]
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d11c      	bne.n	800fd1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	799b      	ldrb	r3, [r3, #6]
 800fce4:	f003 0310 	and.w	r3, r3, #16
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fcec:	2305      	movs	r3, #5
 800fcee:	75fb      	strb	r3, [r7, #23]
 800fcf0:	e014      	b.n	800fd1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd00:	4413      	add	r3, r2
 800fd02:	4619      	mov	r1, r3
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f7ff fde4 	bl	800f8d2 <ld_clust>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd10:	e7c0      	b.n	800fc94 <follow_path+0x50>
			if (res != FR_OK) break;
 800fd12:	bf00      	nop
 800fd14:	e002      	b.n	800fd1c <follow_path+0xd8>
				break;
 800fd16:	bf00      	nop
 800fd18:	e000      	b.n	800fd1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd1a:	bf00      	nop
			}
		}
	}

	return res;
 800fd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3718      	adds	r7, #24
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fd26:	b480      	push	{r7}
 800fd28:	b087      	sub	sp, #28
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d031      	beq.n	800fda0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	617b      	str	r3, [r7, #20]
 800fd42:	e002      	b.n	800fd4a <get_ldnumber+0x24>
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	3301      	adds	r3, #1
 800fd48:	617b      	str	r3, [r7, #20]
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b20      	cmp	r3, #32
 800fd50:	d903      	bls.n	800fd5a <get_ldnumber+0x34>
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b3a      	cmp	r3, #58	; 0x3a
 800fd58:	d1f4      	bne.n	800fd44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	2b3a      	cmp	r3, #58	; 0x3a
 800fd60:	d11c      	bne.n	800fd9c <get_ldnumber+0x76>
			tp = *path;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	1c5a      	adds	r2, r3, #1
 800fd6c:	60fa      	str	r2, [r7, #12]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	3b30      	subs	r3, #48	; 0x30
 800fd72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	2b09      	cmp	r3, #9
 800fd78:	d80e      	bhi.n	800fd98 <get_ldnumber+0x72>
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d10a      	bne.n	800fd98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d107      	bne.n	800fd98 <get_ldnumber+0x72>
					vol = (int)i;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	617b      	str	r3, [r7, #20]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	e002      	b.n	800fda2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fda0:	693b      	ldr	r3, [r7, #16]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	371c      	adds	r7, #28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
	...

0800fdb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	70da      	strb	r2, [r3, #3]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdc6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fdc8:	6839      	ldr	r1, [r7, #0]
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff f8ae 	bl	800ef2c <move_window>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <check_fs+0x2a>
 800fdd6:	2304      	movs	r3, #4
 800fdd8:	e038      	b.n	800fe4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3330      	adds	r3, #48	; 0x30
 800fdde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fe fdf2 	bl	800e9cc <ld_word>
 800fde8:	4603      	mov	r3, r0
 800fdea:	461a      	mov	r2, r3
 800fdec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d001      	beq.n	800fdf8 <check_fs+0x48>
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	e029      	b.n	800fe4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdfe:	2be9      	cmp	r3, #233	; 0xe9
 800fe00:	d009      	beq.n	800fe16 <check_fs+0x66>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe08:	2beb      	cmp	r3, #235	; 0xeb
 800fe0a:	d11e      	bne.n	800fe4a <check_fs+0x9a>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fe12:	2b90      	cmp	r3, #144	; 0x90
 800fe14:	d119      	bne.n	800fe4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	3330      	adds	r3, #48	; 0x30
 800fe1a:	3336      	adds	r3, #54	; 0x36
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe fded 	bl	800e9fc <ld_dword>
 800fe22:	4603      	mov	r3, r0
 800fe24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe28:	4a0a      	ldr	r2, [pc, #40]	; (800fe54 <check_fs+0xa4>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d101      	bne.n	800fe32 <check_fs+0x82>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e00c      	b.n	800fe4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	3330      	adds	r3, #48	; 0x30
 800fe36:	3352      	adds	r3, #82	; 0x52
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7fe fddf 	bl	800e9fc <ld_dword>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4a05      	ldr	r2, [pc, #20]	; (800fe58 <check_fs+0xa8>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d101      	bne.n	800fe4a <check_fs+0x9a>
 800fe46:	2300      	movs	r3, #0
 800fe48:	e000      	b.n	800fe4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe4a:	2302      	movs	r3, #2
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	00544146 	.word	0x00544146
 800fe58:	33544146 	.word	0x33544146

0800fe5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b096      	sub	sp, #88	; 0x58
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	4613      	mov	r3, r2
 800fe68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f7ff ff58 	bl	800fd26 <get_ldnumber>
 800fe76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	da01      	bge.n	800fe82 <find_volume+0x26>
 800fe7e:	230b      	movs	r3, #11
 800fe80:	e22d      	b.n	80102de <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe82:	4aa1      	ldr	r2, [pc, #644]	; (8010108 <find_volume+0x2ac>)
 800fe84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d101      	bne.n	800fe96 <find_volume+0x3a>
 800fe92:	230c      	movs	r3, #12
 800fe94:	e223      	b.n	80102de <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fe9c:	79fb      	ldrb	r3, [r7, #7]
 800fe9e:	f023 0301 	bic.w	r3, r3, #1
 800fea2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d01a      	beq.n	800fee2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fe fced 	bl	800e890 <disk_status>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800febc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10c      	bne.n	800fee2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d007      	beq.n	800fede <find_volume+0x82>
 800fece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed2:	f003 0304 	and.w	r3, r3, #4
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d001      	beq.n	800fede <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800feda:	230a      	movs	r3, #10
 800fedc:	e1ff      	b.n	80102de <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fede:	2300      	movs	r3, #0
 800fee0:	e1fd      	b.n	80102de <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	2200      	movs	r2, #0
 800fee6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feea:	b2da      	uxtb	r2, r3
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	785b      	ldrb	r3, [r3, #1]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe fce5 	bl	800e8c4 <disk_initialize>
 800fefa:	4603      	mov	r3, r0
 800fefc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff04:	f003 0301 	and.w	r3, r3, #1
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e1e6      	b.n	80102de <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d007      	beq.n	800ff26 <find_volume+0xca>
 800ff16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff1a:	f003 0304 	and.w	r3, r3, #4
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ff22:	230a      	movs	r3, #10
 800ff24:	e1db      	b.n	80102de <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff2e:	f7ff ff3f 	bl	800fdb0 <check_fs>
 800ff32:	4603      	mov	r3, r0
 800ff34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d149      	bne.n	800ffd4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff40:	2300      	movs	r3, #0
 800ff42:	643b      	str	r3, [r7, #64]	; 0x40
 800ff44:	e01e      	b.n	800ff84 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff4e:	011b      	lsls	r3, r3, #4
 800ff50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff54:	4413      	add	r3, r2
 800ff56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ff58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d006      	beq.n	800ff70 <find_volume+0x114>
 800ff62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff64:	3308      	adds	r3, #8
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fe fd48 	bl	800e9fc <ld_dword>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	e000      	b.n	800ff72 <find_volume+0x116>
 800ff70:	2200      	movs	r2, #0
 800ff72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	3358      	adds	r3, #88	; 0x58
 800ff78:	443b      	add	r3, r7
 800ff7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff80:	3301      	adds	r3, #1
 800ff82:	643b      	str	r3, [r7, #64]	; 0x40
 800ff84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d9dd      	bls.n	800ff46 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ff8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d002      	beq.n	800ff9a <find_volume+0x13e>
 800ff94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff96:	3b01      	subs	r3, #1
 800ff98:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ff9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	3358      	adds	r3, #88	; 0x58
 800ffa0:	443b      	add	r3, r7
 800ffa2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ffa6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ffa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d005      	beq.n	800ffba <find_volume+0x15e>
 800ffae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffb2:	f7ff fefd 	bl	800fdb0 <check_fs>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	e000      	b.n	800ffbc <find_volume+0x160>
 800ffba:	2303      	movs	r3, #3
 800ffbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ffc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d905      	bls.n	800ffd4 <find_volume+0x178>
 800ffc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffca:	3301      	adds	r3, #1
 800ffcc:	643b      	str	r3, [r7, #64]	; 0x40
 800ffce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d9e2      	bls.n	800ff9a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	d101      	bne.n	800ffe0 <find_volume+0x184>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e17e      	b.n	80102de <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d901      	bls.n	800ffec <find_volume+0x190>
 800ffe8:	230d      	movs	r3, #13
 800ffea:	e178      	b.n	80102de <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	3330      	adds	r3, #48	; 0x30
 800fff0:	330b      	adds	r3, #11
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe fcea 	bl	800e9cc <ld_word>
 800fff8:	4603      	mov	r3, r0
 800fffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fffe:	d001      	beq.n	8010004 <find_volume+0x1a8>
 8010000:	230d      	movs	r3, #13
 8010002:	e16c      	b.n	80102de <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	3330      	adds	r3, #48	; 0x30
 8010008:	3316      	adds	r3, #22
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe fcde 	bl	800e9cc <ld_word>
 8010010:	4603      	mov	r3, r0
 8010012:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <find_volume+0x1cc>
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	3330      	adds	r3, #48	; 0x30
 801001e:	3324      	adds	r3, #36	; 0x24
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fceb 	bl	800e9fc <ld_dword>
 8010026:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801002c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003a:	789b      	ldrb	r3, [r3, #2]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d005      	beq.n	801004c <find_volume+0x1f0>
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	789b      	ldrb	r3, [r3, #2]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d001      	beq.n	801004c <find_volume+0x1f0>
 8010048:	230d      	movs	r3, #13
 801004a:	e148      	b.n	80102de <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	789b      	ldrb	r3, [r3, #2]
 8010050:	461a      	mov	r2, r3
 8010052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010054:	fb02 f303 	mul.w	r3, r2, r3
 8010058:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010060:	b29a      	uxth	r2, r3
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	895b      	ldrh	r3, [r3, #10]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d008      	beq.n	8010080 <find_volume+0x224>
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	895b      	ldrh	r3, [r3, #10]
 8010072:	461a      	mov	r2, r3
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	895b      	ldrh	r3, [r3, #10]
 8010078:	3b01      	subs	r3, #1
 801007a:	4013      	ands	r3, r2
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <find_volume+0x228>
 8010080:	230d      	movs	r3, #13
 8010082:	e12c      	b.n	80102de <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	3330      	adds	r3, #48	; 0x30
 8010088:	3311      	adds	r3, #17
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fc9e 	bl	800e9cc <ld_word>
 8010090:	4603      	mov	r3, r0
 8010092:	461a      	mov	r2, r3
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	891b      	ldrh	r3, [r3, #8]
 801009c:	f003 030f 	and.w	r3, r3, #15
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d001      	beq.n	80100aa <find_volume+0x24e>
 80100a6:	230d      	movs	r3, #13
 80100a8:	e119      	b.n	80102de <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	3330      	adds	r3, #48	; 0x30
 80100ae:	3313      	adds	r3, #19
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fe fc8b 	bl	800e9cc <ld_word>
 80100b6:	4603      	mov	r3, r0
 80100b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80100ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <find_volume+0x272>
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	3330      	adds	r3, #48	; 0x30
 80100c4:	3320      	adds	r3, #32
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fe fc98 	bl	800e9fc <ld_dword>
 80100cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	3330      	adds	r3, #48	; 0x30
 80100d2:	330e      	adds	r3, #14
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe fc79 	bl	800e9cc <ld_word>
 80100da:	4603      	mov	r3, r0
 80100dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80100de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <find_volume+0x28c>
 80100e4:	230d      	movs	r3, #13
 80100e6:	e0fa      	b.n	80102de <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80100e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ec:	4413      	add	r3, r2
 80100ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100f0:	8912      	ldrh	r2, [r2, #8]
 80100f2:	0912      	lsrs	r2, r2, #4
 80100f4:	b292      	uxth	r2, r2
 80100f6:	4413      	add	r3, r2
 80100f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80100fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fe:	429a      	cmp	r2, r3
 8010100:	d204      	bcs.n	801010c <find_volume+0x2b0>
 8010102:	230d      	movs	r3, #13
 8010104:	e0eb      	b.n	80102de <find_volume+0x482>
 8010106:	bf00      	nop
 8010108:	20003828 	.word	0x20003828
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801010c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801010e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010114:	8952      	ldrh	r2, [r2, #10]
 8010116:	fbb3 f3f2 	udiv	r3, r3, r2
 801011a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011e:	2b00      	cmp	r3, #0
 8010120:	d101      	bne.n	8010126 <find_volume+0x2ca>
 8010122:	230d      	movs	r3, #13
 8010124:	e0db      	b.n	80102de <find_volume+0x482>
		fmt = FS_FAT32;
 8010126:	2303      	movs	r3, #3
 8010128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010132:	4293      	cmp	r3, r2
 8010134:	d802      	bhi.n	801013c <find_volume+0x2e0>
 8010136:	2302      	movs	r3, #2
 8010138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010142:	4293      	cmp	r3, r2
 8010144:	d802      	bhi.n	801014c <find_volume+0x2f0>
 8010146:	2301      	movs	r3, #1
 8010148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	1c9a      	adds	r2, r3, #2
 8010150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010152:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010158:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801015a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801015c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801015e:	441a      	add	r2, r3
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	441a      	add	r2, r3
 801016a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801016e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010172:	2b03      	cmp	r3, #3
 8010174:	d11e      	bne.n	80101b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	3330      	adds	r3, #48	; 0x30
 801017a:	332a      	adds	r3, #42	; 0x2a
 801017c:	4618      	mov	r0, r3
 801017e:	f7fe fc25 	bl	800e9cc <ld_word>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <find_volume+0x330>
 8010188:	230d      	movs	r3, #13
 801018a:	e0a8      	b.n	80102de <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018e:	891b      	ldrh	r3, [r3, #8]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d001      	beq.n	8010198 <find_volume+0x33c>
 8010194:	230d      	movs	r3, #13
 8010196:	e0a2      	b.n	80102de <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019a:	3330      	adds	r3, #48	; 0x30
 801019c:	332c      	adds	r3, #44	; 0x2c
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fc2c 	bl	800e9fc <ld_dword>
 80101a4:	4602      	mov	r2, r0
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	695b      	ldr	r3, [r3, #20]
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	647b      	str	r3, [r7, #68]	; 0x44
 80101b2:	e01f      	b.n	80101f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	891b      	ldrh	r3, [r3, #8]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d101      	bne.n	80101c0 <find_volume+0x364>
 80101bc:	230d      	movs	r3, #13
 80101be:	e08e      	b.n	80102de <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	6a1a      	ldr	r2, [r3, #32]
 80101c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101c6:	441a      	add	r2, r3
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80101cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d103      	bne.n	80101dc <find_volume+0x380>
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	695b      	ldr	r3, [r3, #20]
 80101d8:	005b      	lsls	r3, r3, #1
 80101da:	e00a      	b.n	80101f2 <find_volume+0x396>
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	695a      	ldr	r2, [r3, #20]
 80101e0:	4613      	mov	r3, r2
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	4413      	add	r3, r2
 80101e6:	085a      	lsrs	r2, r3, #1
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80101f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80101f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f6:	699a      	ldr	r2, [r3, #24]
 80101f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80101fe:	0a5b      	lsrs	r3, r3, #9
 8010200:	429a      	cmp	r2, r3
 8010202:	d201      	bcs.n	8010208 <find_volume+0x3ac>
 8010204:	230d      	movs	r3, #13
 8010206:	e06a      	b.n	80102de <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801020e:	611a      	str	r2, [r3, #16]
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	691a      	ldr	r2, [r3, #16]
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	2280      	movs	r2, #128	; 0x80
 801021c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801021e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010222:	2b03      	cmp	r3, #3
 8010224:	d149      	bne.n	80102ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010228:	3330      	adds	r3, #48	; 0x30
 801022a:	3330      	adds	r3, #48	; 0x30
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fbcd 	bl	800e9cc <ld_word>
 8010232:	4603      	mov	r3, r0
 8010234:	2b01      	cmp	r3, #1
 8010236:	d140      	bne.n	80102ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801023a:	3301      	adds	r3, #1
 801023c:	4619      	mov	r1, r3
 801023e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010240:	f7fe fe74 	bl	800ef2c <move_window>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d137      	bne.n	80102ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801024a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024c:	2200      	movs	r2, #0
 801024e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010252:	3330      	adds	r3, #48	; 0x30
 8010254:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010258:	4618      	mov	r0, r3
 801025a:	f7fe fbb7 	bl	800e9cc <ld_word>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
 8010262:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010266:	429a      	cmp	r2, r3
 8010268:	d127      	bne.n	80102ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	3330      	adds	r3, #48	; 0x30
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe fbc4 	bl	800e9fc <ld_dword>
 8010274:	4603      	mov	r3, r0
 8010276:	4a1c      	ldr	r2, [pc, #112]	; (80102e8 <find_volume+0x48c>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d11e      	bne.n	80102ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	3330      	adds	r3, #48	; 0x30
 8010280:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010284:	4618      	mov	r0, r3
 8010286:	f7fe fbb9 	bl	800e9fc <ld_dword>
 801028a:	4603      	mov	r3, r0
 801028c:	4a17      	ldr	r2, [pc, #92]	; (80102ec <find_volume+0x490>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d113      	bne.n	80102ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010294:	3330      	adds	r3, #48	; 0x30
 8010296:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fbae 	bl	800e9fc <ld_dword>
 80102a0:	4602      	mov	r2, r0
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80102a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a8:	3330      	adds	r3, #48	; 0x30
 80102aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe fba4 	bl	800e9fc <ld_dword>
 80102b4:	4602      	mov	r2, r0
 80102b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80102c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80102c2:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <find_volume+0x494>)
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	4b09      	ldr	r3, [pc, #36]	; (80102f0 <find_volume+0x494>)
 80102cc:	801a      	strh	r2, [r3, #0]
 80102ce:	4b08      	ldr	r3, [pc, #32]	; (80102f0 <find_volume+0x494>)
 80102d0:	881a      	ldrh	r2, [r3, #0]
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80102d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102d8:	f7fe fdc0 	bl	800ee5c <clear_lock>
#endif
	return FR_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3758      	adds	r7, #88	; 0x58
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	41615252 	.word	0x41615252
 80102ec:	61417272 	.word	0x61417272
 80102f0:	2000382c 	.word	0x2000382c

080102f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80102fe:	2309      	movs	r3, #9
 8010300:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d01c      	beq.n	8010342 <validate+0x4e>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d018      	beq.n	8010342 <validate+0x4e>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d013      	beq.n	8010342 <validate+0x4e>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	889a      	ldrh	r2, [r3, #4]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	88db      	ldrh	r3, [r3, #6]
 8010324:	429a      	cmp	r2, r3
 8010326:	d10c      	bne.n	8010342 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	785b      	ldrb	r3, [r3, #1]
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe faae 	bl	800e890 <disk_status>
 8010334:	4603      	mov	r3, r0
 8010336:	f003 0301 	and.w	r3, r3, #1
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <validate+0x4e>
			res = FR_OK;
 801033e:	2300      	movs	r3, #0
 8010340:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010342:	7bfb      	ldrb	r3, [r7, #15]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <validate+0x5a>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	e000      	b.n	8010350 <validate+0x5c>
 801034e:	2300      	movs	r3, #0
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	6013      	str	r3, [r2, #0]
	return res;
 8010354:	7bfb      	ldrb	r3, [r7, #15]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
	...

08010360 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	4613      	mov	r3, r2
 801036c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010372:	f107 0310 	add.w	r3, r7, #16
 8010376:	4618      	mov	r0, r3
 8010378:	f7ff fcd5 	bl	800fd26 <get_ldnumber>
 801037c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	2b00      	cmp	r3, #0
 8010382:	da01      	bge.n	8010388 <f_mount+0x28>
 8010384:	230b      	movs	r3, #11
 8010386:	e02b      	b.n	80103e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010388:	4a17      	ldr	r2, [pc, #92]	; (80103e8 <f_mount+0x88>)
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010390:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d005      	beq.n	80103a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010398:	69b8      	ldr	r0, [r7, #24]
 801039a:	f7fe fd5f 	bl	800ee5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	2200      	movs	r2, #0
 80103a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d002      	beq.n	80103b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80103b0:	68fa      	ldr	r2, [r7, #12]
 80103b2:	490d      	ldr	r1, [pc, #52]	; (80103e8 <f_mount+0x88>)
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <f_mount+0x66>
 80103c0:	79fb      	ldrb	r3, [r7, #7]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d001      	beq.n	80103ca <f_mount+0x6a>
 80103c6:	2300      	movs	r3, #0
 80103c8:	e00a      	b.n	80103e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80103ca:	f107 010c 	add.w	r1, r7, #12
 80103ce:	f107 0308 	add.w	r3, r7, #8
 80103d2:	2200      	movs	r2, #0
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff fd41 	bl	800fe5c <find_volume>
 80103da:	4603      	mov	r3, r0
 80103dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80103de:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3720      	adds	r7, #32
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	20003828 	.word	0x20003828

080103ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b098      	sub	sp, #96	; 0x60
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	4613      	mov	r3, r2
 80103f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d101      	bne.n	8010404 <f_open+0x18>
 8010400:	2309      	movs	r3, #9
 8010402:	e1ad      	b.n	8010760 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010404:	79fb      	ldrb	r3, [r7, #7]
 8010406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801040a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801040c:	79fa      	ldrb	r2, [r7, #7]
 801040e:	f107 0110 	add.w	r1, r7, #16
 8010412:	f107 0308 	add.w	r3, r7, #8
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff fd20 	bl	800fe5c <find_volume>
 801041c:	4603      	mov	r3, r0
 801041e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010426:	2b00      	cmp	r3, #0
 8010428:	f040 8191 	bne.w	801074e <f_open+0x362>
		dj.obj.fs = fs;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010430:	68ba      	ldr	r2, [r7, #8]
 8010432:	f107 0314 	add.w	r3, r7, #20
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fc03 	bl	800fc44 <follow_path>
 801043e:	4603      	mov	r3, r0
 8010440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010448:	2b00      	cmp	r3, #0
 801044a:	d11a      	bne.n	8010482 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801044c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010450:	b25b      	sxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	da03      	bge.n	801045e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010456:	2306      	movs	r3, #6
 8010458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801045c:	e011      	b.n	8010482 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	f023 0301 	bic.w	r3, r3, #1
 8010464:	2b00      	cmp	r3, #0
 8010466:	bf14      	ite	ne
 8010468:	2301      	movne	r3, #1
 801046a:	2300      	moveq	r3, #0
 801046c:	b2db      	uxtb	r3, r3
 801046e:	461a      	mov	r2, r3
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	4611      	mov	r1, r2
 8010476:	4618      	mov	r0, r3
 8010478:	f7fe fba8 	bl	800ebcc <chk_lock>
 801047c:	4603      	mov	r3, r0
 801047e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	f003 031c 	and.w	r3, r3, #28
 8010488:	2b00      	cmp	r3, #0
 801048a:	d07f      	beq.n	801058c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801048c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010490:	2b00      	cmp	r3, #0
 8010492:	d017      	beq.n	80104c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010498:	2b04      	cmp	r3, #4
 801049a:	d10e      	bne.n	80104ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801049c:	f7fe fbf2 	bl	800ec84 <enq_lock>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <f_open+0xc8>
 80104a6:	f107 0314 	add.w	r3, r7, #20
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff faa5 	bl	800f9fa <dir_register>
 80104b0:	4603      	mov	r3, r0
 80104b2:	e000      	b.n	80104b6 <f_open+0xca>
 80104b4:	2312      	movs	r3, #18
 80104b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	f043 0308 	orr.w	r3, r3, #8
 80104c0:	71fb      	strb	r3, [r7, #7]
 80104c2:	e010      	b.n	80104e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80104c4:	7ebb      	ldrb	r3, [r7, #26]
 80104c6:	f003 0311 	and.w	r3, r3, #17
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d003      	beq.n	80104d6 <f_open+0xea>
					res = FR_DENIED;
 80104ce:	2307      	movs	r3, #7
 80104d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104d4:	e007      	b.n	80104e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	f003 0304 	and.w	r3, r3, #4
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d002      	beq.n	80104e6 <f_open+0xfa>
 80104e0:	2308      	movs	r3, #8
 80104e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80104e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d168      	bne.n	80105c0 <f_open+0x1d4>
 80104ee:	79fb      	ldrb	r3, [r7, #7]
 80104f0:	f003 0308 	and.w	r3, r3, #8
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d063      	beq.n	80105c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80104f8:	f7fb f8bc 	bl	800b674 <get_fattime>
 80104fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80104fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010500:	330e      	adds	r3, #14
 8010502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fab7 	bl	800ea78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	3316      	adds	r3, #22
 801050e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010510:	4618      	mov	r0, r3
 8010512:	f7fe fab1 	bl	800ea78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010518:	330b      	adds	r3, #11
 801051a:	2220      	movs	r2, #32
 801051c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff f9d4 	bl	800f8d2 <ld_clust>
 801052a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010530:	2200      	movs	r2, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f9ec 	bl	800f910 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053a:	331c      	adds	r3, #28
 801053c:	2100      	movs	r1, #0
 801053e:	4618      	mov	r0, r3
 8010540:	f7fe fa9a 	bl	800ea78 <st_dword>
					fs->wflag = 1;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	2201      	movs	r2, #1
 8010548:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801054a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801054c:	2b00      	cmp	r3, #0
 801054e:	d037      	beq.n	80105c0 <f_open+0x1d4>
						dw = fs->winsect;
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010554:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010556:	f107 0314 	add.w	r3, r7, #20
 801055a:	2200      	movs	r2, #0
 801055c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe ff33 	bl	800f3ca <remove_chain>
 8010564:	4603      	mov	r3, r0
 8010566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801056a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801056e:	2b00      	cmp	r3, #0
 8010570:	d126      	bne.n	80105c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fcd8 	bl	800ef2c <move_window>
 801057c:	4603      	mov	r3, r0
 801057e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010586:	3a01      	subs	r2, #1
 8010588:	60da      	str	r2, [r3, #12]
 801058a:	e019      	b.n	80105c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801058c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010590:	2b00      	cmp	r3, #0
 8010592:	d115      	bne.n	80105c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010594:	7ebb      	ldrb	r3, [r7, #26]
 8010596:	f003 0310 	and.w	r3, r3, #16
 801059a:	2b00      	cmp	r3, #0
 801059c:	d003      	beq.n	80105a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 801059e:	2304      	movs	r3, #4
 80105a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105a4:	e00c      	b.n	80105c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80105a6:	79fb      	ldrb	r3, [r7, #7]
 80105a8:	f003 0302 	and.w	r3, r3, #2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d007      	beq.n	80105c0 <f_open+0x1d4>
 80105b0:	7ebb      	ldrb	r3, [r7, #26]
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <f_open+0x1d4>
						res = FR_DENIED;
 80105ba:	2307      	movs	r3, #7
 80105bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80105c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d128      	bne.n	801061a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80105c8:	79fb      	ldrb	r3, [r7, #7]
 80105ca:	f003 0308 	and.w	r3, r3, #8
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d003      	beq.n	80105da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80105e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	f023 0301 	bic.w	r3, r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	bf14      	ite	ne
 80105f2:	2301      	movne	r3, #1
 80105f4:	2300      	moveq	r3, #0
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	461a      	mov	r2, r3
 80105fa:	f107 0314 	add.w	r3, r7, #20
 80105fe:	4611      	mov	r1, r2
 8010600:	4618      	mov	r0, r3
 8010602:	f7fe fb61 	bl	800ecc8 <inc_lock>
 8010606:	4602      	mov	r2, r0
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <f_open+0x22e>
 8010614:	2302      	movs	r3, #2
 8010616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801061a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801061e:	2b00      	cmp	r3, #0
 8010620:	f040 8095 	bne.w	801074e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010628:	4611      	mov	r1, r2
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff f951 	bl	800f8d2 <ld_clust>
 8010630:	4602      	mov	r2, r0
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010638:	331c      	adds	r3, #28
 801063a:	4618      	mov	r0, r3
 801063c:	f7fe f9de 	bl	800e9fc <ld_dword>
 8010640:	4602      	mov	r2, r0
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2200      	movs	r2, #0
 801064a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801064c:	693a      	ldr	r2, [r7, #16]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	88da      	ldrh	r2, [r3, #6]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	79fa      	ldrb	r2, [r7, #7]
 801065e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2200      	movs	r2, #0
 8010664:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	3330      	adds	r3, #48	; 0x30
 8010676:	f44f 7200 	mov.w	r2, #512	; 0x200
 801067a:	2100      	movs	r1, #0
 801067c:	4618      	mov	r0, r3
 801067e:	f7fe fa48 	bl	800eb12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	f003 0320 	and.w	r3, r3, #32
 8010688:	2b00      	cmp	r3, #0
 801068a:	d060      	beq.n	801074e <f_open+0x362>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d05c      	beq.n	801074e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68da      	ldr	r2, [r3, #12]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	895b      	ldrh	r3, [r3, #10]
 80106a0:	025b      	lsls	r3, r3, #9
 80106a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	657b      	str	r3, [r7, #84]	; 0x54
 80106b0:	e016      	b.n	80106e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fcf3 	bl	800f0a2 <get_fat>
 80106bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80106be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d802      	bhi.n	80106ca <f_open+0x2de>
 80106c4:	2302      	movs	r3, #2
 80106c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80106ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106d0:	d102      	bne.n	80106d8 <f_open+0x2ec>
 80106d2:	2301      	movs	r3, #1
 80106d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	657b      	str	r3, [r7, #84]	; 0x54
 80106e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d103      	bne.n	80106f0 <f_open+0x304>
 80106e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d8e0      	bhi.n	80106b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80106f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d127      	bne.n	801074e <f_open+0x362>
 80106fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010704:	2b00      	cmp	r3, #0
 8010706:	d022      	beq.n	801074e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801070c:	4618      	mov	r0, r3
 801070e:	f7fe fca9 	bl	800f064 <clust2sect>
 8010712:	6478      	str	r0, [r7, #68]	; 0x44
 8010714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010716:	2b00      	cmp	r3, #0
 8010718:	d103      	bne.n	8010722 <f_open+0x336>
						res = FR_INT_ERR;
 801071a:	2302      	movs	r3, #2
 801071c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010720:	e015      	b.n	801074e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010724:	0a5a      	lsrs	r2, r3, #9
 8010726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010728:	441a      	add	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	7858      	ldrb	r0, [r3, #1]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a1a      	ldr	r2, [r3, #32]
 801073c:	2301      	movs	r3, #1
 801073e:	f7fe f8e7 	bl	800e910 <disk_read>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <f_open+0x362>
 8010748:	2301      	movs	r3, #1
 801074a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801074e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010752:	2b00      	cmp	r3, #0
 8010754:	d002      	beq.n	801075c <f_open+0x370>
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801075c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010760:	4618      	mov	r0, r3
 8010762:	3760      	adds	r7, #96	; 0x60
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f107 0208 	add.w	r2, r7, #8
 8010776:	4611      	mov	r1, r2
 8010778:	4618      	mov	r0, r3
 801077a:	f7ff fdbb 	bl	80102f4 <validate>
 801077e:	4603      	mov	r3, r0
 8010780:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d168      	bne.n	801085a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7d1b      	ldrb	r3, [r3, #20]
 801078c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d062      	beq.n	801085a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	7d1b      	ldrb	r3, [r3, #20]
 8010798:	b25b      	sxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da15      	bge.n	80107ca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	7858      	ldrb	r0, [r3, #1]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	2301      	movs	r3, #1
 80107ae:	f7fe f8cf 	bl	800e950 <disk_write>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <f_sync+0x54>
 80107b8:	2301      	movs	r3, #1
 80107ba:	e04f      	b.n	801085c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	7d1b      	ldrb	r3, [r3, #20]
 80107c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107ca:	f7fa ff53 	bl	800b674 <get_fattime>
 80107ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7fe fba7 	bl	800ef2c <move_window>
 80107de:	4603      	mov	r3, r0
 80107e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d138      	bne.n	801085a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	330b      	adds	r3, #11
 80107f2:	781a      	ldrb	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	330b      	adds	r3, #11
 80107f8:	f042 0220 	orr.w	r2, r2, #32
 80107fc:	b2d2      	uxtb	r2, r2
 80107fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6818      	ldr	r0, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	461a      	mov	r2, r3
 801080a:	68f9      	ldr	r1, [r7, #12]
 801080c:	f7ff f880 	bl	800f910 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f103 021c 	add.w	r2, r3, #28
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	4619      	mov	r1, r3
 801081c:	4610      	mov	r0, r2
 801081e:	f7fe f92b 	bl	800ea78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	3316      	adds	r3, #22
 8010826:	6939      	ldr	r1, [r7, #16]
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe f925 	bl	800ea78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3312      	adds	r3, #18
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f7fe f904 	bl	800ea42 <st_word>
					fs->wflag = 1;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2201      	movs	r2, #1
 801083e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe fba0 	bl	800ef88 <sync_fs>
 8010848:	4603      	mov	r3, r0
 801084a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010854:	b2da      	uxtb	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801085a:	7dfb      	ldrb	r3, [r7, #23]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3718      	adds	r7, #24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff ff7b 	bl	8010768 <f_sync>
 8010872:	4603      	mov	r3, r0
 8010874:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010876:	7bfb      	ldrb	r3, [r7, #15]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d118      	bne.n	80108ae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f107 0208 	add.w	r2, r7, #8
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff fd35 	bl	80102f4 <validate>
 801088a:	4603      	mov	r3, r0
 801088c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10c      	bne.n	80108ae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe faa3 	bl	800ede4 <dec_lock>
 801089e:	4603      	mov	r3, r0
 80108a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b090      	sub	sp, #64	; 0x40
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80108c2:	f107 010c 	add.w	r1, r7, #12
 80108c6:	1d3b      	adds	r3, r7, #4
 80108c8:	2200      	movs	r2, #0
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ff fac6 	bl	800fe5c <find_volume>
 80108d0:	4603      	mov	r3, r0
 80108d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80108d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d11f      	bne.n	801091e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	f107 030c 	add.w	r3, r7, #12
 80108e4:	4611      	mov	r1, r2
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7ff f9ac 	bl	800fc44 <follow_path>
 80108ec:	4603      	mov	r3, r0
 80108ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80108f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d111      	bne.n	801091e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80108fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	2b00      	cmp	r3, #0
 8010902:	da03      	bge.n	801090c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8010904:	2306      	movs	r3, #6
 8010906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801090a:	e008      	b.n	801091e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d005      	beq.n	801091e <f_stat+0x66>
 8010912:	f107 030c 	add.w	r3, r7, #12
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	4618      	mov	r0, r3
 801091a:	f7ff f8a0 	bl	800fa5e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801091e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010922:	4618      	mov	r0, r3
 8010924:	3740      	adds	r7, #64	; 0x40
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b096      	sub	sp, #88	; 0x58
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010932:	f107 0108 	add.w	r1, r7, #8
 8010936:	1d3b      	adds	r3, r7, #4
 8010938:	2202      	movs	r2, #2
 801093a:	4618      	mov	r0, r3
 801093c:	f7ff fa8e 	bl	800fe5c <find_volume>
 8010940:	4603      	mov	r3, r0
 8010942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801094a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801094e:	2b00      	cmp	r3, #0
 8010950:	f040 80ec 	bne.w	8010b2c <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	f107 030c 	add.w	r3, r7, #12
 801095a:	4611      	mov	r1, r2
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff f971 	bl	800fc44 <follow_path>
 8010962:	4603      	mov	r3, r0
 8010964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801096c:	2b00      	cmp	r3, #0
 801096e:	d102      	bne.n	8010976 <f_mkdir+0x4c>
 8010970:	2308      	movs	r3, #8
 8010972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801097a:	2b04      	cmp	r3, #4
 801097c:	f040 80d6 	bne.w	8010b2c <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010980:	f107 030c 	add.w	r3, r7, #12
 8010984:	2100      	movs	r1, #0
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fd84 	bl	800f494 <create_chain>
 801098c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	895b      	ldrh	r3, [r3, #10]
 8010992:	025b      	lsls	r3, r3, #9
 8010994:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801099c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d102      	bne.n	80109a8 <f_mkdir+0x7e>
 80109a2:	2307      	movs	r3, #7
 80109a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80109a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d102      	bne.n	80109b4 <f_mkdir+0x8a>
 80109ae:	2302      	movs	r3, #2
 80109b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109ba:	d102      	bne.n	80109c2 <f_mkdir+0x98>
 80109bc:	2301      	movs	r3, #1
 80109be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80109c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d106      	bne.n	80109d8 <f_mkdir+0xae>
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fa69 	bl	800eea4 <sync_window>
 80109d2:	4603      	mov	r3, r0
 80109d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80109d8:	f7fa fe4c 	bl	800b674 <get_fattime>
 80109dc:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80109de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d16a      	bne.n	8010abc <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fb3a 	bl	800f064 <clust2sect>
 80109f0:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	3330      	adds	r3, #48	; 0x30
 80109f6:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80109f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109fc:	2100      	movs	r1, #0
 80109fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a00:	f7fe f887 	bl	800eb12 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010a04:	220b      	movs	r2, #11
 8010a06:	2120      	movs	r1, #32
 8010a08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a0a:	f7fe f882 	bl	800eb12 <mem_set>
					dir[DIR_Name] = '.';
 8010a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a10:	222e      	movs	r2, #46	; 0x2e
 8010a12:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a16:	330b      	adds	r3, #11
 8010a18:	2210      	movs	r2, #16
 8010a1a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a1e:	3316      	adds	r3, #22
 8010a20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe f828 	bl	800ea78 <st_dword>
					st_clust(fs, dir, dcl);
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fe ff6e 	bl	800f910 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	3320      	adds	r3, #32
 8010a38:	2220      	movs	r2, #32
 8010a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe f847 	bl	800ead0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a44:	3321      	adds	r3, #33	; 0x21
 8010a46:	222e      	movs	r2, #46	; 0x2e
 8010a48:	701a      	strb	r2, [r3, #0]
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	d106      	bne.n	8010a64 <f_mkdir+0x13a>
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d101      	bne.n	8010a64 <f_mkdir+0x13a>
 8010a60:	2300      	movs	r3, #0
 8010a62:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010a64:	68b8      	ldr	r0, [r7, #8]
 8010a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a68:	3320      	adds	r3, #32
 8010a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	f7fe ff4f 	bl	800f910 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	895b      	ldrh	r3, [r3, #10]
 8010a76:	653b      	str	r3, [r7, #80]	; 0x50
 8010a78:	e01b      	b.n	8010ab2 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8010a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2201      	movs	r2, #1
 8010a88:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fe fa09 	bl	800eea4 <sync_window>
 8010a92:	4603      	mov	r3, r0
 8010a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8010a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d10c      	bne.n	8010aba <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8010aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010aa8:	f7fe f833 	bl	800eb12 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8010ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e0      	bne.n	8010a7a <f_mkdir+0x150>
 8010ab8:	e000      	b.n	8010abc <f_mkdir+0x192>
					if (res != FR_OK) break;
 8010aba:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d107      	bne.n	8010ad4 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010ac4:	f107 030c 	add.w	r3, r7, #12
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fe ff96 	bl	800f9fa <dir_register>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8010ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d120      	bne.n	8010b1e <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ade:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ae2:	3316      	adds	r3, #22
 8010ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fd ffc6 	bl	800ea78 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fe ff0c 	bl	800f910 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010afa:	330b      	adds	r3, #11
 8010afc:	2210      	movs	r2, #16
 8010afe:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2201      	movs	r2, #1
 8010b04:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010b06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10e      	bne.n	8010b2c <f_mkdir+0x202>
					res = sync_fs(fs);
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fe fa39 	bl	800ef88 <sync_fs>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010b1c:	e006      	b.n	8010b2c <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010b1e:	f107 030c 	add.w	r3, r7, #12
 8010b22:	2200      	movs	r2, #0
 8010b24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fe fc4f 	bl	800f3ca <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3758      	adds	r7, #88	; 0x58
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b087      	sub	sp, #28
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	4613      	mov	r3, r2
 8010b44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b46:	2301      	movs	r3, #1
 8010b48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b4e:	4b1f      	ldr	r3, [pc, #124]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b50:	7a5b      	ldrb	r3, [r3, #9]
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d131      	bne.n	8010bbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b58:	4b1c      	ldr	r3, [pc, #112]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b5a:	7a5b      	ldrb	r3, [r3, #9]
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4b1a      	ldr	r3, [pc, #104]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b62:	2100      	movs	r1, #0
 8010b64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b66:	4b19      	ldr	r3, [pc, #100]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b68:	7a5b      	ldrb	r3, [r3, #9]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	4a17      	ldr	r2, [pc, #92]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4413      	add	r3, r2
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b76:	4b15      	ldr	r3, [pc, #84]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b78:	7a5b      	ldrb	r3, [r3, #9]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	4b13      	ldr	r3, [pc, #76]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b80:	4413      	add	r3, r2
 8010b82:	79fa      	ldrb	r2, [r7, #7]
 8010b84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b86:	4b11      	ldr	r3, [pc, #68]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b88:	7a5b      	ldrb	r3, [r3, #9]
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	b2d1      	uxtb	r1, r2
 8010b90:	4a0e      	ldr	r2, [pc, #56]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b92:	7251      	strb	r1, [r2, #9]
 8010b94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b96:	7dbb      	ldrb	r3, [r7, #22]
 8010b98:	3330      	adds	r3, #48	; 0x30
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	223a      	movs	r2, #58	; 0x3a
 8010ba6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	3302      	adds	r3, #2
 8010bac:	222f      	movs	r2, #47	; 0x2f
 8010bae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	3303      	adds	r3, #3
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	371c      	adds	r7, #28
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	20003850 	.word	0x20003850

08010bd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010bda:	2200      	movs	r2, #0
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff ffaa 	bl	8010b38 <FATFS_LinkDriverEx>
 8010be4:	4603      	mov	r3, r0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
	...

08010bf0 <GetUSBState>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
ApplicationTypeDef GetUSBState(){return Appli_state;}
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	4b03      	ldr	r3, [pc, #12]	; (8010c04 <GetUSBState+0x14>)
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20003c34 	.word	0x20003c34

08010c08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	490e      	ldr	r1, [pc, #56]	; (8010c48 <MX_USB_HOST_Init+0x40>)
 8010c10:	480e      	ldr	r0, [pc, #56]	; (8010c4c <MX_USB_HOST_Init+0x44>)
 8010c12:	f7fc f9eb 	bl	800cfec <USBH_Init>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010c1c:	f7f2 f9e8 	bl	8002ff0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8010c20:	490b      	ldr	r1, [pc, #44]	; (8010c50 <MX_USB_HOST_Init+0x48>)
 8010c22:	480a      	ldr	r0, [pc, #40]	; (8010c4c <MX_USB_HOST_Init+0x44>)
 8010c24:	f7fc fa70 	bl	800d108 <USBH_RegisterClass>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d001      	beq.n	8010c32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010c2e:	f7f2 f9df 	bl	8002ff0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8010c32:	4806      	ldr	r0, [pc, #24]	; (8010c4c <MX_USB_HOST_Init+0x44>)
 8010c34:	f7fc faf4 	bl	800d220 <USBH_Start>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d001      	beq.n	8010c42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010c3e:	f7f2 f9d7 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010c42:	bf00      	nop
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08010c69 	.word	0x08010c69
 8010c4c:	2000385c 	.word	0x2000385c
 8010c50:	200000f8 	.word	0x200000f8

08010c54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8010c58:	4802      	ldr	r0, [pc, #8]	; (8010c64 <MX_USB_HOST_Process+0x10>)
 8010c5a:	f7fc faf1 	bl	800d240 <USBH_Process>
}
 8010c5e:	bf00      	nop
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	2000385c 	.word	0x2000385c

08010c68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	460b      	mov	r3, r1
 8010c72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010c74:	78fb      	ldrb	r3, [r7, #3]
 8010c76:	3b01      	subs	r3, #1
 8010c78:	2b04      	cmp	r3, #4
 8010c7a:	d819      	bhi.n	8010cb0 <USBH_UserProcess+0x48>
 8010c7c:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <USBH_UserProcess+0x1c>)
 8010c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c82:	bf00      	nop
 8010c84:	08010cb1 	.word	0x08010cb1
 8010c88:	08010ca1 	.word	0x08010ca1
 8010c8c:	08010cb1 	.word	0x08010cb1
 8010c90:	08010ca9 	.word	0x08010ca9
 8010c94:	08010c99 	.word	0x08010c99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <USBH_UserProcess+0x58>)
 8010c9a:	2203      	movs	r2, #3
 8010c9c:	701a      	strb	r2, [r3, #0]
  break;
 8010c9e:	e008      	b.n	8010cb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010ca0:	4b07      	ldr	r3, [pc, #28]	; (8010cc0 <USBH_UserProcess+0x58>)
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	701a      	strb	r2, [r3, #0]
  //set flag to be ready
  break;
 8010ca6:	e004      	b.n	8010cb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010ca8:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <USBH_UserProcess+0x58>)
 8010caa:	2201      	movs	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]
  break;
 8010cae:	e000      	b.n	8010cb2 <USBH_UserProcess+0x4a>

  default:
  break;
 8010cb0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010cb2:	bf00      	nop
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	20003c34 	.word	0x20003c34

08010cc4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b08a      	sub	sp, #40	; 0x28
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ccc:	f107 0314 	add.w	r3, r7, #20
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	601a      	str	r2, [r3, #0]
 8010cd4:	605a      	str	r2, [r3, #4]
 8010cd6:	609a      	str	r2, [r3, #8]
 8010cd8:	60da      	str	r2, [r3, #12]
 8010cda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a24      	ldr	r2, [pc, #144]	; (8010d74 <HAL_HCD_MspInit+0xb0>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d141      	bne.n	8010d6a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	613b      	str	r3, [r7, #16]
 8010cea:	4b23      	ldr	r3, [pc, #140]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cee:	4a22      	ldr	r2, [pc, #136]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010cf0:	f043 0302 	orr.w	r3, r3, #2
 8010cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8010cf6:	4b20      	ldr	r3, [pc, #128]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	613b      	str	r3, [r7, #16]
 8010d00:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8010d02:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8010d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d08:	2302      	movs	r3, #2
 8010d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d10:	2300      	movs	r3, #0
 8010d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8010d14:	230c      	movs	r3, #12
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010d18:	f107 0314 	add.w	r3, r7, #20
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4817      	ldr	r0, [pc, #92]	; (8010d7c <HAL_HCD_MspInit+0xb8>)
 8010d20:	f7f3 fb86 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8010d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8010d32:	f107 0314 	add.w	r3, r7, #20
 8010d36:	4619      	mov	r1, r3
 8010d38:	4810      	ldr	r0, [pc, #64]	; (8010d7c <HAL_HCD_MspInit+0xb8>)
 8010d3a:	f7f3 fb79 	bl	8004430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010d3e:	2300      	movs	r3, #0
 8010d40:	60fb      	str	r3, [r7, #12]
 8010d42:	4b0d      	ldr	r3, [pc, #52]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d46:	4a0c      	ldr	r2, [pc, #48]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8010d4e:	4b0a      	ldr	r3, [pc, #40]	; (8010d78 <HAL_HCD_MspInit+0xb4>)
 8010d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	204d      	movs	r0, #77	; 0x4d
 8010d60:	f7f2 ff97 	bl	8003c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010d64:	204d      	movs	r0, #77	; 0x4d
 8010d66:	f7f2 ffb0 	bl	8003cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010d6a:	bf00      	nop
 8010d6c:	3728      	adds	r7, #40	; 0x28
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	40040000 	.word	0x40040000
 8010d78:	40023800 	.word	0x40023800
 8010d7c:	40020400 	.word	0x40020400

08010d80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fc fe35 	bl	800d9fe <USBH_LL_IncTimer>
}
 8010d94:	bf00      	nop
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fc fe6d 	bl	800da8a <USBH_LL_Connect>
}
 8010db0:	bf00      	nop
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fc fe76 	bl	800dab8 <USBH_LL_Disconnect>
}
 8010dcc:	bf00      	nop
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]
 8010de0:	4613      	mov	r3, r2
 8010de2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fc fe27 	bl	800da52 <USBH_LL_PortEnabled>
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fc fe27 	bl	800da6e <USBH_LL_PortDisabled>
}
 8010e20:	bf00      	nop
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d132      	bne.n	8010ea0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8010e3a:	4a1c      	ldr	r2, [pc, #112]	; (8010eac <USBH_LL_Init+0x84>)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4a19      	ldr	r2, [pc, #100]	; (8010eac <USBH_LL_Init+0x84>)
 8010e46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010e4a:	4b18      	ldr	r3, [pc, #96]	; (8010eac <USBH_LL_Init+0x84>)
 8010e4c:	4a18      	ldr	r2, [pc, #96]	; (8010eb0 <USBH_LL_Init+0x88>)
 8010e4e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8010e50:	4b16      	ldr	r3, [pc, #88]	; (8010eac <USBH_LL_Init+0x84>)
 8010e52:	220c      	movs	r2, #12
 8010e54:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8010e56:	4b15      	ldr	r3, [pc, #84]	; (8010eac <USBH_LL_Init+0x84>)
 8010e58:	2201      	movs	r2, #1
 8010e5a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010e5c:	4b13      	ldr	r3, [pc, #76]	; (8010eac <USBH_LL_Init+0x84>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010e62:	4b12      	ldr	r3, [pc, #72]	; (8010eac <USBH_LL_Init+0x84>)
 8010e64:	2202      	movs	r2, #2
 8010e66:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010e68:	4b10      	ldr	r3, [pc, #64]	; (8010eac <USBH_LL_Init+0x84>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010e6e:	4b0f      	ldr	r3, [pc, #60]	; (8010eac <USBH_LL_Init+0x84>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010e74:	4b0d      	ldr	r3, [pc, #52]	; (8010eac <USBH_LL_Init+0x84>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010e7a:	4b0c      	ldr	r3, [pc, #48]	; (8010eac <USBH_LL_Init+0x84>)
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010e80:	480a      	ldr	r0, [pc, #40]	; (8010eac <USBH_LL_Init+0x84>)
 8010e82:	f7f3 fccb 	bl	800481c <HAL_HCD_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d001      	beq.n	8010e90 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010e8c:	f7f2 f8b0 	bl	8002ff0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010e90:	4806      	ldr	r0, [pc, #24]	; (8010eac <USBH_LL_Init+0x84>)
 8010e92:	f7f4 f8ae 	bl	8004ff2 <HAL_HCD_GetCurrentFrame>
 8010e96:	4603      	mov	r3, r0
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7fc fda0 	bl	800d9e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	20003c38 	.word	0x20003c38
 8010eb0:	40040000 	.word	0x40040000

08010eb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7f4 f81b 	bl	8004f06 <HAL_HCD_Start>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 f98c 	bl	80111f4 <USBH_Get_USB_Status>
 8010edc:	4603      	mov	r3, r0
 8010ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3710      	adds	r7, #16
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b084      	sub	sp, #16
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7f4 f823 	bl	8004f4c <HAL_HCD_Stop>
 8010f06:	4603      	mov	r3, r0
 8010f08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 f971 	bl	80111f4 <USBH_Get_USB_Status>
 8010f12:	4603      	mov	r3, r0
 8010f14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f4 f86b 	bl	800500e <HAL_HCD_GetCurrentSpeed>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d00c      	beq.n	8010f58 <USBH_LL_GetSpeed+0x38>
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d80d      	bhi.n	8010f5e <USBH_LL_GetSpeed+0x3e>
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d002      	beq.n	8010f4c <USBH_LL_GetSpeed+0x2c>
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d003      	beq.n	8010f52 <USBH_LL_GetSpeed+0x32>
 8010f4a:	e008      	b.n	8010f5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f50:	e008      	b.n	8010f64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010f52:	2301      	movs	r3, #1
 8010f54:	73fb      	strb	r3, [r7, #15]
    break;
 8010f56:	e005      	b.n	8010f64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010f58:	2302      	movs	r3, #2
 8010f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f5c:	e002      	b.n	8010f64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	73fb      	strb	r3, [r7, #15]
    break;
 8010f62:	bf00      	nop
  }
  return  speed;
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f76:	2300      	movs	r3, #0
 8010f78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f3 fffe 	bl	8004f86 <HAL_HCD_ResetPort>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
 8010f90:	4618      	mov	r0, r3
 8010f92:	f000 f92f 	bl	80111f4 <USBH_Get_USB_Status>
 8010f96:	4603      	mov	r3, r0
 8010f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	460b      	mov	r3, r1
 8010fae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fb6:	78fa      	ldrb	r2, [r7, #3]
 8010fb8:	4611      	mov	r1, r2
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7f4 f805 	bl	8004fca <HAL_HCD_HC_GetXferCount>
 8010fc0:	4603      	mov	r3, r0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010fca:	b590      	push	{r4, r7, lr}
 8010fcc:	b089      	sub	sp, #36	; 0x24
 8010fce:	af04      	add	r7, sp, #16
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4603      	mov	r3, r0
 8010fda:	70fb      	strb	r3, [r7, #3]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70bb      	strb	r3, [r7, #2]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010ff2:	787c      	ldrb	r4, [r7, #1]
 8010ff4:	78ba      	ldrb	r2, [r7, #2]
 8010ff6:	78f9      	ldrb	r1, [r7, #3]
 8010ff8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010ffa:	9302      	str	r3, [sp, #8]
 8010ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011000:	9301      	str	r3, [sp, #4]
 8011002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	4623      	mov	r3, r4
 801100a:	f7f3 fc69 	bl	80048e0 <HAL_HCD_HC_Init>
 801100e:	4603      	mov	r3, r0
 8011010:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011012:	7bfb      	ldrb	r3, [r7, #15]
 8011014:	4618      	mov	r0, r3
 8011016:	f000 f8ed 	bl	80111f4 <USBH_Get_USB_Status>
 801101a:	4603      	mov	r3, r0
 801101c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801101e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011020:	4618      	mov	r0, r3
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	bd90      	pop	{r4, r7, pc}

08011028 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011038:	2300      	movs	r3, #0
 801103a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011042:	78fa      	ldrb	r2, [r7, #3]
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f7f3 fcd9 	bl	80049fe <HAL_HCD_HC_Halt>
 801104c:	4603      	mov	r3, r0
 801104e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011050:	7bfb      	ldrb	r3, [r7, #15]
 8011052:	4618      	mov	r0, r3
 8011054:	f000 f8ce 	bl	80111f4 <USBH_Get_USB_Status>
 8011058:	4603      	mov	r3, r0
 801105a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801105c:	7bbb      	ldrb	r3, [r7, #14]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011066:	b590      	push	{r4, r7, lr}
 8011068:	b089      	sub	sp, #36	; 0x24
 801106a:	af04      	add	r7, sp, #16
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	4608      	mov	r0, r1
 8011070:	4611      	mov	r1, r2
 8011072:	461a      	mov	r2, r3
 8011074:	4603      	mov	r3, r0
 8011076:	70fb      	strb	r3, [r7, #3]
 8011078:	460b      	mov	r3, r1
 801107a:	70bb      	strb	r3, [r7, #2]
 801107c:	4613      	mov	r3, r2
 801107e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011084:	2300      	movs	r3, #0
 8011086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801108e:	787c      	ldrb	r4, [r7, #1]
 8011090:	78ba      	ldrb	r2, [r7, #2]
 8011092:	78f9      	ldrb	r1, [r7, #3]
 8011094:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011098:	9303      	str	r3, [sp, #12]
 801109a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801109c:	9302      	str	r3, [sp, #8]
 801109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a0:	9301      	str	r3, [sp, #4]
 80110a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	4623      	mov	r3, r4
 80110aa:	f7f3 fccb 	bl	8004a44 <HAL_HCD_HC_SubmitRequest>
 80110ae:	4603      	mov	r3, r0
 80110b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 f89d 	bl	80111f4 <USBH_Get_USB_Status>
 80110ba:	4603      	mov	r3, r0
 80110bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110be:	7bbb      	ldrb	r3, [r7, #14]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3714      	adds	r7, #20
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd90      	pop	{r4, r7, pc}

080110c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80110da:	78fa      	ldrb	r2, [r7, #3]
 80110dc:	4611      	mov	r1, r2
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f3 ff5f 	bl	8004fa2 <HAL_HCD_HC_GetURBState>
 80110e4:	4603      	mov	r3, r0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b082      	sub	sp, #8
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
 80110f6:	460b      	mov	r3, r1
 80110f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011100:	2b00      	cmp	r3, #0
 8011102:	d103      	bne.n	801110c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	4618      	mov	r0, r3
 8011108:	f000 f8a0 	bl	801124c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801110c:	20c8      	movs	r0, #200	; 0xc8
 801110e:	f7f2 fcc1 	bl	8003a94 <HAL_Delay>
  return USBH_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	460b      	mov	r3, r1
 8011126:	70fb      	strb	r3, [r7, #3]
 8011128:	4613      	mov	r3, r2
 801112a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011132:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011134:	78fb      	ldrb	r3, [r7, #3]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	212c      	movs	r1, #44	; 0x2c
 801113a:	fb01 f303 	mul.w	r3, r1, r3
 801113e:	4413      	add	r3, r2
 8011140:	333b      	adds	r3, #59	; 0x3b
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d009      	beq.n	801115c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011148:	78fb      	ldrb	r3, [r7, #3]
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	212c      	movs	r1, #44	; 0x2c
 801114e:	fb01 f303 	mul.w	r3, r1, r3
 8011152:	4413      	add	r3, r2
 8011154:	3354      	adds	r3, #84	; 0x54
 8011156:	78ba      	ldrb	r2, [r7, #2]
 8011158:	701a      	strb	r2, [r3, #0]
 801115a:	e008      	b.n	801116e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801115c:	78fb      	ldrb	r3, [r7, #3]
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	212c      	movs	r1, #44	; 0x2c
 8011162:	fb01 f303 	mul.w	r3, r1, r3
 8011166:	4413      	add	r3, r2
 8011168:	3355      	adds	r3, #85	; 0x55
 801116a:	78ba      	ldrb	r2, [r7, #2]
 801116c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011192:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011194:	78fb      	ldrb	r3, [r7, #3]
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	212c      	movs	r1, #44	; 0x2c
 801119a:	fb01 f303 	mul.w	r3, r1, r3
 801119e:	4413      	add	r3, r2
 80111a0:	333b      	adds	r3, #59	; 0x3b
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d009      	beq.n	80111bc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	68ba      	ldr	r2, [r7, #8]
 80111ac:	212c      	movs	r1, #44	; 0x2c
 80111ae:	fb01 f303 	mul.w	r3, r1, r3
 80111b2:	4413      	add	r3, r2
 80111b4:	3354      	adds	r3, #84	; 0x54
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	73fb      	strb	r3, [r7, #15]
 80111ba:	e008      	b.n	80111ce <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80111bc:	78fb      	ldrb	r3, [r7, #3]
 80111be:	68ba      	ldr	r2, [r7, #8]
 80111c0:	212c      	movs	r1, #44	; 0x2c
 80111c2:	fb01 f303 	mul.w	r3, r1, r3
 80111c6:	4413      	add	r3, r2
 80111c8:	3355      	adds	r3, #85	; 0x55
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80111ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7f2 fc55 	bl	8003a94 <HAL_Delay>
}
 80111ea:	bf00      	nop
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	4603      	mov	r3, r0
 80111fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80111fe:	2300      	movs	r3, #0
 8011200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011202:	79fb      	ldrb	r3, [r7, #7]
 8011204:	2b03      	cmp	r3, #3
 8011206:	d817      	bhi.n	8011238 <USBH_Get_USB_Status+0x44>
 8011208:	a201      	add	r2, pc, #4	; (adr r2, 8011210 <USBH_Get_USB_Status+0x1c>)
 801120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801120e:	bf00      	nop
 8011210:	08011221 	.word	0x08011221
 8011214:	08011227 	.word	0x08011227
 8011218:	0801122d 	.word	0x0801122d
 801121c:	08011233 	.word	0x08011233
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	73fb      	strb	r3, [r7, #15]
    break;
 8011224:	e00b      	b.n	801123e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011226:	2302      	movs	r3, #2
 8011228:	73fb      	strb	r3, [r7, #15]
    break;
 801122a:	e008      	b.n	801123e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801122c:	2301      	movs	r3, #1
 801122e:	73fb      	strb	r3, [r7, #15]
    break;
 8011230:	e005      	b.n	801123e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011232:	2302      	movs	r3, #2
 8011234:	73fb      	strb	r3, [r7, #15]
    break;
 8011236:	e002      	b.n	801123e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011238:	2302      	movs	r3, #2
 801123a:	73fb      	strb	r3, [r7, #15]
    break;
 801123c:	bf00      	nop
  }
  return usb_status;
 801123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3714      	adds	r7, #20
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr

0801124c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	4603      	mov	r3, r0
 8011254:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801125a:	79fb      	ldrb	r3, [r7, #7]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011260:	2301      	movs	r3, #1
 8011262:	73fb      	strb	r3, [r7, #15]
 8011264:	e001      	b.n	801126a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011266:	2300      	movs	r3, #0
 8011268:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801126a:	7bfb      	ldrb	r3, [r7, #15]
 801126c:	461a      	mov	r2, r3
 801126e:	2110      	movs	r1, #16
 8011270:	4803      	ldr	r0, [pc, #12]	; (8011280 <MX_DriverVbusHS+0x34>)
 8011272:	f7f3 faa1 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8011276:	bf00      	nop
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	40020800 	.word	0x40020800

08011284 <atoi>:
 8011284:	220a      	movs	r2, #10
 8011286:	2100      	movs	r1, #0
 8011288:	f000 bad6 	b.w	8011838 <strtol>

0801128c <__errno>:
 801128c:	4b01      	ldr	r3, [pc, #4]	; (8011294 <__errno+0x8>)
 801128e:	6818      	ldr	r0, [r3, #0]
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	20000118 	.word	0x20000118

08011298 <__libc_init_array>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	4d0d      	ldr	r5, [pc, #52]	; (80112d0 <__libc_init_array+0x38>)
 801129c:	4c0d      	ldr	r4, [pc, #52]	; (80112d4 <__libc_init_array+0x3c>)
 801129e:	1b64      	subs	r4, r4, r5
 80112a0:	10a4      	asrs	r4, r4, #2
 80112a2:	2600      	movs	r6, #0
 80112a4:	42a6      	cmp	r6, r4
 80112a6:	d109      	bne.n	80112bc <__libc_init_array+0x24>
 80112a8:	4d0b      	ldr	r5, [pc, #44]	; (80112d8 <__libc_init_array+0x40>)
 80112aa:	4c0c      	ldr	r4, [pc, #48]	; (80112dc <__libc_init_array+0x44>)
 80112ac:	f001 fb4a 	bl	8012944 <_init>
 80112b0:	1b64      	subs	r4, r4, r5
 80112b2:	10a4      	asrs	r4, r4, #2
 80112b4:	2600      	movs	r6, #0
 80112b6:	42a6      	cmp	r6, r4
 80112b8:	d105      	bne.n	80112c6 <__libc_init_array+0x2e>
 80112ba:	bd70      	pop	{r4, r5, r6, pc}
 80112bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80112c0:	4798      	blx	r3
 80112c2:	3601      	adds	r6, #1
 80112c4:	e7ee      	b.n	80112a4 <__libc_init_array+0xc>
 80112c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80112ca:	4798      	blx	r3
 80112cc:	3601      	adds	r6, #1
 80112ce:	e7f2      	b.n	80112b6 <__libc_init_array+0x1e>
 80112d0:	0801362c 	.word	0x0801362c
 80112d4:	0801362c 	.word	0x0801362c
 80112d8:	0801362c 	.word	0x0801362c
 80112dc:	08013630 	.word	0x08013630

080112e0 <malloc>:
 80112e0:	4b02      	ldr	r3, [pc, #8]	; (80112ec <malloc+0xc>)
 80112e2:	4601      	mov	r1, r0
 80112e4:	6818      	ldr	r0, [r3, #0]
 80112e6:	f000 b88d 	b.w	8011404 <_malloc_r>
 80112ea:	bf00      	nop
 80112ec:	20000118 	.word	0x20000118

080112f0 <free>:
 80112f0:	4b02      	ldr	r3, [pc, #8]	; (80112fc <free+0xc>)
 80112f2:	4601      	mov	r1, r0
 80112f4:	6818      	ldr	r0, [r3, #0]
 80112f6:	f000 b819 	b.w	801132c <_free_r>
 80112fa:	bf00      	nop
 80112fc:	20000118 	.word	0x20000118

08011300 <memcpy>:
 8011300:	440a      	add	r2, r1
 8011302:	4291      	cmp	r1, r2
 8011304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011308:	d100      	bne.n	801130c <memcpy+0xc>
 801130a:	4770      	bx	lr
 801130c:	b510      	push	{r4, lr}
 801130e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011316:	4291      	cmp	r1, r2
 8011318:	d1f9      	bne.n	801130e <memcpy+0xe>
 801131a:	bd10      	pop	{r4, pc}

0801131c <memset>:
 801131c:	4402      	add	r2, r0
 801131e:	4603      	mov	r3, r0
 8011320:	4293      	cmp	r3, r2
 8011322:	d100      	bne.n	8011326 <memset+0xa>
 8011324:	4770      	bx	lr
 8011326:	f803 1b01 	strb.w	r1, [r3], #1
 801132a:	e7f9      	b.n	8011320 <memset+0x4>

0801132c <_free_r>:
 801132c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801132e:	2900      	cmp	r1, #0
 8011330:	d044      	beq.n	80113bc <_free_r+0x90>
 8011332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011336:	9001      	str	r0, [sp, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	f1a1 0404 	sub.w	r4, r1, #4
 801133e:	bfb8      	it	lt
 8011340:	18e4      	addlt	r4, r4, r3
 8011342:	f000 fca3 	bl	8011c8c <__malloc_lock>
 8011346:	4a1e      	ldr	r2, [pc, #120]	; (80113c0 <_free_r+0x94>)
 8011348:	9801      	ldr	r0, [sp, #4]
 801134a:	6813      	ldr	r3, [r2, #0]
 801134c:	b933      	cbnz	r3, 801135c <_free_r+0x30>
 801134e:	6063      	str	r3, [r4, #4]
 8011350:	6014      	str	r4, [r2, #0]
 8011352:	b003      	add	sp, #12
 8011354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011358:	f000 bc9e 	b.w	8011c98 <__malloc_unlock>
 801135c:	42a3      	cmp	r3, r4
 801135e:	d908      	bls.n	8011372 <_free_r+0x46>
 8011360:	6825      	ldr	r5, [r4, #0]
 8011362:	1961      	adds	r1, r4, r5
 8011364:	428b      	cmp	r3, r1
 8011366:	bf01      	itttt	eq
 8011368:	6819      	ldreq	r1, [r3, #0]
 801136a:	685b      	ldreq	r3, [r3, #4]
 801136c:	1949      	addeq	r1, r1, r5
 801136e:	6021      	streq	r1, [r4, #0]
 8011370:	e7ed      	b.n	801134e <_free_r+0x22>
 8011372:	461a      	mov	r2, r3
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	b10b      	cbz	r3, 801137c <_free_r+0x50>
 8011378:	42a3      	cmp	r3, r4
 801137a:	d9fa      	bls.n	8011372 <_free_r+0x46>
 801137c:	6811      	ldr	r1, [r2, #0]
 801137e:	1855      	adds	r5, r2, r1
 8011380:	42a5      	cmp	r5, r4
 8011382:	d10b      	bne.n	801139c <_free_r+0x70>
 8011384:	6824      	ldr	r4, [r4, #0]
 8011386:	4421      	add	r1, r4
 8011388:	1854      	adds	r4, r2, r1
 801138a:	42a3      	cmp	r3, r4
 801138c:	6011      	str	r1, [r2, #0]
 801138e:	d1e0      	bne.n	8011352 <_free_r+0x26>
 8011390:	681c      	ldr	r4, [r3, #0]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	6053      	str	r3, [r2, #4]
 8011396:	4421      	add	r1, r4
 8011398:	6011      	str	r1, [r2, #0]
 801139a:	e7da      	b.n	8011352 <_free_r+0x26>
 801139c:	d902      	bls.n	80113a4 <_free_r+0x78>
 801139e:	230c      	movs	r3, #12
 80113a0:	6003      	str	r3, [r0, #0]
 80113a2:	e7d6      	b.n	8011352 <_free_r+0x26>
 80113a4:	6825      	ldr	r5, [r4, #0]
 80113a6:	1961      	adds	r1, r4, r5
 80113a8:	428b      	cmp	r3, r1
 80113aa:	bf04      	itt	eq
 80113ac:	6819      	ldreq	r1, [r3, #0]
 80113ae:	685b      	ldreq	r3, [r3, #4]
 80113b0:	6063      	str	r3, [r4, #4]
 80113b2:	bf04      	itt	eq
 80113b4:	1949      	addeq	r1, r1, r5
 80113b6:	6021      	streq	r1, [r4, #0]
 80113b8:	6054      	str	r4, [r2, #4]
 80113ba:	e7ca      	b.n	8011352 <_free_r+0x26>
 80113bc:	b003      	add	sp, #12
 80113be:	bd30      	pop	{r4, r5, pc}
 80113c0:	20003f3c 	.word	0x20003f3c

080113c4 <sbrk_aligned>:
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	4e0e      	ldr	r6, [pc, #56]	; (8011400 <sbrk_aligned+0x3c>)
 80113c8:	460c      	mov	r4, r1
 80113ca:	6831      	ldr	r1, [r6, #0]
 80113cc:	4605      	mov	r5, r0
 80113ce:	b911      	cbnz	r1, 80113d6 <sbrk_aligned+0x12>
 80113d0:	f000 f8ba 	bl	8011548 <_sbrk_r>
 80113d4:	6030      	str	r0, [r6, #0]
 80113d6:	4621      	mov	r1, r4
 80113d8:	4628      	mov	r0, r5
 80113da:	f000 f8b5 	bl	8011548 <_sbrk_r>
 80113de:	1c43      	adds	r3, r0, #1
 80113e0:	d00a      	beq.n	80113f8 <sbrk_aligned+0x34>
 80113e2:	1cc4      	adds	r4, r0, #3
 80113e4:	f024 0403 	bic.w	r4, r4, #3
 80113e8:	42a0      	cmp	r0, r4
 80113ea:	d007      	beq.n	80113fc <sbrk_aligned+0x38>
 80113ec:	1a21      	subs	r1, r4, r0
 80113ee:	4628      	mov	r0, r5
 80113f0:	f000 f8aa 	bl	8011548 <_sbrk_r>
 80113f4:	3001      	adds	r0, #1
 80113f6:	d101      	bne.n	80113fc <sbrk_aligned+0x38>
 80113f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80113fc:	4620      	mov	r0, r4
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	20003f40 	.word	0x20003f40

08011404 <_malloc_r>:
 8011404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011408:	1ccd      	adds	r5, r1, #3
 801140a:	f025 0503 	bic.w	r5, r5, #3
 801140e:	3508      	adds	r5, #8
 8011410:	2d0c      	cmp	r5, #12
 8011412:	bf38      	it	cc
 8011414:	250c      	movcc	r5, #12
 8011416:	2d00      	cmp	r5, #0
 8011418:	4607      	mov	r7, r0
 801141a:	db01      	blt.n	8011420 <_malloc_r+0x1c>
 801141c:	42a9      	cmp	r1, r5
 801141e:	d905      	bls.n	801142c <_malloc_r+0x28>
 8011420:	230c      	movs	r3, #12
 8011422:	603b      	str	r3, [r7, #0]
 8011424:	2600      	movs	r6, #0
 8011426:	4630      	mov	r0, r6
 8011428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801142c:	4e2e      	ldr	r6, [pc, #184]	; (80114e8 <_malloc_r+0xe4>)
 801142e:	f000 fc2d 	bl	8011c8c <__malloc_lock>
 8011432:	6833      	ldr	r3, [r6, #0]
 8011434:	461c      	mov	r4, r3
 8011436:	bb34      	cbnz	r4, 8011486 <_malloc_r+0x82>
 8011438:	4629      	mov	r1, r5
 801143a:	4638      	mov	r0, r7
 801143c:	f7ff ffc2 	bl	80113c4 <sbrk_aligned>
 8011440:	1c43      	adds	r3, r0, #1
 8011442:	4604      	mov	r4, r0
 8011444:	d14d      	bne.n	80114e2 <_malloc_r+0xde>
 8011446:	6834      	ldr	r4, [r6, #0]
 8011448:	4626      	mov	r6, r4
 801144a:	2e00      	cmp	r6, #0
 801144c:	d140      	bne.n	80114d0 <_malloc_r+0xcc>
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	4631      	mov	r1, r6
 8011452:	4638      	mov	r0, r7
 8011454:	eb04 0803 	add.w	r8, r4, r3
 8011458:	f000 f876 	bl	8011548 <_sbrk_r>
 801145c:	4580      	cmp	r8, r0
 801145e:	d13a      	bne.n	80114d6 <_malloc_r+0xd2>
 8011460:	6821      	ldr	r1, [r4, #0]
 8011462:	3503      	adds	r5, #3
 8011464:	1a6d      	subs	r5, r5, r1
 8011466:	f025 0503 	bic.w	r5, r5, #3
 801146a:	3508      	adds	r5, #8
 801146c:	2d0c      	cmp	r5, #12
 801146e:	bf38      	it	cc
 8011470:	250c      	movcc	r5, #12
 8011472:	4629      	mov	r1, r5
 8011474:	4638      	mov	r0, r7
 8011476:	f7ff ffa5 	bl	80113c4 <sbrk_aligned>
 801147a:	3001      	adds	r0, #1
 801147c:	d02b      	beq.n	80114d6 <_malloc_r+0xd2>
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	442b      	add	r3, r5
 8011482:	6023      	str	r3, [r4, #0]
 8011484:	e00e      	b.n	80114a4 <_malloc_r+0xa0>
 8011486:	6822      	ldr	r2, [r4, #0]
 8011488:	1b52      	subs	r2, r2, r5
 801148a:	d41e      	bmi.n	80114ca <_malloc_r+0xc6>
 801148c:	2a0b      	cmp	r2, #11
 801148e:	d916      	bls.n	80114be <_malloc_r+0xba>
 8011490:	1961      	adds	r1, r4, r5
 8011492:	42a3      	cmp	r3, r4
 8011494:	6025      	str	r5, [r4, #0]
 8011496:	bf18      	it	ne
 8011498:	6059      	strne	r1, [r3, #4]
 801149a:	6863      	ldr	r3, [r4, #4]
 801149c:	bf08      	it	eq
 801149e:	6031      	streq	r1, [r6, #0]
 80114a0:	5162      	str	r2, [r4, r5]
 80114a2:	604b      	str	r3, [r1, #4]
 80114a4:	4638      	mov	r0, r7
 80114a6:	f104 060b 	add.w	r6, r4, #11
 80114aa:	f000 fbf5 	bl	8011c98 <__malloc_unlock>
 80114ae:	f026 0607 	bic.w	r6, r6, #7
 80114b2:	1d23      	adds	r3, r4, #4
 80114b4:	1af2      	subs	r2, r6, r3
 80114b6:	d0b6      	beq.n	8011426 <_malloc_r+0x22>
 80114b8:	1b9b      	subs	r3, r3, r6
 80114ba:	50a3      	str	r3, [r4, r2]
 80114bc:	e7b3      	b.n	8011426 <_malloc_r+0x22>
 80114be:	6862      	ldr	r2, [r4, #4]
 80114c0:	42a3      	cmp	r3, r4
 80114c2:	bf0c      	ite	eq
 80114c4:	6032      	streq	r2, [r6, #0]
 80114c6:	605a      	strne	r2, [r3, #4]
 80114c8:	e7ec      	b.n	80114a4 <_malloc_r+0xa0>
 80114ca:	4623      	mov	r3, r4
 80114cc:	6864      	ldr	r4, [r4, #4]
 80114ce:	e7b2      	b.n	8011436 <_malloc_r+0x32>
 80114d0:	4634      	mov	r4, r6
 80114d2:	6876      	ldr	r6, [r6, #4]
 80114d4:	e7b9      	b.n	801144a <_malloc_r+0x46>
 80114d6:	230c      	movs	r3, #12
 80114d8:	603b      	str	r3, [r7, #0]
 80114da:	4638      	mov	r0, r7
 80114dc:	f000 fbdc 	bl	8011c98 <__malloc_unlock>
 80114e0:	e7a1      	b.n	8011426 <_malloc_r+0x22>
 80114e2:	6025      	str	r5, [r4, #0]
 80114e4:	e7de      	b.n	80114a4 <_malloc_r+0xa0>
 80114e6:	bf00      	nop
 80114e8:	20003f3c 	.word	0x20003f3c

080114ec <iprintf>:
 80114ec:	b40f      	push	{r0, r1, r2, r3}
 80114ee:	4b0a      	ldr	r3, [pc, #40]	; (8011518 <iprintf+0x2c>)
 80114f0:	b513      	push	{r0, r1, r4, lr}
 80114f2:	681c      	ldr	r4, [r3, #0]
 80114f4:	b124      	cbz	r4, 8011500 <iprintf+0x14>
 80114f6:	69a3      	ldr	r3, [r4, #24]
 80114f8:	b913      	cbnz	r3, 8011500 <iprintf+0x14>
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fac0 	bl	8011a80 <__sinit>
 8011500:	ab05      	add	r3, sp, #20
 8011502:	9a04      	ldr	r2, [sp, #16]
 8011504:	68a1      	ldr	r1, [r4, #8]
 8011506:	9301      	str	r3, [sp, #4]
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fd51 	bl	8011fb0 <_vfiprintf_r>
 801150e:	b002      	add	sp, #8
 8011510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011514:	b004      	add	sp, #16
 8011516:	4770      	bx	lr
 8011518:	20000118 	.word	0x20000118

0801151c <putchar>:
 801151c:	4b09      	ldr	r3, [pc, #36]	; (8011544 <putchar+0x28>)
 801151e:	b513      	push	{r0, r1, r4, lr}
 8011520:	681c      	ldr	r4, [r3, #0]
 8011522:	4601      	mov	r1, r0
 8011524:	b134      	cbz	r4, 8011534 <putchar+0x18>
 8011526:	69a3      	ldr	r3, [r4, #24]
 8011528:	b923      	cbnz	r3, 8011534 <putchar+0x18>
 801152a:	9001      	str	r0, [sp, #4]
 801152c:	4620      	mov	r0, r4
 801152e:	f000 faa7 	bl	8011a80 <__sinit>
 8011532:	9901      	ldr	r1, [sp, #4]
 8011534:	68a2      	ldr	r2, [r4, #8]
 8011536:	4620      	mov	r0, r4
 8011538:	b002      	add	sp, #8
 801153a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801153e:	f000 bffb 	b.w	8012538 <_putc_r>
 8011542:	bf00      	nop
 8011544:	20000118 	.word	0x20000118

08011548 <_sbrk_r>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	4d06      	ldr	r5, [pc, #24]	; (8011564 <_sbrk_r+0x1c>)
 801154c:	2300      	movs	r3, #0
 801154e:	4604      	mov	r4, r0
 8011550:	4608      	mov	r0, r1
 8011552:	602b      	str	r3, [r5, #0]
 8011554:	f7f2 f8f8 	bl	8003748 <_sbrk>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_sbrk_r+0x1a>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_sbrk_r+0x1a>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	20003f48 	.word	0x20003f48

08011568 <setvbuf>:
 8011568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801156c:	461d      	mov	r5, r3
 801156e:	4b5d      	ldr	r3, [pc, #372]	; (80116e4 <setvbuf+0x17c>)
 8011570:	681f      	ldr	r7, [r3, #0]
 8011572:	4604      	mov	r4, r0
 8011574:	460e      	mov	r6, r1
 8011576:	4690      	mov	r8, r2
 8011578:	b127      	cbz	r7, 8011584 <setvbuf+0x1c>
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	b913      	cbnz	r3, 8011584 <setvbuf+0x1c>
 801157e:	4638      	mov	r0, r7
 8011580:	f000 fa7e 	bl	8011a80 <__sinit>
 8011584:	4b58      	ldr	r3, [pc, #352]	; (80116e8 <setvbuf+0x180>)
 8011586:	429c      	cmp	r4, r3
 8011588:	d167      	bne.n	801165a <setvbuf+0xf2>
 801158a:	687c      	ldr	r4, [r7, #4]
 801158c:	f1b8 0f02 	cmp.w	r8, #2
 8011590:	d006      	beq.n	80115a0 <setvbuf+0x38>
 8011592:	f1b8 0f01 	cmp.w	r8, #1
 8011596:	f200 809f 	bhi.w	80116d8 <setvbuf+0x170>
 801159a:	2d00      	cmp	r5, #0
 801159c:	f2c0 809c 	blt.w	80116d8 <setvbuf+0x170>
 80115a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115a2:	07db      	lsls	r3, r3, #31
 80115a4:	d405      	bmi.n	80115b2 <setvbuf+0x4a>
 80115a6:	89a3      	ldrh	r3, [r4, #12]
 80115a8:	0598      	lsls	r0, r3, #22
 80115aa:	d402      	bmi.n	80115b2 <setvbuf+0x4a>
 80115ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ae:	f000 fb05 	bl	8011bbc <__retarget_lock_acquire_recursive>
 80115b2:	4621      	mov	r1, r4
 80115b4:	4638      	mov	r0, r7
 80115b6:	f000 f9cf 	bl	8011958 <_fflush_r>
 80115ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115bc:	b141      	cbz	r1, 80115d0 <setvbuf+0x68>
 80115be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115c2:	4299      	cmp	r1, r3
 80115c4:	d002      	beq.n	80115cc <setvbuf+0x64>
 80115c6:	4638      	mov	r0, r7
 80115c8:	f7ff feb0 	bl	801132c <_free_r>
 80115cc:	2300      	movs	r3, #0
 80115ce:	6363      	str	r3, [r4, #52]	; 0x34
 80115d0:	2300      	movs	r3, #0
 80115d2:	61a3      	str	r3, [r4, #24]
 80115d4:	6063      	str	r3, [r4, #4]
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	0619      	lsls	r1, r3, #24
 80115da:	d503      	bpl.n	80115e4 <setvbuf+0x7c>
 80115dc:	6921      	ldr	r1, [r4, #16]
 80115de:	4638      	mov	r0, r7
 80115e0:	f7ff fea4 	bl	801132c <_free_r>
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80115ea:	f023 0303 	bic.w	r3, r3, #3
 80115ee:	f1b8 0f02 	cmp.w	r8, #2
 80115f2:	81a3      	strh	r3, [r4, #12]
 80115f4:	d06c      	beq.n	80116d0 <setvbuf+0x168>
 80115f6:	ab01      	add	r3, sp, #4
 80115f8:	466a      	mov	r2, sp
 80115fa:	4621      	mov	r1, r4
 80115fc:	4638      	mov	r0, r7
 80115fe:	f000 fadf 	bl	8011bc0 <__swhatbuf_r>
 8011602:	89a3      	ldrh	r3, [r4, #12]
 8011604:	4318      	orrs	r0, r3
 8011606:	81a0      	strh	r0, [r4, #12]
 8011608:	2d00      	cmp	r5, #0
 801160a:	d130      	bne.n	801166e <setvbuf+0x106>
 801160c:	9d00      	ldr	r5, [sp, #0]
 801160e:	4628      	mov	r0, r5
 8011610:	f7ff fe66 	bl	80112e0 <malloc>
 8011614:	4606      	mov	r6, r0
 8011616:	2800      	cmp	r0, #0
 8011618:	d155      	bne.n	80116c6 <setvbuf+0x15e>
 801161a:	f8dd 9000 	ldr.w	r9, [sp]
 801161e:	45a9      	cmp	r9, r5
 8011620:	d14a      	bne.n	80116b8 <setvbuf+0x150>
 8011622:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011626:	2200      	movs	r2, #0
 8011628:	60a2      	str	r2, [r4, #8]
 801162a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801162e:	6022      	str	r2, [r4, #0]
 8011630:	6122      	str	r2, [r4, #16]
 8011632:	2201      	movs	r2, #1
 8011634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011638:	6162      	str	r2, [r4, #20]
 801163a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801163c:	f043 0302 	orr.w	r3, r3, #2
 8011640:	07d2      	lsls	r2, r2, #31
 8011642:	81a3      	strh	r3, [r4, #12]
 8011644:	d405      	bmi.n	8011652 <setvbuf+0xea>
 8011646:	f413 7f00 	tst.w	r3, #512	; 0x200
 801164a:	d102      	bne.n	8011652 <setvbuf+0xea>
 801164c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801164e:	f000 fab6 	bl	8011bbe <__retarget_lock_release_recursive>
 8011652:	4628      	mov	r0, r5
 8011654:	b003      	add	sp, #12
 8011656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165a:	4b24      	ldr	r3, [pc, #144]	; (80116ec <setvbuf+0x184>)
 801165c:	429c      	cmp	r4, r3
 801165e:	d101      	bne.n	8011664 <setvbuf+0xfc>
 8011660:	68bc      	ldr	r4, [r7, #8]
 8011662:	e793      	b.n	801158c <setvbuf+0x24>
 8011664:	4b22      	ldr	r3, [pc, #136]	; (80116f0 <setvbuf+0x188>)
 8011666:	429c      	cmp	r4, r3
 8011668:	bf08      	it	eq
 801166a:	68fc      	ldreq	r4, [r7, #12]
 801166c:	e78e      	b.n	801158c <setvbuf+0x24>
 801166e:	2e00      	cmp	r6, #0
 8011670:	d0cd      	beq.n	801160e <setvbuf+0xa6>
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	b913      	cbnz	r3, 801167c <setvbuf+0x114>
 8011676:	4638      	mov	r0, r7
 8011678:	f000 fa02 	bl	8011a80 <__sinit>
 801167c:	f1b8 0f01 	cmp.w	r8, #1
 8011680:	bf08      	it	eq
 8011682:	89a3      	ldrheq	r3, [r4, #12]
 8011684:	6026      	str	r6, [r4, #0]
 8011686:	bf04      	itt	eq
 8011688:	f043 0301 	orreq.w	r3, r3, #1
 801168c:	81a3      	strheq	r3, [r4, #12]
 801168e:	89a2      	ldrh	r2, [r4, #12]
 8011690:	f012 0308 	ands.w	r3, r2, #8
 8011694:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011698:	d01c      	beq.n	80116d4 <setvbuf+0x16c>
 801169a:	07d3      	lsls	r3, r2, #31
 801169c:	bf41      	itttt	mi
 801169e:	2300      	movmi	r3, #0
 80116a0:	426d      	negmi	r5, r5
 80116a2:	60a3      	strmi	r3, [r4, #8]
 80116a4:	61a5      	strmi	r5, [r4, #24]
 80116a6:	bf58      	it	pl
 80116a8:	60a5      	strpl	r5, [r4, #8]
 80116aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80116ac:	f015 0501 	ands.w	r5, r5, #1
 80116b0:	d115      	bne.n	80116de <setvbuf+0x176>
 80116b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80116b6:	e7c8      	b.n	801164a <setvbuf+0xe2>
 80116b8:	4648      	mov	r0, r9
 80116ba:	f7ff fe11 	bl	80112e0 <malloc>
 80116be:	4606      	mov	r6, r0
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d0ae      	beq.n	8011622 <setvbuf+0xba>
 80116c4:	464d      	mov	r5, r9
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116cc:	81a3      	strh	r3, [r4, #12]
 80116ce:	e7d0      	b.n	8011672 <setvbuf+0x10a>
 80116d0:	2500      	movs	r5, #0
 80116d2:	e7a8      	b.n	8011626 <setvbuf+0xbe>
 80116d4:	60a3      	str	r3, [r4, #8]
 80116d6:	e7e8      	b.n	80116aa <setvbuf+0x142>
 80116d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80116dc:	e7b9      	b.n	8011652 <setvbuf+0xea>
 80116de:	2500      	movs	r5, #0
 80116e0:	e7b7      	b.n	8011652 <setvbuf+0xea>
 80116e2:	bf00      	nop
 80116e4:	20000118 	.word	0x20000118
 80116e8:	080135b0 	.word	0x080135b0
 80116ec:	080135d0 	.word	0x080135d0
 80116f0:	08013590 	.word	0x08013590

080116f4 <siprintf>:
 80116f4:	b40e      	push	{r1, r2, r3}
 80116f6:	b500      	push	{lr}
 80116f8:	b09c      	sub	sp, #112	; 0x70
 80116fa:	ab1d      	add	r3, sp, #116	; 0x74
 80116fc:	9002      	str	r0, [sp, #8]
 80116fe:	9006      	str	r0, [sp, #24]
 8011700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011704:	4809      	ldr	r0, [pc, #36]	; (801172c <siprintf+0x38>)
 8011706:	9107      	str	r1, [sp, #28]
 8011708:	9104      	str	r1, [sp, #16]
 801170a:	4909      	ldr	r1, [pc, #36]	; (8011730 <siprintf+0x3c>)
 801170c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011710:	9105      	str	r1, [sp, #20]
 8011712:	6800      	ldr	r0, [r0, #0]
 8011714:	9301      	str	r3, [sp, #4]
 8011716:	a902      	add	r1, sp, #8
 8011718:	f000 fb20 	bl	8011d5c <_svfiprintf_r>
 801171c:	9b02      	ldr	r3, [sp, #8]
 801171e:	2200      	movs	r2, #0
 8011720:	701a      	strb	r2, [r3, #0]
 8011722:	b01c      	add	sp, #112	; 0x70
 8011724:	f85d eb04 	ldr.w	lr, [sp], #4
 8011728:	b003      	add	sp, #12
 801172a:	4770      	bx	lr
 801172c:	20000118 	.word	0x20000118
 8011730:	ffff0208 	.word	0xffff0208

08011734 <_strtol_l.constprop.0>:
 8011734:	2b01      	cmp	r3, #1
 8011736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801173a:	d001      	beq.n	8011740 <_strtol_l.constprop.0+0xc>
 801173c:	2b24      	cmp	r3, #36	; 0x24
 801173e:	d906      	bls.n	801174e <_strtol_l.constprop.0+0x1a>
 8011740:	f7ff fda4 	bl	801128c <__errno>
 8011744:	2316      	movs	r3, #22
 8011746:	6003      	str	r3, [r0, #0]
 8011748:	2000      	movs	r0, #0
 801174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801174e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011834 <_strtol_l.constprop.0+0x100>
 8011752:	460d      	mov	r5, r1
 8011754:	462e      	mov	r6, r5
 8011756:	f815 4b01 	ldrb.w	r4, [r5], #1
 801175a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801175e:	f017 0708 	ands.w	r7, r7, #8
 8011762:	d1f7      	bne.n	8011754 <_strtol_l.constprop.0+0x20>
 8011764:	2c2d      	cmp	r4, #45	; 0x2d
 8011766:	d132      	bne.n	80117ce <_strtol_l.constprop.0+0x9a>
 8011768:	782c      	ldrb	r4, [r5, #0]
 801176a:	2701      	movs	r7, #1
 801176c:	1cb5      	adds	r5, r6, #2
 801176e:	2b00      	cmp	r3, #0
 8011770:	d05b      	beq.n	801182a <_strtol_l.constprop.0+0xf6>
 8011772:	2b10      	cmp	r3, #16
 8011774:	d109      	bne.n	801178a <_strtol_l.constprop.0+0x56>
 8011776:	2c30      	cmp	r4, #48	; 0x30
 8011778:	d107      	bne.n	801178a <_strtol_l.constprop.0+0x56>
 801177a:	782c      	ldrb	r4, [r5, #0]
 801177c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011780:	2c58      	cmp	r4, #88	; 0x58
 8011782:	d14d      	bne.n	8011820 <_strtol_l.constprop.0+0xec>
 8011784:	786c      	ldrb	r4, [r5, #1]
 8011786:	2310      	movs	r3, #16
 8011788:	3502      	adds	r5, #2
 801178a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801178e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011792:	f04f 0c00 	mov.w	ip, #0
 8011796:	fbb8 f9f3 	udiv	r9, r8, r3
 801179a:	4666      	mov	r6, ip
 801179c:	fb03 8a19 	mls	sl, r3, r9, r8
 80117a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80117a4:	f1be 0f09 	cmp.w	lr, #9
 80117a8:	d816      	bhi.n	80117d8 <_strtol_l.constprop.0+0xa4>
 80117aa:	4674      	mov	r4, lr
 80117ac:	42a3      	cmp	r3, r4
 80117ae:	dd24      	ble.n	80117fa <_strtol_l.constprop.0+0xc6>
 80117b0:	f1bc 0f00 	cmp.w	ip, #0
 80117b4:	db1e      	blt.n	80117f4 <_strtol_l.constprop.0+0xc0>
 80117b6:	45b1      	cmp	r9, r6
 80117b8:	d31c      	bcc.n	80117f4 <_strtol_l.constprop.0+0xc0>
 80117ba:	d101      	bne.n	80117c0 <_strtol_l.constprop.0+0x8c>
 80117bc:	45a2      	cmp	sl, r4
 80117be:	db19      	blt.n	80117f4 <_strtol_l.constprop.0+0xc0>
 80117c0:	fb06 4603 	mla	r6, r6, r3, r4
 80117c4:	f04f 0c01 	mov.w	ip, #1
 80117c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117cc:	e7e8      	b.n	80117a0 <_strtol_l.constprop.0+0x6c>
 80117ce:	2c2b      	cmp	r4, #43	; 0x2b
 80117d0:	bf04      	itt	eq
 80117d2:	782c      	ldrbeq	r4, [r5, #0]
 80117d4:	1cb5      	addeq	r5, r6, #2
 80117d6:	e7ca      	b.n	801176e <_strtol_l.constprop.0+0x3a>
 80117d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80117dc:	f1be 0f19 	cmp.w	lr, #25
 80117e0:	d801      	bhi.n	80117e6 <_strtol_l.constprop.0+0xb2>
 80117e2:	3c37      	subs	r4, #55	; 0x37
 80117e4:	e7e2      	b.n	80117ac <_strtol_l.constprop.0+0x78>
 80117e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80117ea:	f1be 0f19 	cmp.w	lr, #25
 80117ee:	d804      	bhi.n	80117fa <_strtol_l.constprop.0+0xc6>
 80117f0:	3c57      	subs	r4, #87	; 0x57
 80117f2:	e7db      	b.n	80117ac <_strtol_l.constprop.0+0x78>
 80117f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80117f8:	e7e6      	b.n	80117c8 <_strtol_l.constprop.0+0x94>
 80117fa:	f1bc 0f00 	cmp.w	ip, #0
 80117fe:	da05      	bge.n	801180c <_strtol_l.constprop.0+0xd8>
 8011800:	2322      	movs	r3, #34	; 0x22
 8011802:	6003      	str	r3, [r0, #0]
 8011804:	4646      	mov	r6, r8
 8011806:	b942      	cbnz	r2, 801181a <_strtol_l.constprop.0+0xe6>
 8011808:	4630      	mov	r0, r6
 801180a:	e79e      	b.n	801174a <_strtol_l.constprop.0+0x16>
 801180c:	b107      	cbz	r7, 8011810 <_strtol_l.constprop.0+0xdc>
 801180e:	4276      	negs	r6, r6
 8011810:	2a00      	cmp	r2, #0
 8011812:	d0f9      	beq.n	8011808 <_strtol_l.constprop.0+0xd4>
 8011814:	f1bc 0f00 	cmp.w	ip, #0
 8011818:	d000      	beq.n	801181c <_strtol_l.constprop.0+0xe8>
 801181a:	1e69      	subs	r1, r5, #1
 801181c:	6011      	str	r1, [r2, #0]
 801181e:	e7f3      	b.n	8011808 <_strtol_l.constprop.0+0xd4>
 8011820:	2430      	movs	r4, #48	; 0x30
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1b1      	bne.n	801178a <_strtol_l.constprop.0+0x56>
 8011826:	2308      	movs	r3, #8
 8011828:	e7af      	b.n	801178a <_strtol_l.constprop.0+0x56>
 801182a:	2c30      	cmp	r4, #48	; 0x30
 801182c:	d0a5      	beq.n	801177a <_strtol_l.constprop.0+0x46>
 801182e:	230a      	movs	r3, #10
 8011830:	e7ab      	b.n	801178a <_strtol_l.constprop.0+0x56>
 8011832:	bf00      	nop
 8011834:	0801348d 	.word	0x0801348d

08011838 <strtol>:
 8011838:	4613      	mov	r3, r2
 801183a:	460a      	mov	r2, r1
 801183c:	4601      	mov	r1, r0
 801183e:	4802      	ldr	r0, [pc, #8]	; (8011848 <strtol+0x10>)
 8011840:	6800      	ldr	r0, [r0, #0]
 8011842:	f7ff bf77 	b.w	8011734 <_strtol_l.constprop.0>
 8011846:	bf00      	nop
 8011848:	20000118 	.word	0x20000118

0801184c <__sflush_r>:
 801184c:	898a      	ldrh	r2, [r1, #12]
 801184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011852:	4605      	mov	r5, r0
 8011854:	0710      	lsls	r0, r2, #28
 8011856:	460c      	mov	r4, r1
 8011858:	d458      	bmi.n	801190c <__sflush_r+0xc0>
 801185a:	684b      	ldr	r3, [r1, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	dc05      	bgt.n	801186c <__sflush_r+0x20>
 8011860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011862:	2b00      	cmp	r3, #0
 8011864:	dc02      	bgt.n	801186c <__sflush_r+0x20>
 8011866:	2000      	movs	r0, #0
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801186e:	2e00      	cmp	r6, #0
 8011870:	d0f9      	beq.n	8011866 <__sflush_r+0x1a>
 8011872:	2300      	movs	r3, #0
 8011874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011878:	682f      	ldr	r7, [r5, #0]
 801187a:	602b      	str	r3, [r5, #0]
 801187c:	d032      	beq.n	80118e4 <__sflush_r+0x98>
 801187e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011880:	89a3      	ldrh	r3, [r4, #12]
 8011882:	075a      	lsls	r2, r3, #29
 8011884:	d505      	bpl.n	8011892 <__sflush_r+0x46>
 8011886:	6863      	ldr	r3, [r4, #4]
 8011888:	1ac0      	subs	r0, r0, r3
 801188a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801188c:	b10b      	cbz	r3, 8011892 <__sflush_r+0x46>
 801188e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011890:	1ac0      	subs	r0, r0, r3
 8011892:	2300      	movs	r3, #0
 8011894:	4602      	mov	r2, r0
 8011896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011898:	6a21      	ldr	r1, [r4, #32]
 801189a:	4628      	mov	r0, r5
 801189c:	47b0      	blx	r6
 801189e:	1c43      	adds	r3, r0, #1
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	d106      	bne.n	80118b2 <__sflush_r+0x66>
 80118a4:	6829      	ldr	r1, [r5, #0]
 80118a6:	291d      	cmp	r1, #29
 80118a8:	d82c      	bhi.n	8011904 <__sflush_r+0xb8>
 80118aa:	4a2a      	ldr	r2, [pc, #168]	; (8011954 <__sflush_r+0x108>)
 80118ac:	40ca      	lsrs	r2, r1
 80118ae:	07d6      	lsls	r6, r2, #31
 80118b0:	d528      	bpl.n	8011904 <__sflush_r+0xb8>
 80118b2:	2200      	movs	r2, #0
 80118b4:	6062      	str	r2, [r4, #4]
 80118b6:	04d9      	lsls	r1, r3, #19
 80118b8:	6922      	ldr	r2, [r4, #16]
 80118ba:	6022      	str	r2, [r4, #0]
 80118bc:	d504      	bpl.n	80118c8 <__sflush_r+0x7c>
 80118be:	1c42      	adds	r2, r0, #1
 80118c0:	d101      	bne.n	80118c6 <__sflush_r+0x7a>
 80118c2:	682b      	ldr	r3, [r5, #0]
 80118c4:	b903      	cbnz	r3, 80118c8 <__sflush_r+0x7c>
 80118c6:	6560      	str	r0, [r4, #84]	; 0x54
 80118c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118ca:	602f      	str	r7, [r5, #0]
 80118cc:	2900      	cmp	r1, #0
 80118ce:	d0ca      	beq.n	8011866 <__sflush_r+0x1a>
 80118d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118d4:	4299      	cmp	r1, r3
 80118d6:	d002      	beq.n	80118de <__sflush_r+0x92>
 80118d8:	4628      	mov	r0, r5
 80118da:	f7ff fd27 	bl	801132c <_free_r>
 80118de:	2000      	movs	r0, #0
 80118e0:	6360      	str	r0, [r4, #52]	; 0x34
 80118e2:	e7c1      	b.n	8011868 <__sflush_r+0x1c>
 80118e4:	6a21      	ldr	r1, [r4, #32]
 80118e6:	2301      	movs	r3, #1
 80118e8:	4628      	mov	r0, r5
 80118ea:	47b0      	blx	r6
 80118ec:	1c41      	adds	r1, r0, #1
 80118ee:	d1c7      	bne.n	8011880 <__sflush_r+0x34>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0c4      	beq.n	8011880 <__sflush_r+0x34>
 80118f6:	2b1d      	cmp	r3, #29
 80118f8:	d001      	beq.n	80118fe <__sflush_r+0xb2>
 80118fa:	2b16      	cmp	r3, #22
 80118fc:	d101      	bne.n	8011902 <__sflush_r+0xb6>
 80118fe:	602f      	str	r7, [r5, #0]
 8011900:	e7b1      	b.n	8011866 <__sflush_r+0x1a>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011908:	81a3      	strh	r3, [r4, #12]
 801190a:	e7ad      	b.n	8011868 <__sflush_r+0x1c>
 801190c:	690f      	ldr	r7, [r1, #16]
 801190e:	2f00      	cmp	r7, #0
 8011910:	d0a9      	beq.n	8011866 <__sflush_r+0x1a>
 8011912:	0793      	lsls	r3, r2, #30
 8011914:	680e      	ldr	r6, [r1, #0]
 8011916:	bf08      	it	eq
 8011918:	694b      	ldreq	r3, [r1, #20]
 801191a:	600f      	str	r7, [r1, #0]
 801191c:	bf18      	it	ne
 801191e:	2300      	movne	r3, #0
 8011920:	eba6 0807 	sub.w	r8, r6, r7
 8011924:	608b      	str	r3, [r1, #8]
 8011926:	f1b8 0f00 	cmp.w	r8, #0
 801192a:	dd9c      	ble.n	8011866 <__sflush_r+0x1a>
 801192c:	6a21      	ldr	r1, [r4, #32]
 801192e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011930:	4643      	mov	r3, r8
 8011932:	463a      	mov	r2, r7
 8011934:	4628      	mov	r0, r5
 8011936:	47b0      	blx	r6
 8011938:	2800      	cmp	r0, #0
 801193a:	dc06      	bgt.n	801194a <__sflush_r+0xfe>
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011942:	81a3      	strh	r3, [r4, #12]
 8011944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011948:	e78e      	b.n	8011868 <__sflush_r+0x1c>
 801194a:	4407      	add	r7, r0
 801194c:	eba8 0800 	sub.w	r8, r8, r0
 8011950:	e7e9      	b.n	8011926 <__sflush_r+0xda>
 8011952:	bf00      	nop
 8011954:	20400001 	.word	0x20400001

08011958 <_fflush_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	690b      	ldr	r3, [r1, #16]
 801195c:	4605      	mov	r5, r0
 801195e:	460c      	mov	r4, r1
 8011960:	b913      	cbnz	r3, 8011968 <_fflush_r+0x10>
 8011962:	2500      	movs	r5, #0
 8011964:	4628      	mov	r0, r5
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	b118      	cbz	r0, 8011972 <_fflush_r+0x1a>
 801196a:	6983      	ldr	r3, [r0, #24]
 801196c:	b90b      	cbnz	r3, 8011972 <_fflush_r+0x1a>
 801196e:	f000 f887 	bl	8011a80 <__sinit>
 8011972:	4b14      	ldr	r3, [pc, #80]	; (80119c4 <_fflush_r+0x6c>)
 8011974:	429c      	cmp	r4, r3
 8011976:	d11b      	bne.n	80119b0 <_fflush_r+0x58>
 8011978:	686c      	ldr	r4, [r5, #4]
 801197a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d0ef      	beq.n	8011962 <_fflush_r+0xa>
 8011982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011984:	07d0      	lsls	r0, r2, #31
 8011986:	d404      	bmi.n	8011992 <_fflush_r+0x3a>
 8011988:	0599      	lsls	r1, r3, #22
 801198a:	d402      	bmi.n	8011992 <_fflush_r+0x3a>
 801198c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801198e:	f000 f915 	bl	8011bbc <__retarget_lock_acquire_recursive>
 8011992:	4628      	mov	r0, r5
 8011994:	4621      	mov	r1, r4
 8011996:	f7ff ff59 	bl	801184c <__sflush_r>
 801199a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801199c:	07da      	lsls	r2, r3, #31
 801199e:	4605      	mov	r5, r0
 80119a0:	d4e0      	bmi.n	8011964 <_fflush_r+0xc>
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	059b      	lsls	r3, r3, #22
 80119a6:	d4dd      	bmi.n	8011964 <_fflush_r+0xc>
 80119a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119aa:	f000 f908 	bl	8011bbe <__retarget_lock_release_recursive>
 80119ae:	e7d9      	b.n	8011964 <_fflush_r+0xc>
 80119b0:	4b05      	ldr	r3, [pc, #20]	; (80119c8 <_fflush_r+0x70>)
 80119b2:	429c      	cmp	r4, r3
 80119b4:	d101      	bne.n	80119ba <_fflush_r+0x62>
 80119b6:	68ac      	ldr	r4, [r5, #8]
 80119b8:	e7df      	b.n	801197a <_fflush_r+0x22>
 80119ba:	4b04      	ldr	r3, [pc, #16]	; (80119cc <_fflush_r+0x74>)
 80119bc:	429c      	cmp	r4, r3
 80119be:	bf08      	it	eq
 80119c0:	68ec      	ldreq	r4, [r5, #12]
 80119c2:	e7da      	b.n	801197a <_fflush_r+0x22>
 80119c4:	080135b0 	.word	0x080135b0
 80119c8:	080135d0 	.word	0x080135d0
 80119cc:	08013590 	.word	0x08013590

080119d0 <std>:
 80119d0:	2300      	movs	r3, #0
 80119d2:	b510      	push	{r4, lr}
 80119d4:	4604      	mov	r4, r0
 80119d6:	e9c0 3300 	strd	r3, r3, [r0]
 80119da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119de:	6083      	str	r3, [r0, #8]
 80119e0:	8181      	strh	r1, [r0, #12]
 80119e2:	6643      	str	r3, [r0, #100]	; 0x64
 80119e4:	81c2      	strh	r2, [r0, #14]
 80119e6:	6183      	str	r3, [r0, #24]
 80119e8:	4619      	mov	r1, r3
 80119ea:	2208      	movs	r2, #8
 80119ec:	305c      	adds	r0, #92	; 0x5c
 80119ee:	f7ff fc95 	bl	801131c <memset>
 80119f2:	4b05      	ldr	r3, [pc, #20]	; (8011a08 <std+0x38>)
 80119f4:	6263      	str	r3, [r4, #36]	; 0x24
 80119f6:	4b05      	ldr	r3, [pc, #20]	; (8011a0c <std+0x3c>)
 80119f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80119fa:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <std+0x40>)
 80119fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119fe:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <std+0x44>)
 8011a00:	6224      	str	r4, [r4, #32]
 8011a02:	6323      	str	r3, [r4, #48]	; 0x30
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	bf00      	nop
 8011a08:	080125c9 	.word	0x080125c9
 8011a0c:	080125eb 	.word	0x080125eb
 8011a10:	08012623 	.word	0x08012623
 8011a14:	08012647 	.word	0x08012647

08011a18 <_cleanup_r>:
 8011a18:	4901      	ldr	r1, [pc, #4]	; (8011a20 <_cleanup_r+0x8>)
 8011a1a:	f000 b8af 	b.w	8011b7c <_fwalk_reent>
 8011a1e:	bf00      	nop
 8011a20:	08011959 	.word	0x08011959

08011a24 <__sfmoreglue>:
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	2268      	movs	r2, #104	; 0x68
 8011a28:	1e4d      	subs	r5, r1, #1
 8011a2a:	4355      	muls	r5, r2
 8011a2c:	460e      	mov	r6, r1
 8011a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a32:	f7ff fce7 	bl	8011404 <_malloc_r>
 8011a36:	4604      	mov	r4, r0
 8011a38:	b140      	cbz	r0, 8011a4c <__sfmoreglue+0x28>
 8011a3a:	2100      	movs	r1, #0
 8011a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8011a40:	300c      	adds	r0, #12
 8011a42:	60a0      	str	r0, [r4, #8]
 8011a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a48:	f7ff fc68 	bl	801131c <memset>
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	bd70      	pop	{r4, r5, r6, pc}

08011a50 <__sfp_lock_acquire>:
 8011a50:	4801      	ldr	r0, [pc, #4]	; (8011a58 <__sfp_lock_acquire+0x8>)
 8011a52:	f000 b8b3 	b.w	8011bbc <__retarget_lock_acquire_recursive>
 8011a56:	bf00      	nop
 8011a58:	20003f45 	.word	0x20003f45

08011a5c <__sfp_lock_release>:
 8011a5c:	4801      	ldr	r0, [pc, #4]	; (8011a64 <__sfp_lock_release+0x8>)
 8011a5e:	f000 b8ae 	b.w	8011bbe <__retarget_lock_release_recursive>
 8011a62:	bf00      	nop
 8011a64:	20003f45 	.word	0x20003f45

08011a68 <__sinit_lock_acquire>:
 8011a68:	4801      	ldr	r0, [pc, #4]	; (8011a70 <__sinit_lock_acquire+0x8>)
 8011a6a:	f000 b8a7 	b.w	8011bbc <__retarget_lock_acquire_recursive>
 8011a6e:	bf00      	nop
 8011a70:	20003f46 	.word	0x20003f46

08011a74 <__sinit_lock_release>:
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <__sinit_lock_release+0x8>)
 8011a76:	f000 b8a2 	b.w	8011bbe <__retarget_lock_release_recursive>
 8011a7a:	bf00      	nop
 8011a7c:	20003f46 	.word	0x20003f46

08011a80 <__sinit>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	4604      	mov	r4, r0
 8011a84:	f7ff fff0 	bl	8011a68 <__sinit_lock_acquire>
 8011a88:	69a3      	ldr	r3, [r4, #24]
 8011a8a:	b11b      	cbz	r3, 8011a94 <__sinit+0x14>
 8011a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a90:	f7ff bff0 	b.w	8011a74 <__sinit_lock_release>
 8011a94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a98:	6523      	str	r3, [r4, #80]	; 0x50
 8011a9a:	4b13      	ldr	r3, [pc, #76]	; (8011ae8 <__sinit+0x68>)
 8011a9c:	4a13      	ldr	r2, [pc, #76]	; (8011aec <__sinit+0x6c>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8011aa2:	42a3      	cmp	r3, r4
 8011aa4:	bf04      	itt	eq
 8011aa6:	2301      	moveq	r3, #1
 8011aa8:	61a3      	streq	r3, [r4, #24]
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 f820 	bl	8011af0 <__sfp>
 8011ab0:	6060      	str	r0, [r4, #4]
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f000 f81c 	bl	8011af0 <__sfp>
 8011ab8:	60a0      	str	r0, [r4, #8]
 8011aba:	4620      	mov	r0, r4
 8011abc:	f000 f818 	bl	8011af0 <__sfp>
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	60e0      	str	r0, [r4, #12]
 8011ac4:	2104      	movs	r1, #4
 8011ac6:	6860      	ldr	r0, [r4, #4]
 8011ac8:	f7ff ff82 	bl	80119d0 <std>
 8011acc:	68a0      	ldr	r0, [r4, #8]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	2109      	movs	r1, #9
 8011ad2:	f7ff ff7d 	bl	80119d0 <std>
 8011ad6:	68e0      	ldr	r0, [r4, #12]
 8011ad8:	2202      	movs	r2, #2
 8011ada:	2112      	movs	r1, #18
 8011adc:	f7ff ff78 	bl	80119d0 <std>
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	61a3      	str	r3, [r4, #24]
 8011ae4:	e7d2      	b.n	8011a8c <__sinit+0xc>
 8011ae6:	bf00      	nop
 8011ae8:	08013488 	.word	0x08013488
 8011aec:	08011a19 	.word	0x08011a19

08011af0 <__sfp>:
 8011af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af2:	4607      	mov	r7, r0
 8011af4:	f7ff ffac 	bl	8011a50 <__sfp_lock_acquire>
 8011af8:	4b1e      	ldr	r3, [pc, #120]	; (8011b74 <__sfp+0x84>)
 8011afa:	681e      	ldr	r6, [r3, #0]
 8011afc:	69b3      	ldr	r3, [r6, #24]
 8011afe:	b913      	cbnz	r3, 8011b06 <__sfp+0x16>
 8011b00:	4630      	mov	r0, r6
 8011b02:	f7ff ffbd 	bl	8011a80 <__sinit>
 8011b06:	3648      	adds	r6, #72	; 0x48
 8011b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b0c:	3b01      	subs	r3, #1
 8011b0e:	d503      	bpl.n	8011b18 <__sfp+0x28>
 8011b10:	6833      	ldr	r3, [r6, #0]
 8011b12:	b30b      	cbz	r3, 8011b58 <__sfp+0x68>
 8011b14:	6836      	ldr	r6, [r6, #0]
 8011b16:	e7f7      	b.n	8011b08 <__sfp+0x18>
 8011b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b1c:	b9d5      	cbnz	r5, 8011b54 <__sfp+0x64>
 8011b1e:	4b16      	ldr	r3, [pc, #88]	; (8011b78 <__sfp+0x88>)
 8011b20:	60e3      	str	r3, [r4, #12]
 8011b22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b26:	6665      	str	r5, [r4, #100]	; 0x64
 8011b28:	f000 f847 	bl	8011bba <__retarget_lock_init_recursive>
 8011b2c:	f7ff ff96 	bl	8011a5c <__sfp_lock_release>
 8011b30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b38:	6025      	str	r5, [r4, #0]
 8011b3a:	61a5      	str	r5, [r4, #24]
 8011b3c:	2208      	movs	r2, #8
 8011b3e:	4629      	mov	r1, r5
 8011b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b44:	f7ff fbea 	bl	801131c <memset>
 8011b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b50:	4620      	mov	r0, r4
 8011b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b54:	3468      	adds	r4, #104	; 0x68
 8011b56:	e7d9      	b.n	8011b0c <__sfp+0x1c>
 8011b58:	2104      	movs	r1, #4
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	f7ff ff62 	bl	8011a24 <__sfmoreglue>
 8011b60:	4604      	mov	r4, r0
 8011b62:	6030      	str	r0, [r6, #0]
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d1d5      	bne.n	8011b14 <__sfp+0x24>
 8011b68:	f7ff ff78 	bl	8011a5c <__sfp_lock_release>
 8011b6c:	230c      	movs	r3, #12
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	e7ee      	b.n	8011b50 <__sfp+0x60>
 8011b72:	bf00      	nop
 8011b74:	08013488 	.word	0x08013488
 8011b78:	ffff0001 	.word	0xffff0001

08011b7c <_fwalk_reent>:
 8011b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b80:	4606      	mov	r6, r0
 8011b82:	4688      	mov	r8, r1
 8011b84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b88:	2700      	movs	r7, #0
 8011b8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b8e:	f1b9 0901 	subs.w	r9, r9, #1
 8011b92:	d505      	bpl.n	8011ba0 <_fwalk_reent+0x24>
 8011b94:	6824      	ldr	r4, [r4, #0]
 8011b96:	2c00      	cmp	r4, #0
 8011b98:	d1f7      	bne.n	8011b8a <_fwalk_reent+0xe>
 8011b9a:	4638      	mov	r0, r7
 8011b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ba0:	89ab      	ldrh	r3, [r5, #12]
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d907      	bls.n	8011bb6 <_fwalk_reent+0x3a>
 8011ba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011baa:	3301      	adds	r3, #1
 8011bac:	d003      	beq.n	8011bb6 <_fwalk_reent+0x3a>
 8011bae:	4629      	mov	r1, r5
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	47c0      	blx	r8
 8011bb4:	4307      	orrs	r7, r0
 8011bb6:	3568      	adds	r5, #104	; 0x68
 8011bb8:	e7e9      	b.n	8011b8e <_fwalk_reent+0x12>

08011bba <__retarget_lock_init_recursive>:
 8011bba:	4770      	bx	lr

08011bbc <__retarget_lock_acquire_recursive>:
 8011bbc:	4770      	bx	lr

08011bbe <__retarget_lock_release_recursive>:
 8011bbe:	4770      	bx	lr

08011bc0 <__swhatbuf_r>:
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	460e      	mov	r6, r1
 8011bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc8:	2900      	cmp	r1, #0
 8011bca:	b096      	sub	sp, #88	; 0x58
 8011bcc:	4614      	mov	r4, r2
 8011bce:	461d      	mov	r5, r3
 8011bd0:	da08      	bge.n	8011be4 <__swhatbuf_r+0x24>
 8011bd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	602a      	str	r2, [r5, #0]
 8011bda:	061a      	lsls	r2, r3, #24
 8011bdc:	d410      	bmi.n	8011c00 <__swhatbuf_r+0x40>
 8011bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011be2:	e00e      	b.n	8011c02 <__swhatbuf_r+0x42>
 8011be4:	466a      	mov	r2, sp
 8011be6:	f000 fe15 	bl	8012814 <_fstat_r>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	dbf1      	blt.n	8011bd2 <__swhatbuf_r+0x12>
 8011bee:	9a01      	ldr	r2, [sp, #4]
 8011bf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bf8:	425a      	negs	r2, r3
 8011bfa:	415a      	adcs	r2, r3
 8011bfc:	602a      	str	r2, [r5, #0]
 8011bfe:	e7ee      	b.n	8011bde <__swhatbuf_r+0x1e>
 8011c00:	2340      	movs	r3, #64	; 0x40
 8011c02:	2000      	movs	r0, #0
 8011c04:	6023      	str	r3, [r4, #0]
 8011c06:	b016      	add	sp, #88	; 0x58
 8011c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c0c <__smakebuf_r>:
 8011c0c:	898b      	ldrh	r3, [r1, #12]
 8011c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c10:	079d      	lsls	r5, r3, #30
 8011c12:	4606      	mov	r6, r0
 8011c14:	460c      	mov	r4, r1
 8011c16:	d507      	bpl.n	8011c28 <__smakebuf_r+0x1c>
 8011c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	6123      	str	r3, [r4, #16]
 8011c20:	2301      	movs	r3, #1
 8011c22:	6163      	str	r3, [r4, #20]
 8011c24:	b002      	add	sp, #8
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	ab01      	add	r3, sp, #4
 8011c2a:	466a      	mov	r2, sp
 8011c2c:	f7ff ffc8 	bl	8011bc0 <__swhatbuf_r>
 8011c30:	9900      	ldr	r1, [sp, #0]
 8011c32:	4605      	mov	r5, r0
 8011c34:	4630      	mov	r0, r6
 8011c36:	f7ff fbe5 	bl	8011404 <_malloc_r>
 8011c3a:	b948      	cbnz	r0, 8011c50 <__smakebuf_r+0x44>
 8011c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c40:	059a      	lsls	r2, r3, #22
 8011c42:	d4ef      	bmi.n	8011c24 <__smakebuf_r+0x18>
 8011c44:	f023 0303 	bic.w	r3, r3, #3
 8011c48:	f043 0302 	orr.w	r3, r3, #2
 8011c4c:	81a3      	strh	r3, [r4, #12]
 8011c4e:	e7e3      	b.n	8011c18 <__smakebuf_r+0xc>
 8011c50:	4b0d      	ldr	r3, [pc, #52]	; (8011c88 <__smakebuf_r+0x7c>)
 8011c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	6020      	str	r0, [r4, #0]
 8011c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5c:	81a3      	strh	r3, [r4, #12]
 8011c5e:	9b00      	ldr	r3, [sp, #0]
 8011c60:	6163      	str	r3, [r4, #20]
 8011c62:	9b01      	ldr	r3, [sp, #4]
 8011c64:	6120      	str	r0, [r4, #16]
 8011c66:	b15b      	cbz	r3, 8011c80 <__smakebuf_r+0x74>
 8011c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f000 fde3 	bl	8012838 <_isatty_r>
 8011c72:	b128      	cbz	r0, 8011c80 <__smakebuf_r+0x74>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	f023 0303 	bic.w	r3, r3, #3
 8011c7a:	f043 0301 	orr.w	r3, r3, #1
 8011c7e:	81a3      	strh	r3, [r4, #12]
 8011c80:	89a0      	ldrh	r0, [r4, #12]
 8011c82:	4305      	orrs	r5, r0
 8011c84:	81a5      	strh	r5, [r4, #12]
 8011c86:	e7cd      	b.n	8011c24 <__smakebuf_r+0x18>
 8011c88:	08011a19 	.word	0x08011a19

08011c8c <__malloc_lock>:
 8011c8c:	4801      	ldr	r0, [pc, #4]	; (8011c94 <__malloc_lock+0x8>)
 8011c8e:	f7ff bf95 	b.w	8011bbc <__retarget_lock_acquire_recursive>
 8011c92:	bf00      	nop
 8011c94:	20003f44 	.word	0x20003f44

08011c98 <__malloc_unlock>:
 8011c98:	4801      	ldr	r0, [pc, #4]	; (8011ca0 <__malloc_unlock+0x8>)
 8011c9a:	f7ff bf90 	b.w	8011bbe <__retarget_lock_release_recursive>
 8011c9e:	bf00      	nop
 8011ca0:	20003f44 	.word	0x20003f44

08011ca4 <__ssputs_r>:
 8011ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca8:	688e      	ldr	r6, [r1, #8]
 8011caa:	429e      	cmp	r6, r3
 8011cac:	4682      	mov	sl, r0
 8011cae:	460c      	mov	r4, r1
 8011cb0:	4690      	mov	r8, r2
 8011cb2:	461f      	mov	r7, r3
 8011cb4:	d838      	bhi.n	8011d28 <__ssputs_r+0x84>
 8011cb6:	898a      	ldrh	r2, [r1, #12]
 8011cb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011cbc:	d032      	beq.n	8011d24 <__ssputs_r+0x80>
 8011cbe:	6825      	ldr	r5, [r4, #0]
 8011cc0:	6909      	ldr	r1, [r1, #16]
 8011cc2:	eba5 0901 	sub.w	r9, r5, r1
 8011cc6:	6965      	ldr	r5, [r4, #20]
 8011cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	444b      	add	r3, r9
 8011cd4:	106d      	asrs	r5, r5, #1
 8011cd6:	429d      	cmp	r5, r3
 8011cd8:	bf38      	it	cc
 8011cda:	461d      	movcc	r5, r3
 8011cdc:	0553      	lsls	r3, r2, #21
 8011cde:	d531      	bpl.n	8011d44 <__ssputs_r+0xa0>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	f7ff fb8f 	bl	8011404 <_malloc_r>
 8011ce6:	4606      	mov	r6, r0
 8011ce8:	b950      	cbnz	r0, 8011d00 <__ssputs_r+0x5c>
 8011cea:	230c      	movs	r3, #12
 8011cec:	f8ca 3000 	str.w	r3, [sl]
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cf6:	81a3      	strh	r3, [r4, #12]
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d00:	6921      	ldr	r1, [r4, #16]
 8011d02:	464a      	mov	r2, r9
 8011d04:	f7ff fafc 	bl	8011300 <memcpy>
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d12:	81a3      	strh	r3, [r4, #12]
 8011d14:	6126      	str	r6, [r4, #16]
 8011d16:	6165      	str	r5, [r4, #20]
 8011d18:	444e      	add	r6, r9
 8011d1a:	eba5 0509 	sub.w	r5, r5, r9
 8011d1e:	6026      	str	r6, [r4, #0]
 8011d20:	60a5      	str	r5, [r4, #8]
 8011d22:	463e      	mov	r6, r7
 8011d24:	42be      	cmp	r6, r7
 8011d26:	d900      	bls.n	8011d2a <__ssputs_r+0x86>
 8011d28:	463e      	mov	r6, r7
 8011d2a:	6820      	ldr	r0, [r4, #0]
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	4641      	mov	r1, r8
 8011d30:	f000 fda4 	bl	801287c <memmove>
 8011d34:	68a3      	ldr	r3, [r4, #8]
 8011d36:	1b9b      	subs	r3, r3, r6
 8011d38:	60a3      	str	r3, [r4, #8]
 8011d3a:	6823      	ldr	r3, [r4, #0]
 8011d3c:	4433      	add	r3, r6
 8011d3e:	6023      	str	r3, [r4, #0]
 8011d40:	2000      	movs	r0, #0
 8011d42:	e7db      	b.n	8011cfc <__ssputs_r+0x58>
 8011d44:	462a      	mov	r2, r5
 8011d46:	f000 fdb3 	bl	80128b0 <_realloc_r>
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d1e1      	bne.n	8011d14 <__ssputs_r+0x70>
 8011d50:	6921      	ldr	r1, [r4, #16]
 8011d52:	4650      	mov	r0, sl
 8011d54:	f7ff faea 	bl	801132c <_free_r>
 8011d58:	e7c7      	b.n	8011cea <__ssputs_r+0x46>
	...

08011d5c <_svfiprintf_r>:
 8011d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d60:	4698      	mov	r8, r3
 8011d62:	898b      	ldrh	r3, [r1, #12]
 8011d64:	061b      	lsls	r3, r3, #24
 8011d66:	b09d      	sub	sp, #116	; 0x74
 8011d68:	4607      	mov	r7, r0
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	d50e      	bpl.n	8011d8e <_svfiprintf_r+0x32>
 8011d70:	690b      	ldr	r3, [r1, #16]
 8011d72:	b963      	cbnz	r3, 8011d8e <_svfiprintf_r+0x32>
 8011d74:	2140      	movs	r1, #64	; 0x40
 8011d76:	f7ff fb45 	bl	8011404 <_malloc_r>
 8011d7a:	6028      	str	r0, [r5, #0]
 8011d7c:	6128      	str	r0, [r5, #16]
 8011d7e:	b920      	cbnz	r0, 8011d8a <_svfiprintf_r+0x2e>
 8011d80:	230c      	movs	r3, #12
 8011d82:	603b      	str	r3, [r7, #0]
 8011d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d88:	e0d1      	b.n	8011f2e <_svfiprintf_r+0x1d2>
 8011d8a:	2340      	movs	r3, #64	; 0x40
 8011d8c:	616b      	str	r3, [r5, #20]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	9309      	str	r3, [sp, #36]	; 0x24
 8011d92:	2320      	movs	r3, #32
 8011d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d9c:	2330      	movs	r3, #48	; 0x30
 8011d9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f48 <_svfiprintf_r+0x1ec>
 8011da2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011da6:	f04f 0901 	mov.w	r9, #1
 8011daa:	4623      	mov	r3, r4
 8011dac:	469a      	mov	sl, r3
 8011dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011db2:	b10a      	cbz	r2, 8011db8 <_svfiprintf_r+0x5c>
 8011db4:	2a25      	cmp	r2, #37	; 0x25
 8011db6:	d1f9      	bne.n	8011dac <_svfiprintf_r+0x50>
 8011db8:	ebba 0b04 	subs.w	fp, sl, r4
 8011dbc:	d00b      	beq.n	8011dd6 <_svfiprintf_r+0x7a>
 8011dbe:	465b      	mov	r3, fp
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	f7ff ff6d 	bl	8011ca4 <__ssputs_r>
 8011dca:	3001      	adds	r0, #1
 8011dcc:	f000 80aa 	beq.w	8011f24 <_svfiprintf_r+0x1c8>
 8011dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dd2:	445a      	add	r2, fp
 8011dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8011dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f000 80a2 	beq.w	8011f24 <_svfiprintf_r+0x1c8>
 8011de0:	2300      	movs	r3, #0
 8011de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dea:	f10a 0a01 	add.w	sl, sl, #1
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	9307      	str	r3, [sp, #28]
 8011df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011df6:	931a      	str	r3, [sp, #104]	; 0x68
 8011df8:	4654      	mov	r4, sl
 8011dfa:	2205      	movs	r2, #5
 8011dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e00:	4851      	ldr	r0, [pc, #324]	; (8011f48 <_svfiprintf_r+0x1ec>)
 8011e02:	f7ee f9f5 	bl	80001f0 <memchr>
 8011e06:	9a04      	ldr	r2, [sp, #16]
 8011e08:	b9d8      	cbnz	r0, 8011e42 <_svfiprintf_r+0xe6>
 8011e0a:	06d0      	lsls	r0, r2, #27
 8011e0c:	bf44      	itt	mi
 8011e0e:	2320      	movmi	r3, #32
 8011e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e14:	0711      	lsls	r1, r2, #28
 8011e16:	bf44      	itt	mi
 8011e18:	232b      	movmi	r3, #43	; 0x2b
 8011e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e22:	2b2a      	cmp	r3, #42	; 0x2a
 8011e24:	d015      	beq.n	8011e52 <_svfiprintf_r+0xf6>
 8011e26:	9a07      	ldr	r2, [sp, #28]
 8011e28:	4654      	mov	r4, sl
 8011e2a:	2000      	movs	r0, #0
 8011e2c:	f04f 0c0a 	mov.w	ip, #10
 8011e30:	4621      	mov	r1, r4
 8011e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e36:	3b30      	subs	r3, #48	; 0x30
 8011e38:	2b09      	cmp	r3, #9
 8011e3a:	d94e      	bls.n	8011eda <_svfiprintf_r+0x17e>
 8011e3c:	b1b0      	cbz	r0, 8011e6c <_svfiprintf_r+0x110>
 8011e3e:	9207      	str	r2, [sp, #28]
 8011e40:	e014      	b.n	8011e6c <_svfiprintf_r+0x110>
 8011e42:	eba0 0308 	sub.w	r3, r0, r8
 8011e46:	fa09 f303 	lsl.w	r3, r9, r3
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	9304      	str	r3, [sp, #16]
 8011e4e:	46a2      	mov	sl, r4
 8011e50:	e7d2      	b.n	8011df8 <_svfiprintf_r+0x9c>
 8011e52:	9b03      	ldr	r3, [sp, #12]
 8011e54:	1d19      	adds	r1, r3, #4
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	9103      	str	r1, [sp, #12]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	bfbb      	ittet	lt
 8011e5e:	425b      	neglt	r3, r3
 8011e60:	f042 0202 	orrlt.w	r2, r2, #2
 8011e64:	9307      	strge	r3, [sp, #28]
 8011e66:	9307      	strlt	r3, [sp, #28]
 8011e68:	bfb8      	it	lt
 8011e6a:	9204      	strlt	r2, [sp, #16]
 8011e6c:	7823      	ldrb	r3, [r4, #0]
 8011e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8011e70:	d10c      	bne.n	8011e8c <_svfiprintf_r+0x130>
 8011e72:	7863      	ldrb	r3, [r4, #1]
 8011e74:	2b2a      	cmp	r3, #42	; 0x2a
 8011e76:	d135      	bne.n	8011ee4 <_svfiprintf_r+0x188>
 8011e78:	9b03      	ldr	r3, [sp, #12]
 8011e7a:	1d1a      	adds	r2, r3, #4
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	9203      	str	r2, [sp, #12]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	bfb8      	it	lt
 8011e84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011e88:	3402      	adds	r4, #2
 8011e8a:	9305      	str	r3, [sp, #20]
 8011e8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f58 <_svfiprintf_r+0x1fc>
 8011e90:	7821      	ldrb	r1, [r4, #0]
 8011e92:	2203      	movs	r2, #3
 8011e94:	4650      	mov	r0, sl
 8011e96:	f7ee f9ab 	bl	80001f0 <memchr>
 8011e9a:	b140      	cbz	r0, 8011eae <_svfiprintf_r+0x152>
 8011e9c:	2340      	movs	r3, #64	; 0x40
 8011e9e:	eba0 000a 	sub.w	r0, r0, sl
 8011ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ea6:	9b04      	ldr	r3, [sp, #16]
 8011ea8:	4303      	orrs	r3, r0
 8011eaa:	3401      	adds	r4, #1
 8011eac:	9304      	str	r3, [sp, #16]
 8011eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb2:	4826      	ldr	r0, [pc, #152]	; (8011f4c <_svfiprintf_r+0x1f0>)
 8011eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011eb8:	2206      	movs	r2, #6
 8011eba:	f7ee f999 	bl	80001f0 <memchr>
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	d038      	beq.n	8011f34 <_svfiprintf_r+0x1d8>
 8011ec2:	4b23      	ldr	r3, [pc, #140]	; (8011f50 <_svfiprintf_r+0x1f4>)
 8011ec4:	bb1b      	cbnz	r3, 8011f0e <_svfiprintf_r+0x1b2>
 8011ec6:	9b03      	ldr	r3, [sp, #12]
 8011ec8:	3307      	adds	r3, #7
 8011eca:	f023 0307 	bic.w	r3, r3, #7
 8011ece:	3308      	adds	r3, #8
 8011ed0:	9303      	str	r3, [sp, #12]
 8011ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed4:	4433      	add	r3, r6
 8011ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed8:	e767      	b.n	8011daa <_svfiprintf_r+0x4e>
 8011eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ede:	460c      	mov	r4, r1
 8011ee0:	2001      	movs	r0, #1
 8011ee2:	e7a5      	b.n	8011e30 <_svfiprintf_r+0xd4>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	3401      	adds	r4, #1
 8011ee8:	9305      	str	r3, [sp, #20]
 8011eea:	4619      	mov	r1, r3
 8011eec:	f04f 0c0a 	mov.w	ip, #10
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ef6:	3a30      	subs	r2, #48	; 0x30
 8011ef8:	2a09      	cmp	r2, #9
 8011efa:	d903      	bls.n	8011f04 <_svfiprintf_r+0x1a8>
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d0c5      	beq.n	8011e8c <_svfiprintf_r+0x130>
 8011f00:	9105      	str	r1, [sp, #20]
 8011f02:	e7c3      	b.n	8011e8c <_svfiprintf_r+0x130>
 8011f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f08:	4604      	mov	r4, r0
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	e7f0      	b.n	8011ef0 <_svfiprintf_r+0x194>
 8011f0e:	ab03      	add	r3, sp, #12
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	462a      	mov	r2, r5
 8011f14:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <_svfiprintf_r+0x1f8>)
 8011f16:	a904      	add	r1, sp, #16
 8011f18:	4638      	mov	r0, r7
 8011f1a:	f3af 8000 	nop.w
 8011f1e:	1c42      	adds	r2, r0, #1
 8011f20:	4606      	mov	r6, r0
 8011f22:	d1d6      	bne.n	8011ed2 <_svfiprintf_r+0x176>
 8011f24:	89ab      	ldrh	r3, [r5, #12]
 8011f26:	065b      	lsls	r3, r3, #25
 8011f28:	f53f af2c 	bmi.w	8011d84 <_svfiprintf_r+0x28>
 8011f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f2e:	b01d      	add	sp, #116	; 0x74
 8011f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f34:	ab03      	add	r3, sp, #12
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	462a      	mov	r2, r5
 8011f3a:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <_svfiprintf_r+0x1f8>)
 8011f3c:	a904      	add	r1, sp, #16
 8011f3e:	4638      	mov	r0, r7
 8011f40:	f000 f9d4 	bl	80122ec <_printf_i>
 8011f44:	e7eb      	b.n	8011f1e <_svfiprintf_r+0x1c2>
 8011f46:	bf00      	nop
 8011f48:	080135f0 	.word	0x080135f0
 8011f4c:	080135fa 	.word	0x080135fa
 8011f50:	00000000 	.word	0x00000000
 8011f54:	08011ca5 	.word	0x08011ca5
 8011f58:	080135f6 	.word	0x080135f6

08011f5c <__sfputc_r>:
 8011f5c:	6893      	ldr	r3, [r2, #8]
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	b410      	push	{r4}
 8011f64:	6093      	str	r3, [r2, #8]
 8011f66:	da08      	bge.n	8011f7a <__sfputc_r+0x1e>
 8011f68:	6994      	ldr	r4, [r2, #24]
 8011f6a:	42a3      	cmp	r3, r4
 8011f6c:	db01      	blt.n	8011f72 <__sfputc_r+0x16>
 8011f6e:	290a      	cmp	r1, #10
 8011f70:	d103      	bne.n	8011f7a <__sfputc_r+0x1e>
 8011f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f76:	f000 bb6b 	b.w	8012650 <__swbuf_r>
 8011f7a:	6813      	ldr	r3, [r2, #0]
 8011f7c:	1c58      	adds	r0, r3, #1
 8011f7e:	6010      	str	r0, [r2, #0]
 8011f80:	7019      	strb	r1, [r3, #0]
 8011f82:	4608      	mov	r0, r1
 8011f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <__sfputs_r>:
 8011f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	460f      	mov	r7, r1
 8011f90:	4614      	mov	r4, r2
 8011f92:	18d5      	adds	r5, r2, r3
 8011f94:	42ac      	cmp	r4, r5
 8011f96:	d101      	bne.n	8011f9c <__sfputs_r+0x12>
 8011f98:	2000      	movs	r0, #0
 8011f9a:	e007      	b.n	8011fac <__sfputs_r+0x22>
 8011f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fa0:	463a      	mov	r2, r7
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ff ffda 	bl	8011f5c <__sfputc_r>
 8011fa8:	1c43      	adds	r3, r0, #1
 8011faa:	d1f3      	bne.n	8011f94 <__sfputs_r+0xa>
 8011fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fb0 <_vfiprintf_r>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	460d      	mov	r5, r1
 8011fb6:	b09d      	sub	sp, #116	; 0x74
 8011fb8:	4614      	mov	r4, r2
 8011fba:	4698      	mov	r8, r3
 8011fbc:	4606      	mov	r6, r0
 8011fbe:	b118      	cbz	r0, 8011fc8 <_vfiprintf_r+0x18>
 8011fc0:	6983      	ldr	r3, [r0, #24]
 8011fc2:	b90b      	cbnz	r3, 8011fc8 <_vfiprintf_r+0x18>
 8011fc4:	f7ff fd5c 	bl	8011a80 <__sinit>
 8011fc8:	4b89      	ldr	r3, [pc, #548]	; (80121f0 <_vfiprintf_r+0x240>)
 8011fca:	429d      	cmp	r5, r3
 8011fcc:	d11b      	bne.n	8012006 <_vfiprintf_r+0x56>
 8011fce:	6875      	ldr	r5, [r6, #4]
 8011fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fd2:	07d9      	lsls	r1, r3, #31
 8011fd4:	d405      	bmi.n	8011fe2 <_vfiprintf_r+0x32>
 8011fd6:	89ab      	ldrh	r3, [r5, #12]
 8011fd8:	059a      	lsls	r2, r3, #22
 8011fda:	d402      	bmi.n	8011fe2 <_vfiprintf_r+0x32>
 8011fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fde:	f7ff fded 	bl	8011bbc <__retarget_lock_acquire_recursive>
 8011fe2:	89ab      	ldrh	r3, [r5, #12]
 8011fe4:	071b      	lsls	r3, r3, #28
 8011fe6:	d501      	bpl.n	8011fec <_vfiprintf_r+0x3c>
 8011fe8:	692b      	ldr	r3, [r5, #16]
 8011fea:	b9eb      	cbnz	r3, 8012028 <_vfiprintf_r+0x78>
 8011fec:	4629      	mov	r1, r5
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f000 fb92 	bl	8012718 <__swsetup_r>
 8011ff4:	b1c0      	cbz	r0, 8012028 <_vfiprintf_r+0x78>
 8011ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ff8:	07dc      	lsls	r4, r3, #31
 8011ffa:	d50e      	bpl.n	801201a <_vfiprintf_r+0x6a>
 8011ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012000:	b01d      	add	sp, #116	; 0x74
 8012002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012006:	4b7b      	ldr	r3, [pc, #492]	; (80121f4 <_vfiprintf_r+0x244>)
 8012008:	429d      	cmp	r5, r3
 801200a:	d101      	bne.n	8012010 <_vfiprintf_r+0x60>
 801200c:	68b5      	ldr	r5, [r6, #8]
 801200e:	e7df      	b.n	8011fd0 <_vfiprintf_r+0x20>
 8012010:	4b79      	ldr	r3, [pc, #484]	; (80121f8 <_vfiprintf_r+0x248>)
 8012012:	429d      	cmp	r5, r3
 8012014:	bf08      	it	eq
 8012016:	68f5      	ldreq	r5, [r6, #12]
 8012018:	e7da      	b.n	8011fd0 <_vfiprintf_r+0x20>
 801201a:	89ab      	ldrh	r3, [r5, #12]
 801201c:	0598      	lsls	r0, r3, #22
 801201e:	d4ed      	bmi.n	8011ffc <_vfiprintf_r+0x4c>
 8012020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012022:	f7ff fdcc 	bl	8011bbe <__retarget_lock_release_recursive>
 8012026:	e7e9      	b.n	8011ffc <_vfiprintf_r+0x4c>
 8012028:	2300      	movs	r3, #0
 801202a:	9309      	str	r3, [sp, #36]	; 0x24
 801202c:	2320      	movs	r3, #32
 801202e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012032:	f8cd 800c 	str.w	r8, [sp, #12]
 8012036:	2330      	movs	r3, #48	; 0x30
 8012038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121fc <_vfiprintf_r+0x24c>
 801203c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012040:	f04f 0901 	mov.w	r9, #1
 8012044:	4623      	mov	r3, r4
 8012046:	469a      	mov	sl, r3
 8012048:	f813 2b01 	ldrb.w	r2, [r3], #1
 801204c:	b10a      	cbz	r2, 8012052 <_vfiprintf_r+0xa2>
 801204e:	2a25      	cmp	r2, #37	; 0x25
 8012050:	d1f9      	bne.n	8012046 <_vfiprintf_r+0x96>
 8012052:	ebba 0b04 	subs.w	fp, sl, r4
 8012056:	d00b      	beq.n	8012070 <_vfiprintf_r+0xc0>
 8012058:	465b      	mov	r3, fp
 801205a:	4622      	mov	r2, r4
 801205c:	4629      	mov	r1, r5
 801205e:	4630      	mov	r0, r6
 8012060:	f7ff ff93 	bl	8011f8a <__sfputs_r>
 8012064:	3001      	adds	r0, #1
 8012066:	f000 80aa 	beq.w	80121be <_vfiprintf_r+0x20e>
 801206a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801206c:	445a      	add	r2, fp
 801206e:	9209      	str	r2, [sp, #36]	; 0x24
 8012070:	f89a 3000 	ldrb.w	r3, [sl]
 8012074:	2b00      	cmp	r3, #0
 8012076:	f000 80a2 	beq.w	80121be <_vfiprintf_r+0x20e>
 801207a:	2300      	movs	r3, #0
 801207c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012084:	f10a 0a01 	add.w	sl, sl, #1
 8012088:	9304      	str	r3, [sp, #16]
 801208a:	9307      	str	r3, [sp, #28]
 801208c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012090:	931a      	str	r3, [sp, #104]	; 0x68
 8012092:	4654      	mov	r4, sl
 8012094:	2205      	movs	r2, #5
 8012096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801209a:	4858      	ldr	r0, [pc, #352]	; (80121fc <_vfiprintf_r+0x24c>)
 801209c:	f7ee f8a8 	bl	80001f0 <memchr>
 80120a0:	9a04      	ldr	r2, [sp, #16]
 80120a2:	b9d8      	cbnz	r0, 80120dc <_vfiprintf_r+0x12c>
 80120a4:	06d1      	lsls	r1, r2, #27
 80120a6:	bf44      	itt	mi
 80120a8:	2320      	movmi	r3, #32
 80120aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120ae:	0713      	lsls	r3, r2, #28
 80120b0:	bf44      	itt	mi
 80120b2:	232b      	movmi	r3, #43	; 0x2b
 80120b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120b8:	f89a 3000 	ldrb.w	r3, [sl]
 80120bc:	2b2a      	cmp	r3, #42	; 0x2a
 80120be:	d015      	beq.n	80120ec <_vfiprintf_r+0x13c>
 80120c0:	9a07      	ldr	r2, [sp, #28]
 80120c2:	4654      	mov	r4, sl
 80120c4:	2000      	movs	r0, #0
 80120c6:	f04f 0c0a 	mov.w	ip, #10
 80120ca:	4621      	mov	r1, r4
 80120cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120d0:	3b30      	subs	r3, #48	; 0x30
 80120d2:	2b09      	cmp	r3, #9
 80120d4:	d94e      	bls.n	8012174 <_vfiprintf_r+0x1c4>
 80120d6:	b1b0      	cbz	r0, 8012106 <_vfiprintf_r+0x156>
 80120d8:	9207      	str	r2, [sp, #28]
 80120da:	e014      	b.n	8012106 <_vfiprintf_r+0x156>
 80120dc:	eba0 0308 	sub.w	r3, r0, r8
 80120e0:	fa09 f303 	lsl.w	r3, r9, r3
 80120e4:	4313      	orrs	r3, r2
 80120e6:	9304      	str	r3, [sp, #16]
 80120e8:	46a2      	mov	sl, r4
 80120ea:	e7d2      	b.n	8012092 <_vfiprintf_r+0xe2>
 80120ec:	9b03      	ldr	r3, [sp, #12]
 80120ee:	1d19      	adds	r1, r3, #4
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	9103      	str	r1, [sp, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	bfbb      	ittet	lt
 80120f8:	425b      	neglt	r3, r3
 80120fa:	f042 0202 	orrlt.w	r2, r2, #2
 80120fe:	9307      	strge	r3, [sp, #28]
 8012100:	9307      	strlt	r3, [sp, #28]
 8012102:	bfb8      	it	lt
 8012104:	9204      	strlt	r2, [sp, #16]
 8012106:	7823      	ldrb	r3, [r4, #0]
 8012108:	2b2e      	cmp	r3, #46	; 0x2e
 801210a:	d10c      	bne.n	8012126 <_vfiprintf_r+0x176>
 801210c:	7863      	ldrb	r3, [r4, #1]
 801210e:	2b2a      	cmp	r3, #42	; 0x2a
 8012110:	d135      	bne.n	801217e <_vfiprintf_r+0x1ce>
 8012112:	9b03      	ldr	r3, [sp, #12]
 8012114:	1d1a      	adds	r2, r3, #4
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	9203      	str	r2, [sp, #12]
 801211a:	2b00      	cmp	r3, #0
 801211c:	bfb8      	it	lt
 801211e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012122:	3402      	adds	r4, #2
 8012124:	9305      	str	r3, [sp, #20]
 8012126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801220c <_vfiprintf_r+0x25c>
 801212a:	7821      	ldrb	r1, [r4, #0]
 801212c:	2203      	movs	r2, #3
 801212e:	4650      	mov	r0, sl
 8012130:	f7ee f85e 	bl	80001f0 <memchr>
 8012134:	b140      	cbz	r0, 8012148 <_vfiprintf_r+0x198>
 8012136:	2340      	movs	r3, #64	; 0x40
 8012138:	eba0 000a 	sub.w	r0, r0, sl
 801213c:	fa03 f000 	lsl.w	r0, r3, r0
 8012140:	9b04      	ldr	r3, [sp, #16]
 8012142:	4303      	orrs	r3, r0
 8012144:	3401      	adds	r4, #1
 8012146:	9304      	str	r3, [sp, #16]
 8012148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801214c:	482c      	ldr	r0, [pc, #176]	; (8012200 <_vfiprintf_r+0x250>)
 801214e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012152:	2206      	movs	r2, #6
 8012154:	f7ee f84c 	bl	80001f0 <memchr>
 8012158:	2800      	cmp	r0, #0
 801215a:	d03f      	beq.n	80121dc <_vfiprintf_r+0x22c>
 801215c:	4b29      	ldr	r3, [pc, #164]	; (8012204 <_vfiprintf_r+0x254>)
 801215e:	bb1b      	cbnz	r3, 80121a8 <_vfiprintf_r+0x1f8>
 8012160:	9b03      	ldr	r3, [sp, #12]
 8012162:	3307      	adds	r3, #7
 8012164:	f023 0307 	bic.w	r3, r3, #7
 8012168:	3308      	adds	r3, #8
 801216a:	9303      	str	r3, [sp, #12]
 801216c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801216e:	443b      	add	r3, r7
 8012170:	9309      	str	r3, [sp, #36]	; 0x24
 8012172:	e767      	b.n	8012044 <_vfiprintf_r+0x94>
 8012174:	fb0c 3202 	mla	r2, ip, r2, r3
 8012178:	460c      	mov	r4, r1
 801217a:	2001      	movs	r0, #1
 801217c:	e7a5      	b.n	80120ca <_vfiprintf_r+0x11a>
 801217e:	2300      	movs	r3, #0
 8012180:	3401      	adds	r4, #1
 8012182:	9305      	str	r3, [sp, #20]
 8012184:	4619      	mov	r1, r3
 8012186:	f04f 0c0a 	mov.w	ip, #10
 801218a:	4620      	mov	r0, r4
 801218c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012190:	3a30      	subs	r2, #48	; 0x30
 8012192:	2a09      	cmp	r2, #9
 8012194:	d903      	bls.n	801219e <_vfiprintf_r+0x1ee>
 8012196:	2b00      	cmp	r3, #0
 8012198:	d0c5      	beq.n	8012126 <_vfiprintf_r+0x176>
 801219a:	9105      	str	r1, [sp, #20]
 801219c:	e7c3      	b.n	8012126 <_vfiprintf_r+0x176>
 801219e:	fb0c 2101 	mla	r1, ip, r1, r2
 80121a2:	4604      	mov	r4, r0
 80121a4:	2301      	movs	r3, #1
 80121a6:	e7f0      	b.n	801218a <_vfiprintf_r+0x1da>
 80121a8:	ab03      	add	r3, sp, #12
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	462a      	mov	r2, r5
 80121ae:	4b16      	ldr	r3, [pc, #88]	; (8012208 <_vfiprintf_r+0x258>)
 80121b0:	a904      	add	r1, sp, #16
 80121b2:	4630      	mov	r0, r6
 80121b4:	f3af 8000 	nop.w
 80121b8:	4607      	mov	r7, r0
 80121ba:	1c78      	adds	r0, r7, #1
 80121bc:	d1d6      	bne.n	801216c <_vfiprintf_r+0x1bc>
 80121be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121c0:	07d9      	lsls	r1, r3, #31
 80121c2:	d405      	bmi.n	80121d0 <_vfiprintf_r+0x220>
 80121c4:	89ab      	ldrh	r3, [r5, #12]
 80121c6:	059a      	lsls	r2, r3, #22
 80121c8:	d402      	bmi.n	80121d0 <_vfiprintf_r+0x220>
 80121ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121cc:	f7ff fcf7 	bl	8011bbe <__retarget_lock_release_recursive>
 80121d0:	89ab      	ldrh	r3, [r5, #12]
 80121d2:	065b      	lsls	r3, r3, #25
 80121d4:	f53f af12 	bmi.w	8011ffc <_vfiprintf_r+0x4c>
 80121d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121da:	e711      	b.n	8012000 <_vfiprintf_r+0x50>
 80121dc:	ab03      	add	r3, sp, #12
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	462a      	mov	r2, r5
 80121e2:	4b09      	ldr	r3, [pc, #36]	; (8012208 <_vfiprintf_r+0x258>)
 80121e4:	a904      	add	r1, sp, #16
 80121e6:	4630      	mov	r0, r6
 80121e8:	f000 f880 	bl	80122ec <_printf_i>
 80121ec:	e7e4      	b.n	80121b8 <_vfiprintf_r+0x208>
 80121ee:	bf00      	nop
 80121f0:	080135b0 	.word	0x080135b0
 80121f4:	080135d0 	.word	0x080135d0
 80121f8:	08013590 	.word	0x08013590
 80121fc:	080135f0 	.word	0x080135f0
 8012200:	080135fa 	.word	0x080135fa
 8012204:	00000000 	.word	0x00000000
 8012208:	08011f8b 	.word	0x08011f8b
 801220c:	080135f6 	.word	0x080135f6

08012210 <_printf_common>:
 8012210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012214:	4616      	mov	r6, r2
 8012216:	4699      	mov	r9, r3
 8012218:	688a      	ldr	r2, [r1, #8]
 801221a:	690b      	ldr	r3, [r1, #16]
 801221c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012220:	4293      	cmp	r3, r2
 8012222:	bfb8      	it	lt
 8012224:	4613      	movlt	r3, r2
 8012226:	6033      	str	r3, [r6, #0]
 8012228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801222c:	4607      	mov	r7, r0
 801222e:	460c      	mov	r4, r1
 8012230:	b10a      	cbz	r2, 8012236 <_printf_common+0x26>
 8012232:	3301      	adds	r3, #1
 8012234:	6033      	str	r3, [r6, #0]
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	0699      	lsls	r1, r3, #26
 801223a:	bf42      	ittt	mi
 801223c:	6833      	ldrmi	r3, [r6, #0]
 801223e:	3302      	addmi	r3, #2
 8012240:	6033      	strmi	r3, [r6, #0]
 8012242:	6825      	ldr	r5, [r4, #0]
 8012244:	f015 0506 	ands.w	r5, r5, #6
 8012248:	d106      	bne.n	8012258 <_printf_common+0x48>
 801224a:	f104 0a19 	add.w	sl, r4, #25
 801224e:	68e3      	ldr	r3, [r4, #12]
 8012250:	6832      	ldr	r2, [r6, #0]
 8012252:	1a9b      	subs	r3, r3, r2
 8012254:	42ab      	cmp	r3, r5
 8012256:	dc26      	bgt.n	80122a6 <_printf_common+0x96>
 8012258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801225c:	1e13      	subs	r3, r2, #0
 801225e:	6822      	ldr	r2, [r4, #0]
 8012260:	bf18      	it	ne
 8012262:	2301      	movne	r3, #1
 8012264:	0692      	lsls	r2, r2, #26
 8012266:	d42b      	bmi.n	80122c0 <_printf_common+0xb0>
 8012268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801226c:	4649      	mov	r1, r9
 801226e:	4638      	mov	r0, r7
 8012270:	47c0      	blx	r8
 8012272:	3001      	adds	r0, #1
 8012274:	d01e      	beq.n	80122b4 <_printf_common+0xa4>
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	68e5      	ldr	r5, [r4, #12]
 801227a:	6832      	ldr	r2, [r6, #0]
 801227c:	f003 0306 	and.w	r3, r3, #6
 8012280:	2b04      	cmp	r3, #4
 8012282:	bf08      	it	eq
 8012284:	1aad      	subeq	r5, r5, r2
 8012286:	68a3      	ldr	r3, [r4, #8]
 8012288:	6922      	ldr	r2, [r4, #16]
 801228a:	bf0c      	ite	eq
 801228c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012290:	2500      	movne	r5, #0
 8012292:	4293      	cmp	r3, r2
 8012294:	bfc4      	itt	gt
 8012296:	1a9b      	subgt	r3, r3, r2
 8012298:	18ed      	addgt	r5, r5, r3
 801229a:	2600      	movs	r6, #0
 801229c:	341a      	adds	r4, #26
 801229e:	42b5      	cmp	r5, r6
 80122a0:	d11a      	bne.n	80122d8 <_printf_common+0xc8>
 80122a2:	2000      	movs	r0, #0
 80122a4:	e008      	b.n	80122b8 <_printf_common+0xa8>
 80122a6:	2301      	movs	r3, #1
 80122a8:	4652      	mov	r2, sl
 80122aa:	4649      	mov	r1, r9
 80122ac:	4638      	mov	r0, r7
 80122ae:	47c0      	blx	r8
 80122b0:	3001      	adds	r0, #1
 80122b2:	d103      	bne.n	80122bc <_printf_common+0xac>
 80122b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122bc:	3501      	adds	r5, #1
 80122be:	e7c6      	b.n	801224e <_printf_common+0x3e>
 80122c0:	18e1      	adds	r1, r4, r3
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	2030      	movs	r0, #48	; 0x30
 80122c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122ca:	4422      	add	r2, r4
 80122cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80122d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80122d4:	3302      	adds	r3, #2
 80122d6:	e7c7      	b.n	8012268 <_printf_common+0x58>
 80122d8:	2301      	movs	r3, #1
 80122da:	4622      	mov	r2, r4
 80122dc:	4649      	mov	r1, r9
 80122de:	4638      	mov	r0, r7
 80122e0:	47c0      	blx	r8
 80122e2:	3001      	adds	r0, #1
 80122e4:	d0e6      	beq.n	80122b4 <_printf_common+0xa4>
 80122e6:	3601      	adds	r6, #1
 80122e8:	e7d9      	b.n	801229e <_printf_common+0x8e>
	...

080122ec <_printf_i>:
 80122ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122f0:	7e0f      	ldrb	r7, [r1, #24]
 80122f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122f4:	2f78      	cmp	r7, #120	; 0x78
 80122f6:	4691      	mov	r9, r2
 80122f8:	4680      	mov	r8, r0
 80122fa:	460c      	mov	r4, r1
 80122fc:	469a      	mov	sl, r3
 80122fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012302:	d807      	bhi.n	8012314 <_printf_i+0x28>
 8012304:	2f62      	cmp	r7, #98	; 0x62
 8012306:	d80a      	bhi.n	801231e <_printf_i+0x32>
 8012308:	2f00      	cmp	r7, #0
 801230a:	f000 80d8 	beq.w	80124be <_printf_i+0x1d2>
 801230e:	2f58      	cmp	r7, #88	; 0x58
 8012310:	f000 80a3 	beq.w	801245a <_printf_i+0x16e>
 8012314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801231c:	e03a      	b.n	8012394 <_printf_i+0xa8>
 801231e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012322:	2b15      	cmp	r3, #21
 8012324:	d8f6      	bhi.n	8012314 <_printf_i+0x28>
 8012326:	a101      	add	r1, pc, #4	; (adr r1, 801232c <_printf_i+0x40>)
 8012328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801232c:	08012385 	.word	0x08012385
 8012330:	08012399 	.word	0x08012399
 8012334:	08012315 	.word	0x08012315
 8012338:	08012315 	.word	0x08012315
 801233c:	08012315 	.word	0x08012315
 8012340:	08012315 	.word	0x08012315
 8012344:	08012399 	.word	0x08012399
 8012348:	08012315 	.word	0x08012315
 801234c:	08012315 	.word	0x08012315
 8012350:	08012315 	.word	0x08012315
 8012354:	08012315 	.word	0x08012315
 8012358:	080124a5 	.word	0x080124a5
 801235c:	080123c9 	.word	0x080123c9
 8012360:	08012487 	.word	0x08012487
 8012364:	08012315 	.word	0x08012315
 8012368:	08012315 	.word	0x08012315
 801236c:	080124c7 	.word	0x080124c7
 8012370:	08012315 	.word	0x08012315
 8012374:	080123c9 	.word	0x080123c9
 8012378:	08012315 	.word	0x08012315
 801237c:	08012315 	.word	0x08012315
 8012380:	0801248f 	.word	0x0801248f
 8012384:	682b      	ldr	r3, [r5, #0]
 8012386:	1d1a      	adds	r2, r3, #4
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	602a      	str	r2, [r5, #0]
 801238c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012394:	2301      	movs	r3, #1
 8012396:	e0a3      	b.n	80124e0 <_printf_i+0x1f4>
 8012398:	6820      	ldr	r0, [r4, #0]
 801239a:	6829      	ldr	r1, [r5, #0]
 801239c:	0606      	lsls	r6, r0, #24
 801239e:	f101 0304 	add.w	r3, r1, #4
 80123a2:	d50a      	bpl.n	80123ba <_printf_i+0xce>
 80123a4:	680e      	ldr	r6, [r1, #0]
 80123a6:	602b      	str	r3, [r5, #0]
 80123a8:	2e00      	cmp	r6, #0
 80123aa:	da03      	bge.n	80123b4 <_printf_i+0xc8>
 80123ac:	232d      	movs	r3, #45	; 0x2d
 80123ae:	4276      	negs	r6, r6
 80123b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123b4:	485e      	ldr	r0, [pc, #376]	; (8012530 <_printf_i+0x244>)
 80123b6:	230a      	movs	r3, #10
 80123b8:	e019      	b.n	80123ee <_printf_i+0x102>
 80123ba:	680e      	ldr	r6, [r1, #0]
 80123bc:	602b      	str	r3, [r5, #0]
 80123be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80123c2:	bf18      	it	ne
 80123c4:	b236      	sxthne	r6, r6
 80123c6:	e7ef      	b.n	80123a8 <_printf_i+0xbc>
 80123c8:	682b      	ldr	r3, [r5, #0]
 80123ca:	6820      	ldr	r0, [r4, #0]
 80123cc:	1d19      	adds	r1, r3, #4
 80123ce:	6029      	str	r1, [r5, #0]
 80123d0:	0601      	lsls	r1, r0, #24
 80123d2:	d501      	bpl.n	80123d8 <_printf_i+0xec>
 80123d4:	681e      	ldr	r6, [r3, #0]
 80123d6:	e002      	b.n	80123de <_printf_i+0xf2>
 80123d8:	0646      	lsls	r6, r0, #25
 80123da:	d5fb      	bpl.n	80123d4 <_printf_i+0xe8>
 80123dc:	881e      	ldrh	r6, [r3, #0]
 80123de:	4854      	ldr	r0, [pc, #336]	; (8012530 <_printf_i+0x244>)
 80123e0:	2f6f      	cmp	r7, #111	; 0x6f
 80123e2:	bf0c      	ite	eq
 80123e4:	2308      	moveq	r3, #8
 80123e6:	230a      	movne	r3, #10
 80123e8:	2100      	movs	r1, #0
 80123ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80123ee:	6865      	ldr	r5, [r4, #4]
 80123f0:	60a5      	str	r5, [r4, #8]
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	bfa2      	ittt	ge
 80123f6:	6821      	ldrge	r1, [r4, #0]
 80123f8:	f021 0104 	bicge.w	r1, r1, #4
 80123fc:	6021      	strge	r1, [r4, #0]
 80123fe:	b90e      	cbnz	r6, 8012404 <_printf_i+0x118>
 8012400:	2d00      	cmp	r5, #0
 8012402:	d04d      	beq.n	80124a0 <_printf_i+0x1b4>
 8012404:	4615      	mov	r5, r2
 8012406:	fbb6 f1f3 	udiv	r1, r6, r3
 801240a:	fb03 6711 	mls	r7, r3, r1, r6
 801240e:	5dc7      	ldrb	r7, [r0, r7]
 8012410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012414:	4637      	mov	r7, r6
 8012416:	42bb      	cmp	r3, r7
 8012418:	460e      	mov	r6, r1
 801241a:	d9f4      	bls.n	8012406 <_printf_i+0x11a>
 801241c:	2b08      	cmp	r3, #8
 801241e:	d10b      	bne.n	8012438 <_printf_i+0x14c>
 8012420:	6823      	ldr	r3, [r4, #0]
 8012422:	07de      	lsls	r6, r3, #31
 8012424:	d508      	bpl.n	8012438 <_printf_i+0x14c>
 8012426:	6923      	ldr	r3, [r4, #16]
 8012428:	6861      	ldr	r1, [r4, #4]
 801242a:	4299      	cmp	r1, r3
 801242c:	bfde      	ittt	le
 801242e:	2330      	movle	r3, #48	; 0x30
 8012430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012434:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012438:	1b52      	subs	r2, r2, r5
 801243a:	6122      	str	r2, [r4, #16]
 801243c:	f8cd a000 	str.w	sl, [sp]
 8012440:	464b      	mov	r3, r9
 8012442:	aa03      	add	r2, sp, #12
 8012444:	4621      	mov	r1, r4
 8012446:	4640      	mov	r0, r8
 8012448:	f7ff fee2 	bl	8012210 <_printf_common>
 801244c:	3001      	adds	r0, #1
 801244e:	d14c      	bne.n	80124ea <_printf_i+0x1fe>
 8012450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012454:	b004      	add	sp, #16
 8012456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245a:	4835      	ldr	r0, [pc, #212]	; (8012530 <_printf_i+0x244>)
 801245c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012460:	6829      	ldr	r1, [r5, #0]
 8012462:	6823      	ldr	r3, [r4, #0]
 8012464:	f851 6b04 	ldr.w	r6, [r1], #4
 8012468:	6029      	str	r1, [r5, #0]
 801246a:	061d      	lsls	r5, r3, #24
 801246c:	d514      	bpl.n	8012498 <_printf_i+0x1ac>
 801246e:	07df      	lsls	r7, r3, #31
 8012470:	bf44      	itt	mi
 8012472:	f043 0320 	orrmi.w	r3, r3, #32
 8012476:	6023      	strmi	r3, [r4, #0]
 8012478:	b91e      	cbnz	r6, 8012482 <_printf_i+0x196>
 801247a:	6823      	ldr	r3, [r4, #0]
 801247c:	f023 0320 	bic.w	r3, r3, #32
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	2310      	movs	r3, #16
 8012484:	e7b0      	b.n	80123e8 <_printf_i+0xfc>
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	f043 0320 	orr.w	r3, r3, #32
 801248c:	6023      	str	r3, [r4, #0]
 801248e:	2378      	movs	r3, #120	; 0x78
 8012490:	4828      	ldr	r0, [pc, #160]	; (8012534 <_printf_i+0x248>)
 8012492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012496:	e7e3      	b.n	8012460 <_printf_i+0x174>
 8012498:	0659      	lsls	r1, r3, #25
 801249a:	bf48      	it	mi
 801249c:	b2b6      	uxthmi	r6, r6
 801249e:	e7e6      	b.n	801246e <_printf_i+0x182>
 80124a0:	4615      	mov	r5, r2
 80124a2:	e7bb      	b.n	801241c <_printf_i+0x130>
 80124a4:	682b      	ldr	r3, [r5, #0]
 80124a6:	6826      	ldr	r6, [r4, #0]
 80124a8:	6961      	ldr	r1, [r4, #20]
 80124aa:	1d18      	adds	r0, r3, #4
 80124ac:	6028      	str	r0, [r5, #0]
 80124ae:	0635      	lsls	r5, r6, #24
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	d501      	bpl.n	80124b8 <_printf_i+0x1cc>
 80124b4:	6019      	str	r1, [r3, #0]
 80124b6:	e002      	b.n	80124be <_printf_i+0x1d2>
 80124b8:	0670      	lsls	r0, r6, #25
 80124ba:	d5fb      	bpl.n	80124b4 <_printf_i+0x1c8>
 80124bc:	8019      	strh	r1, [r3, #0]
 80124be:	2300      	movs	r3, #0
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	4615      	mov	r5, r2
 80124c4:	e7ba      	b.n	801243c <_printf_i+0x150>
 80124c6:	682b      	ldr	r3, [r5, #0]
 80124c8:	1d1a      	adds	r2, r3, #4
 80124ca:	602a      	str	r2, [r5, #0]
 80124cc:	681d      	ldr	r5, [r3, #0]
 80124ce:	6862      	ldr	r2, [r4, #4]
 80124d0:	2100      	movs	r1, #0
 80124d2:	4628      	mov	r0, r5
 80124d4:	f7ed fe8c 	bl	80001f0 <memchr>
 80124d8:	b108      	cbz	r0, 80124de <_printf_i+0x1f2>
 80124da:	1b40      	subs	r0, r0, r5
 80124dc:	6060      	str	r0, [r4, #4]
 80124de:	6863      	ldr	r3, [r4, #4]
 80124e0:	6123      	str	r3, [r4, #16]
 80124e2:	2300      	movs	r3, #0
 80124e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124e8:	e7a8      	b.n	801243c <_printf_i+0x150>
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	462a      	mov	r2, r5
 80124ee:	4649      	mov	r1, r9
 80124f0:	4640      	mov	r0, r8
 80124f2:	47d0      	blx	sl
 80124f4:	3001      	adds	r0, #1
 80124f6:	d0ab      	beq.n	8012450 <_printf_i+0x164>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	079b      	lsls	r3, r3, #30
 80124fc:	d413      	bmi.n	8012526 <_printf_i+0x23a>
 80124fe:	68e0      	ldr	r0, [r4, #12]
 8012500:	9b03      	ldr	r3, [sp, #12]
 8012502:	4298      	cmp	r0, r3
 8012504:	bfb8      	it	lt
 8012506:	4618      	movlt	r0, r3
 8012508:	e7a4      	b.n	8012454 <_printf_i+0x168>
 801250a:	2301      	movs	r3, #1
 801250c:	4632      	mov	r2, r6
 801250e:	4649      	mov	r1, r9
 8012510:	4640      	mov	r0, r8
 8012512:	47d0      	blx	sl
 8012514:	3001      	adds	r0, #1
 8012516:	d09b      	beq.n	8012450 <_printf_i+0x164>
 8012518:	3501      	adds	r5, #1
 801251a:	68e3      	ldr	r3, [r4, #12]
 801251c:	9903      	ldr	r1, [sp, #12]
 801251e:	1a5b      	subs	r3, r3, r1
 8012520:	42ab      	cmp	r3, r5
 8012522:	dcf2      	bgt.n	801250a <_printf_i+0x21e>
 8012524:	e7eb      	b.n	80124fe <_printf_i+0x212>
 8012526:	2500      	movs	r5, #0
 8012528:	f104 0619 	add.w	r6, r4, #25
 801252c:	e7f5      	b.n	801251a <_printf_i+0x22e>
 801252e:	bf00      	nop
 8012530:	08013601 	.word	0x08013601
 8012534:	08013612 	.word	0x08013612

08012538 <_putc_r>:
 8012538:	b570      	push	{r4, r5, r6, lr}
 801253a:	460d      	mov	r5, r1
 801253c:	4614      	mov	r4, r2
 801253e:	4606      	mov	r6, r0
 8012540:	b118      	cbz	r0, 801254a <_putc_r+0x12>
 8012542:	6983      	ldr	r3, [r0, #24]
 8012544:	b90b      	cbnz	r3, 801254a <_putc_r+0x12>
 8012546:	f7ff fa9b 	bl	8011a80 <__sinit>
 801254a:	4b1c      	ldr	r3, [pc, #112]	; (80125bc <_putc_r+0x84>)
 801254c:	429c      	cmp	r4, r3
 801254e:	d124      	bne.n	801259a <_putc_r+0x62>
 8012550:	6874      	ldr	r4, [r6, #4]
 8012552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012554:	07d8      	lsls	r0, r3, #31
 8012556:	d405      	bmi.n	8012564 <_putc_r+0x2c>
 8012558:	89a3      	ldrh	r3, [r4, #12]
 801255a:	0599      	lsls	r1, r3, #22
 801255c:	d402      	bmi.n	8012564 <_putc_r+0x2c>
 801255e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012560:	f7ff fb2c 	bl	8011bbc <__retarget_lock_acquire_recursive>
 8012564:	68a3      	ldr	r3, [r4, #8]
 8012566:	3b01      	subs	r3, #1
 8012568:	2b00      	cmp	r3, #0
 801256a:	60a3      	str	r3, [r4, #8]
 801256c:	da05      	bge.n	801257a <_putc_r+0x42>
 801256e:	69a2      	ldr	r2, [r4, #24]
 8012570:	4293      	cmp	r3, r2
 8012572:	db1c      	blt.n	80125ae <_putc_r+0x76>
 8012574:	b2eb      	uxtb	r3, r5
 8012576:	2b0a      	cmp	r3, #10
 8012578:	d019      	beq.n	80125ae <_putc_r+0x76>
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	6022      	str	r2, [r4, #0]
 8012580:	701d      	strb	r5, [r3, #0]
 8012582:	b2ed      	uxtb	r5, r5
 8012584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012586:	07da      	lsls	r2, r3, #31
 8012588:	d405      	bmi.n	8012596 <_putc_r+0x5e>
 801258a:	89a3      	ldrh	r3, [r4, #12]
 801258c:	059b      	lsls	r3, r3, #22
 801258e:	d402      	bmi.n	8012596 <_putc_r+0x5e>
 8012590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012592:	f7ff fb14 	bl	8011bbe <__retarget_lock_release_recursive>
 8012596:	4628      	mov	r0, r5
 8012598:	bd70      	pop	{r4, r5, r6, pc}
 801259a:	4b09      	ldr	r3, [pc, #36]	; (80125c0 <_putc_r+0x88>)
 801259c:	429c      	cmp	r4, r3
 801259e:	d101      	bne.n	80125a4 <_putc_r+0x6c>
 80125a0:	68b4      	ldr	r4, [r6, #8]
 80125a2:	e7d6      	b.n	8012552 <_putc_r+0x1a>
 80125a4:	4b07      	ldr	r3, [pc, #28]	; (80125c4 <_putc_r+0x8c>)
 80125a6:	429c      	cmp	r4, r3
 80125a8:	bf08      	it	eq
 80125aa:	68f4      	ldreq	r4, [r6, #12]
 80125ac:	e7d1      	b.n	8012552 <_putc_r+0x1a>
 80125ae:	4629      	mov	r1, r5
 80125b0:	4622      	mov	r2, r4
 80125b2:	4630      	mov	r0, r6
 80125b4:	f000 f84c 	bl	8012650 <__swbuf_r>
 80125b8:	4605      	mov	r5, r0
 80125ba:	e7e3      	b.n	8012584 <_putc_r+0x4c>
 80125bc:	080135b0 	.word	0x080135b0
 80125c0:	080135d0 	.word	0x080135d0
 80125c4:	08013590 	.word	0x08013590

080125c8 <__sread>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	460c      	mov	r4, r1
 80125cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d0:	f000 f99e 	bl	8012910 <_read_r>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	bfab      	itete	ge
 80125d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125da:	89a3      	ldrhlt	r3, [r4, #12]
 80125dc:	181b      	addge	r3, r3, r0
 80125de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125e2:	bfac      	ite	ge
 80125e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80125e6:	81a3      	strhlt	r3, [r4, #12]
 80125e8:	bd10      	pop	{r4, pc}

080125ea <__swrite>:
 80125ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	461f      	mov	r7, r3
 80125f0:	898b      	ldrh	r3, [r1, #12]
 80125f2:	05db      	lsls	r3, r3, #23
 80125f4:	4605      	mov	r5, r0
 80125f6:	460c      	mov	r4, r1
 80125f8:	4616      	mov	r6, r2
 80125fa:	d505      	bpl.n	8012608 <__swrite+0x1e>
 80125fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012600:	2302      	movs	r3, #2
 8012602:	2200      	movs	r2, #0
 8012604:	f000 f928 	bl	8012858 <_lseek_r>
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801260e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012612:	81a3      	strh	r3, [r4, #12]
 8012614:	4632      	mov	r2, r6
 8012616:	463b      	mov	r3, r7
 8012618:	4628      	mov	r0, r5
 801261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	f000 b869 	b.w	80126f4 <_write_r>

08012622 <__sseek>:
 8012622:	b510      	push	{r4, lr}
 8012624:	460c      	mov	r4, r1
 8012626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801262a:	f000 f915 	bl	8012858 <_lseek_r>
 801262e:	1c43      	adds	r3, r0, #1
 8012630:	89a3      	ldrh	r3, [r4, #12]
 8012632:	bf15      	itete	ne
 8012634:	6560      	strne	r0, [r4, #84]	; 0x54
 8012636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801263a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801263e:	81a3      	strheq	r3, [r4, #12]
 8012640:	bf18      	it	ne
 8012642:	81a3      	strhne	r3, [r4, #12]
 8012644:	bd10      	pop	{r4, pc}

08012646 <__sclose>:
 8012646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264a:	f000 b8d3 	b.w	80127f4 <_close_r>
	...

08012650 <__swbuf_r>:
 8012650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012652:	460e      	mov	r6, r1
 8012654:	4614      	mov	r4, r2
 8012656:	4605      	mov	r5, r0
 8012658:	b118      	cbz	r0, 8012662 <__swbuf_r+0x12>
 801265a:	6983      	ldr	r3, [r0, #24]
 801265c:	b90b      	cbnz	r3, 8012662 <__swbuf_r+0x12>
 801265e:	f7ff fa0f 	bl	8011a80 <__sinit>
 8012662:	4b21      	ldr	r3, [pc, #132]	; (80126e8 <__swbuf_r+0x98>)
 8012664:	429c      	cmp	r4, r3
 8012666:	d12b      	bne.n	80126c0 <__swbuf_r+0x70>
 8012668:	686c      	ldr	r4, [r5, #4]
 801266a:	69a3      	ldr	r3, [r4, #24]
 801266c:	60a3      	str	r3, [r4, #8]
 801266e:	89a3      	ldrh	r3, [r4, #12]
 8012670:	071a      	lsls	r2, r3, #28
 8012672:	d52f      	bpl.n	80126d4 <__swbuf_r+0x84>
 8012674:	6923      	ldr	r3, [r4, #16]
 8012676:	b36b      	cbz	r3, 80126d4 <__swbuf_r+0x84>
 8012678:	6923      	ldr	r3, [r4, #16]
 801267a:	6820      	ldr	r0, [r4, #0]
 801267c:	1ac0      	subs	r0, r0, r3
 801267e:	6963      	ldr	r3, [r4, #20]
 8012680:	b2f6      	uxtb	r6, r6
 8012682:	4283      	cmp	r3, r0
 8012684:	4637      	mov	r7, r6
 8012686:	dc04      	bgt.n	8012692 <__swbuf_r+0x42>
 8012688:	4621      	mov	r1, r4
 801268a:	4628      	mov	r0, r5
 801268c:	f7ff f964 	bl	8011958 <_fflush_r>
 8012690:	bb30      	cbnz	r0, 80126e0 <__swbuf_r+0x90>
 8012692:	68a3      	ldr	r3, [r4, #8]
 8012694:	3b01      	subs	r3, #1
 8012696:	60a3      	str	r3, [r4, #8]
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	1c5a      	adds	r2, r3, #1
 801269c:	6022      	str	r2, [r4, #0]
 801269e:	701e      	strb	r6, [r3, #0]
 80126a0:	6963      	ldr	r3, [r4, #20]
 80126a2:	3001      	adds	r0, #1
 80126a4:	4283      	cmp	r3, r0
 80126a6:	d004      	beq.n	80126b2 <__swbuf_r+0x62>
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	07db      	lsls	r3, r3, #31
 80126ac:	d506      	bpl.n	80126bc <__swbuf_r+0x6c>
 80126ae:	2e0a      	cmp	r6, #10
 80126b0:	d104      	bne.n	80126bc <__swbuf_r+0x6c>
 80126b2:	4621      	mov	r1, r4
 80126b4:	4628      	mov	r0, r5
 80126b6:	f7ff f94f 	bl	8011958 <_fflush_r>
 80126ba:	b988      	cbnz	r0, 80126e0 <__swbuf_r+0x90>
 80126bc:	4638      	mov	r0, r7
 80126be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126c0:	4b0a      	ldr	r3, [pc, #40]	; (80126ec <__swbuf_r+0x9c>)
 80126c2:	429c      	cmp	r4, r3
 80126c4:	d101      	bne.n	80126ca <__swbuf_r+0x7a>
 80126c6:	68ac      	ldr	r4, [r5, #8]
 80126c8:	e7cf      	b.n	801266a <__swbuf_r+0x1a>
 80126ca:	4b09      	ldr	r3, [pc, #36]	; (80126f0 <__swbuf_r+0xa0>)
 80126cc:	429c      	cmp	r4, r3
 80126ce:	bf08      	it	eq
 80126d0:	68ec      	ldreq	r4, [r5, #12]
 80126d2:	e7ca      	b.n	801266a <__swbuf_r+0x1a>
 80126d4:	4621      	mov	r1, r4
 80126d6:	4628      	mov	r0, r5
 80126d8:	f000 f81e 	bl	8012718 <__swsetup_r>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d0cb      	beq.n	8012678 <__swbuf_r+0x28>
 80126e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80126e4:	e7ea      	b.n	80126bc <__swbuf_r+0x6c>
 80126e6:	bf00      	nop
 80126e8:	080135b0 	.word	0x080135b0
 80126ec:	080135d0 	.word	0x080135d0
 80126f0:	08013590 	.word	0x08013590

080126f4 <_write_r>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	4d07      	ldr	r5, [pc, #28]	; (8012714 <_write_r+0x20>)
 80126f8:	4604      	mov	r4, r0
 80126fa:	4608      	mov	r0, r1
 80126fc:	4611      	mov	r1, r2
 80126fe:	2200      	movs	r2, #0
 8012700:	602a      	str	r2, [r5, #0]
 8012702:	461a      	mov	r2, r3
 8012704:	f7f0 fca8 	bl	8003058 <_write>
 8012708:	1c43      	adds	r3, r0, #1
 801270a:	d102      	bne.n	8012712 <_write_r+0x1e>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	b103      	cbz	r3, 8012712 <_write_r+0x1e>
 8012710:	6023      	str	r3, [r4, #0]
 8012712:	bd38      	pop	{r3, r4, r5, pc}
 8012714:	20003f48 	.word	0x20003f48

08012718 <__swsetup_r>:
 8012718:	4b32      	ldr	r3, [pc, #200]	; (80127e4 <__swsetup_r+0xcc>)
 801271a:	b570      	push	{r4, r5, r6, lr}
 801271c:	681d      	ldr	r5, [r3, #0]
 801271e:	4606      	mov	r6, r0
 8012720:	460c      	mov	r4, r1
 8012722:	b125      	cbz	r5, 801272e <__swsetup_r+0x16>
 8012724:	69ab      	ldr	r3, [r5, #24]
 8012726:	b913      	cbnz	r3, 801272e <__swsetup_r+0x16>
 8012728:	4628      	mov	r0, r5
 801272a:	f7ff f9a9 	bl	8011a80 <__sinit>
 801272e:	4b2e      	ldr	r3, [pc, #184]	; (80127e8 <__swsetup_r+0xd0>)
 8012730:	429c      	cmp	r4, r3
 8012732:	d10f      	bne.n	8012754 <__swsetup_r+0x3c>
 8012734:	686c      	ldr	r4, [r5, #4]
 8012736:	89a3      	ldrh	r3, [r4, #12]
 8012738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801273c:	0719      	lsls	r1, r3, #28
 801273e:	d42c      	bmi.n	801279a <__swsetup_r+0x82>
 8012740:	06dd      	lsls	r5, r3, #27
 8012742:	d411      	bmi.n	8012768 <__swsetup_r+0x50>
 8012744:	2309      	movs	r3, #9
 8012746:	6033      	str	r3, [r6, #0]
 8012748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801274c:	81a3      	strh	r3, [r4, #12]
 801274e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012752:	e03e      	b.n	80127d2 <__swsetup_r+0xba>
 8012754:	4b25      	ldr	r3, [pc, #148]	; (80127ec <__swsetup_r+0xd4>)
 8012756:	429c      	cmp	r4, r3
 8012758:	d101      	bne.n	801275e <__swsetup_r+0x46>
 801275a:	68ac      	ldr	r4, [r5, #8]
 801275c:	e7eb      	b.n	8012736 <__swsetup_r+0x1e>
 801275e:	4b24      	ldr	r3, [pc, #144]	; (80127f0 <__swsetup_r+0xd8>)
 8012760:	429c      	cmp	r4, r3
 8012762:	bf08      	it	eq
 8012764:	68ec      	ldreq	r4, [r5, #12]
 8012766:	e7e6      	b.n	8012736 <__swsetup_r+0x1e>
 8012768:	0758      	lsls	r0, r3, #29
 801276a:	d512      	bpl.n	8012792 <__swsetup_r+0x7a>
 801276c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801276e:	b141      	cbz	r1, 8012782 <__swsetup_r+0x6a>
 8012770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012774:	4299      	cmp	r1, r3
 8012776:	d002      	beq.n	801277e <__swsetup_r+0x66>
 8012778:	4630      	mov	r0, r6
 801277a:	f7fe fdd7 	bl	801132c <_free_r>
 801277e:	2300      	movs	r3, #0
 8012780:	6363      	str	r3, [r4, #52]	; 0x34
 8012782:	89a3      	ldrh	r3, [r4, #12]
 8012784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012788:	81a3      	strh	r3, [r4, #12]
 801278a:	2300      	movs	r3, #0
 801278c:	6063      	str	r3, [r4, #4]
 801278e:	6923      	ldr	r3, [r4, #16]
 8012790:	6023      	str	r3, [r4, #0]
 8012792:	89a3      	ldrh	r3, [r4, #12]
 8012794:	f043 0308 	orr.w	r3, r3, #8
 8012798:	81a3      	strh	r3, [r4, #12]
 801279a:	6923      	ldr	r3, [r4, #16]
 801279c:	b94b      	cbnz	r3, 80127b2 <__swsetup_r+0x9a>
 801279e:	89a3      	ldrh	r3, [r4, #12]
 80127a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127a8:	d003      	beq.n	80127b2 <__swsetup_r+0x9a>
 80127aa:	4621      	mov	r1, r4
 80127ac:	4630      	mov	r0, r6
 80127ae:	f7ff fa2d 	bl	8011c0c <__smakebuf_r>
 80127b2:	89a0      	ldrh	r0, [r4, #12]
 80127b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127b8:	f010 0301 	ands.w	r3, r0, #1
 80127bc:	d00a      	beq.n	80127d4 <__swsetup_r+0xbc>
 80127be:	2300      	movs	r3, #0
 80127c0:	60a3      	str	r3, [r4, #8]
 80127c2:	6963      	ldr	r3, [r4, #20]
 80127c4:	425b      	negs	r3, r3
 80127c6:	61a3      	str	r3, [r4, #24]
 80127c8:	6923      	ldr	r3, [r4, #16]
 80127ca:	b943      	cbnz	r3, 80127de <__swsetup_r+0xc6>
 80127cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80127d0:	d1ba      	bne.n	8012748 <__swsetup_r+0x30>
 80127d2:	bd70      	pop	{r4, r5, r6, pc}
 80127d4:	0781      	lsls	r1, r0, #30
 80127d6:	bf58      	it	pl
 80127d8:	6963      	ldrpl	r3, [r4, #20]
 80127da:	60a3      	str	r3, [r4, #8]
 80127dc:	e7f4      	b.n	80127c8 <__swsetup_r+0xb0>
 80127de:	2000      	movs	r0, #0
 80127e0:	e7f7      	b.n	80127d2 <__swsetup_r+0xba>
 80127e2:	bf00      	nop
 80127e4:	20000118 	.word	0x20000118
 80127e8:	080135b0 	.word	0x080135b0
 80127ec:	080135d0 	.word	0x080135d0
 80127f0:	08013590 	.word	0x08013590

080127f4 <_close_r>:
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	4d06      	ldr	r5, [pc, #24]	; (8012810 <_close_r+0x1c>)
 80127f8:	2300      	movs	r3, #0
 80127fa:	4604      	mov	r4, r0
 80127fc:	4608      	mov	r0, r1
 80127fe:	602b      	str	r3, [r5, #0]
 8012800:	f7f0 fc56 	bl	80030b0 <_close>
 8012804:	1c43      	adds	r3, r0, #1
 8012806:	d102      	bne.n	801280e <_close_r+0x1a>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	b103      	cbz	r3, 801280e <_close_r+0x1a>
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	bd38      	pop	{r3, r4, r5, pc}
 8012810:	20003f48 	.word	0x20003f48

08012814 <_fstat_r>:
 8012814:	b538      	push	{r3, r4, r5, lr}
 8012816:	4d07      	ldr	r5, [pc, #28]	; (8012834 <_fstat_r+0x20>)
 8012818:	2300      	movs	r3, #0
 801281a:	4604      	mov	r4, r0
 801281c:	4608      	mov	r0, r1
 801281e:	4611      	mov	r1, r2
 8012820:	602b      	str	r3, [r5, #0]
 8012822:	f7f0 fc95 	bl	8003150 <_fstat>
 8012826:	1c43      	adds	r3, r0, #1
 8012828:	d102      	bne.n	8012830 <_fstat_r+0x1c>
 801282a:	682b      	ldr	r3, [r5, #0]
 801282c:	b103      	cbz	r3, 8012830 <_fstat_r+0x1c>
 801282e:	6023      	str	r3, [r4, #0]
 8012830:	bd38      	pop	{r3, r4, r5, pc}
 8012832:	bf00      	nop
 8012834:	20003f48 	.word	0x20003f48

08012838 <_isatty_r>:
 8012838:	b538      	push	{r3, r4, r5, lr}
 801283a:	4d06      	ldr	r5, [pc, #24]	; (8012854 <_isatty_r+0x1c>)
 801283c:	2300      	movs	r3, #0
 801283e:	4604      	mov	r4, r0
 8012840:	4608      	mov	r0, r1
 8012842:	602b      	str	r3, [r5, #0]
 8012844:	f7f0 fbf2 	bl	800302c <_isatty>
 8012848:	1c43      	adds	r3, r0, #1
 801284a:	d102      	bne.n	8012852 <_isatty_r+0x1a>
 801284c:	682b      	ldr	r3, [r5, #0]
 801284e:	b103      	cbz	r3, 8012852 <_isatty_r+0x1a>
 8012850:	6023      	str	r3, [r4, #0]
 8012852:	bd38      	pop	{r3, r4, r5, pc}
 8012854:	20003f48 	.word	0x20003f48

08012858 <_lseek_r>:
 8012858:	b538      	push	{r3, r4, r5, lr}
 801285a:	4d07      	ldr	r5, [pc, #28]	; (8012878 <_lseek_r+0x20>)
 801285c:	4604      	mov	r4, r0
 801285e:	4608      	mov	r0, r1
 8012860:	4611      	mov	r1, r2
 8012862:	2200      	movs	r2, #0
 8012864:	602a      	str	r2, [r5, #0]
 8012866:	461a      	mov	r2, r3
 8012868:	f7f0 fc39 	bl	80030de <_lseek>
 801286c:	1c43      	adds	r3, r0, #1
 801286e:	d102      	bne.n	8012876 <_lseek_r+0x1e>
 8012870:	682b      	ldr	r3, [r5, #0]
 8012872:	b103      	cbz	r3, 8012876 <_lseek_r+0x1e>
 8012874:	6023      	str	r3, [r4, #0]
 8012876:	bd38      	pop	{r3, r4, r5, pc}
 8012878:	20003f48 	.word	0x20003f48

0801287c <memmove>:
 801287c:	4288      	cmp	r0, r1
 801287e:	b510      	push	{r4, lr}
 8012880:	eb01 0402 	add.w	r4, r1, r2
 8012884:	d902      	bls.n	801288c <memmove+0x10>
 8012886:	4284      	cmp	r4, r0
 8012888:	4623      	mov	r3, r4
 801288a:	d807      	bhi.n	801289c <memmove+0x20>
 801288c:	1e43      	subs	r3, r0, #1
 801288e:	42a1      	cmp	r1, r4
 8012890:	d008      	beq.n	80128a4 <memmove+0x28>
 8012892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012896:	f803 2f01 	strb.w	r2, [r3, #1]!
 801289a:	e7f8      	b.n	801288e <memmove+0x12>
 801289c:	4402      	add	r2, r0
 801289e:	4601      	mov	r1, r0
 80128a0:	428a      	cmp	r2, r1
 80128a2:	d100      	bne.n	80128a6 <memmove+0x2a>
 80128a4:	bd10      	pop	{r4, pc}
 80128a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128ae:	e7f7      	b.n	80128a0 <memmove+0x24>

080128b0 <_realloc_r>:
 80128b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b4:	4680      	mov	r8, r0
 80128b6:	4614      	mov	r4, r2
 80128b8:	460e      	mov	r6, r1
 80128ba:	b921      	cbnz	r1, 80128c6 <_realloc_r+0x16>
 80128bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128c0:	4611      	mov	r1, r2
 80128c2:	f7fe bd9f 	b.w	8011404 <_malloc_r>
 80128c6:	b92a      	cbnz	r2, 80128d4 <_realloc_r+0x24>
 80128c8:	f7fe fd30 	bl	801132c <_free_r>
 80128cc:	4625      	mov	r5, r4
 80128ce:	4628      	mov	r0, r5
 80128d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d4:	f000 f82e 	bl	8012934 <_malloc_usable_size_r>
 80128d8:	4284      	cmp	r4, r0
 80128da:	4607      	mov	r7, r0
 80128dc:	d802      	bhi.n	80128e4 <_realloc_r+0x34>
 80128de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80128e2:	d812      	bhi.n	801290a <_realloc_r+0x5a>
 80128e4:	4621      	mov	r1, r4
 80128e6:	4640      	mov	r0, r8
 80128e8:	f7fe fd8c 	bl	8011404 <_malloc_r>
 80128ec:	4605      	mov	r5, r0
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d0ed      	beq.n	80128ce <_realloc_r+0x1e>
 80128f2:	42bc      	cmp	r4, r7
 80128f4:	4622      	mov	r2, r4
 80128f6:	4631      	mov	r1, r6
 80128f8:	bf28      	it	cs
 80128fa:	463a      	movcs	r2, r7
 80128fc:	f7fe fd00 	bl	8011300 <memcpy>
 8012900:	4631      	mov	r1, r6
 8012902:	4640      	mov	r0, r8
 8012904:	f7fe fd12 	bl	801132c <_free_r>
 8012908:	e7e1      	b.n	80128ce <_realloc_r+0x1e>
 801290a:	4635      	mov	r5, r6
 801290c:	e7df      	b.n	80128ce <_realloc_r+0x1e>
	...

08012910 <_read_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4d07      	ldr	r5, [pc, #28]	; (8012930 <_read_r+0x20>)
 8012914:	4604      	mov	r4, r0
 8012916:	4608      	mov	r0, r1
 8012918:	4611      	mov	r1, r2
 801291a:	2200      	movs	r2, #0
 801291c:	602a      	str	r2, [r5, #0]
 801291e:	461a      	mov	r2, r3
 8012920:	f7f0 fbee 	bl	8003100 <_read>
 8012924:	1c43      	adds	r3, r0, #1
 8012926:	d102      	bne.n	801292e <_read_r+0x1e>
 8012928:	682b      	ldr	r3, [r5, #0]
 801292a:	b103      	cbz	r3, 801292e <_read_r+0x1e>
 801292c:	6023      	str	r3, [r4, #0]
 801292e:	bd38      	pop	{r3, r4, r5, pc}
 8012930:	20003f48 	.word	0x20003f48

08012934 <_malloc_usable_size_r>:
 8012934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012938:	1f18      	subs	r0, r3, #4
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfbc      	itt	lt
 801293e:	580b      	ldrlt	r3, [r1, r0]
 8012940:	18c0      	addlt	r0, r0, r3
 8012942:	4770      	bx	lr

08012944 <_init>:
 8012944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012946:	bf00      	nop
 8012948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801294a:	bc08      	pop	{r3}
 801294c:	469e      	mov	lr, r3
 801294e:	4770      	bx	lr

08012950 <_fini>:
 8012950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012952:	bf00      	nop
 8012954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012956:	bc08      	pop	{r3}
 8012958:	469e      	mov	lr, r3
 801295a:	4770      	bx	lr
