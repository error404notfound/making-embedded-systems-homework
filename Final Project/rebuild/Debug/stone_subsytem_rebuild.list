
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001028c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  0801043c  0801043c  0002043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f44  08010f44  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  08010f44  08010f44  00020f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f4c  08010f4c  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f4c  08010f4c  00020f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f50  08010f50  00020f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08010f54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030158  2**0
                  CONTENTS
 10 .bss          00003b80  20000158  20000158  00030158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003cd8  20003cd8  00030158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d6d8  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006843  00000000  00000000  0005d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  000640a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f20  00000000  00000000  00066258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e805  00000000  00000000  00068178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000318eb  00000000  00000000  0009697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed7db  00000000  00000000  000c8268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b5a43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094f0  00000000  00000000  001b5a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010424 	.word	0x08010424

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	08010424 	.word	0x08010424

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b3f      	cmp	r3, #63	; 0x3f
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc49 	bl	8000f88 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc9a 	bl	8001030 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc97 	bl	8001030 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc94 	bl	8001030 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b3f      	cmp	r3, #63	; 0x3f
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0801043c 	.word	0x0801043c
 8000738:	08010484 	.word	0x08010484
 800073c:	08010488 	.word	0x08010488
 8000740:	200001b4 	.word	0x200001b4
 8000744:	20000174 	.word	0x20000174

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fc29 	bl	8000fb8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb76 	bl	8000e8c <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fc1e 	bl	8001030 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fc1b 	bl	8001030 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fc18 	bl	8001030 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc0c 	bl	8001030 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fc09 	bl	8001030 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fbe6 	bl	8001030 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fbe3 	bl	8001030 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fbcc 	bl	8001030 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b4 	.word	0x200001b4
 80008a4:	20000174 	.word	0x20000174
 80008a8:	200001b8 	.word	0x200001b8
 80008ac:	0801048c 	.word	0x0801048c
 80008b0:	08010494 	.word	0x08010494
 80008b4:	08010484 	.word	0x08010484
 80008b8:	0801049c 	.word	0x0801049c
 80008bc:	08010488 	.word	0x08010488

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b40      	cmp	r3, #64	; 0x40
 8000906:	d102      	bne.n	800090e <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000908:	2310      	movs	r3, #16
 800090a:	75fb      	strb	r3, [r7, #23]
 800090c:	e002      	b.n	8000914 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b08a      	sub	sp, #40	; 0x28
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	460b      	mov	r3, r1
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000934:	f107 021c 	add.w	r2, r7, #28
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	4619      	mov	r1, r3
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ffbf 	bl	80008c0 <ConsoleParamFindN>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4413      	add	r3, r2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095c:	e011      	b.n	8000982 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800095e:	f107 0214 	add.w	r2, r7, #20
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096a:	701a      	strb	r2, [r3, #0]
		i++;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3301      	adds	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	4413      	add	r3, r2
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000982:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d00a      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
 800098a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800098e:	2b0d      	cmp	r3, #13
 8000990:	d006      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000996:	2b20      	cmp	r3, #32
 8000998:	d002      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	2b07      	cmp	r3, #7
 800099e:	d9de      	bls.n	800095e <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d102      	bne.n	80009ac <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a6:	2310      	movs	r3, #16
 80009a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b4:	f107 0214 	add.w	r2, r7, #20
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00e fb9b 	bl	800f100 <atoi>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b08a      	sub	sp, #40	; 0x28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	460b      	mov	r3, r1
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f4:	f107 0218 	add.w	r2, r7, #24
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	4619      	mov	r1, r3
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ff5f 	bl	80008c0 <ConsoleParamFindN>
 8000a02:	4603      	mov	r3, r0
 8000a04:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12c      	bne.n	8000a66 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e01e      	b.n	8000a50 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f107 0217 	add.w	r2, r7, #23
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f8c5 	bl	8000bba <ConsoleUtilHexCharToInt>
 8000a30:	4603      	mov	r3, r0
 8000a32:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a46:	4413      	add	r3, r2
 8000a48:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d9dd      	bls.n	8000a12 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d101      	bne.n	8000a60 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a64:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e01b      	b.n	8000abc <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a84:	7cfb      	ldrb	r3, [r7, #19]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d115      	bne.n	8000ab6 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f1c3 0303 	rsb	r3, r3, #3
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa0:	f107 020c 	add.w	r2, r7, #12
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	7cbb      	ldrb	r3, [r7, #18]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8c5 	bl	8000c3c <ConsoleUtilsIntToHexChar>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9e0      	bls.n	8000a84 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 faac 	bl	8001030 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b089      	sub	sp, #36	; 0x24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da07      	bge.n	8000b0c <smallItoa+0x2a>
		isNegative = true;
 8000afc:	2301      	movs	r3, #1
 8000afe:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	425b      	negs	r3, r3
 8000b04:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b10:	e007      	b.n	8000b22 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f1      	bne.n	8000b12 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	fb01 f202 	mul.w	r2, r1, r2
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	440b      	add	r3, r1
 8000b5a:	3230      	adds	r2, #48	; 0x30
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b68:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	617a      	str	r2, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1e6      	bne.n	8000b42 <smallItoa+0x60>

	if (isNegative) {
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	222d      	movs	r2, #45	; 0x2d
 8000b7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b80:	bf00      	nop
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	f107 0108 	add.w	r1, r7, #8
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff9e 	bl	8000ae2 <smallItoa>
	ConsoleIoSendString(out);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa40 	bl	8001030 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8000bce:	d908      	bls.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b39      	cmp	r3, #57	; 0x39
 8000bd4:	d805      	bhi.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3b30      	subs	r3, #48	; 0x30
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e025      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b40      	cmp	r3, #64	; 0x40
 8000be6:	d908      	bls.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b46      	cmp	r3, #70	; 0x46
 8000bec:	d805      	bhi.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3b37      	subs	r3, #55	; 0x37
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e019      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b60      	cmp	r3, #96	; 0x60
 8000bfe:	d908      	bls.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b66      	cmp	r3, #102	; 0x66
 8000c04:	d805      	bhi.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3b57      	subs	r3, #87	; 0x57
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e00d      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b0a      	cmp	r3, #10
 8000c16:	d105      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b0d      	cmp	r3, #13
 8000c1c:	d102      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d102      	bne.n	8000c2a <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c24:	2311      	movs	r3, #17
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e001      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d805      	bhi.n	8000c5e <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	3330      	adds	r3, #48	; 0x30
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e00d      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	d908      	bls.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d805      	bhi.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3337      	adds	r3, #55	; 0x37
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e001      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c76:	2310      	movs	r3, #16
 8000c78:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c96:	2300      	movs	r3, #0
 8000c98:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000ca6:	f107 0210 	add.w	r2, r7, #16
 8000caa:	7afb      	ldrb	r3, [r7, #11]
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fe06 	bl	80008c0 <ConsoleParamFindN>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cca:	e00e      	b.n	8000cea <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7dfa      	ldrb	r2, [r7, #23]
 8000cd4:	701a      	strb	r2, [r3, #0]
			i++;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	2b0a      	cmp	r3, #10
 8000cee:	d008      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b0d      	cmp	r3, #13
 8000cf4:	d005      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d002      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9e4      	bls.n	8000ccc <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d101      	bne.n	8000d0c <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d44:	2300      	movs	r3, #0
 8000d46:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d48:	230a      	movs	r3, #10
 8000d4a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e01e      	b.n	8000d90 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d52:	4914      	ldr	r1, [pc, #80]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f964 	bl	8001030 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ConsoleCommandHelp+0x6c>)
 8000d6a:	f000 f961 	bl	8001030 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f956 	bl	8001030 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <ConsoleCommandHelp+0x70>)
 8000d86:	f000 f953 	bl	8001030 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3db      	bcc.n	8000d52 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	08010aa4 	.word	0x08010aa4
 8000da8:	080104f4 	.word	0x080104f4
 8000dac:	080104f8 	.word	0x080104f8

08000db0 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fdae 	bl	8000922 <ConsoleReceiveParamInt16>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d116      	bne.n	8000dfe <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <ConsoleCommandParamExampleInt16+0x58>)
 8000dd2:	f000 f92d 	bl	8001030 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fed6 	bl	8000b8c <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <ConsoleCommandParamExampleInt16+0x5c>)
 8000de2:	f000 f925 	bl	8001030 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe3f 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <ConsoleCommandParamExampleInt16+0x60>)
 8000df4:	f000 f91c 	bl	8001030 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <ConsoleCommandParamExampleInt16+0x64>)
 8000dfa:	f000 f919 	bl	8001030 <ConsoleIoSendString>
	}
	return result;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	080104fc 	.word	0x080104fc
 8000e0c:	0801050c 	.word	0x0801050c
 8000e10:	08010514 	.word	0x08010514
 8000e14:	080104f8 	.word	0x080104f8

08000e18 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	461a      	mov	r2, r3
 8000e26:	2101      	movs	r1, #1
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fdd8 	bl	80009de <ConsoleReceiveParamHexUint16>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d109      	bne.n	8000e4c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e3a:	f000 f8f9 	bl	8001030 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe15 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e48:	f000 f8f2 	bl	8001030 <ConsoleIoSendString>
	}
	return result;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08010518 	.word	0x08010518
 8000e5c:	080104f8 	.word	0x080104f8

08000e60 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <ConsoleCommandVer+0x24>)
 8000e6e:	f000 f8df 	bl	8001030 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ConsoleCommandVer+0x28>)
 8000e74:	f000 f8dc 	bl	8001030 <ConsoleIoSendString>
	return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08010528 	.word	0x08010528
 8000e88:	080104f8 	.word	0x080104f8

08000e8c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <ConsoleCommandsGetTable+0x10>)
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	08010aa4 	.word	0x08010aa4

08000ea0 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2101      	movs	r1, #1
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fee3 	bl	8000c88 <ConsoleReceiveParamString>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000ec6:	7a7b      	ldrb	r3, [r7, #9]
 8000ec8:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	2b6e      	cmp	r3, #110	; 0x6e
 8000ece:	d103      	bne.n	8000ed8 <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		setUserDebugLogging(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 f937 	bl	8003144 <setUserDebugLogging>
 8000ed6:	e005      	b.n	8000ee4 <ConsoleCommandDebugPrint+0x44>
	}
	else if('f'== trigger){
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b66      	cmp	r3, #102	; 0x66
 8000edc:	d102      	bne.n	8000ee4 <ConsoleCommandDebugPrint+0x44>

		// trigger is off.
		setUserDebugLogging(0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f002 f930 	bl	8003144 <setUserDebugLogging>
	else
	{
		//the inputs bad output guide text.
	}

	return result;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]

}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <ConsoleCommandSetMode>:
static eCommandResult_T ConsoleCommandSetMode(const char buffer[]){
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]

	eCommandResult_T result = COMMAND_SUCCESS;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	2300      	movs	r3, #0
 8000f00:	733b      	strb	r3, [r7, #12]
	// get the mode they want to set.
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	461a      	mov	r2, r3
 8000f08:	2101      	movs	r1, #1
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff febc 	bl	8000c88 <ConsoleReceiveParamString>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <ConsoleCommandSetState>:
static eCommandResult_T ConsoleCommandSetState(const char buffer[]){
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	461a      	mov	r2, r3
 8000f38:	2101      	movs	r1, #1
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fea4 	bl	8000c88 <ConsoleReceiveParamString>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]

	return result;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <ConsoleCommandSetStateTimeout>:
static eCommandResult_T ConsoleCommandSetStateTimeout(const char buffer[]){}
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	bf00      	nop
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	charCount = 0;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <reset+0x1c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <reset+0x20>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001c4 	.word	0x200001c4
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <ConsoleIoInit+0x28>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <ConsoleIoInit+0x28>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4905      	ldr	r1, [pc, #20]	; (8000fb4 <ConsoleIoInit+0x2c>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 ff2d 	bl	8008dfe <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001bc 	.word	0x200001bc
 8000fb4:	200001d2 	.word	0x200001d2

08000fb8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <ConsoleIoReceive+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11f      	bne.n	8001010 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000fd0:	e00a      	b.n	8000fe8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4912      	ldr	r1, [pc, #72]	; (8001024 <ConsoleIoReceive+0x6c>)
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	440a      	add	r2, r1
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	701a      	strb	r2, [r3, #0]
			i++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <ConsoleIoReceive+0x70>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d3ed      	bcc.n	8000fd2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <ConsoleIoReceive+0x70>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8001000:	4908      	ldr	r1, [pc, #32]	; (8001024 <ConsoleIoReceive+0x6c>)
 8001002:	480a      	ldr	r0, [pc, #40]	; (800102c <ConsoleIoReceive+0x74>)
 8001004:	f00e f9b0 	bl	800f368 <iprintf>
		// reset counts
		reset();
 8001008:	f7ff ffac 	bl	8000f64 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 800100c:	2300      	movs	r3, #0
 800100e:	e003      	b.n	8001018 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001c0 	.word	0x200001c0
 8001024:	200001c8 	.word	0x200001c8
 8001028:	200001c4 	.word	0x200001c4
 800102c:	0801053c 	.word	0x0801053c

08001030 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <ConsoleIoSendString+0x1c>)
 800103c:	f00e f994 	bl	800f368 <iprintf>
	return CONSOLE_SUCCESS;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	0801053c 	.word	0x0801053c

08001050 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UART_RxCpltCallback+0x44>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_UART_RxCpltCallback+0x48>)
 800105e:	7811      	ldrb	r1, [r2, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_UART_RxCpltCallback+0x4c>)
 8001062:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_UART_RxCpltCallback+0x44>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_UART_RxCpltCallback+0x44>)
 800106c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_UART_RxCpltCallback+0x48>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b0a      	cmp	r3, #10
 8001074:	d102      	bne.n	800107c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_UART_RxCpltCallback+0x50>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_UART_RxCpltCallback+0x54>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	4905      	ldr	r1, [pc, #20]	; (8001098 <HAL_UART_RxCpltCallback+0x48>)
 8001084:	4618      	mov	r0, r3
 8001086:	f007 feba 	bl	8008dfe <HAL_UART_Receive_IT>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001c4 	.word	0x200001c4
 8001098:	200001d2 	.word	0x200001d2
 800109c:	200001c8 	.word	0x200001c8
 80010a0:	200001c0 	.word	0x200001c0
 80010a4:	200001bc 	.word	0x200001bc

080010a8 <FileControllerInit>:
#include "stm32f4xx_hal.h"
#include "file_USB_driver.h"
#include "usb_host.h"


stoneError_t FileControllerInit(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	stoneError_t ret = NO_ERROR;
 80010ae:	2304      	movs	r3, #4
 80010b0:	71fb      	strb	r3, [r7, #7]

	while (getUSBState()!=APPLICATION_READY){
 80010b2:	e001      	b.n	80010b8 <FileControllerInit+0x10>
		   MX_USB_HOST_Process();
 80010b4:	f00d fd0c 	bl	800ead0 <MX_USB_HOST_Process>
	while (getUSBState()!=APPLICATION_READY){
 80010b8:	f00d fcd8 	bl	800ea6c <getUSBState>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1f8      	bne.n	80010b4 <FileControllerInit+0xc>

	}
	Mount_USB();
 80010c2:	f000 fb23 	bl	800170c <Mount_USB>

	return ret;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MovementControllerInit>:
extern movementData_t lastAccel;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f9b4 	bl	8001448 <Lis3dhInit>

	I3G450D_Init(SPIxHandle);
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f000 fb35 	bl	8001750 <I3G450D_Init>



}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <MovementControllerProcess>:
int MovementControllerProcess(){
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
	// Gets for the gyroscope.
	 I3G450D_loop();
 80010f4:	f000 fbf4 	bl	80018e0 <I3G450D_loop>
	 Lis3dhGetAcc();
 80010f8:	f000 fa34 	bl	8001564 <Lis3dhGetAcc>
	int16_t acelX,acelY,acelZ;
	AccelGetData(&acelX, &acelY, &acelZ);
 80010fc:	1cba      	adds	r2, r7, #2
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fab0 	bl	8001668 <AccelGetData>
	//printf("%d,%d,%d \n",acelX,acelY,acelZ);

	return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <getInterruptType>:
gesture_t getInterruptType( sensor_t sensor ){
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]


}
 800111c:	bf00      	nop
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ffc8 	bl	80010d0 <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fad1 	bl	80006e8 <ConsoleInit>
	FileControllerInit();
 8001146:	f7ff ffaf 	bl	80010a8 <FileControllerInit>

	// fill mode table;
	//getBreathModeTableEntry(&modeTable[0] );

	currentState = START;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <SessionControllerInit+0x3c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001150:	f002 f8b0 	bl	80032b4 <HAL_GetTick>
 8001154:	4603      	mov	r3, r0
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SessionControllerInit+0x40>)
 8001158:	6013      	str	r3, [r2, #0]
	ConsoleProcess();
 800115a:	f7ff faf5 	bl	8000748 <ConsoleProcess>




}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001d3 	.word	0x200001d3
 800116c:	200001e8 	.word	0x200001e8

08001170 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0



// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <SessionControllerProcess+0x74>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <SessionControllerProcess+0x78>)
 800117e:	460b      	mov	r3, r1
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a5b      	subs	r3, r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	1d3c      	adds	r4, r7, #4
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	627b      	str	r3, [r7, #36]	; 0x24

	//out put for training model
	MovementControllerProcess();
 800119c:	f7ff ffa7 	bl	80010ee <MovementControllerProcess>


	//MovementControllerProcess();


	if ( HAL_GetTick() - timeStateStarted > timeout )
 80011a0:	f002 f888 	bl	80032b4 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <SessionControllerProcess+0x7c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d201      	bcs.n	80011b6 <SessionControllerProcess+0x46>
	{

		current.onEnd();
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SessionControllerProcess+0x80>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <SessionControllerProcess+0x52>
	{

		current.onButtonPress();
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4798      	blx	r3
	if( 1 == gestureRecognized ){
		// gesture recognized response.
		// get the gesture tag from MovementController.

	}
	if( 1 == accelerometorInterrupt)
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <SessionControllerProcess+0x84>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d106      	bne.n	80011d8 <SessionControllerProcess+0x68>
	{
		// The interrupt has been triggered.
		// get what interrupted it from movementController.
		gesture_t gesture =  getInterruptType( ACCELEROMETER );
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ffa1 	bl	8001112 <getInterruptType>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// run proccess for current state.
		current.stateProcess();
	}


}
 80011d6:	e001      	b.n	80011dc <SessionControllerProcess+0x6c>
		current.stateProcess();
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	4798      	blx	r3
}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	200001d3 	.word	0x200001d3
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200001e8 	.word	0x200001e8
 80011f0:	200001ec 	.word	0x200001ec
 80011f4:	200001f0 	.word	0x200001f0

080011f8 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	debugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <IdleAwake+0x28>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <IdleAwake+0x2c>)
 8001202:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <IdleAwake+0x28>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800120a:	f002 f853 	bl	80032b4 <HAL_GetTick>
 800120e:	4603      	mov	r3, r0
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <IdleAwake+0x30>)
 8001212:	6013      	str	r3, [r2, #0]
	debugPrint(" State = IdleAwake");
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <IdleAwake+0x34>)
 8001216:	f001 ff75 	bl	8003104 <debugPrint>
	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001d3 	.word	0x200001d3
 8001224:	200001d4 	.word	0x200001d4
 8001228:	200001e8 	.word	0x200001e8
 800122c:	08010554 	.word	0x08010554

08001230 <DeepSleep>:
int DeepSleep(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <DeepSleep+0x28>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <DeepSleep+0x2c>)
 800123a:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <DeepSleep+0x28>)
 800123e:	2202      	movs	r2, #2
 8001240:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001242:	f002 f837 	bl	80032b4 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <DeepSleep+0x30>)
 800124a:	6013      	str	r3, [r2, #0]
	debugPrint(" State = DeepSleep");
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <DeepSleep+0x34>)
 800124e:	f001 ff59 	bl	8003104 <debugPrint>
	return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001d3 	.word	0x200001d3
 800125c:	200001d4 	.word	0x200001d4
 8001260:	200001e8 	.word	0x200001e8
 8001264:	08010568 	.word	0x08010568

08001268 <WaitingForSelection>:
int WaitingForSelection(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	previouseState = currentState;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <WaitingForSelection+0x28>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <WaitingForSelection+0x2c>)
 8001272:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <WaitingForSelection+0x28>)
 8001276:	2203      	movs	r2, #3
 8001278:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800127a:	f002 f81b 	bl	80032b4 <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <WaitingForSelection+0x30>)
 8001282:	6013      	str	r3, [r2, #0]
	debugPrint(" State = WaitingForSelection");
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <WaitingForSelection+0x34>)
 8001286:	f001 ff3d 	bl	8003104 <debugPrint>
	return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001d3 	.word	0x200001d3
 8001294:	200001d4 	.word	0x200001d4
 8001298:	200001e8 	.word	0x200001e8
 800129c:	0801057c 	.word	0x0801057c

080012a0 <LoadMode>:
int LoadMode(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <LoadMode+0x28>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <LoadMode+0x2c>)
 80012aa:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LoadMode+0x28>)
 80012ae:	2203      	movs	r2, #3
 80012b0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80012b2:	f001 ffff 	bl	80032b4 <HAL_GetTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <LoadMode+0x30>)
 80012ba:	6013      	str	r3, [r2, #0]
	debugPrint(" State = LoadMode");
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <LoadMode+0x34>)
 80012be:	f001 ff21 	bl	8003104 <debugPrint>
	return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001d3 	.word	0x200001d3
 80012cc:	200001d4 	.word	0x200001d4
 80012d0:	200001e8 	.word	0x200001e8
 80012d4:	0801059c 	.word	0x0801059c

080012d8 <CliMode>:
int CliMode(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

	previouseState = currentState;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <CliMode+0x34>)
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <CliMode+0x38>)
 80012e2:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <CliMode+0x34>)
 80012e6:	2206      	movs	r2, #6
 80012e8:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <CliMode+0x3c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	pauseDebugLogging();
 80012f0:	f001 ff38 	bl	8003164 <pauseDebugLogging>

	timeStateStarted = HAL_GetTick();
 80012f4:	f001 ffde 	bl	80032b4 <HAL_GetTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <CliMode+0x40>)
 80012fc:	6013      	str	r3, [r2, #0]
	debugPrint(" State = CliMode");
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <CliMode+0x44>)
 8001300:	f001 ff00 	bl	8003104 <debugPrint>

	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001d3 	.word	0x200001d3
 8001310:	200001d4 	.word	0x200001d4
 8001314:	200001ec 	.word	0x200001ec
 8001318:	200001e8 	.word	0x200001e8
 800131c:	080105b0 	.word	0x080105b0

08001320 <StartPreviouseMode>:
int StartPreviouseMode(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	currentState = previouseState;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <StartPreviouseMode+0x2c>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <StartPreviouseMode+0x30>)
 800132a:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <StartPreviouseMode+0x2c>)
 800132e:	2206      	movs	r2, #6
 8001330:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	resumeDebugLogging();
 8001332:	f001 ff23 	bl	800317c <resumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 8001336:	f001 ffbd 	bl	80032b4 <HAL_GetTick>
 800133a:	4603      	mov	r3, r0
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <StartPreviouseMode+0x34>)
 800133e:	6013      	str	r3, [r2, #0]
	debugPrint(" State = StartPreviouseMode");
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <StartPreviouseMode+0x38>)
 8001342:	f001 fedf 	bl	8003104 <debugPrint>
	return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001d4 	.word	0x200001d4
 8001350:	200001d3 	.word	0x200001d3
 8001354:	200001e8 	.word	0x200001e8
 8001358:	080105c4 	.word	0x080105c4

0800135c <InMode>:
int InMode()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <InMode+0x20>)
 8001362:	2205      	movs	r2, #5
 8001364:	701a      	strb	r2, [r3, #0]

	timeStateStarted = HAL_GetTick();
 8001366:	f001 ffa5 	bl	80032b4 <HAL_GetTick>
 800136a:	4603      	mov	r3, r0
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <InMode+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
	debugPrint(" State = InMode");
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <InMode+0x28>)
 8001372:	f001 fec7 	bl	8003104 <debugPrint>
	return 0;
 8001376:	2300      	movs	r3, #0

}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001d3 	.word	0x200001d3
 8001380:	200001e8 	.word	0x200001e8
 8001384:	080105e0 	.word	0x080105e0

08001388 <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
 800138c:	2300      	movs	r3, #0
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
 800139c:	2300      	movs	r3, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	2300      	movs	r3, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){return 0;}
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	2300      	movs	r3, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	2300      	movs	r3, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <CliModeProcess>:

int CliModeProcess(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	ConsoleProcess();
 80013dc:	f7ff f9b4 	bl	8000748 <ConsoleProcess>

	return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	currentMode.modeProcess();
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <InModeProcess+0x10>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4798      	blx	r3
	return 0;}
 80013f2:	2300      	movs	r3, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001d8 	.word	0x200001d8

080013fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_GPIO_EXTI_Callback+0x40>)
 800140c:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4619      	mov	r1, r3
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f002 fdd4 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_GPIO_EXTI_Callback+0x44>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
	}
	if( GPIO_Pin == GPIO_PIN_8)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142a:	d102      	bne.n	8001432 <HAL_GPIO_EXTI_Callback+0x36>
	{
		accelerometorInterrupt = 1;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_GPIO_EXTI_Callback+0x48>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
	}

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020000 	.word	0x40020000
 8001440:	200001ec 	.word	0x200001ec
 8001444:	200001f0 	.word	0x200001f0

08001448 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8001450:	4a43      	ldr	r2, [pc, #268]	; (8001560 <Lis3dhInit+0x118>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001456:	238f      	movs	r3, #143	; 0x8f
 8001458:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <Lis3dhInit+0x118>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	2130      	movs	r1, #48	; 0x30
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001464:	2201      	movs	r2, #1
 8001466:	f004 fe67 	bl	8006138 <HAL_I2C_IsDeviceReady>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <Lis3dhInit+0x118>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	2130      	movs	r1, #48	; 0x30
 8001474:	f107 0214 	add.w	r2, r7, #20
 8001478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	f004 fb36 	bl	8005af0 <HAL_I2C_Master_Transmit>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 800148e:	f000 f92b 	bl	80016e8 <errorHandler>
 8001492:	e05f      	b.n	8001554 <Lis3dhInit+0x10c>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <Lis3dhInit+0x118>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	2130      	movs	r1, #48	; 0x30
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2302      	movs	r3, #2
 80014a6:	f004 fc21 	bl	8005cec <HAL_I2C_Master_Receive>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 80014b4:	f000 f918 	bl	80016e8 <errorHandler>
 80014b8:	e04c      	b.n	8001554 <Lis3dhInit+0x10c>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <Lis3dhInit+0x118>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	2130      	movs	r1, #48	; 0x30
 80014c4:	f107 0214 	add.w	r2, r7, #20
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	f004 fb0e 	bl	8005af0 <HAL_I2C_Master_Transmit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <Lis3dhInit+0x118>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	2130      	movs	r1, #48	; 0x30
 80014de:	f107 0208 	add.w	r2, r7, #8
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2302      	movs	r3, #2
 80014ea:	f004 fbff 	bl	8005cec <HAL_I2C_Master_Receive>
 80014ee:	4603      	mov	r3, r0
 80014f0:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1;
 80014f2:	2320      	movs	r3, #32
 80014f4:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_100HZ;
 80014f6:	2357      	movs	r3, #87	; 0x57
 80014f8:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <Lis3dhInit+0x118>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	2130      	movs	r1, #48	; 0x30
 8001500:	f107 0214 	add.w	r2, r7, #20
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2302      	movs	r3, #2
 800150c:	f004 faf0 	bl	8005af0 <HAL_I2C_Master_Transmit>
 8001510:	4603      	mov	r3, r0
 8001512:	75fb      	strb	r3, [r7, #23]

				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <Lis3dhInit+0x118>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2130      	movs	r1, #48	; 0x30
 800151e:	f107 0214 	add.w	r2, r7, #20
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	f004 fae1 	bl	8005af0 <HAL_I2C_Master_Transmit>
 800152e:	4603      	mov	r3, r0
 8001530:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <Lis3dhInit+0x118>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	2130      	movs	r1, #48	; 0x30
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	f004 fbd2 	bl	8005cec <HAL_I2C_Master_Receive>
 8001548:	4603      	mov	r3, r0
 800154a:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 800154c:	f000 f8ae 	bl	80016ac <Lis3dhInteruptSetup>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 8001554:	7dfb      	ldrb	r3, [r7, #23]




}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001f4 	.word	0x200001f4

08001564 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 800156a:	23a7      	movs	r3, #167	; 0xa7
 800156c:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <Lis3dhGetAcc+0xf4>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	2130      	movs	r1, #48	; 0x30
 8001574:	f107 0214 	add.w	r2, r7, #20
 8001578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	f004 fab6 	bl	8005af0 <HAL_I2C_Master_Transmit>
 8001584:	4603      	mov	r3, r0
 8001586:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <Lis3dhGetAcc+0xf4>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	2130      	movs	r1, #48	; 0x30
 800158e:	f107 0208 	add.w	r2, r7, #8
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2302      	movs	r3, #2
 800159a:	f004 fba7 	bl	8005cec <HAL_I2C_Master_Receive>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 80015a2:	23a8      	movs	r3, #168	; 0xa8
 80015a4:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <Lis3dhGetAcc+0xf4>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	2130      	movs	r1, #48	; 0x30
 80015ac:	f107 0214 	add.w	r2, r7, #20
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	f004 fa9a 	bl	8005af0 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <Lis3dhGetAcc+0xf4>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	2130      	movs	r1, #48	; 0x30
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2306      	movs	r3, #6
 80015d2:	f004 fb8b 	bl	8005cec <HAL_I2C_Master_Receive>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 80015da:	7a7b      	ldrb	r3, [r7, #9]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 80015e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 80015fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001600:	b29b      	uxth	r3, r3
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b29a      	uxth	r2, r3
 8001606:	7abb      	ldrb	r3, [r7, #10]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21b      	sxth	r3, r3
 8001610:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 8001612:	7b7b      	ldrb	r3, [r7, #13]
 8001614:	b21b      	sxth	r3, r3
 8001616:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001618:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800161c:	b29b      	uxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b29a      	uxth	r2, r3
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	80bb      	strh	r3, [r7, #4]

	  LastXAcel = val[0];
 800162e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <Lis3dhGetAcc+0xf8>)
 8001636:	801a      	strh	r2, [r3, #0]
	  LastYAcel = val[1];
 8001638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <Lis3dhGetAcc+0xfc>)
 8001640:	801a      	strh	r2, [r3, #0]
	  LastZAcel = val[2];
 8001642:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <Lis3dhGetAcc+0x100>)
 800164a:	801a      	strh	r2, [r3, #0]

	return ret;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001f4 	.word	0x200001f4
 800165c:	200001f8 	.word	0x200001f8
 8001660:	200001fa 	.word	0x200001fa
 8001664:	200001fc 	.word	0x200001fc

08001668 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <AccelGetData+0x38>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b21a      	sxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <AccelGetData+0x3c>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b21a      	sxth	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <AccelGetData+0x40>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b21a      	sxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	801a      	strh	r2, [r3, #0]

}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200001f8 	.word	0x200001f8
 80016a4:	200001fa 	.word	0x200001fa
 80016a8:	200001fc 	.word	0x200001fc

080016ac <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	sendBuff[0] = LIS3DH_REG_CTRL1;
 80016b6:	2320      	movs	r3, #32
 80016b8:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x57;
 80016ba:	2357      	movs	r3, #87	; 0x57
 80016bc:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <Lis3dhInteruptSetup+0x38>)
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	2130      	movs	r1, #48	; 0x30
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2302      	movs	r3, #2
 80016d0:	f004 fa0e 	bl	8005af0 <HAL_I2C_Master_Transmit>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

	return ret;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]

}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001f4 	.word	0x200001f4

080016e8 <errorHandler>:
void errorHandler()
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	// handle the error
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <Send_USB_Console_Message>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_USB_Console_Message (char *string)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	debugPrint(string);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 fd00 	bl	8003104 <debugPrint>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Mount_USB>:



void Mount_USB (void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	490a      	ldr	r1, [pc, #40]	; (800173c <Mount_USB+0x30>)
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <Mount_USB+0x34>)
 8001716:	f00d f907 	bl	800e928 <f_mount>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <Mount_USB+0x38>)
 8001720:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_USB_Console_Message ("ERROR!!! in mounting USB ...\n\n");
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Mount_USB+0x38>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <Mount_USB+0x26>
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <Mount_USB+0x3c>)
 800172c:	f7ff ffe3 	bl	80016f6 <Send_USB_Console_Message>
	else Send_USB_Console_Message("USB mounted successfully...\n");
}
 8001730:	e002      	b.n	8001738 <Mount_USB+0x2c>
	else Send_USB_Console_Message("USB mounted successfully...\n");
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <Mount_USB+0x40>)
 8001734:	f7ff ffdf 	bl	80016f6 <Send_USB_Console_Message>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20003380 	.word	0x20003380
 8001740:	20003384 	.word	0x20003384
 8001744:	200001fe 	.word	0x200001fe
 8001748:	080105f0 	.word	0x080105f0
 800174c:	08010610 	.word	0x08010610

08001750 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 8001758:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <I3G450D_Init+0x180>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2102      	movs	r1, #2
 8001762:	485c      	ldr	r0, [pc, #368]	; (80018d4 <I3G450D_Init+0x184>)
 8001764:	f002 fc44 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001768:	2014      	movs	r0, #20
 800176a:	f001 fdaf 	bl	80032cc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2102      	movs	r1, #2
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <I3G450D_Init+0x184>)
 8001774:	f002 fc3c 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001778:	2014      	movs	r0, #20
 800177a:	f001 fda7 	bl	80032cc <HAL_Delay>
	spiTxBuf[0]=0x20;
 800177e:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <I3G450D_Init+0x188>)
 8001780:	2220      	movs	r2, #32
 8001782:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8001784:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <I3G450D_Init+0x188>)
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <I3G450D_Init+0x180>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	2332      	movs	r3, #50	; 0x32
 8001790:	2202      	movs	r2, #2
 8001792:	4951      	ldr	r1, [pc, #324]	; (80018d8 <I3G450D_Init+0x188>)
 8001794:	f005 fefb 	bl	800758e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2102      	movs	r1, #2
 800179c:	484d      	ldr	r0, [pc, #308]	; (80018d4 <I3G450D_Init+0x184>)
 800179e:	f002 fc27 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017a2:	2014      	movs	r0, #20
 80017a4:	f001 fd92 	bl	80032cc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2102      	movs	r1, #2
 80017ac:	4849      	ldr	r0, [pc, #292]	; (80018d4 <I3G450D_Init+0x184>)
 80017ae:	f002 fc1f 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017b2:	2014      	movs	r0, #20
 80017b4:	f001 fd8a 	bl	80032cc <HAL_Delay>
	spiTxBuf[0]=0x21;
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <I3G450D_Init+0x188>)
 80017ba:	2221      	movs	r2, #33	; 0x21
 80017bc:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <I3G450D_Init+0x188>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <I3G450D_Init+0x180>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	2332      	movs	r3, #50	; 0x32
 80017ca:	2202      	movs	r2, #2
 80017cc:	4942      	ldr	r1, [pc, #264]	; (80018d8 <I3G450D_Init+0x188>)
 80017ce:	f005 fede 	bl	800758e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2102      	movs	r1, #2
 80017d6:	483f      	ldr	r0, [pc, #252]	; (80018d4 <I3G450D_Init+0x184>)
 80017d8:	f002 fc0a 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017dc:	2014      	movs	r0, #20
 80017de:	f001 fd75 	bl	80032cc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2102      	movs	r1, #2
 80017e6:	483b      	ldr	r0, [pc, #236]	; (80018d4 <I3G450D_Init+0x184>)
 80017e8:	f002 fc02 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017ec:	2014      	movs	r0, #20
 80017ee:	f001 fd6d 	bl	80032cc <HAL_Delay>
	spiTxBuf[0]=0x22;
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <I3G450D_Init+0x188>)
 80017f4:	2222      	movs	r2, #34	; 0x22
 80017f6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80017f8:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <I3G450D_Init+0x188>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <I3G450D_Init+0x180>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	2332      	movs	r3, #50	; 0x32
 8001804:	2202      	movs	r2, #2
 8001806:	4934      	ldr	r1, [pc, #208]	; (80018d8 <I3G450D_Init+0x188>)
 8001808:	f005 fec1 	bl	800758e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	2102      	movs	r1, #2
 8001810:	4830      	ldr	r0, [pc, #192]	; (80018d4 <I3G450D_Init+0x184>)
 8001812:	f002 fbed 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001816:	2014      	movs	r0, #20
 8001818:	f001 fd58 	bl	80032cc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2102      	movs	r1, #2
 8001820:	482c      	ldr	r0, [pc, #176]	; (80018d4 <I3G450D_Init+0x184>)
 8001822:	f002 fbe5 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001826:	2014      	movs	r0, #20
 8001828:	f001 fd50 	bl	80032cc <HAL_Delay>
	spiTxBuf[0]=0x23;
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <I3G450D_Init+0x188>)
 800182e:	2223      	movs	r2, #35	; 0x23
 8001830:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <I3G450D_Init+0x188>)
 8001834:	2220      	movs	r2, #32
 8001836:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <I3G450D_Init+0x180>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	2332      	movs	r3, #50	; 0x32
 800183e:	2202      	movs	r2, #2
 8001840:	4925      	ldr	r1, [pc, #148]	; (80018d8 <I3G450D_Init+0x188>)
 8001842:	f005 fea4 	bl	800758e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2102      	movs	r1, #2
 800184a:	4822      	ldr	r0, [pc, #136]	; (80018d4 <I3G450D_Init+0x184>)
 800184c:	f002 fbd0 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001850:	2014      	movs	r0, #20
 8001852:	f001 fd3b 	bl	80032cc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2102      	movs	r1, #2
 800185a:	481e      	ldr	r0, [pc, #120]	; (80018d4 <I3G450D_Init+0x184>)
 800185c:	f002 fbc8 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001860:	2014      	movs	r0, #20
 8001862:	f001 fd33 	bl	80032cc <HAL_Delay>
	spiTxBuf[0]=0x24;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <I3G450D_Init+0x188>)
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <I3G450D_Init+0x188>)
 800186e:	2210      	movs	r2, #16
 8001870:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <I3G450D_Init+0x180>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	2332      	movs	r3, #50	; 0x32
 8001878:	2202      	movs	r2, #2
 800187a:	4917      	ldr	r1, [pc, #92]	; (80018d8 <I3G450D_Init+0x188>)
 800187c:	f005 fe87 	bl	800758e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2102      	movs	r1, #2
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <I3G450D_Init+0x184>)
 8001886:	f002 fbb3 	bl	8003ff0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800188a:	2014      	movs	r0, #20
 800188c:	f001 fd1e 	bl	80032cc <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2102      	movs	r1, #2
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <I3G450D_Init+0x184>)
 8001896:	f002 fbab 	bl	8003ff0 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <I3G450D_Init+0x188>)
 800189c:	228f      	movs	r2, #143	; 0x8f
 800189e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <I3G450D_Init+0x180>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	2332      	movs	r3, #50	; 0x32
 80018a6:	2201      	movs	r2, #1
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <I3G450D_Init+0x188>)
 80018aa:	f005 fe70 	bl	800758e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <I3G450D_Init+0x180>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	2332      	movs	r3, #50	; 0x32
 80018b4:	2201      	movs	r2, #1
 80018b6:	4909      	ldr	r1, [pc, #36]	; (80018dc <I3G450D_Init+0x18c>)
 80018b8:	f005 ffa5 	bl	8007806 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2102      	movs	r1, #2
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <I3G450D_Init+0x184>)
 80018c2:	f002 fb95 	bl	8003ff0 <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20003144 	.word	0x20003144
 80018d4:	40020800 	.word	0x40020800
 80018d8:	20003138 	.word	0x20003138
 80018dc:	2000313d 	.word	0x2000313d

080018e0 <I3G450D_loop>:

void I3G450D_loop(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b098      	sub	sp, #96	; 0x60
 80018e4:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 80018fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <I3G450D_loop+0x1c8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <I3G450D_loop+0x6a>
 8001942:	2b01      	cmp	r3, #1
 8001944:	f000 80c6 	beq.w	8001ad4 <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001948:	e379      	b.n	800203e <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <I3G450D_loop+0x1cc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 8374 	bne.w	800203c <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2102      	movs	r1, #2
 8001958:	4855      	ldr	r0, [pc, #340]	; (8001ab0 <I3G450D_loop+0x1d0>)
 800195a:	f002 fb49 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001960:	22a8      	movs	r2, #168	; 0xa8
 8001962:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001964:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2332      	movs	r3, #50	; 0x32
 800196a:	2201      	movs	r2, #1
 800196c:	4951      	ldr	r1, [pc, #324]	; (8001ab4 <I3G450D_loop+0x1d4>)
 800196e:	f005 fe0e 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	2332      	movs	r3, #50	; 0x32
 8001978:	2201      	movs	r2, #1
 800197a:	4950      	ldr	r1, [pc, #320]	; (8001abc <I3G450D_loop+0x1dc>)
 800197c:	f005 ff43 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2102      	movs	r1, #2
 8001984:	484a      	ldr	r0, [pc, #296]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001986:	f002 fb33 	bl	8003ff0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	4848      	ldr	r0, [pc, #288]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001990:	f002 fb2e 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001996:	22a9      	movs	r2, #169	; 0xa9
 8001998:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <I3G450D_loop+0x1d8>)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	2332      	movs	r3, #50	; 0x32
 80019a0:	2201      	movs	r2, #1
 80019a2:	4944      	ldr	r1, [pc, #272]	; (8001ab4 <I3G450D_loop+0x1d4>)
 80019a4:	f005 fdf3 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <I3G450D_loop+0x1d8>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	2332      	movs	r3, #50	; 0x32
 80019ae:	2201      	movs	r2, #1
 80019b0:	4943      	ldr	r1, [pc, #268]	; (8001ac0 <I3G450D_loop+0x1e0>)
 80019b2:	f005 ff28 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2102      	movs	r1, #2
 80019ba:	483d      	ldr	r0, [pc, #244]	; (8001ab0 <I3G450D_loop+0x1d0>)
 80019bc:	f002 fb18 	bl	8003ff0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2102      	movs	r1, #2
 80019c4:	483a      	ldr	r0, [pc, #232]	; (8001ab0 <I3G450D_loop+0x1d0>)
 80019c6:	f002 fb13 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <I3G450D_loop+0x1d4>)
 80019cc:	22aa      	movs	r2, #170	; 0xaa
 80019ce:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <I3G450D_loop+0x1d8>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	2332      	movs	r3, #50	; 0x32
 80019d6:	2201      	movs	r2, #1
 80019d8:	4936      	ldr	r1, [pc, #216]	; (8001ab4 <I3G450D_loop+0x1d4>)
 80019da:	f005 fdd8 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <I3G450D_loop+0x1d8>)
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	2332      	movs	r3, #50	; 0x32
 80019e4:	2201      	movs	r2, #1
 80019e6:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <I3G450D_loop+0x1e4>)
 80019e8:	f005 ff0d 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2102      	movs	r1, #2
 80019f0:	482f      	ldr	r0, [pc, #188]	; (8001ab0 <I3G450D_loop+0x1d0>)
 80019f2:	f002 fafd 	bl	8003ff0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2102      	movs	r1, #2
 80019fa:	482d      	ldr	r0, [pc, #180]	; (8001ab0 <I3G450D_loop+0x1d0>)
 80019fc:	f002 faf8 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a02:	22ab      	movs	r2, #171	; 0xab
 8001a04:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	2332      	movs	r3, #50	; 0x32
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a10:	f005 fdbd 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	2332      	movs	r3, #50	; 0x32
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	492a      	ldr	r1, [pc, #168]	; (8001ac8 <I3G450D_loop+0x1e8>)
 8001a1e:	f005 fef2 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2102      	movs	r1, #2
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001a28:	f002 fae2 	bl	8003ff0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2102      	movs	r1, #2
 8001a30:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001a32:	f002 fadd 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a38:	22ac      	movs	r2, #172	; 0xac
 8001a3a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	2332      	movs	r3, #50	; 0x32
 8001a42:	2201      	movs	r2, #1
 8001a44:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a46:	f005 fda2 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	2332      	movs	r3, #50	; 0x32
 8001a50:	2201      	movs	r2, #1
 8001a52:	491e      	ldr	r1, [pc, #120]	; (8001acc <I3G450D_loop+0x1ec>)
 8001a54:	f005 fed7 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001a5e:	f002 fac7 	bl	8003ff0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2102      	movs	r1, #2
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001a68:	f002 fac2 	bl	8003ff0 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a6e:	22ad      	movs	r2, #173	; 0xad
 8001a70:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	2332      	movs	r3, #50	; 0x32
 8001a78:	2201      	movs	r2, #1
 8001a7a:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <I3G450D_loop+0x1d4>)
 8001a7c:	f005 fd87 	bl	800758e <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <I3G450D_loop+0x1d8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	2332      	movs	r3, #50	; 0x32
 8001a86:	2201      	movs	r2, #1
 8001a88:	4911      	ldr	r1, [pc, #68]	; (8001ad0 <I3G450D_loop+0x1f0>)
 8001a8a:	f005 febc 	bl	8007806 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2102      	movs	r1, #2
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <I3G450D_loop+0x1d0>)
 8001a94:	f002 faac 	bl	8003ff0 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <I3G450D_loop+0x1c8>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <I3G450D_loop+0x1cc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
				break;
 8001aa4:	e2ca      	b.n	800203c <I3G450D_loop+0x75c>
 8001aa6:	bf00      	nop
 8001aa8:	20000200 	.word	0x20000200
 8001aac:	200000c4 	.word	0x200000c4
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	20003138 	.word	0x20003138
 8001ab8:	20003144 	.word	0x20003144
 8001abc:	2000313d 	.word	0x2000313d
 8001ac0:	2000313e 	.word	0x2000313e
 8001ac4:	2000313f 	.word	0x2000313f
 8001ac8:	20003140 	.word	0x20003140
 8001acc:	20003141 	.word	0x20003141
 8001ad0:	20003142 	.word	0x20003142
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8001ad4:	4ba0      	ldr	r3, [pc, #640]	; (8001d58 <I3G450D_loop+0x478>)
 8001ad6:	789b      	ldrb	r3, [r3, #2]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	4b9e      	ldr	r3, [pc, #632]	; (8001d58 <I3G450D_loop+0x478>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8001aea:	4b9b      	ldr	r3, [pc, #620]	; (8001d58 <I3G450D_loop+0x478>)
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b99      	ldr	r3, [pc, #612]	; (8001d58 <I3G450D_loop+0x478>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001b00:	4b95      	ldr	r3, [pc, #596]	; (8001d58 <I3G450D_loop+0x478>)
 8001b02:	799b      	ldrb	r3, [r3, #6]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <I3G450D_loop+0x478>)
 8001b0a:	795b      	ldrb	r3, [r3, #5]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001b14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	4b90      	ldr	r3, [pc, #576]	; (8001d5c <I3G450D_loop+0x47c>)
 8001b1c:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001b1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b8e      	ldr	r3, [pc, #568]	; (8001d60 <I3G450D_loop+0x480>)
 8001b26:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8001b28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b8d      	ldr	r3, [pc, #564]	; (8001d64 <I3G450D_loop+0x484>)
 8001b2e:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001b30:	4b8d      	ldr	r3, [pc, #564]	; (8001d68 <I3G450D_loop+0x488>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f040 80d5 	bne.w	8001ce4 <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8001b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <I3G450D_loop+0x48c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001d70 <I3G450D_loop+0x490>
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <I3G450D_loop+0x494>)
 8001b5a:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001b5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b84      	ldr	r3, [pc, #528]	; (8001d78 <I3G450D_loop+0x498>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001d70 <I3G450D_loop+0x490>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <I3G450D_loop+0x49c>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001b82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b7d      	ldr	r3, [pc, #500]	; (8001d80 <I3G450D_loop+0x4a0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b96:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d70 <I3G450D_loop+0x490>
 8001b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9e:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <I3G450D_loop+0x4a4>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8001ba4:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <I3G450D_loop+0x4a8>)
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8001ba8:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <I3G450D_loop+0x494>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4b77      	ldr	r3, [pc, #476]	; (8001d8c <I3G450D_loop+0x4ac>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dc0c      	bgt.n	8001bd8 <I3G450D_loop+0x2f8>
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <I3G450D_loop+0x4ac>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <I3G450D_loop+0x494>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd1b      	ble.n	8001c10 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8001bd8:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <I3G450D_loop+0x494>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <I3G450D_loop+0x4b0>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <I3G450D_loop+0x4b4>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <I3G450D_loop+0x4b4>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001c08:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <I3G450D_loop+0x494>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a60      	ldr	r2, [pc, #384]	; (8001d90 <I3G450D_loop+0x4b0>)
 8001c0e:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <I3G450D_loop+0x49c>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <I3G450D_loop+0x4b8>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	dc0c      	bgt.n	8001c40 <I3G450D_loop+0x360>
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <I3G450D_loop+0x4b8>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <I3G450D_loop+0x49c>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd1b      	ble.n	8001c78 <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001c40:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <I3G450D_loop+0x49c>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <I3G450D_loop+0x4bc>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <I3G450D_loop+0x4c0>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <I3G450D_loop+0x4c0>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <I3G450D_loop+0x49c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <I3G450D_loop+0x4bc>)
 8001c76:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <I3G450D_loop+0x4a4>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <I3G450D_loop+0x4c4>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dc0d      	bgt.n	8001caa <I3G450D_loop+0x3ca>
 8001c8e:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <I3G450D_loop+0x4c4>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb1 7a67 	vneg.f32	s14, s15
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <I3G450D_loop+0x4a4>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	f340 81c2 	ble.w	800202e <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8001caa:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <I3G450D_loop+0x4a4>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <I3G450D_loop+0x4c8>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <I3G450D_loop+0x4cc>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <I3G450D_loop+0x4cc>)
 8001cd6:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <I3G450D_loop+0x4a4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <I3G450D_loop+0x4c8>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e1a4      	b.n	800202e <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <I3G450D_loop+0x488>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	f000 819b 	beq.w	8002024 <I3G450D_loop+0x744>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	f300 819a 	bgt.w	8002028 <I3G450D_loop+0x748>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <I3G450D_loop+0x41e>
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d029      	beq.n	8001d50 <I3G450D_loop+0x470>
						break;
 8001cfc:	e194      	b.n	8002028 <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001d06:	b211      	sxth	r1, r2
 8001d08:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <I3G450D_loop+0x4d4>)
 8001d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d16:	b211      	sxth	r1, r2
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <I3G450D_loop+0x4d8>)
 8001d1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d24:	b211      	sxth	r1, r2
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <I3G450D_loop+0x4dc>)
 8001d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d34:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d3e:	f0c0 8175 	bcc.w	800202c <I3G450D_loop+0x74c>
							caliCounter=0;
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <I3G450D_loop+0x4d0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <I3G450D_loop+0x488>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
						break;
 8001d4e:	e16d      	b.n	800202c <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d54:	e0a5      	b.n	8001ea2 <I3G450D_loop+0x5c2>
 8001d56:	bf00      	nop
 8001d58:	2000313c 	.word	0x2000313c
 8001d5c:	2000024c 	.word	0x2000024c
 8001d60:	2000024e 	.word	0x2000024e
 8001d64:	20000250 	.word	0x20000250
 8001d68:	200001ff 	.word	0x200001ff
 8001d6c:	20000210 	.word	0x20000210
 8001d70:	3d8f5c29 	.word	0x3d8f5c29
 8001d74:	20000204 	.word	0x20000204
 8001d78:	20000214 	.word	0x20000214
 8001d7c:	20000208 	.word	0x20000208
 8001d80:	20000218 	.word	0x20000218
 8001d84:	2000020c 	.word	0x2000020c
 8001d88:	3b449ba6 	.word	0x3b449ba6
 8001d8c:	2000021c 	.word	0x2000021c
 8001d90:	20000234 	.word	0x20000234
 8001d94:	20000228 	.word	0x20000228
 8001d98:	20000220 	.word	0x20000220
 8001d9c:	20000238 	.word	0x20000238
 8001da0:	2000022c 	.word	0x2000022c
 8001da4:	20000224 	.word	0x20000224
 8001da8:	2000023c 	.word	0x2000023c
 8001dac:	20000230 	.word	0x20000230
 8001db0:	20000254 	.word	0x20000254
 8001db4:	20000258 	.word	0x20000258
 8001db8:	200011f8 	.word	0x200011f8
 8001dbc:	20002198 	.word	0x20002198
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	499d      	ldr	r1, [pc, #628]	; (8002048 <I3G450D_loop+0x768>)
 8001dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001dda:	4413      	add	r3, r2
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8001dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	3360      	adds	r3, #96	; 0x60
 8001de4:	443b      	add	r3, r7
 8001de6:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8001dea:	461a      	mov	r2, r3
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	4996      	ldr	r1, [pc, #600]	; (800204c <I3G450D_loop+0x76c>)
 8001df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001df4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001df8:	4413      	add	r3, r2
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	3360      	adds	r3, #96	; 0x60
 8001e02:	443b      	add	r3, r7
 8001e04:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	4990      	ldr	r1, [pc, #576]	; (8002050 <I3G450D_loop+0x770>)
 8001e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e12:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001e16:	4413      	add	r3, r2
 8001e18:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8001e1a:	4a8b      	ldr	r2, [pc, #556]	; (8002048 <I3G450D_loop+0x768>)
 8001e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e1e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	3360      	adds	r3, #96	; 0x60
 8001e28:	443b      	add	r3, r7
 8001e2a:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <I3G450D_loop+0x76c>)
 8001e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e32:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	3360      	adds	r3, #96	; 0x60
 8001e3c:	443b      	add	r3, r7
 8001e3e:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001e42:	4a83      	ldr	r2, [pc, #524]	; (8002050 <I3G450D_loop+0x770>)
 8001e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e46:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	3360      	adds	r3, #96	; 0x60
 8001e50:	443b      	add	r3, r7
 8001e52:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8001e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e58:	4a7e      	ldr	r2, [pc, #504]	; (8002054 <I3G450D_loop+0x774>)
 8001e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5e:	1092      	asrs	r2, r2, #2
 8001e60:	17db      	asrs	r3, r3, #31
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a7c      	ldr	r2, [pc, #496]	; (8002058 <I3G450D_loop+0x778>)
 8001e66:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <I3G450D_loop+0x774>)
 8001e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e70:	1092      	asrs	r2, r2, #2
 8001e72:	17db      	asrs	r3, r3, #31
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	4a79      	ldr	r2, [pc, #484]	; (800205c <I3G450D_loop+0x77c>)
 8001e78:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8001e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7c:	4a75      	ldr	r2, [pc, #468]	; (8002054 <I3G450D_loop+0x774>)
 8001e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e82:	1092      	asrs	r2, r2, #2
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a75      	ldr	r2, [pc, #468]	; (8002060 <I3G450D_loop+0x780>)
 8001e8a:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8001e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d901      	bls.n	8001e9c <I3G450D_loop+0x5bc>
									windowPosition=0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ea8:	d38a      	bcc.n	8001dc0 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eae:	e089      	b.n	8001fc4 <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8001eb0:	4a65      	ldr	r2, [pc, #404]	; (8002048 <I3G450D_loop+0x768>)
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <I3G450D_loop+0x778>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <I3G450D_loop+0x784>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dd0a      	ble.n	8001ede <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8001ec8:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <I3G450D_loop+0x768>)
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <I3G450D_loop+0x778>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a62      	ldr	r2, [pc, #392]	; (8002064 <I3G450D_loop+0x784>)
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e015      	b.n	8001f0a <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8001ede:	4a5a      	ldr	r2, [pc, #360]	; (8002048 <I3G450D_loop+0x768>)
 8001ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <I3G450D_loop+0x778>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1ad2      	subs	r2, r2, r3
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <I3G450D_loop+0x784>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	425b      	negs	r3, r3
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da08      	bge.n	8001f0a <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <I3G450D_loop+0x778>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4952      	ldr	r1, [pc, #328]	; (8002048 <I3G450D_loop+0x768>)
 8001efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f00:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	4a57      	ldr	r2, [pc, #348]	; (8002064 <I3G450D_loop+0x784>)
 8001f08:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8001f0a:	4a50      	ldr	r2, [pc, #320]	; (800204c <I3G450D_loop+0x76c>)
 8001f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b51      	ldr	r3, [pc, #324]	; (800205c <I3G450D_loop+0x77c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <I3G450D_loop+0x788>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dd0a      	ble.n	8001f38 <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <I3G450D_loop+0x76c>)
 8001f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <I3G450D_loop+0x77c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <I3G450D_loop+0x788>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e015      	b.n	8001f64 <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <I3G450D_loop+0x76c>)
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <I3G450D_loop+0x77c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1ad2      	subs	r2, r2, r3
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <I3G450D_loop+0x788>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	da08      	bge.n	8001f64 <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001f52:	4b42      	ldr	r3, [pc, #264]	; (800205c <I3G450D_loop+0x77c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	493d      	ldr	r1, [pc, #244]	; (800204c <I3G450D_loop+0x76c>)
 8001f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	4a41      	ldr	r2, [pc, #260]	; (8002068 <I3G450D_loop+0x788>)
 8001f62:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001f64:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <I3G450D_loop+0x770>)
 8001f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <I3G450D_loop+0x780>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <I3G450D_loop+0x78c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dd0a      	ble.n	8001f92 <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001f7c:	4a34      	ldr	r2, [pc, #208]	; (8002050 <I3G450D_loop+0x770>)
 8001f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f80:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <I3G450D_loop+0x780>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a37      	ldr	r2, [pc, #220]	; (800206c <I3G450D_loop+0x78c>)
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e015      	b.n	8001fbe <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8001f92:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <I3G450D_loop+0x770>)
 8001f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f96:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <I3G450D_loop+0x780>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <I3G450D_loop+0x78c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	425b      	negs	r3, r3
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	da08      	bge.n	8001fbe <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <I3G450D_loop+0x780>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4927      	ldr	r1, [pc, #156]	; (8002050 <I3G450D_loop+0x770>)
 8001fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fb4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <I3G450D_loop+0x78c>)
 8001fbc:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fca:	f4ff af71 	bcc.w	8001eb0 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <I3G450D_loop+0x784>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002070 <I3G450D_loop+0x790>
 8001fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <I3G450D_loop+0x794>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <I3G450D_loop+0x788>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002070 <I3G450D_loop+0x790>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <I3G450D_loop+0x798>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <I3G450D_loop+0x78c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002070 <I3G450D_loop+0x790>
 8002012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <I3G450D_loop+0x79c>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <I3G450D_loop+0x7a0>)
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]
							break;
 8002022:	e004      	b.n	800202e <I3G450D_loop+0x74e>
						break;
 8002024:	bf00      	nop
 8002026:	e002      	b.n	800202e <I3G450D_loop+0x74e>
						break;
 8002028:	bf00      	nop
 800202a:	e000      	b.n	800202e <I3G450D_loop+0x74e>
						break;
 800202c:	bf00      	nop
			currentState=L3GD20_fisrt;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <I3G450D_loop+0x7a4>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <I3G450D_loop+0x7a8>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
			break;
 800203a:	e000      	b.n	800203e <I3G450D_loop+0x75e>
				break;
 800203c:	bf00      	nop

		}
}
 800203e:	bf00      	nop
 8002040:	3760      	adds	r7, #96	; 0x60
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000258 	.word	0x20000258
 800204c:	200011f8 	.word	0x200011f8
 8002050:	20002198 	.word	0x20002198
 8002054:	66666667 	.word	0x66666667
 8002058:	20000210 	.word	0x20000210
 800205c:	20000214 	.word	0x20000214
 8002060:	20000218 	.word	0x20000218
 8002064:	20000240 	.word	0x20000240
 8002068:	20000244 	.word	0x20000244
 800206c:	20000248 	.word	0x20000248
 8002070:	3d8f5c29 	.word	0x3d8f5c29
 8002074:	2000021c 	.word	0x2000021c
 8002078:	20000220 	.word	0x20000220
 800207c:	20000224 	.word	0x20000224
 8002080:	200001ff 	.word	0x200001ff
 8002084:	20000200 	.word	0x20000200
 8002088:	200000c4 	.word	0x200000c4

0800208c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002090:	f001 f8aa 	bl	80031e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002094:	f000 f828 	bl	80020e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002098:	f000 fa7a 	bl	8002590 <MX_GPIO_Init>
  MX_CRC_Init();
 800209c:	f000 f88e 	bl	80021bc <MX_CRC_Init>
  MX_FMC_Init();
 80020a0:	f000 fa26 	bl	80024f0 <MX_FMC_Init>
  MX_SPI5_Init();
 80020a4:	f000 f8de 	bl	8002264 <MX_SPI5_Init>
  MX_TIM1_Init();
 80020a8:	f000 f912 	bl	80022d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020ac:	f000 f9d6 	bl	800245c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80020b0:	f00c fce8 	bl	800ea84 <MX_USB_HOST_Init>
  MX_DMA_Init();
 80020b4:	f000 f9fc 	bl	80024b0 <MX_DMA_Init>
  MX_I2C3_Init();
 80020b8:	f000 f894 	bl	80021e4 <MX_I2C3_Init>
  MX_TIM2_Init();
 80020bc:	f000 f958 	bl	8002370 <MX_TIM2_Init>
  MX_FATFS_Init();
 80020c0:	f008 fee2 	bl	800ae88 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <main+0x50>)
 80020c6:	f000 fc2f 	bl	8002928 <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <main+0x50>)
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <main+0x54>)
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <main+0x58>)
 80020d0:	f7ff f82c 	bl	800112c <SessionControllerInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 80020d4:	f7ff f84c 	bl	8001170 <SessionControllerProcess>
 80020d8:	e7fc      	b.n	80020d4 <main+0x48>
 80020da:	bf00      	nop
 80020dc:	200032ec 	.word	0x200032ec
 80020e0:	200031a4 	.word	0x200031a4
 80020e4:	20003150 	.word	0x20003150

080020e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b094      	sub	sp, #80	; 0x50
 80020ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ee:	f107 0320 	add.w	r3, r7, #32
 80020f2:	2230      	movs	r2, #48	; 0x30
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00d f84e 	bl	800f198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <SystemClock_Config+0xcc>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <SystemClock_Config+0xcc>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6413      	str	r3, [r2, #64]	; 0x40
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <SystemClock_Config+0xcc>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <SystemClock_Config+0xd0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <SystemClock_Config+0xd0>)
 8002136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <SystemClock_Config+0xd0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002148:	2301      	movs	r3, #1
 800214a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002152:	2302      	movs	r3, #2
 8002154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800215c:	2304      	movs	r3, #4
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002160:	2348      	movs	r3, #72	; 0x48
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002164:	2302      	movs	r3, #2
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002168:	2303      	movs	r3, #3
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fcb7 	bl	8006ae4 <HAL_RCC_OscConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800217c:	f000 fbce 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002180:	230f      	movs	r3, #15
 8002182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002184:	2302      	movs	r3, #2
 8002186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2102      	movs	r1, #2
 800219c:	4618      	mov	r0, r3
 800219e:	f004 ff19 	bl	8006fd4 <HAL_RCC_ClockConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021a8:	f000 fbb8 	bl	800291c <Error_Handler>
  }
}
 80021ac:	bf00      	nop
 80021ae:	3750      	adds	r7, #80	; 0x50
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40007000 	.word	0x40007000

080021bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_CRC_Init+0x20>)
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <MX_CRC_Init+0x24>)
 80021c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_CRC_Init+0x20>)
 80021c8:	f001 f9b5 	bl	8003536 <HAL_CRC_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80021d2:	f000 fba3 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20003148 	.word	0x20003148
 80021e0:	40023000 	.word	0x40023000

080021e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <MX_I2C3_Init+0x74>)
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <MX_I2C3_Init+0x78>)
 80021ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <MX_I2C3_Init+0x74>)
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <MX_I2C3_Init+0x7c>)
 80021f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_I2C3_Init+0x74>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <MX_I2C3_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <MX_I2C3_Init+0x74>)
 8002202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002206:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MX_I2C3_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_I2C3_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_I2C3_Init+0x74>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_I2C3_Init+0x74>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <MX_I2C3_Init+0x74>)
 8002222:	f003 fb21 	bl	8005868 <HAL_I2C_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800222c:	f000 fb76 	bl	800291c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002230:	2100      	movs	r1, #0
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <MX_I2C3_Init+0x74>)
 8002234:	f004 fbdb 	bl	80069ee <HAL_I2CEx_ConfigAnalogFilter>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800223e:	f000 fb6d 	bl	800291c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002242:	2100      	movs	r1, #0
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_I2C3_Init+0x74>)
 8002246:	f004 fc0e 	bl	8006a66 <HAL_I2CEx_ConfigDigitalFilter>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002250:	f000 fb64 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20003150 	.word	0x20003150
 800225c:	40005c00 	.word	0x40005c00
 8002260:	000186a0 	.word	0x000186a0

08002264 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_SPI5_Init+0x64>)
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <MX_SPI5_Init+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_SPI5_Init+0x64>)
 8002270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002274:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_SPI5_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_SPI5_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_SPI5_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_SPI5_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_SPI5_Init+0x64>)
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_SPI5_Init+0x64>)
 8002298:	2218      	movs	r2, #24
 800229a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_SPI5_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_SPI5_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_SPI5_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_SPI5_Init+0x64>)
 80022b0:	220a      	movs	r2, #10
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_SPI5_Init+0x64>)
 80022b6:	f005 f8e1 	bl	800747c <HAL_SPI_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80022c0:	f000 fb2c 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200031a4 	.word	0x200031a4
 80022cc:	40015000 	.word	0x40015000

080022d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <MX_TIM1_Init+0x98>)
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <MX_TIM1_Init+0x9c>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_TIM1_Init+0x98>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_TIM1_Init+0x98>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_TIM1_Init+0x98>)
 8002300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002304:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_TIM1_Init+0x98>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <MX_TIM1_Init+0x98>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_TIM1_Init+0x98>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <MX_TIM1_Init+0x98>)
 800231a:	f005 fe57 	bl	8007fcc <HAL_TIM_Base_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002324:	f000 fafa 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4619      	mov	r1, r3
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <MX_TIM1_Init+0x98>)
 8002336:	f005 ffb3 	bl	80082a0 <HAL_TIM_ConfigClockSource>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002340:	f000 faec 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_TIM1_Init+0x98>)
 8002352:	f006 fb57 	bl	8008a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800235c:	f000 fade 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200031fc 	.word	0x200031fc
 800236c:	40010000 	.word	0x40010000

08002370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08e      	sub	sp, #56	; 0x38
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	615a      	str	r2, [r3, #20]
 800239e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023aa:	2259      	movs	r2, #89	; 0x59
 80023ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023c8:	4823      	ldr	r0, [pc, #140]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023ca:	f005 fdff 	bl	8007fcc <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023d4:	f000 faa2 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	4619      	mov	r1, r3
 80023e4:	481c      	ldr	r0, [pc, #112]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023e6:	f005 ff5b 	bl	80082a0 <HAL_TIM_ConfigClockSource>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023f0:	f000 fa94 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023f4:	4818      	ldr	r0, [pc, #96]	; (8002458 <MX_TIM2_Init+0xe8>)
 80023f6:	f005 fe38 	bl	800806a <HAL_TIM_PWM_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002400:	f000 fa8c 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800240c:	f107 0320 	add.w	r3, r7, #32
 8002410:	4619      	mov	r1, r3
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_TIM2_Init+0xe8>)
 8002414:	f006 faf6 	bl	8008a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800241e:	f000 fa7d 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002422:	2360      	movs	r3, #96	; 0x60
 8002424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4807      	ldr	r0, [pc, #28]	; (8002458 <MX_TIM2_Init+0xe8>)
 800243a:	f005 fe6f 	bl	800811c <HAL_TIM_PWM_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002444:	f000 fa6a 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002448:	4803      	ldr	r0, [pc, #12]	; (8002458 <MX_TIM2_Init+0xe8>)
 800244a:	f000 fc97 	bl	8002d7c <HAL_TIM_MspPostInit>

}
 800244e:	bf00      	nop
 8002450:	3738      	adds	r7, #56	; 0x38
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20003244 	.word	0x20003244

0800245c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART1_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002494:	f006 fb32 	bl	8008afc <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 fa3d 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200032ec 	.word	0x200032ec
 80024ac:	40011000 	.word	0x40011000

080024b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_DMA_Init+0x3c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <MX_DMA_Init+0x3c>)
 80024c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_DMA_Init+0x3c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2010      	movs	r0, #16
 80024d8:	f000 fff7 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024dc:	2010      	movs	r0, #16
 80024de:	f001 f810 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
 8002504:	615a      	str	r2, [r3, #20]
 8002506:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_FMC_Init+0x98>)
 800250a:	4a20      	ldr	r2, [pc, #128]	; (800258c <MX_FMC_Init+0x9c>)
 800250c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_FMC_Init+0x98>)
 8002510:	2201      	movs	r2, #1
 8002512:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_FMC_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_FMC_Init+0x98>)
 800251c:	2204      	movs	r2, #4
 800251e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_FMC_Init+0x98>)
 8002522:	2210      	movs	r2, #16
 8002524:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <MX_FMC_Init+0x98>)
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <MX_FMC_Init+0x98>)
 800252e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002532:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_FMC_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <MX_FMC_Init+0x98>)
 800253c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002540:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_FMC_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <MX_FMC_Init+0x98>)
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002550:	2302      	movs	r3, #2
 8002552:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002554:	2307      	movs	r3, #7
 8002556:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002558:	2304      	movs	r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800255c:	2307      	movs	r3, #7
 800255e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002560:	2303      	movs	r3, #3
 8002562:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002568:	2302      	movs	r3, #2
 800256a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_FMC_Init+0x98>)
 8002572:	f004 ff4f 	bl	8007414 <HAL_SDRAM_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800257c:	f000 f9ce 	bl	800291c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002580:	bf00      	nop
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20003330 	.word	0x20003330
 800258c:	a0000140 	.word	0xa0000140

08002590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	4bb2      	ldr	r3, [pc, #712]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4ab1      	ldr	r2, [pc, #708]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4baf      	ldr	r3, [pc, #700]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	4bab      	ldr	r3, [pc, #684]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4aaa      	ldr	r2, [pc, #680]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4ba8      	ldr	r3, [pc, #672]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	4ba4      	ldr	r3, [pc, #656]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4aa3      	ldr	r2, [pc, #652]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4ba1      	ldr	r3, [pc, #644]	; (8002874 <MX_GPIO_Init+0x2e4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a9c      	ldr	r2, [pc, #624]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b9a      	ldr	r3, [pc, #616]	; (8002874 <MX_GPIO_Init+0x2e4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b96      	ldr	r3, [pc, #600]	; (8002874 <MX_GPIO_Init+0x2e4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a95      	ldr	r2, [pc, #596]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b93      	ldr	r3, [pc, #588]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a8e      	ldr	r2, [pc, #568]	; (8002874 <MX_GPIO_Init+0x2e4>)
 800263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a87      	ldr	r2, [pc, #540]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b85      	ldr	r3, [pc, #532]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b81      	ldr	r3, [pc, #516]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <MX_GPIO_Init+0x2e4>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b7e      	ldr	r3, [pc, #504]	; (8002874 <MX_GPIO_Init+0x2e4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2116      	movs	r1, #22
 800268a:	487b      	ldr	r0, [pc, #492]	; (8002878 <MX_GPIO_Init+0x2e8>)
 800268c:	f001 fcb0 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	4879      	ldr	r0, [pc, #484]	; (800287c <MX_GPIO_Init+0x2ec>)
 8002696:	f001 fcab 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80026a0:	4877      	ldr	r0, [pc, #476]	; (8002880 <MX_GPIO_Init+0x2f0>)
 80026a2:	f001 fca5 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80026ac:	4875      	ldr	r0, [pc, #468]	; (8002884 <MX_GPIO_Init+0x2f4>)
 80026ae:	f001 fc9f 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80026b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c4:	230e      	movs	r3, #14
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	486e      	ldr	r0, [pc, #440]	; (8002888 <MX_GPIO_Init+0x2f8>)
 80026d0:	f001 faca 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80026d4:	2316      	movs	r3, #22
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d8:	2301      	movs	r3, #1
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4863      	ldr	r0, [pc, #396]	; (8002878 <MX_GPIO_Init+0x2e8>)
 80026ec:	f001 fabc 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f0:	2301      	movs	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002702:	4619      	mov	r1, r3
 8002704:	485d      	ldr	r0, [pc, #372]	; (800287c <MX_GPIO_Init+0x2ec>)
 8002706:	f001 faaf 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800270a:	f248 0306 	movw	r3, #32774	; 0x8006
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002710:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	4856      	ldr	r0, [pc, #344]	; (800287c <MX_GPIO_Init+0x2ec>)
 8002722:	f001 faa1 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8002726:	2358      	movs	r3, #88	; 0x58
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002736:	230e      	movs	r3, #14
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273e:	4619      	mov	r1, r3
 8002740:	484e      	ldr	r0, [pc, #312]	; (800287c <MX_GPIO_Init+0x2ec>)
 8002742:	f001 fa91 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274a:	2301      	movs	r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275a:	4619      	mov	r1, r3
 800275c:	4847      	ldr	r0, [pc, #284]	; (800287c <MX_GPIO_Init+0x2ec>)
 800275e:	f001 fa83 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002762:	2320      	movs	r3, #32
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002766:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	4619      	mov	r1, r3
 8002776:	4840      	ldr	r0, [pc, #256]	; (8002878 <MX_GPIO_Init+0x2e8>)
 8002778:	f001 fa76 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800277c:	2303      	movs	r3, #3
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800278c:	2309      	movs	r3, #9
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	483d      	ldr	r0, [pc, #244]	; (800288c <MX_GPIO_Init+0x2fc>)
 8002798:	f001 fa66 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800279c:	2304      	movs	r3, #4
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ac:	4619      	mov	r1, r3
 80027ae:	4837      	ldr	r0, [pc, #220]	; (800288c <MX_GPIO_Init+0x2fc>)
 80027b0:	f001 fa5a 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 80027b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027c6:	230e      	movs	r3, #14
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ce:	4619      	mov	r1, r3
 80027d0:	482e      	ldr	r0, [pc, #184]	; (800288c <MX_GPIO_Init+0x2fc>)
 80027d2:	f001 fa49 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80027d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4825      	ldr	r0, [pc, #148]	; (8002880 <MX_GPIO_Init+0x2f0>)
 80027ec:	f001 fa3c 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80027f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	4619      	mov	r1, r3
 8002808:	481d      	ldr	r0, [pc, #116]	; (8002880 <MX_GPIO_Init+0x2f0>)
 800280a:	f001 fa2d 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 800280e:	23c0      	movs	r3, #192	; 0xc0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800281e:	230e      	movs	r3, #14
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4816      	ldr	r0, [pc, #88]	; (8002884 <MX_GPIO_Init+0x2f4>)
 800282a:	f001 fa1d 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800282e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002840:	230e      	movs	r3, #14
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002848:	4619      	mov	r1, r3
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <MX_GPIO_Init+0x2e8>)
 800284c:	f001 fa0c 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <MX_GPIO_Init+0x2e8>)
 8002868:	f001 f9fe 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800286c:	2348      	movs	r3, #72	; 0x48
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	e00d      	b.n	8002890 <MX_GPIO_Init+0x300>
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021800 	.word	0x40021800
 8002888:	40021400 	.word	0x40021400
 800288c:	40020400 	.word	0x40020400
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800289a:	230e      	movs	r3, #14
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	481b      	ldr	r0, [pc, #108]	; (8002914 <MX_GPIO_Init+0x384>)
 80028a6:	f001 f9df 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028bc:	2309      	movs	r3, #9
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <MX_GPIO_Init+0x388>)
 80028c8:	f001 f9ce 	bl	8003c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80028cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_GPIO_Init+0x388>)
 80028e6:	f001 f9bf 	bl	8003c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2006      	movs	r0, #6
 80028f0:	f000 fdeb 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80028f4:	2006      	movs	r0, #6
 80028f6:	f000 fe04 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2017      	movs	r0, #23
 8002900:	f000 fde3 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002904:	2017      	movs	r0, #23
 8002906:	f000 fdfc 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 800290a:	bf00      	nop
 800290c:	3738      	adds	r7, #56	; 0x38
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021800 	.word	0x40021800

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	e7fe      	b.n	8002924 <Error_Handler+0x8>
	...

08002928 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <RetargetInit+0x28>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <RetargetInit+0x2c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6898      	ldr	r0, [r3, #8]
 800293c:	2300      	movs	r3, #0
 800293e:	2202      	movs	r2, #2
 8002940:	2100      	movs	r1, #0
 8002942:	f00c fd4f 	bl	800f3e4 <setvbuf>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20003364 	.word	0x20003364
 8002954:	200000f4 	.word	0x200000f4

08002958 <_isatty>:

int _isatty(int fd) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db04      	blt.n	8002970 <_isatty+0x18>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	dc01      	bgt.n	8002970 <_isatty+0x18>
    return 1;
 800296c:	2301      	movs	r3, #1
 800296e:	e005      	b.n	800297c <_isatty+0x24>

  errno = EBADF;
 8002970:	f00c fbca 	bl	800f108 <__errno>
 8002974:	4603      	mov	r3, r0
 8002976:	2209      	movs	r2, #9
 8002978:	601a      	str	r2, [r3, #0]
  return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_write>:

int _write(int fd, char* ptr, int len) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <_write+0x18>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d111      	bne.n	80029c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <_write+0x54>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	f006 f8f4 	bl	8008b96 <HAL_UART_Transmit>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <_write+0x38>
      return len;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	e008      	b.n	80029ce <_write+0x4a>
    else
      return EIO;
 80029bc:	2305      	movs	r3, #5
 80029be:	e006      	b.n	80029ce <_write+0x4a>
  }
  errno = EBADF;
 80029c0:	f00c fba2 	bl	800f108 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2209      	movs	r2, #9
 80029c8:	601a      	str	r2, [r3, #0]
  return -1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20003364 	.word	0x20003364

080029dc <_close>:

int _close(int fd) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db04      	blt.n	80029f4 <_close+0x18>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	dc01      	bgt.n	80029f4 <_close+0x18>
    return 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e006      	b.n	8002a02 <_close+0x26>

  errno = EBADF;
 80029f4:	f00c fb88 	bl	800f108 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2209      	movs	r2, #9
 80029fc:	601a      	str	r2, [r3, #0]
  return -1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002a16:	f00c fb77 	bl	800f108 <__errno>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2209      	movs	r2, #9
 8002a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_read>:

int _read(int fd, char* ptr, int len) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d110      	bne.n	8002a60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <_read+0x4c>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a46:	2201      	movs	r2, #1
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	f006 f936 	bl	8008cba <HAL_UART_Receive>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <_read+0x30>
      return 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e008      	b.n	8002a6e <_read+0x42>
    else
      return EIO;
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	e006      	b.n	8002a6e <_read+0x42>
  }
  errno = EBADF;
 8002a60:	f00c fb52 	bl	800f108 <__errno>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2209      	movs	r2, #9
 8002a68:	601a      	str	r2, [r3, #0]
  return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20003364 	.word	0x20003364

08002a7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db08      	blt.n	8002a9e <_fstat+0x22>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	dc05      	bgt.n	8002a9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a98:	605a      	str	r2, [r3, #4]
    return 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e005      	b.n	8002aaa <_fstat+0x2e>
  }

  errno = EBADF;
 8002a9e:	f00c fb33 	bl	800f108 <__errno>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2209      	movs	r2, #9
 8002aa6:	601a      	str	r2, [r3, #0]
  return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_MspInit+0x4c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_MspInit+0x4c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800

08002b04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <HAL_CRC_MspInit+0x3c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10d      	bne.n	8002b32 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_CRC_MspInit+0x40>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_CRC_MspInit+0x40>)
 8002b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_CRC_MspInit+0x40>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023000 	.word	0x40023000
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_I2C_MspInit+0xc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d14b      	bne.n	8002c02 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba8:	2312      	movs	r3, #18
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4815      	ldr	r0, [pc, #84]	; (8002c14 <HAL_I2C_MspInit+0xcc>)
 8002bc0:	f001 f852 	bl	8003c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <HAL_I2C_MspInit+0xd0>)
 8002be2:	f001 f841 	bl	8003c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_I2C_MspInit+0xc8>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40005c00 	.word	0x40005c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020000 	.word	0x40020000

08002c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_SPI_MspInit+0x84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12c      	bne.n	8002c98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c88:	2305      	movs	r3, #5
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c94:	f000 ffe8 	bl	8003c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40015000 	.word	0x40015000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40021400 	.word	0x40021400

08002cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_TIM_Base_MspInit+0xc0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cda:	e042      	b.n	8002d62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d13d      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_TIM_Base_MspInit+0xc4>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_TIM_Base_MspInit+0xcc>)
 8002d06:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d0a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d0e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d22:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d2a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d32:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002d46:	480b      	ldr	r0, [pc, #44]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d48:	f000 fc12 	bl	8003570 <HAL_DMA_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002d52:	f7ff fde3 	bl	800291c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5c:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <HAL_TIM_Base_MspInit+0xc8>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	2000328c 	.word	0x2000328c
 8002d78:	40026088 	.word	0x40026088

08002d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d11d      	bne.n	8002dda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_TIM_MspPostInit+0x68>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_TIM_MspPostInit+0x68>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_TIM_MspPostInit+0x68>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4804      	ldr	r0, [pc, #16]	; (8002de8 <HAL_TIM_MspPostInit+0x6c>)
 8002dd6:	f000 ff47 	bl	8003c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_UART_MspInit+0x94>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d134      	bne.n	8002e78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e18:	f043 0310 	orr.w	r3, r3, #16
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_UART_MspInit+0x98>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <HAL_UART_MspInit+0x9c>)
 8002e64:	f000 ff00 	bl	8003c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2025      	movs	r0, #37	; 0x25
 8002e6e:	f000 fb2c 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e72:	2025      	movs	r0, #37	; 0x25
 8002e74:	f000 fb45 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40011000 	.word	0x40011000
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020000 	.word	0x40020000

08002e8c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_FMC_MspInit+0x104>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16f      	bne.n	8002f88 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_FMC_MspInit+0x104>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	4a37      	ldr	r2, [pc, #220]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6393      	str	r3, [r2, #56]	; 0x38
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_FMC_MspInit+0x108>)
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002eca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ece:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002edc:	230c      	movs	r3, #12
 8002ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	482c      	ldr	r0, [pc, #176]	; (8002f98 <HAL_FMC_MspInit+0x10c>)
 8002ee6:	f000 febf 	bl	8003c68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002eea:	2301      	movs	r3, #1
 8002eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002efa:	230c      	movs	r3, #12
 8002efc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4826      	ldr	r0, [pc, #152]	; (8002f9c <HAL_FMC_MspInit+0x110>)
 8002f04:	f000 feb0 	bl	8003c68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002f08:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f0c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	481f      	ldr	r0, [pc, #124]	; (8002fa0 <HAL_FMC_MspInit+0x114>)
 8002f24:	f000 fea0 	bl	8003c68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f2c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4818      	ldr	r0, [pc, #96]	; (8002fa4 <HAL_FMC_MspInit+0x118>)
 8002f44:	f000 fe90 	bl	8003c68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002f48:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f4c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f56:	2303      	movs	r3, #3
 8002f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <HAL_FMC_MspInit+0x11c>)
 8002f64:	f000 fe80 	bl	8003c68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f68:	2360      	movs	r3, #96	; 0x60
 8002f6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	480a      	ldr	r0, [pc, #40]	; (8002fac <HAL_FMC_MspInit+0x120>)
 8002f82:	f000 fe71 	bl	8003c68 <HAL_GPIO_Init>
 8002f86:	e000      	b.n	8002f8a <HAL_FMC_MspInit+0xfe>
    return;
 8002f88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20003368 	.word	0x20003368
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40021800 	.word	0x40021800
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40020400 	.word	0x40020400

08002fb0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002fb8:	f7ff ff68 	bl	8002e8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <NMI_Handler+0x4>

08002fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <HardFault_Handler+0x4>

08002fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <MemManage_Handler+0x4>

08002fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <BusFault_Handler+0x4>

08002fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <UsageFault_Handler+0x4>

08002fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003010:	f000 f93c 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800301c:	2001      	movs	r0, #1
 800301e:	f001 f801 	bl	8004024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Stream5_IRQHandler+0x10>)
 800302e:	f000 fbdf 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000328c 	.word	0x2000328c

0800303c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003040:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003044:	f000 ffee 	bl	8004024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <USART1_IRQHandler+0x10>)
 8003052:	f005 ff05 	bl	8008e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200032ec 	.word	0x200032ec

08003060 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <OTG_HS_IRQHandler+0x10>)
 8003066:	f001 fa5f 	bl	8004528 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200039c4 	.word	0x200039c4

08003074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <_sbrk+0x5c>)
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <_sbrk+0x60>)
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <_sbrk+0x64>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <_sbrk+0x68>)
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <_sbrk+0x64>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a4:	f00c f830 	bl	800f108 <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	220c      	movs	r2, #12
 80030ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030b2:	e009      	b.n	80030c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <_sbrk+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <_sbrk+0x64>)
 80030c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20030000 	.word	0x20030000
 80030d4:	00000400 	.word	0x00000400
 80030d8:	2000336c 	.word	0x2000336c
 80030dc:	20003cd8 	.word	0x20003cd8

080030e0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <SystemInit+0x20>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <SystemInit+0x20>)
 80030ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <debugPrint>:

int debugLogging = 0;
int paused = 0;
// system and user debugging need to be on to actually print.
void debugPrint(char * buffer)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <debugPrint+0x38>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <debugPrint+0x3c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <debugPrint+0x2e>
	{
		printf(buffer);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f00c f91e 	bl	800f368 <iprintf>
		printf("\n");
 800312c:	200a      	movs	r0, #10
 800312e:	f00c f933 	bl	800f398 <putchar>
	}
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20003374 	.word	0x20003374
 8003140:	20003370 	.word	0x20003370

08003144 <setUserDebugLogging>:
// user debugging
void setUserDebugLogging ( int set )
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <setUserDebugLogging+0x1c>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20003370 	.word	0x20003370

08003164 <pauseDebugLogging>:
int getDebugLogging( )
{
	return debugLogging;
}
//  system debugging.
void pauseDebugLogging(){paused = 1;}
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <pauseDebugLogging+0x14>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	20003374 	.word	0x20003374

0800317c <resumeDebugLogging>:
void resumeDebugLogging(){paused = 0;}
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <resumeDebugLogging+0x14>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	20003374 	.word	0x20003374

08003194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800319a:	490e      	ldr	r1, [pc, #56]	; (80031d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a0:	e002      	b.n	80031a8 <LoopCopyDataInit>

080031a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a6:	3304      	adds	r3, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ac:	d3f9      	bcc.n	80031a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031b0:	4c0b      	ldr	r4, [pc, #44]	; (80031e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b4:	e001      	b.n	80031ba <LoopFillZerobss>

080031b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b8:	3204      	adds	r2, #4

080031ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031bc:	d3fb      	bcc.n	80031b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031be:	f7ff ff8f 	bl	80030e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031c2:	f00b ffa7 	bl	800f114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c6:	f7fe ff61 	bl	800208c <main>
  bx  lr    
 80031ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80031cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80031d8:	08010f54 	.word	0x08010f54
  ldr r2, =_sbss
 80031dc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80031e0:	20003cd8 	.word	0x20003cd8

080031e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <ADC_IRQHandler>
	...

080031e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <HAL_Init+0x40>)
 80031f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_Init+0x40>)
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_Init+0x40>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 f94f 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	200f      	movs	r0, #15
 8003218:	f000 f808 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff fc4a 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x54>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x58>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f967 	bl	800351e <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d80a      	bhi.n	8003276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	2200      	movs	r2, #0
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003268:	f000 f92f 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_InitTick+0x5c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200000c8 	.word	0x200000c8
 8003284:	200000d0 	.word	0x200000d0
 8003288:	200000cc 	.word	0x200000cc

0800328c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x20>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x24>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_IncTick+0x24>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	200000d0 	.word	0x200000d0
 80032b0:	20003378 	.word	0x20003378

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20003378 	.word	0x20003378

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e4:	d005      	beq.n	80032f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_Delay+0x44>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f2:	bf00      	nop
 80032f4:	f7ff ffde 	bl	80032b4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8f7      	bhi.n	80032f4 <HAL_Delay+0x28>
  {
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200000d0 	.word	0x200000d0

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00e      	b.n	8003566 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	795b      	ldrb	r3, [r3, #5]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fad3 	bl	8002b04 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7ff fe9a 	bl	80032b4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e099      	b.n	80036c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ac:	e00f      	b.n	80035ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ae:	f7ff fe81 	bl	80032b4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d908      	bls.n	80035ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e078      	b.n	80036c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e8      	bne.n	80035ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_DMA_Init+0x158>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	2b04      	cmp	r3, #4
 8003626:	d107      	bne.n	8003638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4313      	orrs	r3, r2
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0307 	bic.w	r3, r3, #7
 800364e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b04      	cmp	r3, #4
 8003660:	d117      	bne.n	8003692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa7b 	bl	8003b70 <DMA_CheckFifoParam>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800368e:	2301      	movs	r3, #1
 8003690:	e016      	b.n	80036c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa32 	bl	8003b04 <DMA_CalcBaseAndBitshift>
 80036a0:	4603      	mov	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	223f      	movs	r2, #63	; 0x3f
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	f010803f 	.word	0xf010803f

080036cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036da:	f7ff fdeb 	bl	80032b4 <HAL_GetTick>
 80036de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d008      	beq.n	80036fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e052      	b.n	80037a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0216 	bic.w	r2, r2, #22
 800370c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_DMA_Abort+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0208 	bic.w	r2, r2, #8
 800373c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374e:	e013      	b.n	8003778 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003750:	f7ff fdb0 	bl	80032b4 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b05      	cmp	r3, #5
 800375c:	d90c      	bls.n	8003778 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e015      	b.n	80037a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e4      	bne.n	8003750 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	223f      	movs	r2, #63	; 0x3f
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d004      	beq.n	80037ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00c      	b.n	80037e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037fc:	4b8e      	ldr	r3, [pc, #568]	; (8003a38 <HAL_DMA_IRQHandler+0x248>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a8e      	ldr	r2, [pc, #568]	; (8003a3c <HAL_DMA_IRQHandler+0x24c>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2208      	movs	r2, #8
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01a      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	2208      	movs	r2, #8
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2204      	movs	r2, #4
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2204      	movs	r2, #4
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2210      	movs	r2, #16
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d043      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03c      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	2210      	movs	r2, #16
 80038ec:	409a      	lsls	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e01f      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
 8003930:	e016      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0208 	bic.w	r2, r2, #8
 800394e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	2220      	movs	r2, #32
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 808f 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8087 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	2220      	movs	r2, #32
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d136      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0216 	bic.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_DMA_IRQHandler+0x1da>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	223f      	movs	r2, #63	; 0x3f
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d07e      	beq.n	8003afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
        }
        return;
 8003a06:	e079      	b.n	8003afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d031      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e02c      	b.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
 8003a36:	bf00      	nop
 8003a38:	200000c8 	.word	0x200000c8
 8003a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	e01e      	b.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10f      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0210 	bic.w	r2, r2, #16
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d032      	beq.n	8003afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d307      	bcc.n	8003ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f2      	bne.n	8003abc <HAL_DMA_IRQHandler+0x2cc>
 8003ad6:	e000      	b.n	8003ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e000      	b.n	8003afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003afc:	bf00      	nop
    }
  }
}
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	3b10      	subs	r3, #16
 8003b14:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <DMA_CalcBaseAndBitshift+0x64>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <DMA_CalcBaseAndBitshift+0x68>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d909      	bls.n	8003b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
 8003b44:	e007      	b.n	8003b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	aaaaaaab 	.word	0xaaaaaaab
 8003b6c:	08010d8c 	.word	0x08010d8c

08003b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11f      	bne.n	8003bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d856      	bhi.n	8003c3e <DMA_CheckFifoParam+0xce>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <DMA_CheckFifoParam+0x28>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bbb 	.word	0x08003bbb
 8003ba0:	08003ba9 	.word	0x08003ba9
 8003ba4:	08003c3f 	.word	0x08003c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d046      	beq.n	8003c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e043      	b.n	8003c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc2:	d140      	bne.n	8003c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc8:	e03d      	b.n	8003c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	d121      	bne.n	8003c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d837      	bhi.n	8003c4a <DMA_CheckFifoParam+0xda>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <DMA_CheckFifoParam+0x70>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003bf7 	.word	0x08003bf7
 8003be8:	08003bf1 	.word	0x08003bf1
 8003bec:	08003c09 	.word	0x08003c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf4:	e030      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d025      	beq.n	8003c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c06:	e022      	b.n	8003c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c10:	d11f      	bne.n	8003c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c16:	e01c      	b.n	8003c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d903      	bls.n	8003c26 <DMA_CheckFifoParam+0xb6>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d003      	beq.n	8003c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c24:	e018      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2a:	e015      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e00b      	b.n	8003c56 <DMA_CheckFifoParam+0xe6>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e00a      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
 8003c44:	e008      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e006      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e004      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
    }
  } 
  
  return status; 
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop

08003c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e177      	b.n	8003f74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c84:	2201      	movs	r2, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	f040 8166 	bne.w	8003f6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d005      	beq.n	8003cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d130      	bne.n	8003d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 0201 	and.w	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d017      	beq.n	8003d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d123      	bne.n	8003dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	08da      	lsrs	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3208      	adds	r2, #8
 8003d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	08da      	lsrs	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	69b9      	ldr	r1, [r7, #24]
 8003da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0203 	and.w	r2, r3, #3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80c0 	beq.w	8003f6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <HAL_GPIO_Init+0x324>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	4a65      	ldr	r2, [pc, #404]	; (8003f8c <HAL_GPIO_Init+0x324>)
 8003df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_GPIO_Init+0x324>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e0a:	4a61      	ldr	r2, [pc, #388]	; (8003f90 <HAL_GPIO_Init+0x328>)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	3302      	adds	r3, #2
 8003e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	220f      	movs	r2, #15
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_GPIO_Init+0x32c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d037      	beq.n	8003ea6 <HAL_GPIO_Init+0x23e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a57      	ldr	r2, [pc, #348]	; (8003f98 <HAL_GPIO_Init+0x330>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d031      	beq.n	8003ea2 <HAL_GPIO_Init+0x23a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a56      	ldr	r2, [pc, #344]	; (8003f9c <HAL_GPIO_Init+0x334>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02b      	beq.n	8003e9e <HAL_GPIO_Init+0x236>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a55      	ldr	r2, [pc, #340]	; (8003fa0 <HAL_GPIO_Init+0x338>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d025      	beq.n	8003e9a <HAL_GPIO_Init+0x232>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_GPIO_Init+0x33c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <HAL_GPIO_Init+0x22e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a53      	ldr	r2, [pc, #332]	; (8003fa8 <HAL_GPIO_Init+0x340>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_Init+0x22a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a52      	ldr	r2, [pc, #328]	; (8003fac <HAL_GPIO_Init+0x344>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0x226>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_GPIO_Init+0x348>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_Init+0x222>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a50      	ldr	r2, [pc, #320]	; (8003fb4 <HAL_GPIO_Init+0x34c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_Init+0x21e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4f      	ldr	r2, [pc, #316]	; (8003fb8 <HAL_GPIO_Init+0x350>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_Init+0x21a>
 8003e7e:	2309      	movs	r3, #9
 8003e80:	e012      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e82:	230a      	movs	r3, #10
 8003e84:	e010      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e86:	2308      	movs	r3, #8
 8003e88:	e00e      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e8a:	2307      	movs	r3, #7
 8003e8c:	e00c      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e8e:	2306      	movs	r3, #6
 8003e90:	e00a      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e92:	2305      	movs	r3, #5
 8003e94:	e008      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e96:	2304      	movs	r3, #4
 8003e98:	e006      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e004      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e002      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_GPIO_Init+0x240>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f002 0203 	and.w	r2, r2, #3
 8003eae:	0092      	lsls	r2, r2, #2
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb8:	4935      	ldr	r1, [pc, #212]	; (8003f90 <HAL_GPIO_Init+0x328>)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eea:	4a34      	ldr	r2, [pc, #208]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef0:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f1a:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <HAL_GPIO_Init+0x354>)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	f67f ae84 	bls.w	8003c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3724      	adds	r7, #36	; 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40013800 	.word	0x40013800
 8003f94:	40020000 	.word	0x40020000
 8003f98:	40020400 	.word	0x40020400
 8003f9c:	40020800 	.word	0x40020800
 8003fa0:	40020c00 	.word	0x40020c00
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40021400 	.word	0x40021400
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40021c00 	.word	0x40021c00
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40022400 	.word	0x40022400
 8003fbc:	40013c00 	.word	0x40013c00

08003fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e001      	b.n	8003fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800400c:	e003      	b.n	8004016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	041a      	lsls	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd f9da 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40013c00 	.word	0x40013c00

08004054 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	b08f      	sub	sp, #60	; 0x3c
 8004058:	af0a      	add	r7, sp, #40	; 0x28
 800405a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e054      	b.n	8004110 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f00a fd5d 	bl	800eb40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f005 ff7b 	bl	8009fa0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	687e      	ldr	r6, [r7, #4]
 80040b2:	466d      	mov	r5, sp
 80040b4:	f106 0410 	add.w	r4, r6, #16
 80040b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c8:	1d33      	adds	r3, r6, #4
 80040ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f005 fef5 	bl	8009ebc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2101      	movs	r1, #1
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 ff72 	bl	8009fc2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	687e      	ldr	r6, [r7, #4]
 80040e6:	466d      	mov	r5, sp
 80040e8:	f106 0410 	add.w	r4, r6, #16
 80040ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040fc:	1d33      	adds	r3, r6, #4
 80040fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	f006 f8fb 	bl	800a2fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004118 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af04      	add	r7, sp, #16
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	70fb      	strb	r3, [r7, #3]
 800412a:	460b      	mov	r3, r1
 800412c:	70bb      	strb	r3, [r7, #2]
 800412e:	4613      	mov	r3, r2
 8004130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_HCD_HC_Init+0x28>
 800413c:	2302      	movs	r3, #2
 800413e:	e076      	b.n	800422e <HAL_HCD_HC_Init+0x116>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	333d      	adds	r3, #61	; 0x3d
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	787a      	ldrb	r2, [r7, #1]
 800416a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3340      	adds	r3, #64	; 0x40
 800417a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800417c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3339      	adds	r3, #57	; 0x39
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	333f      	adds	r3, #63	; 0x3f
 800419e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	78ba      	ldrb	r2, [r7, #2]
 80041a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ac:	b2d0      	uxtb	r0, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	333a      	adds	r3, #58	; 0x3a
 80041ba:	4602      	mov	r2, r0
 80041bc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80041be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da09      	bge.n	80041da <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	333b      	adds	r3, #59	; 0x3b
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e008      	b.n	80041ec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	333b      	adds	r3, #59	; 0x3b
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	333c      	adds	r3, #60	; 0x3c
 80041fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	787c      	ldrb	r4, [r7, #1]
 8004206:	78ba      	ldrb	r2, [r7, #2]
 8004208:	78f9      	ldrb	r1, [r7, #3]
 800420a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800420c:	9302      	str	r3, [sp, #8]
 800420e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4623      	mov	r3, r4
 800421c:	f006 f9f4 	bl	800a608 <USB_HC_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bd90      	pop	{r4, r7, pc}

08004236 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_HCD_HC_Halt+0x1e>
 8004250:	2302      	movs	r3, #2
 8004252:	e00f      	b.n	8004274 <HAL_HCD_HC_Halt+0x3e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f006 fc44 	bl	800aaf2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	70fb      	strb	r3, [r7, #3]
 800428e:	460b      	mov	r3, r1
 8004290:	70bb      	strb	r3, [r7, #2]
 8004292:	4613      	mov	r3, r2
 8004294:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	333b      	adds	r3, #59	; 0x3b
 80042a4:	78ba      	ldrb	r2, [r7, #2]
 80042a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	333f      	adds	r3, #63	; 0x3f
 80042b6:	787a      	ldrb	r2, [r7, #1]
 80042b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80042ba:	7c3b      	ldrb	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d112      	bne.n	80042e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3342      	adds	r3, #66	; 0x42
 80042ce:	2203      	movs	r2, #3
 80042d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	333d      	adds	r3, #61	; 0x3d
 80042e0:	7f3a      	ldrb	r2, [r7, #28]
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e008      	b.n	80042f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3342      	adds	r3, #66	; 0x42
 80042f4:	2202      	movs	r2, #2
 80042f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	f200 80c6 	bhi.w	800448c <HAL_HCD_HC_SubmitRequest+0x210>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	08004319 	.word	0x08004319
 800430c:	08004479 	.word	0x08004479
 8004310:	0800437d 	.word	0x0800437d
 8004314:	080043fb 	.word	0x080043fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004318:	7c3b      	ldrb	r3, [r7, #16]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 80b8 	bne.w	8004490 <HAL_HCD_HC_SubmitRequest+0x214>
 8004320:	78bb      	ldrb	r3, [r7, #2]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 80b4 	bne.w	8004490 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004328:	8b3b      	ldrh	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3355      	adds	r3, #85	; 0x55
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3355      	adds	r3, #85	; 0x55
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3342      	adds	r3, #66	; 0x42
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004366:	e093      	b.n	8004490 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3342      	adds	r3, #66	; 0x42
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
      break;
 800437a:	e089      	b.n	8004490 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800437c:	78bb      	ldrb	r3, [r7, #2]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11d      	bne.n	80043be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3355      	adds	r3, #85	; 0x55
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3342      	adds	r3, #66	; 0x42
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043a8:	e073      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3342      	adds	r3, #66	; 0x42
 80043b8:	2202      	movs	r2, #2
 80043ba:	701a      	strb	r2, [r3, #0]
      break;
 80043bc:	e069      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	212c      	movs	r1, #44	; 0x2c
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	3354      	adds	r3, #84	; 0x54
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	3342      	adds	r3, #66	; 0x42
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
      break;
 80043e4:	e055      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3342      	adds	r3, #66	; 0x42
 80043f4:	2202      	movs	r2, #2
 80043f6:	701a      	strb	r2, [r3, #0]
      break;
 80043f8:	e04b      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80043fa:	78bb      	ldrb	r3, [r7, #2]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11d      	bne.n	800443c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3355      	adds	r3, #85	; 0x55
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3342      	adds	r3, #66	; 0x42
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004426:	e034      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3342      	adds	r3, #66	; 0x42
 8004436:	2202      	movs	r2, #2
 8004438:	701a      	strb	r2, [r3, #0]
      break;
 800443a:	e02a      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3354      	adds	r3, #84	; 0x54
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3342      	adds	r3, #66	; 0x42
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
      break;
 8004462:	e016      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3342      	adds	r3, #66	; 0x42
 8004472:	2202      	movs	r2, #2
 8004474:	701a      	strb	r2, [r3, #0]
      break;
 8004476:	e00c      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3342      	adds	r3, #66	; 0x42
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
      break;
 800448a:	e002      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004490:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	3344      	adds	r3, #68	; 0x44
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	8b3a      	ldrh	r2, [r7, #24]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	202c      	movs	r0, #44	; 0x2c
 80044ac:	fb00 f303 	mul.w	r3, r0, r3
 80044b0:	440b      	add	r3, r1
 80044b2:	334c      	adds	r3, #76	; 0x4c
 80044b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3350      	adds	r3, #80	; 0x50
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3339      	adds	r3, #57	; 0x39
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3361      	adds	r3, #97	; 0x61
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	222c      	movs	r2, #44	; 0x2c
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	3338      	adds	r3, #56	; 0x38
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	18d1      	adds	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	f006 f998 	bl	800a84c <USB_HC_StartXfer>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop

08004528 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f005 fe99 	bl	800a276 <USB_GetMode>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	f040 80f6 	bne.w	8004738 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f005 fe7d 	bl	800a250 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80ec 	beq.w	8004736 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f005 fe74 	bl	800a250 <USB_ReadInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800456e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004572:	d104      	bne.n	800457e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800457c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f005 fe64 	bl	800a250 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004592:	d104      	bne.n	800459e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800459c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f005 fe54 	bl	800a250 <USB_ReadInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b2:	d104      	bne.n	80045be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f005 fe44 	bl	800a250 <USB_ReadInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d103      	bne.n	80045da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2202      	movs	r2, #2
 80045d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f005 fe36 	bl	800a250 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ee:	d11c      	bne.n	800462a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800460a:	2110      	movs	r1, #16
 800460c:	6938      	ldr	r0, [r7, #16]
 800460e:	f005 fd25 	bl	800a05c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004612:	6938      	ldr	r0, [r7, #16]
 8004614:	f005 fd56 	bl	800a0c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f005 ff2c 	bl	800a47c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f00a fb05 	bl	800ec34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f005 fe0e 	bl	800a250 <USB_ReadInterrupts>
 8004634:	4603      	mov	r3, r0
 8004636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800463e:	d102      	bne.n	8004646 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 f89e 	bl	8005782 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f005 fe00 	bl	800a250 <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d106      	bne.n	8004668 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f00a face 	bl	800ebfc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2208      	movs	r2, #8
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f005 fdef 	bl	800a250 <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b10      	cmp	r3, #16
 800467a:	d101      	bne.n	8004680 <HAL_HCD_IRQHandler+0x158>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_HCD_IRQHandler+0x15a>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d012      	beq.n	80046ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0210 	bic.w	r2, r2, #16
 8004694:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ffa1 	bl	80055de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0210 	orr.w	r2, r2, #16
 80046aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 fdcd 	bl	800a250 <USB_ReadInterrupts>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c0:	d13a      	bne.n	8004738 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f006 fa02 	bl	800aad0 <USB_HC_ReadInterrupt>
 80046cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e025      	b.n	8004720 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fe:	d106      	bne.n	800470e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8ab 	bl	8004862 <HCD_HC_IN_IRQHandler>
 800470c:	e005      	b.n	800471a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fbf9 	bl	8004f0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3301      	adds	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3d4      	bcc.n	80046d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004732:	615a      	str	r2, [r3, #20]
 8004734:	e000      	b.n	8004738 <HAL_HCD_IRQHandler+0x210>
      return;
 8004736:	bf00      	nop
    }
  }
}
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_HCD_Start+0x16>
 8004750:	2302      	movs	r3, #2
 8004752:	e013      	b.n	800477c <HAL_HCD_Start+0x3e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f005 feee 	bl	800a544 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f005 fc06 	bl	8009f7e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_HCD_Stop+0x16>
 8004796:	2302      	movs	r3, #2
 8004798:	e00d      	b.n	80047b6 <HAL_HCD_Stop+0x32>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f006 fadc 	bl	800ad64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f005 fe90 	bl	800a4f0 <USB_ResetPort>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3360      	adds	r3, #96	; 0x60
 80047f4:	781b      	ldrb	r3, [r3, #0]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	3350      	adds	r3, #80	; 0x50
 800481c:	681b      	ldr	r3, [r3, #0]
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f005 fed4 	bl	800a5e4 <USB_GetCurrentFrame>
 800483c:	4603      	mov	r3, r0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 feaf 	bl	800a5b6 <USB_GetHostSpeed>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4413      	add	r3, r2
 8004884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d11a      	bne.n	80048c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	2304      	movs	r3, #4
 80048a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3361      	adds	r3, #97	; 0x61
 80048b2:	2206      	movs	r2, #6
 80048b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f006 f916 	bl	800aaf2 <USB_HC_Halt>
 80048c6:	e0af      	b.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d11b      	bne.n	8004918 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ec:	461a      	mov	r2, r3
 80048ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3361      	adds	r3, #97	; 0x61
 8004902:	2207      	movs	r2, #7
 8004904:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f006 f8ee 	bl	800aaf2 <USB_HC_Halt>
 8004916:	e087      	b.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d109      	bne.n	8004942 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	461a      	mov	r2, r3
 800493c:	2320      	movs	r3, #32
 800493e:	6093      	str	r3, [r2, #8]
 8004940:	e072      	b.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11a      	bne.n	800498e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	461a      	mov	r2, r3
 8004966:	2308      	movs	r3, #8
 8004968:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	212c      	movs	r1, #44	; 0x2c
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	3361      	adds	r3, #97	; 0x61
 8004978:	2205      	movs	r2, #5
 800497a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f006 f8b3 	bl	800aaf2 <USB_HC_Halt>
 800498c:	e04c      	b.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d11b      	bne.n	80049de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	461a      	mov	r2, r3
 80049b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3361      	adds	r3, #97	; 0x61
 80049c8:	2208      	movs	r2, #8
 80049ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f006 f88b 	bl	800aaf2 <USB_HC_Halt>
 80049dc:	e024      	b.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d119      	bne.n	8004a28 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	461a      	mov	r2, r3
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3361      	adds	r3, #97	; 0x61
 8004a14:	2206      	movs	r2, #6
 8004a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f006 f865 	bl	800aaf2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d112      	bne.n	8004a66 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f006 f851 	bl	800aaf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a62:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a64:	e24e      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 80df 	bne.w	8004c3c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d019      	beq.n	8004aba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3348      	adds	r3, #72	; 0x48
 8004a94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	440b      	add	r3, r1
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004aa8:	1ad2      	subs	r2, r2, r3
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	202c      	movs	r0, #44	; 0x2c
 8004ab0:	fb00 f303 	mul.w	r3, r0, r3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3350      	adds	r3, #80	; 0x50
 8004ab8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3361      	adds	r3, #97	; 0x61
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	335c      	adds	r3, #92	; 0x5c
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	461a      	mov	r2, r3
 8004aec:	2301      	movs	r3, #1
 8004aee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	212c      	movs	r1, #44	; 0x2c
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	333f      	adds	r3, #63	; 0x3f
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	333f      	adds	r3, #63	; 0x3f
 8004b12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d111      	bne.n	8004b3c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f005 ffe5 	bl	800aaf2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	461a      	mov	r2, r3
 8004b36:	2310      	movs	r3, #16
 8004b38:	6093      	str	r3, [r2, #8]
 8004b3a:	e03a      	b.n	8004bb2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	333f      	adds	r3, #63	; 0x3f
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d009      	beq.n	8004b64 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	333f      	adds	r3, #63	; 0x3f
 8004b5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d126      	bne.n	8004bb2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3360      	adds	r3, #96	; 0x60
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	b2d9      	uxtb	r1, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	202c      	movs	r0, #44	; 0x2c
 8004ba0:	fb00 f303 	mul.w	r3, r0, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3360      	adds	r3, #96	; 0x60
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f00a f84f 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d12b      	bne.n	8004c12 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3348      	adds	r3, #72	; 0x48
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	202c      	movs	r0, #44	; 0x2c
 8004bd0:	fb00 f202 	mul.w	r2, r0, r2
 8004bd4:	440a      	add	r2, r1
 8004bd6:	3240      	adds	r2, #64	; 0x40
 8004bd8:	8812      	ldrh	r2, [r2, #0]
 8004bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 818e 	beq.w	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3354      	adds	r3, #84	; 0x54
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f083 0301 	eor.w	r3, r3, #1
 8004bfc:	b2d8      	uxtb	r0, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3354      	adds	r3, #84	; 0x54
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	701a      	strb	r2, [r3, #0]
}
 8004c10:	e178      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	212c      	movs	r1, #44	; 0x2c
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3354      	adds	r3, #84	; 0x54
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f083 0301 	eor.w	r3, r3, #1
 8004c26:	b2d8      	uxtb	r0, r3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3354      	adds	r3, #84	; 0x54
 8004c36:	4602      	mov	r2, r0
 8004c38:	701a      	strb	r2, [r3, #0]
}
 8004c3a:	e163      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	f040 80f6 	bne.w	8004e40 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3361      	adds	r3, #97	; 0x61
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d109      	bne.n	8004c7c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	212c      	movs	r1, #44	; 0x2c
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3360      	adds	r3, #96	; 0x60
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e0c9      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d109      	bne.n	8004ca4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3360      	adds	r3, #96	; 0x60
 8004c9e:	2205      	movs	r2, #5
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e0b5      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3361      	adds	r3, #97	; 0x61
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b06      	cmp	r3, #6
 8004cb6:	d009      	beq.n	8004ccc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3361      	adds	r3, #97	; 0x61
 8004cc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d150      	bne.n	8004d6e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	335c      	adds	r3, #92	; 0x5c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	202c      	movs	r0, #44	; 0x2c
 8004ce4:	fb00 f303 	mul.w	r3, r0, r3
 8004ce8:	440b      	add	r3, r1
 8004cea:	335c      	adds	r3, #92	; 0x5c
 8004cec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	335c      	adds	r3, #92	; 0x5c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d912      	bls.n	8004d28 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	335c      	adds	r3, #92	; 0x5c
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3360      	adds	r3, #96	; 0x60
 8004d22:	2204      	movs	r2, #4
 8004d24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d26:	e073      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	212c      	movs	r1, #44	; 0x2c
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	3360      	adds	r3, #96	; 0x60
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d6c:	e050      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3361      	adds	r3, #97	; 0x61
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d122      	bne.n	8004dc8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3360      	adds	r3, #96	; 0x60
 8004d90:	2202      	movs	r2, #2
 8004d92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004daa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e023      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	212c      	movs	r1, #44	; 0x2c
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3361      	adds	r3, #97	; 0x61
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b07      	cmp	r3, #7
 8004dda:	d119      	bne.n	8004e10 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	212c      	movs	r1, #44	; 0x2c
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	335c      	adds	r3, #92	; 0x5c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	fb00 f303 	mul.w	r3, r0, r3
 8004df8:	440b      	add	r3, r1
 8004dfa:	335c      	adds	r3, #92	; 0x5c
 8004dfc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	3360      	adds	r3, #96	; 0x60
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2302      	movs	r3, #2
 8004e20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	b2d9      	uxtb	r1, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	202c      	movs	r0, #44	; 0x2c
 8004e2c:	fb00 f303 	mul.w	r3, r0, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3360      	adds	r3, #96	; 0x60
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f009 ff09 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e3e:	e061      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d156      	bne.n	8004f04 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	333f      	adds	r3, #63	; 0x3f
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d111      	bne.n	8004e8e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	335c      	adds	r3, #92	; 0x5c
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 fe33 	bl	800aaf2 <USB_HC_Halt>
 8004e8c:	e031      	b.n	8004ef2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	212c      	movs	r1, #44	; 0x2c
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	333f      	adds	r3, #63	; 0x3f
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	333f      	adds	r3, #63	; 0x3f
 8004eb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d11d      	bne.n	8004ef2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	335c      	adds	r3, #92	; 0x5c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d110      	bne.n	8004ef2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	212c      	movs	r1, #44	; 0x2c
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	3361      	adds	r3, #97	; 0x61
 8004ede:	2203      	movs	r2, #3
 8004ee0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f005 fe00 	bl	800aaf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	461a      	mov	r2, r3
 8004f00:	2310      	movs	r3, #16
 8004f02:	6093      	str	r3, [r2, #8]
}
 8004f04:	bf00      	nop
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11a      	bne.n	8004f72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	212c      	movs	r1, #44	; 0x2c
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	4413      	add	r3, r2
 8004f5a:	3361      	adds	r3, #97	; 0x61
 8004f5c:	2206      	movs	r2, #6
 8004f5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 fdc1 	bl	800aaf2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004f70:	e331      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d12e      	bne.n	8004fe6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	461a      	mov	r2, r3
 8004f96:	2320      	movs	r3, #32
 8004f98:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	333d      	adds	r3, #61	; 0x3d
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	f040 8313 	bne.w	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	333d      	adds	r3, #61	; 0x3d
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3360      	adds	r3, #96	; 0x60
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 fd87 	bl	800aaf2 <USB_HC_Halt>
}
 8004fe4:	e2f7      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d112      	bne.n	8005024 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	461a      	mov	r2, r3
 800500c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005010:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f005 fd68 	bl	800aaf2 <USB_HC_Halt>
}
 8005022:	e2d8      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d140      	bne.n	80050bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	335c      	adds	r3, #92	; 0x5c
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d111      	bne.n	8005086 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	212c      	movs	r1, #44	; 0x2c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	333d      	adds	r3, #61	; 0x3d
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	461a      	mov	r2, r3
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	461a      	mov	r2, r3
 8005094:	2301      	movs	r3, #1
 8005096:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3361      	adds	r3, #97	; 0x61
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f005 fd1c 	bl	800aaf2 <USB_HC_Halt>
}
 80050ba:	e28c      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d12c      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	212c      	movs	r1, #44	; 0x2c
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	4413      	add	r3, r2
 80050de:	3361      	adds	r3, #97	; 0x61
 80050e0:	2204      	movs	r2, #4
 80050e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	212c      	movs	r1, #44	; 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	333d      	adds	r3, #61	; 0x3d
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	212c      	movs	r1, #44	; 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	335c      	adds	r3, #92	; 0x5c
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f005 fced 	bl	800aaf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	461a      	mov	r2, r3
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	6093      	str	r3, [r2, #8]
}
 800512a:	e254      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d11a      	bne.n	8005178 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	461a      	mov	r2, r3
 8005150:	2308      	movs	r3, #8
 8005152:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3361      	adds	r3, #97	; 0x61
 8005162:	2205      	movs	r2, #5
 8005164:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f005 fcbe 	bl	800aaf2 <USB_HC_Halt>
}
 8005176:	e22e      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b10      	cmp	r3, #16
 800518c:	d140      	bne.n	8005210 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	335c      	adds	r3, #92	; 0x5c
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3361      	adds	r3, #97	; 0x61
 80051ae:	2203      	movs	r2, #3
 80051b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	333d      	adds	r3, #61	; 0x3d
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d112      	bne.n	80051ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	212c      	movs	r1, #44	; 0x2c
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	333c      	adds	r3, #60	; 0x3c
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d108      	bne.n	80051ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	212c      	movs	r1, #44	; 0x2c
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	333d      	adds	r3, #61	; 0x3d
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f005 fc7b 	bl	800aaf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	2310      	movs	r3, #16
 800520c:	6093      	str	r3, [r2, #8]
}
 800520e:	e1e2      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d164      	bne.n	80052f0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d111      	bne.n	8005252 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	3361      	adds	r3, #97	; 0x61
 800523c:	2206      	movs	r2, #6
 800523e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f005 fc51 	bl	800aaf2 <USB_HC_Halt>
 8005250:	e044      	b.n	80052dc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	335c      	adds	r3, #92	; 0x5c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	202c      	movs	r0, #44	; 0x2c
 800526a:	fb00 f303 	mul.w	r3, r0, r3
 800526e:	440b      	add	r3, r1
 8005270:	335c      	adds	r3, #92	; 0x5c
 8005272:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	212c      	movs	r1, #44	; 0x2c
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	4413      	add	r3, r2
 8005280:	335c      	adds	r3, #92	; 0x5c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d920      	bls.n	80052ca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	212c      	movs	r1, #44	; 0x2c
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	335c      	adds	r3, #92	; 0x5c
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3360      	adds	r3, #96	; 0x60
 80052a8:	2204      	movs	r2, #4
 80052aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	b2d9      	uxtb	r1, r3
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	202c      	movs	r0, #44	; 0x2c
 80052b6:	fb00 f303 	mul.w	r3, r0, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	3360      	adds	r3, #96	; 0x60
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f009 fcc4 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052c8:	e008      	b.n	80052dc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	212c      	movs	r1, #44	; 0x2c
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	3360      	adds	r3, #96	; 0x60
 80052d8:	2202      	movs	r2, #2
 80052da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	6093      	str	r3, [r2, #8]
}
 80052ee:	e172      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005306:	d11b      	bne.n	8005340 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	212c      	movs	r1, #44	; 0x2c
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	3361      	adds	r3, #97	; 0x61
 8005316:	2208      	movs	r2, #8
 8005318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f005 fbe4 	bl	800aaf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	461a      	mov	r2, r3
 8005338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533c:	6093      	str	r3, [r2, #8]
}
 800533e:	e14a      	b.n	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	f040 813f 	bne.w	80055d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	3361      	adds	r3, #97	; 0x61
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d17d      	bne.n	8005468 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3360      	adds	r3, #96	; 0x60
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	212c      	movs	r1, #44	; 0x2c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	333f      	adds	r3, #63	; 0x3f
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d00a      	beq.n	80053a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	333f      	adds	r3, #63	; 0x3f
 80053a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	f040 8100 	bne.w	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d113      	bne.n	80053d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3355      	adds	r3, #85	; 0x55
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2d8      	uxtb	r0, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3355      	adds	r3, #85	; 0x55
 80053d4:	4602      	mov	r2, r0
 80053d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 80e3 	bne.w	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	212c      	movs	r1, #44	; 0x2c
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	334c      	adds	r3, #76	; 0x4c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80d8 	beq.w	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	334c      	adds	r3, #76	; 0x4c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	202c      	movs	r0, #44	; 0x2c
 800540e:	fb00 f202 	mul.w	r2, r0, r2
 8005412:	440a      	add	r2, r1
 8005414:	3240      	adds	r2, #64	; 0x40
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	4413      	add	r3, r2
 800541a:	3b01      	subs	r3, #1
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	202c      	movs	r0, #44	; 0x2c
 8005422:	fb00 f202 	mul.w	r2, r0, r2
 8005426:	440a      	add	r2, r1
 8005428:	3240      	adds	r2, #64	; 0x40
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80b5 	beq.w	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	212c      	movs	r1, #44	; 0x2c
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	3355      	adds	r3, #85	; 0x55
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2d8      	uxtb	r0, r3
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	212c      	movs	r1, #44	; 0x2c
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	3355      	adds	r3, #85	; 0x55
 8005462:	4602      	mov	r2, r0
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e09f      	b.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	212c      	movs	r1, #44	; 0x2c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	3361      	adds	r3, #97	; 0x61
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d109      	bne.n	8005490 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3360      	adds	r3, #96	; 0x60
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e08b      	b.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	212c      	movs	r1, #44	; 0x2c
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	3361      	adds	r3, #97	; 0x61
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d109      	bne.n	80054b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	212c      	movs	r1, #44	; 0x2c
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	3360      	adds	r3, #96	; 0x60
 80054b2:	2202      	movs	r2, #2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e077      	b.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	212c      	movs	r1, #44	; 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3361      	adds	r3, #97	; 0x61
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d109      	bne.n	80054e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3360      	adds	r3, #96	; 0x60
 80054da:	2205      	movs	r2, #5
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e063      	b.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3361      	adds	r3, #97	; 0x61
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d009      	beq.n	8005508 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3361      	adds	r3, #97	; 0x61
 8005502:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005504:	2b08      	cmp	r3, #8
 8005506:	d14f      	bne.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	335c      	adds	r3, #92	; 0x5c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	202c      	movs	r0, #44	; 0x2c
 8005520:	fb00 f303 	mul.w	r3, r0, r3
 8005524:	440b      	add	r3, r1
 8005526:	335c      	adds	r3, #92	; 0x5c
 8005528:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	335c      	adds	r3, #92	; 0x5c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d912      	bls.n	8005564 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	335c      	adds	r3, #92	; 0x5c
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	212c      	movs	r1, #44	; 0x2c
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	3360      	adds	r3, #96	; 0x60
 800555e:	2204      	movs	r2, #4
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e021      	b.n	80055a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3360      	adds	r3, #96	; 0x60
 8005572:	2202      	movs	r2, #2
 8005574:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800558c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005594:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	4413      	add	r3, r2
 800559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a2:	461a      	mov	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	461a      	mov	r2, r3
 80055b6:	2302      	movs	r3, #2
 80055b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	b2d9      	uxtb	r1, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	202c      	movs	r0, #44	; 0x2c
 80055c4:	fb00 f303 	mul.w	r3, r0, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3360      	adds	r3, #96	; 0x60
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f009 fb3d 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055d6:	bf00      	nop
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08a      	sub	sp, #40	; 0x28
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	0c5b      	lsrs	r3, r3, #17
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005612:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d004      	beq.n	8005624 <HCD_RXQLVL_IRQHandler+0x46>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b05      	cmp	r3, #5
 800561e:	f000 80a9 	beq.w	8005774 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005622:	e0aa      	b.n	800577a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80a6 	beq.w	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3344      	adds	r3, #68	; 0x44
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 809b 	beq.w	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	212c      	movs	r1, #44	; 0x2c
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	4413      	add	r3, r2
 800564e:	3350      	adds	r3, #80	; 0x50
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	441a      	add	r2, r3
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	202c      	movs	r0, #44	; 0x2c
 800565c:	fb00 f303 	mul.w	r3, r0, r3
 8005660:	440b      	add	r3, r1
 8005662:	334c      	adds	r3, #76	; 0x4c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d87a      	bhi.n	8005760 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	3344      	adds	r3, #68	; 0x44
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	b292      	uxth	r2, r2
 8005682:	4619      	mov	r1, r3
 8005684:	f004 fd8c 	bl	800a1a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	212c      	movs	r1, #44	; 0x2c
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	3344      	adds	r3, #68	; 0x44
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	441a      	add	r2, r3
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	202c      	movs	r0, #44	; 0x2c
 80056a2:	fb00 f303 	mul.w	r3, r0, r3
 80056a6:	440b      	add	r3, r1
 80056a8:	3344      	adds	r3, #68	; 0x44
 80056aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	3350      	adds	r3, #80	; 0x50
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	441a      	add	r2, r3
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	202c      	movs	r0, #44	; 0x2c
 80056c6:	fb00 f303 	mul.w	r3, r0, r3
 80056ca:	440b      	add	r3, r1
 80056cc:	3350      	adds	r3, #80	; 0x50
 80056ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	0cdb      	lsrs	r3, r3, #19
 80056e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3340      	adds	r3, #64	; 0x40
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d13c      	bne.n	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d039      	beq.n	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800571a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005722:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	212c      	movs	r1, #44	; 0x2c
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	4413      	add	r3, r2
 8005742:	3354      	adds	r3, #84	; 0x54
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f083 0301 	eor.w	r3, r3, #1
 800574a:	b2d8      	uxtb	r0, r3
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	212c      	movs	r1, #44	; 0x2c
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	4413      	add	r3, r2
 8005758:	3354      	adds	r3, #84	; 0x54
 800575a:	4602      	mov	r2, r0
 800575c:	701a      	strb	r2, [r3, #0]
      break;
 800575e:	e00b      	b.n	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	212c      	movs	r1, #44	; 0x2c
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	3360      	adds	r3, #96	; 0x60
 800576e:	2204      	movs	r2, #4
 8005770:	701a      	strb	r2, [r3, #0]
      break;
 8005772:	e001      	b.n	8005778 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005778:	bf00      	nop
  }
}
 800577a:	bf00      	nop
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d10b      	bne.n	80057d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f009 fa27 	bl	800ec18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d132      	bne.n	8005842 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f043 0308 	orr.w	r3, r3, #8
 80057e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d126      	bne.n	800583c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d113      	bne.n	800581e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80057fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005800:	d106      	bne.n	8005810 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f004 fe37 	bl	800a47c <USB_InitFSLSPClkSel>
 800580e:	e011      	b.n	8005834 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f004 fe30 	bl	800a47c <USB_InitFSLSPClkSel>
 800581c:	e00a      	b.n	8005834 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d106      	bne.n	8005834 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582c:	461a      	mov	r2, r3
 800582e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005832:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f009 fa19 	bl	800ec6c <HAL_HCD_PortEnabled_Callback>
 800583a:	e002      	b.n	8005842 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f009 fa23 	bl	800ec88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d103      	bne.n	8005854 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f043 0320 	orr.w	r3, r3, #32
 8005852:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e12b      	b.n	8005ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd f95a 	bl	8002b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058cc:	f001 fd7a 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80058d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4a81      	ldr	r2, [pc, #516]	; (8005adc <HAL_I2C_Init+0x274>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d807      	bhi.n	80058ec <HAL_I2C_Init+0x84>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a80      	ldr	r2, [pc, #512]	; (8005ae0 <HAL_I2C_Init+0x278>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	bf94      	ite	ls
 80058e4:	2301      	movls	r3, #1
 80058e6:	2300      	movhi	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e006      	b.n	80058fa <HAL_I2C_Init+0x92>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a7d      	ldr	r2, [pc, #500]	; (8005ae4 <HAL_I2C_Init+0x27c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	bf94      	ite	ls
 80058f4:	2301      	movls	r3, #1
 80058f6:	2300      	movhi	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0e7      	b.n	8005ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a78      	ldr	r2, [pc, #480]	; (8005ae8 <HAL_I2C_Init+0x280>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0c9b      	lsrs	r3, r3, #18
 800590c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a6a      	ldr	r2, [pc, #424]	; (8005adc <HAL_I2C_Init+0x274>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d802      	bhi.n	800593c <HAL_I2C_Init+0xd4>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	3301      	adds	r3, #1
 800593a:	e009      	b.n	8005950 <HAL_I2C_Init+0xe8>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	4a69      	ldr	r2, [pc, #420]	; (8005aec <HAL_I2C_Init+0x284>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	3301      	adds	r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	430b      	orrs	r3, r1
 8005956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	495c      	ldr	r1, [pc, #368]	; (8005adc <HAL_I2C_Init+0x274>)
 800596c:	428b      	cmp	r3, r1
 800596e:	d819      	bhi.n	80059a4 <HAL_I2C_Init+0x13c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	1e59      	subs	r1, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	fbb1 f3f3 	udiv	r3, r1, r3
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005984:	400b      	ands	r3, r1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_I2C_Init+0x138>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1e59      	subs	r1, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	fbb1 f3f3 	udiv	r3, r1, r3
 8005998:	3301      	adds	r3, #1
 800599a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599e:	e051      	b.n	8005a44 <HAL_I2C_Init+0x1dc>
 80059a0:	2304      	movs	r3, #4
 80059a2:	e04f      	b.n	8005a44 <HAL_I2C_Init+0x1dc>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d111      	bne.n	80059d0 <HAL_I2C_Init+0x168>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1e58      	subs	r0, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	440b      	add	r3, r1
 80059ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e012      	b.n	80059f6 <HAL_I2C_Init+0x18e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1e58      	subs	r0, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	0099      	lsls	r1, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059e6:	3301      	adds	r3, #1
 80059e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf0c      	ite	eq
 80059f0:	2301      	moveq	r3, #1
 80059f2:	2300      	movne	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Init+0x196>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e022      	b.n	8005a44 <HAL_I2C_Init+0x1dc>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10e      	bne.n	8005a24 <HAL_I2C_Init+0x1bc>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1e58      	subs	r0, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6859      	ldr	r1, [r3, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	440b      	add	r3, r1
 8005a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a22:	e00f      	b.n	8005a44 <HAL_I2C_Init+0x1dc>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1e58      	subs	r0, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	0099      	lsls	r1, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	6809      	ldr	r1, [r1, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6911      	ldr	r1, [r2, #16]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	68d2      	ldr	r2, [r2, #12]
 8005a7e:	4311      	orrs	r1, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	000186a0 	.word	0x000186a0
 8005ae0:	001e847f 	.word	0x001e847f
 8005ae4:	003d08ff 	.word	0x003d08ff
 8005ae8:	431bde83 	.word	0x431bde83
 8005aec:	10624dd3 	.word	0x10624dd3

08005af0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	460b      	mov	r3, r1
 8005afe:	817b      	strh	r3, [r7, #10]
 8005b00:	4613      	mov	r3, r2
 8005b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7fd fbd6 	bl	80032b4 <HAL_GetTick>
 8005b08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	f040 80e0 	bne.w	8005cd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2319      	movs	r3, #25
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4970      	ldr	r1, [pc, #448]	; (8005ce4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fd86 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e0d3      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_I2C_Master_Transmit+0x50>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e0cc      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d007      	beq.n	8005b66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2210      	movs	r2, #16
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	893a      	ldrh	r2, [r7, #8]
 8005b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a50      	ldr	r2, [pc, #320]	; (8005ce8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ba8:	8979      	ldrh	r1, [r7, #10]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fbf0 	bl	8006394 <I2C_MasterRequestWrite>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e08d      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bd4:	e066      	b.n	8005ca4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6a39      	ldr	r1, [r7, #32]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fe00 	bl	80067e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d107      	bne.n	8005bfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e06b      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d11b      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x188>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	6a39      	ldr	r1, [r7, #32]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fdf0 	bl	8006862 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d107      	bne.n	8005ca0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01a      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d194      	bne.n	8005bd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	00100002 	.word	0x00100002
 8005ce8:	ffff0000 	.word	0xffff0000

08005cec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	817b      	strh	r3, [r7, #10]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d00:	f7fd fad8 	bl	80032b4 <HAL_GetTick>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	f040 820b 	bne.w	800612a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2319      	movs	r3, #25
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	497c      	ldr	r1, [pc, #496]	; (8005f10 <HAL_I2C_Master_Receive+0x224>)
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fc88 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e1fe      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_I2C_Master_Receive+0x50>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e1f7      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d007      	beq.n	8005d62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2222      	movs	r2, #34	; 0x22
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	893a      	ldrh	r2, [r7, #8]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a5c      	ldr	r2, [pc, #368]	; (8005f14 <HAL_I2C_Master_Receive+0x228>)
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005da4:	8979      	ldrh	r1, [r7, #10]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fb74 	bl	8006498 <I2C_MasterRequestRead>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e1b8      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d113      	bne.n	8005dea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	623b      	str	r3, [r7, #32]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e18c      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d11b      	bne.n	8005e2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e16c      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d11b      	bne.n	8005e6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	e14c      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e90:	e138      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	f200 80f1 	bhi.w	800607e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d123      	bne.n	8005eec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fd1b 	bl	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e139      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eea:	e10b      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d14e      	bne.n	8005f92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2200      	movs	r2, #0
 8005efc:	4906      	ldr	r1, [pc, #24]	; (8005f18 <HAL_I2C_Master_Receive+0x22c>)
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fb98 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e10e      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
 8005f0e:	bf00      	nop
 8005f10:	00100002 	.word	0x00100002
 8005f14:	ffff0000 	.word	0xffff0000
 8005f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f90:	e0b8      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4966      	ldr	r1, [pc, #408]	; (8006134 <HAL_I2C_Master_Receive+0x448>)
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fb49 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0bf      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	494f      	ldr	r1, [pc, #316]	; (8006134 <HAL_I2C_Master_Receive+0x448>)
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fb1b 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e091      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800607c:	e042      	b.n	8006104 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fc2e 	bl	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e04c      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d118      	bne.n	8006104 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	f47f aec2 	bne.w	8005e92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	3728      	adds	r7, #40	; 0x28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	00010004 	.word	0x00010004

08006138 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	460b      	mov	r3, r1
 8006146:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006148:	f7fd f8b4 	bl	80032b4 <HAL_GetTick>
 800614c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b20      	cmp	r3, #32
 800615c:	f040 8111 	bne.w	8006382 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2319      	movs	r3, #25
 8006166:	2201      	movs	r2, #1
 8006168:	4988      	ldr	r1, [pc, #544]	; (800638c <HAL_I2C_IsDeviceReady+0x254>)
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fa62 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006176:	2302      	movs	r3, #2
 8006178:	e104      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_I2C_IsDeviceReady+0x50>
 8006184:	2302      	movs	r3, #2
 8006186:	e0fd      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d007      	beq.n	80061ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2224      	movs	r2, #36	; 0x24
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a70      	ldr	r2, [pc, #448]	; (8006390 <HAL_I2C_IsDeviceReady+0x258>)
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fa20 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006208:	d103      	bne.n	8006212 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e0b6      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006216:	897b      	ldrh	r3, [r7, #10]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006224:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006226:	f7fd f845 	bl	80032b4 <HAL_GetTick>
 800622a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b02      	cmp	r3, #2
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800625a:	e025      	b.n	80062a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800625c:	f7fd f82a 	bl	80032b4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d302      	bcc.n	8006272 <HAL_I2C_IsDeviceReady+0x13a>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	22a0      	movs	r2, #160	; 0xa0
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629e:	bf0c      	ite	eq
 80062a0:	2301      	moveq	r3, #1
 80062a2:	2300      	movne	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2ba0      	cmp	r3, #160	; 0xa0
 80062b2:	d005      	beq.n	80062c0 <HAL_I2C_IsDeviceReady+0x188>
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <HAL_I2C_IsDeviceReady+0x188>
 80062ba:	7dbb      	ldrb	r3, [r7, #22]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0cd      	beq.n	800625c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d129      	bne.n	800632a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	613b      	str	r3, [r7, #16]
 80062fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2319      	movs	r3, #25
 8006302:	2201      	movs	r2, #1
 8006304:	4921      	ldr	r1, [pc, #132]	; (800638c <HAL_I2C_IsDeviceReady+0x254>)
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f994 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e036      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e02c      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006338:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006342:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2319      	movs	r3, #25
 800634a:	2201      	movs	r2, #1
 800634c:	490f      	ldr	r1, [pc, #60]	; (800638c <HAL_I2C_IsDeviceReady+0x254>)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f970 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e012      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	3301      	adds	r3, #1
 8006362:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	429a      	cmp	r2, r3
 800636a:	f4ff af32 	bcc.w	80061d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	00100002 	.word	0x00100002
 8006390:	ffff0000 	.word	0xffff0000

08006394 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	460b      	mov	r3, r1
 80063a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d006      	beq.n	80063be <I2C_MasterRequestWrite+0x2a>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d003      	beq.n	80063be <I2C_MasterRequestWrite+0x2a>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063bc:	d108      	bne.n	80063d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e00b      	b.n	80063e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	2b12      	cmp	r3, #18
 80063d6:	d107      	bne.n	80063e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f91d 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00d      	beq.n	800641c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640e:	d103      	bne.n	8006418 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e035      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006424:	d108      	bne.n	8006438 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006426:	897b      	ldrh	r3, [r7, #10]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006434:	611a      	str	r2, [r3, #16]
 8006436:	e01b      	b.n	8006470 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006438:	897b      	ldrh	r3, [r7, #10]
 800643a:	11db      	asrs	r3, r3, #7
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0306 	and.w	r3, r3, #6
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f063 030f 	orn	r3, r3, #15
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	490e      	ldr	r1, [pc, #56]	; (8006490 <I2C_MasterRequestWrite+0xfc>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f943 	bl	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e010      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006466:	897b      	ldrh	r3, [r7, #10]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4907      	ldr	r1, [pc, #28]	; (8006494 <I2C_MasterRequestWrite+0x100>)
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f933 	bl	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	00010008 	.word	0x00010008
 8006494:	00010002 	.word	0x00010002

08006498 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	460b      	mov	r3, r1
 80064a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d006      	beq.n	80064d2 <I2C_MasterRequestRead+0x3a>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d003      	beq.n	80064d2 <I2C_MasterRequestRead+0x3a>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064d0:	d108      	bne.n	80064e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e00b      	b.n	80064fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	2b11      	cmp	r3, #17
 80064ea:	d107      	bne.n	80064fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f893 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d103      	bne.n	800652c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800652a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e079      	b.n	8006624 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006538:	d108      	bne.n	800654c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800653a:	897b      	ldrh	r3, [r7, #10]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	611a      	str	r2, [r3, #16]
 800654a:	e05f      	b.n	800660c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800654c:	897b      	ldrh	r3, [r7, #10]
 800654e:	11db      	asrs	r3, r3, #7
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0306 	and.w	r3, r3, #6
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f063 030f 	orn	r3, r3, #15
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4930      	ldr	r1, [pc, #192]	; (800662c <I2C_MasterRequestRead+0x194>)
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f8b9 	bl	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e054      	b.n	8006624 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800657a:	897b      	ldrh	r3, [r7, #10]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4929      	ldr	r1, [pc, #164]	; (8006630 <I2C_MasterRequestRead+0x198>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f8a9 	bl	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e044      	b.n	8006624 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f831 	bl	8006634 <I2C_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00d      	beq.n	80065f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d103      	bne.n	80065f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e017      	b.n	8006624 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065f4:	897b      	ldrh	r3, [r7, #10]
 80065f6:	11db      	asrs	r3, r3, #7
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0306 	and.w	r3, r3, #6
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f063 030e 	orn	r3, r3, #14
 8006604:	b2da      	uxtb	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4907      	ldr	r1, [pc, #28]	; (8006630 <I2C_MasterRequestRead+0x198>)
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f865 	bl	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	00010008 	.word	0x00010008
 8006630:	00010002 	.word	0x00010002

08006634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006644:	e025      	b.n	8006692 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664c:	d021      	beq.n	8006692 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664e:	f7fc fe31 	bl	80032b4 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d302      	bcc.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x30>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d116      	bne.n	8006692 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e023      	b.n	80066da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10d      	bne.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	43da      	mvns	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	e00c      	b.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	43da      	mvns	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d0b6      	beq.n	8006646 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066f0:	e051      	b.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006700:	d123      	bne.n	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006710:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800671a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e046      	b.n	80067d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006750:	d021      	beq.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fc fdaf 	bl	80032b4 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d116      	bne.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f043 0220 	orr.w	r2, r3, #32
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e020      	b.n	80067d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d10c      	bne.n	80067ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	43da      	mvns	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf14      	ite	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	2300      	moveq	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	e00b      	b.n	80067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	43da      	mvns	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4013      	ands	r3, r2
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d18d      	bne.n	80066f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067ec:	e02d      	b.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f8ce 	bl	8006990 <I2C_IsAcknowledgeFailed>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02d      	b.n	800685a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006804:	d021      	beq.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006806:	f7fc fd55 	bl	80032b4 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d116      	bne.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e007      	b.n	800685a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006854:	2b80      	cmp	r3, #128	; 0x80
 8006856:	d1ca      	bne.n	80067ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800686e:	e02d      	b.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f88d 	bl	8006990 <I2C_IsAcknowledgeFailed>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e02d      	b.n	80068dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006886:	d021      	beq.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006888:	f7fc fd14 	bl	80032b4 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d116      	bne.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e007      	b.n	80068dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d1ca      	bne.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068f0:	e042      	b.n	8006978 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d119      	bne.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e029      	b.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fc fcbe 	bl	80032b4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d1b5      	bne.n	80068f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a6:	d11b      	bne.n	80069e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f043 0204 	orr.w	r2, r3, #4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d129      	bne.n	8006a58 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	; 0x24
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0210 	bic.w	r2, r2, #16
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e000      	b.n	8006a5a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
  }
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d12a      	bne.n	8006ad6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	f023 030f 	bic.w	r3, r3, #15
 8006aa6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	89fb      	ldrh	r3, [r7, #14]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	89fa      	ldrh	r2, [r7, #14]
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e000      	b.n	8006ad8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ad6:	2302      	movs	r3, #2
  }
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e267      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d075      	beq.n	8006bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b02:	4b88      	ldr	r3, [pc, #544]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d00c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b0e:	4b85      	ldr	r3, [pc, #532]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d112      	bne.n	8006b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1a:	4b82      	ldr	r3, [pc, #520]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b26:	d10b      	bne.n	8006b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b28:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05b      	beq.n	8006bec <HAL_RCC_OscConfig+0x108>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d157      	bne.n	8006bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e242      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b48:	d106      	bne.n	8006b58 <HAL_RCC_OscConfig+0x74>
 8006b4a:	4b76      	ldr	r3, [pc, #472]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a75      	ldr	r2, [pc, #468]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e01d      	b.n	8006b94 <HAL_RCC_OscConfig+0xb0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCC_OscConfig+0x98>
 8006b62:	4b70      	ldr	r3, [pc, #448]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6f      	ldr	r2, [pc, #444]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4b6d      	ldr	r3, [pc, #436]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6c      	ldr	r2, [pc, #432]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e00b      	b.n	8006b94 <HAL_RCC_OscConfig+0xb0>
 8006b7c:	4b69      	ldr	r3, [pc, #420]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a68      	ldr	r2, [pc, #416]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4b66      	ldr	r3, [pc, #408]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a65      	ldr	r2, [pc, #404]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d013      	beq.n	8006bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fc fb8a 	bl	80032b4 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fc fb86 	bl	80032b4 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e207      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xc0>
 8006bc2:	e014      	b.n	8006bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc4:	f7fc fb76 	bl	80032b4 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bcc:	f7fc fb72 	bl	80032b4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b64      	cmp	r3, #100	; 0x64
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e1f3      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	4b51      	ldr	r3, [pc, #324]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0xe8>
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d063      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfa:	4b4a      	ldr	r3, [pc, #296]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c06:	4b47      	ldr	r3, [pc, #284]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d11c      	bne.n	8006c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c12:	4b44      	ldr	r3, [pc, #272]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d116      	bne.n	8006c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_RCC_OscConfig+0x152>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1c7      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c36:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	4937      	ldr	r1, [pc, #220]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4a:	e03a      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c54:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <HAL_RCC_OscConfig+0x244>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5a:	f7fc fb2b 	bl	80032b4 <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c62:	f7fc fb27 	bl	80032b4 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e1a8      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c80:	4b28      	ldr	r3, [pc, #160]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4925      	ldr	r1, [pc, #148]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]
 8006c94:	e015      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <HAL_RCC_OscConfig+0x244>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fc fb0a 	bl	80032b4 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca4:	f7fc fb06 	bl	80032b4 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e187      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d036      	beq.n	8006d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cd6:	4b15      	ldr	r3, [pc, #84]	; (8006d2c <HAL_RCC_OscConfig+0x248>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fc faea 	bl	80032b4 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ce4:	f7fc fae6 	bl	80032b4 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e167      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x200>
 8006d02:	e01b      	b.n	8006d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d04:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_RCC_OscConfig+0x248>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d0a:	f7fc fad3 	bl	80032b4 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	e00e      	b.n	8006d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d12:	f7fc facf 	bl	80032b4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d907      	bls.n	8006d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e150      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
 8006d24:	40023800 	.word	0x40023800
 8006d28:	42470000 	.word	0x42470000
 8006d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ea      	bne.n	8006d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8097 	beq.w	8006e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d4e:	4b81      	ldr	r3, [pc, #516]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10f      	bne.n	8006d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	4b7d      	ldr	r3, [pc, #500]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	4a7c      	ldr	r2, [pc, #496]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6413      	str	r3, [r2, #64]	; 0x40
 8006d6a:	4b7a      	ldr	r3, [pc, #488]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d72:	60bb      	str	r3, [r7, #8]
 8006d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7a:	4b77      	ldr	r3, [pc, #476]	; (8006f58 <HAL_RCC_OscConfig+0x474>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d118      	bne.n	8006db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d86:	4b74      	ldr	r3, [pc, #464]	; (8006f58 <HAL_RCC_OscConfig+0x474>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a73      	ldr	r2, [pc, #460]	; (8006f58 <HAL_RCC_OscConfig+0x474>)
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d92:	f7fc fa8f 	bl	80032b4 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9a:	f7fc fa8b 	bl	80032b4 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e10c      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dac:	4b6a      	ldr	r3, [pc, #424]	; (8006f58 <HAL_RCC_OscConfig+0x474>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f0      	beq.n	8006d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d106      	bne.n	8006dce <HAL_RCC_OscConfig+0x2ea>
 8006dc0:	4b64      	ldr	r3, [pc, #400]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4a63      	ldr	r2, [pc, #396]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	; 0x70
 8006dcc:	e01c      	b.n	8006e08 <HAL_RCC_OscConfig+0x324>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCC_OscConfig+0x30c>
 8006dd6:	4b5f      	ldr	r3, [pc, #380]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	4a5e      	ldr	r2, [pc, #376]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	f043 0304 	orr.w	r3, r3, #4
 8006de0:	6713      	str	r3, [r2, #112]	; 0x70
 8006de2:	4b5c      	ldr	r3, [pc, #368]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	4a5b      	ldr	r2, [pc, #364]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	6713      	str	r3, [r2, #112]	; 0x70
 8006dee:	e00b      	b.n	8006e08 <HAL_RCC_OscConfig+0x324>
 8006df0:	4b58      	ldr	r3, [pc, #352]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	4a57      	ldr	r2, [pc, #348]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfc:	4b55      	ldr	r3, [pc, #340]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	4a54      	ldr	r2, [pc, #336]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e02:	f023 0304 	bic.w	r3, r3, #4
 8006e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d015      	beq.n	8006e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e10:	f7fc fa50 	bl	80032b4 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fc fa4c 	bl	80032b4 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e0cb      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2e:	4b49      	ldr	r3, [pc, #292]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ee      	beq.n	8006e18 <HAL_RCC_OscConfig+0x334>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e3c:	f7fc fa3a 	bl	80032b4 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e42:	e00a      	b.n	8006e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e44:	f7fc fa36 	bl	80032b4 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0b5      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e5a:	4b3e      	ldr	r3, [pc, #248]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ee      	bne.n	8006e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d105      	bne.n	8006e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6c:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	4a38      	ldr	r2, [pc, #224]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80a1 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e82:	4b34      	ldr	r3, [pc, #208]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d05c      	beq.n	8006f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d141      	bne.n	8006f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e96:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9c:	f7fc fa0a 	bl	80032b4 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fc fa06 	bl	80032b4 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e087      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	3b01      	subs	r3, #1
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	061b      	lsls	r3, r3, #24
 8006ee6:	491b      	ldr	r1, [pc, #108]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef2:	f7fc f9df 	bl	80032b4 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006efa:	f7fc f9db 	bl	80032b4 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e05c      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f0c:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCC_OscConfig+0x416>
 8006f18:	e054      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f20:	f7fc f9c8 	bl	80032b4 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f28:	f7fc f9c4 	bl	80032b4 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e045      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x444>
 8006f46:	e03d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e038      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
 8006f54:	40023800 	.word	0x40023800
 8006f58:	40007000 	.word	0x40007000
 8006f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f60:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <HAL_RCC_OscConfig+0x4ec>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d028      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d121      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d11a      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f90:	4013      	ands	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d111      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40023800 	.word	0x40023800

08006fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0cc      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe8:	4b68      	ldr	r3, [pc, #416]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d90c      	bls.n	8007010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff6:	4b65      	ldr	r3, [pc, #404]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffe:	4b63      	ldr	r3, [pc, #396]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0b8      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d020      	beq.n	800705e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007028:	4b59      	ldr	r3, [pc, #356]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4a58      	ldr	r2, [pc, #352]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007040:	4b53      	ldr	r3, [pc, #332]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	4a52      	ldr	r2, [pc, #328]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800704a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800704c:	4b50      	ldr	r3, [pc, #320]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	494d      	ldr	r1, [pc, #308]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 800705a:	4313      	orrs	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d044      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d107      	bne.n	8007082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007072:	4b47      	ldr	r3, [pc, #284]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d119      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e07f      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d003      	beq.n	8007092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800708e:	2b03      	cmp	r3, #3
 8007090:	d107      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007092:	4b3f      	ldr	r3, [pc, #252]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e06f      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a2:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e067      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070b2:	4b37      	ldr	r3, [pc, #220]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f023 0203 	bic.w	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4934      	ldr	r1, [pc, #208]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070c4:	f7fc f8f6 	bl	80032b4 <HAL_GetTick>
 80070c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	e00a      	b.n	80070e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070cc:	f7fc f8f2 	bl	80032b4 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070da:	4293      	cmp	r3, r2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e04f      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e2:	4b2b      	ldr	r3, [pc, #172]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 020c 	and.w	r2, r3, #12
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d1eb      	bne.n	80070cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070f4:	4b25      	ldr	r3, [pc, #148]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d20c      	bcs.n	800711c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007102:	4b22      	ldr	r3, [pc, #136]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800710a:	4b20      	ldr	r3, [pc, #128]	; (800718c <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d001      	beq.n	800711c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e032      	b.n	8007182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007128:	4b19      	ldr	r3, [pc, #100]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4916      	ldr	r1, [pc, #88]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	4313      	orrs	r3, r2
 8007138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	490e      	ldr	r1, [pc, #56]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	4313      	orrs	r3, r2
 8007158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800715a:	f000 f821 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 800715e:	4602      	mov	r2, r0
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	490a      	ldr	r1, [pc, #40]	; (8007194 <HAL_RCC_ClockConfig+0x1c0>)
 800716c:	5ccb      	ldrb	r3, [r1, r3]
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	4a09      	ldr	r2, [pc, #36]	; (8007198 <HAL_RCC_ClockConfig+0x1c4>)
 8007174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <HAL_RCC_ClockConfig+0x1c8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7fc f856 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023c00 	.word	0x40023c00
 8007190:	40023800 	.word	0x40023800
 8007194:	08010d74 	.word	0x08010d74
 8007198:	200000c8 	.word	0x200000c8
 800719c:	200000cc 	.word	0x200000cc

080071a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a4:	b094      	sub	sp, #80	; 0x50
 80071a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	2300      	movs	r3, #0
 80071ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b0:	2300      	movs	r3, #0
 80071b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071b8:	4b79      	ldr	r3, [pc, #484]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d00d      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x40>
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	f200 80e1 	bhi.w	800738c <HAL_RCC_GetSysClockFreq+0x1ec>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x34>
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d003      	beq.n	80071da <HAL_RCC_GetSysClockFreq+0x3a>
 80071d2:	e0db      	b.n	800738c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071d4:	4b73      	ldr	r3, [pc, #460]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80071d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80071d8:	e0db      	b.n	8007392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071da:	4b73      	ldr	r3, [pc, #460]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071de:	e0d8      	b.n	8007392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071e0:	4b6f      	ldr	r3, [pc, #444]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ea:	4b6d      	ldr	r3, [pc, #436]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d063      	beq.n	80072be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f6:	4b6a      	ldr	r3, [pc, #424]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	099b      	lsrs	r3, r3, #6
 80071fc:	2200      	movs	r2, #0
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	f04f 0000 	mov.w	r0, #0
 800721a:	f04f 0100 	mov.w	r1, #0
 800721e:	0159      	lsls	r1, r3, #5
 8007220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007224:	0150      	lsls	r0, r2, #5
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4621      	mov	r1, r4
 800722c:	1a51      	subs	r1, r2, r1
 800722e:	6139      	str	r1, [r7, #16]
 8007230:	4629      	mov	r1, r5
 8007232:	eb63 0301 	sbc.w	r3, r3, r1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007244:	4659      	mov	r1, fp
 8007246:	018b      	lsls	r3, r1, #6
 8007248:	4651      	mov	r1, sl
 800724a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800724e:	4651      	mov	r1, sl
 8007250:	018a      	lsls	r2, r1, #6
 8007252:	4651      	mov	r1, sl
 8007254:	ebb2 0801 	subs.w	r8, r2, r1
 8007258:	4659      	mov	r1, fp
 800725a:	eb63 0901 	sbc.w	r9, r3, r1
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007272:	4690      	mov	r8, r2
 8007274:	4699      	mov	r9, r3
 8007276:	4623      	mov	r3, r4
 8007278:	eb18 0303 	adds.w	r3, r8, r3
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	462b      	mov	r3, r5
 8007280:	eb49 0303 	adc.w	r3, r9, r3
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007292:	4629      	mov	r1, r5
 8007294:	024b      	lsls	r3, r1, #9
 8007296:	4621      	mov	r1, r4
 8007298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800729c:	4621      	mov	r1, r4
 800729e:	024a      	lsls	r2, r1, #9
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a6:	2200      	movs	r2, #0
 80072a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b0:	f7f8 ffee 	bl	8000290 <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4613      	mov	r3, r2
 80072ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072bc:	e058      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072be:	4b38      	ldr	r3, [pc, #224]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	2200      	movs	r2, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	4611      	mov	r1, r2
 80072ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072ce:	623b      	str	r3, [r7, #32]
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
 80072d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	f04f 0000 	mov.w	r0, #0
 80072e0:	f04f 0100 	mov.w	r1, #0
 80072e4:	0159      	lsls	r1, r3, #5
 80072e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ea:	0150      	lsls	r0, r2, #5
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4641      	mov	r1, r8
 80072f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80072f6:	4649      	mov	r1, r9
 80072f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800730c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007310:	ebb2 040a 	subs.w	r4, r2, sl
 8007314:	eb63 050b 	sbc.w	r5, r3, fp
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	00eb      	lsls	r3, r5, #3
 8007322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007326:	00e2      	lsls	r2, r4, #3
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	4643      	mov	r3, r8
 800732e:	18e3      	adds	r3, r4, r3
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	464b      	mov	r3, r9
 8007334:	eb45 0303 	adc.w	r3, r5, r3
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007346:	4629      	mov	r1, r5
 8007348:	028b      	lsls	r3, r1, #10
 800734a:	4621      	mov	r1, r4
 800734c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007350:	4621      	mov	r1, r4
 8007352:	028a      	lsls	r2, r1, #10
 8007354:	4610      	mov	r0, r2
 8007356:	4619      	mov	r1, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735a:	2200      	movs	r2, #0
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	61fa      	str	r2, [r7, #28]
 8007360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007364:	f7f8 ff94 	bl	8000290 <__aeabi_uldivmod>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4613      	mov	r3, r2
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	3301      	adds	r3, #1
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007384:	fbb2 f3f3 	udiv	r3, r2, r3
 8007388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800738a:	e002      	b.n	8007392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800738e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007394:	4618      	mov	r0, r3
 8007396:	3750      	adds	r7, #80	; 0x50
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	007a1200 	.word	0x007a1200

080073ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	200000c8 	.word	0x200000c8

080073c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073c8:	f7ff fff0 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	0a9b      	lsrs	r3, r3, #10
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	4903      	ldr	r1, [pc, #12]	; (80073e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073da:	5ccb      	ldrb	r3, [r1, r3]
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	08010d84 	.word	0x08010d84

080073ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073f0:	f7ff ffdc 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073f4:	4602      	mov	r2, r0
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <HAL_RCC_GetPCLK2Freq+0x20>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	0b5b      	lsrs	r3, r3, #13
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	4903      	ldr	r1, [pc, #12]	; (8007410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007402:	5ccb      	ldrb	r3, [r1, r3]
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40023800 	.word	0x40023800
 8007410:	08010d84 	.word	0x08010d84

08007414 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e025      	b.n	8007474 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fb fdb7 	bl	8002fb0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f002 fc6b 	bl	8009d30 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	f002 fcc0 	bl	8009dea <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e07b      	b.n	8007586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d108      	bne.n	80074a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749e:	d009      	beq.n	80074b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	61da      	str	r2, [r3, #28]
 80074a6:	e005      	b.n	80074b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb fba4 	bl	8002c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	ea42 0103 	orr.w	r1, r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	f003 0104 	and.w	r1, r3, #4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0210 	and.w	r2, r3, #16
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b088      	sub	sp, #32
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_SPI_Transmit+0x22>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e126      	b.n	80077fe <HAL_SPI_Transmit+0x270>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b8:	f7fb fe7c 	bl	80032b4 <HAL_GetTick>
 80075bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
 80075d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d2:	e10b      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_SPI_Transmit+0x52>
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075e4:	e102      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2203      	movs	r2, #3
 80075ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762c:	d10f      	bne.n	800764e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d007      	beq.n	800766c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d14b      	bne.n	800770e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Transmit+0xf6>
 800767e:	8afb      	ldrh	r3, [r7, #22]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d13e      	bne.n	8007702 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	881a      	ldrh	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	1c9a      	adds	r2, r3, #2
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076a8:	e02b      	b.n	8007702 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d112      	bne.n	80076de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	881a      	ldrh	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	1c9a      	adds	r2, r3, #2
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	86da      	strh	r2, [r3, #54]	; 0x36
 80076dc:	e011      	b.n	8007702 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076de:	f7fb fde9 	bl	80032b4 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d803      	bhi.n	80076f6 <HAL_SPI_Transmit+0x168>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_Transmit+0x16e>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007700:	e074      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1ce      	bne.n	80076aa <HAL_SPI_Transmit+0x11c>
 800770c:	e04c      	b.n	80077a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_SPI_Transmit+0x18e>
 8007716:	8afb      	ldrh	r3, [r7, #22]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d140      	bne.n	800779e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007742:	e02c      	b.n	800779e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d113      	bne.n	800777a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	86da      	strh	r2, [r3, #54]	; 0x36
 8007778:	e011      	b.n	800779e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800777a:	f7fb fd9b 	bl	80032b4 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d803      	bhi.n	8007792 <HAL_SPI_Transmit+0x204>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007790:	d102      	bne.n	8007798 <HAL_SPI_Transmit+0x20a>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800779c:	e026      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1cd      	bne.n	8007744 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fbcb 	bl	8007f48 <SPI_EndRxTxTransaction>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e000      	b.n	80077ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80077ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b088      	sub	sp, #32
 800780a:	af02      	add	r7, sp, #8
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007822:	d112      	bne.n	800784a <HAL_SPI_Receive+0x44>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10e      	bne.n	800784a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2204      	movs	r2, #4
 8007830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	4613      	mov	r3, r2
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f8f1 	bl	8007a28 <HAL_SPI_TransmitReceive>
 8007846:	4603      	mov	r3, r0
 8007848:	e0ea      	b.n	8007a20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_SPI_Receive+0x52>
 8007854:	2302      	movs	r3, #2
 8007856:	e0e3      	b.n	8007a20 <HAL_SPI_Receive+0x21a>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007860:	f7fb fd28 	bl	80032b4 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007872:	2302      	movs	r3, #2
 8007874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007876:	e0ca      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_SPI_Receive+0x7e>
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007888:	e0c1      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2204      	movs	r2, #4
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	d10f      	bne.n	80078f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d007      	beq.n	8007910 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d162      	bne.n	80079de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007918:	e02e      	b.n	8007978 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b01      	cmp	r3, #1
 8007926:	d115      	bne.n	8007954 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f103 020c 	add.w	r2, r3, #12
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007952:	e011      	b.n	8007978 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007954:	f7fb fcae 	bl	80032b4 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d803      	bhi.n	800796c <HAL_SPI_Receive+0x166>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Receive+0x16c>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007976:	e04a      	b.n	8007a0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <HAL_SPI_Receive+0x114>
 8007982:	e031      	b.n	80079e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d113      	bne.n	80079ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	b292      	uxth	r2, r2
 800799e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079b8:	e011      	b.n	80079de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ba:	f7fb fc7b 	bl	80032b4 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d803      	bhi.n	80079d2 <HAL_SPI_Receive+0x1cc>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d0:	d102      	bne.n	80079d8 <HAL_SPI_Receive+0x1d2>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079dc:	e017      	b.n	8007a0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1cd      	bne.n	8007984 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fa45 	bl	8007e7c <SPI_EndRxTransaction>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2220      	movs	r2, #32
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
 8007a0a:	e000      	b.n	8007a0e <HAL_SPI_Receive+0x208>
  }

error :
 8007a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08c      	sub	sp, #48	; 0x30
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a36:	2301      	movs	r3, #1
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x26>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e18a      	b.n	8007d64 <HAL_SPI_TransmitReceive+0x33c>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a56:	f7fb fc2d 	bl	80032b4 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d00f      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x70>
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a7e:	d107      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x68>
 8007a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d003      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a96:	e15b      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x82>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x82>
 8007aa4:	887b      	ldrh	r3, [r7, #2]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ab0:	e14e      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d003      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	887a      	ldrh	r2, [r7, #2]
 8007adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d007      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b22:	d178      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x10a>
 8007b2c:	8b7b      	ldrh	r3, [r7, #26]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d166      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	881a      	ldrh	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b56:	e053      	b.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d11b      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d016      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d113      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	881a      	ldrh	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d119      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x1b8>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d014      	beq.n	8007be0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007be0:	f7fb fb68 	bl	80032b4 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d807      	bhi.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf6:	d003      	beq.n	8007c00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bfe:	e0a7      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1a6      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x130>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1a1      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x130>
 8007c14:	e07c      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_SPI_TransmitReceive+0x1fc>
 8007c1e:	8b7b      	ldrh	r3, [r7, #26]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d16b      	bne.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c4a:	e057      	b.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d11c      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d017      	beq.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d114      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d119      	bne.n	8007cd6 <HAL_SPI_TransmitReceive+0x2ae>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d014      	beq.n	8007cd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cd6:	f7fb faed 	bl	80032b4 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d803      	bhi.n	8007cee <HAL_SPI_TransmitReceive+0x2c6>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cec:	d102      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x2cc>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cfa:	e029      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1a2      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x224>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d19d      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f917 	bl	8007f48 <SPI_EndRxTxTransaction>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d2c:	e010      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	e000      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3730      	adds	r7, #48	; 0x30
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d7c:	f7fb fa9a 	bl	80032b4 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4413      	add	r3, r2
 8007d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d8c:	f7fb fa92 	bl	80032b4 <HAL_GetTick>
 8007d90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d92:	4b39      	ldr	r3, [pc, #228]	; (8007e78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	015b      	lsls	r3, r3, #5
 8007d98:	0d1b      	lsrs	r3, r3, #20
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	fb02 f303 	mul.w	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007da2:	e054      	b.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007daa:	d050      	beq.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dac:	f7fb fa82 	bl	80032b4 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d902      	bls.n	8007dc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d13d      	bne.n	8007e3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dda:	d111      	bne.n	8007e00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de4:	d004      	beq.n	8007df0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dee:	d107      	bne.n	8007e00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e08:	d10f      	bne.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e017      	b.n	8007e6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d19b      	bne.n	8007da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200000c8 	.word	0x200000c8

08007e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e90:	d111      	bne.n	8007eb6 <SPI_EndRxTransaction+0x3a>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e9a:	d004      	beq.n	8007ea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea4:	d107      	bne.n	8007eb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ebe:	d12a      	bne.n	8007f16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec8:	d012      	beq.n	8007ef0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff49 	bl	8007d6c <SPI_WaitFlagStateUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d02d      	beq.n	8007f3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e026      	b.n	8007f3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2101      	movs	r1, #1
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff ff36 	bl	8007d6c <SPI_WaitFlagStateUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01a      	beq.n	8007f3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e013      	b.n	8007f3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2101      	movs	r1, #1
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff ff23 	bl	8007d6c <SPI_WaitFlagStateUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f043 0220 	orr.w	r2, r3, #32
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e000      	b.n	8007f3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <SPI_EndRxTxTransaction+0x7c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1b      	ldr	r2, [pc, #108]	; (8007fc8 <SPI_EndRxTxTransaction+0x80>)
 8007f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5e:	0d5b      	lsrs	r3, r3, #21
 8007f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f64:	fb02 f303 	mul.w	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f72:	d112      	bne.n	8007f9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2180      	movs	r1, #128	; 0x80
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff fef4 	bl	8007d6c <SPI_WaitFlagStateUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d016      	beq.n	8007fb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	f043 0220 	orr.w	r2, r3, #32
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e00f      	b.n	8007fba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb0:	2b80      	cmp	r3, #128	; 0x80
 8007fb2:	d0f2      	beq.n	8007f9a <SPI_EndRxTxTransaction+0x52>
 8007fb4:	e000      	b.n	8007fb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007fb6:	bf00      	nop
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200000c8 	.word	0x200000c8
 8007fc8:	165e9f81 	.word	0x165e9f81

08007fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e041      	b.n	8008062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fa fe5a 	bl	8002cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f000 fa10 	bl	8008430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e041      	b.n	8008100 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f839 	bl	8008108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f000 f9c1 	bl	8008430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008136:	2302      	movs	r3, #2
 8008138:	e0ae      	b.n	8008298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b0c      	cmp	r3, #12
 8008146:	f200 809f 	bhi.w	8008288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008185 	.word	0x08008185
 8008154:	08008289 	.word	0x08008289
 8008158:	08008289 	.word	0x08008289
 800815c:	08008289 	.word	0x08008289
 8008160:	080081c5 	.word	0x080081c5
 8008164:	08008289 	.word	0x08008289
 8008168:	08008289 	.word	0x08008289
 800816c:	08008289 	.word	0x08008289
 8008170:	08008207 	.word	0x08008207
 8008174:	08008289 	.word	0x08008289
 8008178:	08008289 	.word	0x08008289
 800817c:	08008289 	.word	0x08008289
 8008180:	08008247 	.word	0x08008247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f9f0 	bl	8008570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0208 	orr.w	r2, r2, #8
 800819e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0204 	bic.w	r2, r2, #4
 80081ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6999      	ldr	r1, [r3, #24]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	619a      	str	r2, [r3, #24]
      break;
 80081c2:	e064      	b.n	800828e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fa40 	bl	8008650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6999      	ldr	r1, [r3, #24]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	021a      	lsls	r2, r3, #8
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	619a      	str	r2, [r3, #24]
      break;
 8008204:	e043      	b.n	800828e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fa95 	bl	800873c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0204 	bic.w	r2, r2, #4
 8008230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69d9      	ldr	r1, [r3, #28]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]
      break;
 8008244:	e023      	b.n	800828e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fae9 	bl	8008824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	021a      	lsls	r2, r3, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	61da      	str	r2, [r3, #28]
      break;
 8008286:	e002      	b.n	800828e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_TIM_ConfigClockSource+0x1c>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e0b4      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x186>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f4:	d03e      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0xd4>
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	f200 8087 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x16c>
 80082fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008302:	f000 8086 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x172>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	d87f      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 800830c:	2b70      	cmp	r3, #112	; 0x70
 800830e:	d01a      	beq.n	8008346 <HAL_TIM_ConfigClockSource+0xa6>
 8008310:	2b70      	cmp	r3, #112	; 0x70
 8008312:	d87b      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b60      	cmp	r3, #96	; 0x60
 8008316:	d050      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0x11a>
 8008318:	2b60      	cmp	r3, #96	; 0x60
 800831a:	d877      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b50      	cmp	r3, #80	; 0x50
 800831e:	d03c      	beq.n	800839a <HAL_TIM_ConfigClockSource+0xfa>
 8008320:	2b50      	cmp	r3, #80	; 0x50
 8008322:	d873      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d058      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x13a>
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d86f      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b30      	cmp	r3, #48	; 0x30
 800832e:	d064      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x15a>
 8008330:	2b30      	cmp	r3, #48	; 0x30
 8008332:	d86b      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b20      	cmp	r3, #32
 8008336:	d060      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x15a>
 8008338:	2b20      	cmp	r3, #32
 800833a:	d867      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b00      	cmp	r3, #0
 800833e:	d05c      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	2b10      	cmp	r3, #16
 8008342:	d05a      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x15a>
 8008344:	e062      	b.n	800840c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6899      	ldr	r1, [r3, #8]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f000 fb35 	bl	80089c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	609a      	str	r2, [r3, #8]
      break;
 8008372:	e04f      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6899      	ldr	r1, [r3, #8]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f000 fb1e 	bl	80089c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008396:	609a      	str	r2, [r3, #8]
      break;
 8008398:	e03c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6859      	ldr	r1, [r3, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f000 fa92 	bl	80088d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2150      	movs	r1, #80	; 0x50
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 faeb 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 80083b8:	e02c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f000 fab1 	bl	800892e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2160      	movs	r1, #96	; 0x60
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fadb 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 80083d8:	e01c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 fa72 	bl	80088d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2140      	movs	r1, #64	; 0x40
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 facb 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 80083f8:	e00c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f000 fac2 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 800840a:	e003      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
      break;
 8008410:	e000      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a40      	ldr	r2, [pc, #256]	; (8008544 <TIM_Base_SetConfig+0x114>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d013      	beq.n	8008470 <TIM_Base_SetConfig+0x40>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844e:	d00f      	beq.n	8008470 <TIM_Base_SetConfig+0x40>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a3d      	ldr	r2, [pc, #244]	; (8008548 <TIM_Base_SetConfig+0x118>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00b      	beq.n	8008470 <TIM_Base_SetConfig+0x40>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a3c      	ldr	r2, [pc, #240]	; (800854c <TIM_Base_SetConfig+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d007      	beq.n	8008470 <TIM_Base_SetConfig+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a3b      	ldr	r2, [pc, #236]	; (8008550 <TIM_Base_SetConfig+0x120>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_Base_SetConfig+0x40>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a3a      	ldr	r2, [pc, #232]	; (8008554 <TIM_Base_SetConfig+0x124>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d108      	bne.n	8008482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a2f      	ldr	r2, [pc, #188]	; (8008544 <TIM_Base_SetConfig+0x114>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d02b      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008490:	d027      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a2c      	ldr	r2, [pc, #176]	; (8008548 <TIM_Base_SetConfig+0x118>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d023      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a2b      	ldr	r2, [pc, #172]	; (800854c <TIM_Base_SetConfig+0x11c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d01f      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a2a      	ldr	r2, [pc, #168]	; (8008550 <TIM_Base_SetConfig+0x120>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01b      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a29      	ldr	r2, [pc, #164]	; (8008554 <TIM_Base_SetConfig+0x124>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d017      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a28      	ldr	r2, [pc, #160]	; (8008558 <TIM_Base_SetConfig+0x128>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d013      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a27      	ldr	r2, [pc, #156]	; (800855c <TIM_Base_SetConfig+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00f      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a26      	ldr	r2, [pc, #152]	; (8008560 <TIM_Base_SetConfig+0x130>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a25      	ldr	r2, [pc, #148]	; (8008564 <TIM_Base_SetConfig+0x134>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a24      	ldr	r2, [pc, #144]	; (8008568 <TIM_Base_SetConfig+0x138>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a23      	ldr	r2, [pc, #140]	; (800856c <TIM_Base_SetConfig+0x13c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d108      	bne.n	80084f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a0a      	ldr	r2, [pc, #40]	; (8008544 <TIM_Base_SetConfig+0x114>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_Base_SetConfig+0xf8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a0c      	ldr	r2, [pc, #48]	; (8008554 <TIM_Base_SetConfig+0x124>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d103      	bne.n	8008530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	615a      	str	r2, [r3, #20]
}
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40010000 	.word	0x40010000
 8008548:	40000400 	.word	0x40000400
 800854c:	40000800 	.word	0x40000800
 8008550:	40000c00 	.word	0x40000c00
 8008554:	40010400 	.word	0x40010400
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400
 8008560:	40014800 	.word	0x40014800
 8008564:	40001800 	.word	0x40001800
 8008568:	40001c00 	.word	0x40001c00
 800856c:	40002000 	.word	0x40002000

08008570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f023 0302 	bic.w	r3, r3, #2
 80085b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a20      	ldr	r2, [pc, #128]	; (8008648 <TIM_OC1_SetConfig+0xd8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_OC1_SetConfig+0x64>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1f      	ldr	r2, [pc, #124]	; (800864c <TIM_OC1_SetConfig+0xdc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d10c      	bne.n	80085ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f023 0308 	bic.w	r3, r3, #8
 80085da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f023 0304 	bic.w	r3, r3, #4
 80085ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a15      	ldr	r2, [pc, #84]	; (8008648 <TIM_OC1_SetConfig+0xd8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC1_SetConfig+0x8e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a14      	ldr	r2, [pc, #80]	; (800864c <TIM_OC1_SetConfig+0xdc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d111      	bne.n	8008622 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400

08008650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f023 0210 	bic.w	r2, r3, #16
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a22      	ldr	r2, [pc, #136]	; (8008734 <TIM_OC2_SetConfig+0xe4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_OC2_SetConfig+0x68>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a21      	ldr	r2, [pc, #132]	; (8008738 <TIM_OC2_SetConfig+0xe8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10d      	bne.n	80086d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a17      	ldr	r2, [pc, #92]	; (8008734 <TIM_OC2_SetConfig+0xe4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC2_SetConfig+0x94>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a16      	ldr	r2, [pc, #88]	; (8008738 <TIM_OC2_SetConfig+0xe8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d113      	bne.n	800870c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	40010000 	.word	0x40010000
 8008738:	40010400 	.word	0x40010400

0800873c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a21      	ldr	r2, [pc, #132]	; (800881c <TIM_OC3_SetConfig+0xe0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d003      	beq.n	80087a2 <TIM_OC3_SetConfig+0x66>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a20      	ldr	r2, [pc, #128]	; (8008820 <TIM_OC3_SetConfig+0xe4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d10d      	bne.n	80087be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a16      	ldr	r2, [pc, #88]	; (800881c <TIM_OC3_SetConfig+0xe0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d003      	beq.n	80087ce <TIM_OC3_SetConfig+0x92>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <TIM_OC3_SetConfig+0xe4>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d113      	bne.n	80087f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	621a      	str	r2, [r3, #32]
}
 8008810:	bf00      	nop
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	40010000 	.word	0x40010000
 8008820:	40010400 	.word	0x40010400

08008824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800886e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	031b      	lsls	r3, r3, #12
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <TIM_OC4_SetConfig+0xa4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d003      	beq.n	800888c <TIM_OC4_SetConfig+0x68>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_OC4_SetConfig+0xa8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d109      	bne.n	80088a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	019b      	lsls	r3, r3, #6
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	621a      	str	r2, [r3, #32]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40010400 	.word	0x40010400

080088d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 030a 	bic.w	r3, r3, #10
 800890c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	621a      	str	r2, [r3, #32]
}
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f023 0210 	bic.w	r2, r3, #16
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800896a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f043 0307 	orr.w	r3, r3, #7
 80089b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	609a      	str	r2, [r3, #8]
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	021a      	lsls	r2, r3, #8
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	431a      	orrs	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	609a      	str	r2, [r3, #8]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e05a      	b.n	8008ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a21      	ldr	r2, [pc, #132]	; (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d022      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a68:	d01d      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d018      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1b      	ldr	r2, [pc, #108]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1a      	ldr	r2, [pc, #104]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00e      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d10c      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40000400 	.word	0x40000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	40000c00 	.word	0x40000c00
 8008af0:	40010400 	.word	0x40010400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40001800 	.word	0x40001800

08008afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e03f      	b.n	8008b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fa f962 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2224      	movs	r2, #36	; 0x24
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fe81 	bl	8009848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695a      	ldr	r2, [r3, #20]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b08a      	sub	sp, #40	; 0x28
 8008b9a:	af02      	add	r7, sp, #8
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d17c      	bne.n	8008cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_UART_Transmit+0x2c>
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e075      	b.n	8008cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_UART_Transmit+0x3e>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e06e      	b.n	8008cb2 <HAL_UART_Transmit+0x11c>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2221      	movs	r2, #33	; 0x21
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bea:	f7fa fb63 	bl	80032b4 <HAL_GetTick>
 8008bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	88fa      	ldrh	r2, [r7, #6]
 8008bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	88fa      	ldrh	r2, [r7, #6]
 8008bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c04:	d108      	bne.n	8008c18 <HAL_UART_Transmit+0x82>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	e003      	b.n	8008c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c28:	e02a      	b.n	8008c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2200      	movs	r2, #0
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fbc1 	bl	80093bc <UART_WaitOnFlagUntilTimeout>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e036      	b.n	8008cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10b      	bne.n	8008c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	e007      	b.n	8008c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1cf      	bne.n	8008c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2200      	movs	r2, #0
 8008c92:	2140      	movs	r1, #64	; 0x40
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fb91 	bl	80093bc <UART_WaitOnFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e006      	b.n	8008cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	e000      	b.n	8008cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008cb0:	2302      	movs	r3, #2
  }
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b08a      	sub	sp, #40	; 0x28
 8008cbe:	af02      	add	r7, sp, #8
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	f040 808c 	bne.w	8008df4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_UART_Receive+0x2e>
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e084      	b.n	8008df6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Receive+0x40>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e07d      	b.n	8008df6 <HAL_UART_Receive+0x13c>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2222      	movs	r2, #34	; 0x22
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d16:	f7fa facd 	bl	80032b4 <HAL_GetTick>
 8008d1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	88fa      	ldrh	r2, [r7, #6]
 8008d26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d30:	d108      	bne.n	8008d44 <HAL_UART_Receive+0x8a>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	e003      	b.n	8008d4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008d54:	e043      	b.n	8008dde <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2120      	movs	r1, #32
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fb2b 	bl	80093bc <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e042      	b.n	8008df6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10c      	bne.n	8008d90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	e01f      	b.n	8008dd0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d98:	d007      	beq.n	8008daa <HAL_UART_Receive+0xf0>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <HAL_UART_Receive+0xfe>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e008      	b.n	8008dca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1b6      	bne.n	8008d56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d11d      	bne.n	8008e54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <HAL_UART_Receive_IT+0x26>
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e016      	b.n	8008e56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_UART_Receive_IT+0x38>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e00f      	b.n	8008e56 <HAL_UART_Receive_IT+0x58>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e44:	88fb      	ldrh	r3, [r7, #6]
 8008e46:	461a      	mov	r2, r3
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb24 	bl	8009498 <UART_Start_Receive_IT>
 8008e50:	4603      	mov	r3, r0
 8008e52:	e000      	b.n	8008e56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e54:	2302      	movs	r3, #2
  }
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b0ba      	sub	sp, #232	; 0xe8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10f      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x66>
 8008eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fc07 	bl	80096d2 <UART_Receive_IT>
      return;
 8008ec4:	e256      	b.n	8009374 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80de 	beq.w	800908c <HAL_UART_IRQHandler+0x22c>
 8008ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80d1 	beq.w	800908c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <HAL_UART_IRQHandler+0xae>
 8008ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f043 0201 	orr.w	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <HAL_UART_IRQHandler+0xd2>
 8008f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <HAL_UART_IRQHandler+0xf6>
 8008f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f043 0204 	orr.w	r2, r3, #4
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d011      	beq.n	8008f86 <HAL_UART_IRQHandler+0x126>
 8008f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d105      	bne.n	8008f7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d005      	beq.n	8008f86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f043 0208 	orr.w	r2, r3, #8
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 81ed 	beq.w	800936a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d008      	beq.n	8008fae <HAL_UART_IRQHandler+0x14e>
 8008f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb92 	bl	80096d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d103      	bne.n	8008fda <HAL_UART_IRQHandler+0x17a>
 8008fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d04f      	beq.n	800907a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa9a 	bl	8009514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b40      	cmp	r3, #64	; 0x40
 8008fec:	d141      	bne.n	8009072 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3314      	adds	r3, #20
 8009016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800901a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800901e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1d9      	bne.n	8008fee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d013      	beq.n	800906a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	4a7d      	ldr	r2, [pc, #500]	; (800923c <HAL_UART_IRQHandler+0x3dc>)
 8009048:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa fbac 	bl	80037ac <HAL_DMA_Abort_IT>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d016      	beq.n	8009088 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	e00e      	b.n	8009088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f990 	bl	8009390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	e00a      	b.n	8009088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f98c 	bl	8009390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009078:	e006      	b.n	8009088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f988 	bl	8009390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009086:	e170      	b.n	800936a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009088:	bf00      	nop
    return;
 800908a:	e16e      	b.n	800936a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	2b01      	cmp	r3, #1
 8009092:	f040 814a 	bne.w	800932a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 8143 	beq.w	800932a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80090a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a8:	f003 0310 	and.w	r3, r3, #16
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 813c 	beq.w	800932a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090b2:	2300      	movs	r3, #0
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	f040 80b4 	bne.w	8009240 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 8140 	beq.w	800936e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090f6:	429a      	cmp	r2, r3
 80090f8:	f080 8139 	bcs.w	800936e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009102:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910e:	f000 8088 	beq.w	8009222 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800912c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800913e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800914a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1d9      	bne.n	8009112 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3314      	adds	r3, #20
 8009164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800916e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3314      	adds	r3, #20
 800917e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800918a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e1      	bne.n	800915e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3314      	adds	r3, #20
 80091a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3314      	adds	r3, #20
 80091ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e3      	bne.n	800919a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f2:	f023 0310 	bic.w	r3, r3, #16
 80091f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	330c      	adds	r3, #12
 8009200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009204:	65ba      	str	r2, [r7, #88]	; 0x58
 8009206:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800920a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e3      	bne.n	80091e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	4618      	mov	r0, r3
 800921e:	f7fa fa55 	bl	80036cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800922a:	b29b      	uxth	r3, r3
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	b29b      	uxth	r3, r3
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f8b6 	bl	80093a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009238:	e099      	b.n	800936e <HAL_UART_IRQHandler+0x50e>
 800923a:	bf00      	nop
 800923c:	080095db 	.word	0x080095db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009248:	b29b      	uxth	r3, r3
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 808b 	beq.w	8009372 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800925c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8086 	beq.w	8009372 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330c      	adds	r3, #12
 800926c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800927c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	330c      	adds	r3, #12
 8009286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800928a:	647a      	str	r2, [r7, #68]	; 0x44
 800928c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3314      	adds	r3, #20
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	623b      	str	r3, [r7, #32]
   return(result);
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80092c2:	633a      	str	r2, [r7, #48]	; 0x30
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e3      	bne.n	800929e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0310 	bic.w	r3, r3, #16
 80092fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009308:	61fa      	str	r2, [r7, #28]
 800930a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69b9      	ldr	r1, [r7, #24]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	617b      	str	r3, [r7, #20]
   return(result);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e3      	bne.n	80092e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800931c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f83e 	bl	80093a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009328:	e023      	b.n	8009372 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800932a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <HAL_UART_IRQHandler+0x4ea>
 8009336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f95d 	bl	8009602 <UART_Transmit_IT>
    return;
 8009348:	e014      	b.n	8009374 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800934e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <HAL_UART_IRQHandler+0x514>
 8009356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d008      	beq.n	8009374 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f99d 	bl	80096a2 <UART_EndTransmit_IT>
    return;
 8009368:	e004      	b.n	8009374 <HAL_UART_IRQHandler+0x514>
    return;
 800936a:	bf00      	nop
 800936c:	e002      	b.n	8009374 <HAL_UART_IRQHandler+0x514>
      return;
 800936e:	bf00      	nop
 8009370:	e000      	b.n	8009374 <HAL_UART_IRQHandler+0x514>
      return;
 8009372:	bf00      	nop
  }
}
 8009374:	37e8      	adds	r7, #232	; 0xe8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop

0800937c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b090      	sub	sp, #64	; 0x40
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093cc:	e050      	b.n	8009470 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093d4:	d04c      	beq.n	8009470 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d007      	beq.n	80093ec <UART_WaitOnFlagUntilTimeout+0x30>
 80093dc:	f7f9 ff6a 	bl	80032b4 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d241      	bcs.n	8009470 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	330c      	adds	r3, #12
 80093f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	330c      	adds	r3, #12
 800940a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800940c:	637a      	str	r2, [r7, #52]	; 0x34
 800940e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e5      	bne.n	80093ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3314      	adds	r3, #20
 8009426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	613b      	str	r3, [r7, #16]
   return(result);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	63bb      	str	r3, [r7, #56]	; 0x38
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3314      	adds	r3, #20
 800943e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009440:	623a      	str	r2, [r7, #32]
 8009442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	69f9      	ldr	r1, [r7, #28]
 8009446:	6a3a      	ldr	r2, [r7, #32]
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	61bb      	str	r3, [r7, #24]
   return(result);
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e5      	bne.n	8009420 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2220      	movs	r2, #32
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e00f      	b.n	8009490 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4013      	ands	r3, r2
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	429a      	cmp	r2, r3
 800947e:	bf0c      	ite	eq
 8009480:	2301      	moveq	r3, #1
 8009482:	2300      	movne	r3, #0
 8009484:	b2db      	uxtb	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	429a      	cmp	r2, r3
 800948c:	d09f      	beq.n	80093ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3740      	adds	r7, #64	; 0x40
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	88fa      	ldrh	r2, [r7, #6]
 80094b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	88fa      	ldrh	r2, [r7, #6]
 80094b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2222      	movs	r2, #34	; 0x22
 80094c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d007      	beq.n	80094e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0201 	orr.w	r2, r2, #1
 80094f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0220 	orr.w	r2, r2, #32
 8009504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b095      	sub	sp, #84	; 0x54
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	330c      	adds	r3, #12
 8009522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009526:	e853 3f00 	ldrex	r3, [r3]
 800952a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	330c      	adds	r3, #12
 800953a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800953c:	643a      	str	r2, [r7, #64]	; 0x40
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009544:	e841 2300 	strex	r3, r2, [r1]
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1e5      	bne.n	800951c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3314      	adds	r3, #20
 8009556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f023 0301 	bic.w	r3, r3, #1
 8009566:	64bb      	str	r3, [r7, #72]	; 0x48
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3314      	adds	r3, #20
 800956e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e5      	bne.n	8009550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	2b01      	cmp	r3, #1
 800958a:	d119      	bne.n	80095c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	330c      	adds	r3, #12
 8009592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	60bb      	str	r3, [r7, #8]
   return(result);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f023 0310 	bic.w	r3, r3, #16
 80095a2:	647b      	str	r3, [r7, #68]	; 0x44
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095ac:	61ba      	str	r2, [r7, #24]
 80095ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6979      	ldr	r1, [r7, #20]
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095ce:	bf00      	nop
 80095d0:	3754      	adds	r7, #84	; 0x54
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7ff fecb 	bl	8009390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b21      	cmp	r3, #33	; 0x21
 8009614:	d13e      	bne.n	8009694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d114      	bne.n	800964a <UART_Transmit_IT+0x48>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d110      	bne.n	800964a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800963c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	1c9a      	adds	r2, r3, #2
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	621a      	str	r2, [r3, #32]
 8009648:	e008      	b.n	800965c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	1c59      	adds	r1, r3, #1
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6211      	str	r1, [r2, #32]
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29b      	uxth	r3, r3
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4619      	mov	r1, r3
 800966a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10f      	bne.n	8009690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800967e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800968e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009694:	2302      	movs	r3, #2
  }
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff fe5a 	bl	800937c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b08c      	sub	sp, #48	; 0x30
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b22      	cmp	r3, #34	; 0x22
 80096e4:	f040 80ab 	bne.w	800983e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f0:	d117      	bne.n	8009722 <UART_Receive_IT+0x50>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d113      	bne.n	8009722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	b29b      	uxth	r3, r3
 800970c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009710:	b29a      	uxth	r2, r3
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971a:	1c9a      	adds	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	629a      	str	r2, [r3, #40]	; 0x28
 8009720:	e026      	b.n	8009770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009734:	d007      	beq.n	8009746 <UART_Receive_IT+0x74>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <UART_Receive_IT+0x82>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d106      	bne.n	8009754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	e008      	b.n	8009766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009760:	b2da      	uxtb	r2, r3
 8009762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009774:	b29b      	uxth	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	b29b      	uxth	r3, r3
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	4619      	mov	r1, r3
 800977e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009780:	2b00      	cmp	r3, #0
 8009782:	d15a      	bne.n	800983a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0220 	bic.w	r2, r2, #32
 8009792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d135      	bne.n	8009830 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	613b      	str	r3, [r7, #16]
   return(result);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f023 0310 	bic.w	r3, r3, #16
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	623a      	str	r2, [r7, #32]
 80097ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	69f9      	ldr	r1, [r7, #28]
 80097f0:	6a3a      	ldr	r2, [r7, #32]
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b10      	cmp	r3, #16
 800980a:	d10a      	bne.n	8009822 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff fdbb 	bl	80093a4 <HAL_UARTEx_RxEventCallback>
 800982e:	e002      	b.n	8009836 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7f7 fc0d 	bl	8001050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	e002      	b.n	8009840 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	e000      	b.n	8009840 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800983e:	2302      	movs	r3, #2
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3730      	adds	r7, #48	; 0x30
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800984c:	b0c0      	sub	sp, #256	; 0x100
 800984e:	af00      	add	r7, sp, #0
 8009850:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009864:	68d9      	ldr	r1, [r3, #12]
 8009866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	ea40 0301 	orr.w	r3, r0, r1
 8009870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	431a      	orrs	r2, r3
 8009880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	431a      	orrs	r2, r3
 8009888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098a0:	f021 010c 	bic.w	r1, r1, #12
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098ae:	430b      	orrs	r3, r1
 80098b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c2:	6999      	ldr	r1, [r3, #24]
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	ea40 0301 	orr.w	r3, r0, r1
 80098ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b8f      	ldr	r3, [pc, #572]	; (8009b14 <UART_SetConfig+0x2cc>)
 80098d8:	429a      	cmp	r2, r3
 80098da:	d005      	beq.n	80098e8 <UART_SetConfig+0xa0>
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4b8d      	ldr	r3, [pc, #564]	; (8009b18 <UART_SetConfig+0x2d0>)
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d104      	bne.n	80098f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098e8:	f7fd fd80 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 80098ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80098f0:	e003      	b.n	80098fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098f2:	f7fd fd67 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80098f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009904:	f040 810c 	bne.w	8009b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800990c:	2200      	movs	r2, #0
 800990e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009912:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800991a:	4622      	mov	r2, r4
 800991c:	462b      	mov	r3, r5
 800991e:	1891      	adds	r1, r2, r2
 8009920:	65b9      	str	r1, [r7, #88]	; 0x58
 8009922:	415b      	adcs	r3, r3
 8009924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800992a:	4621      	mov	r1, r4
 800992c:	eb12 0801 	adds.w	r8, r2, r1
 8009930:	4629      	mov	r1, r5
 8009932:	eb43 0901 	adc.w	r9, r3, r1
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800994a:	4690      	mov	r8, r2
 800994c:	4699      	mov	r9, r3
 800994e:	4623      	mov	r3, r4
 8009950:	eb18 0303 	adds.w	r3, r8, r3
 8009954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009958:	462b      	mov	r3, r5
 800995a:	eb49 0303 	adc.w	r3, r9, r3
 800995e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800996e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009976:	460b      	mov	r3, r1
 8009978:	18db      	adds	r3, r3, r3
 800997a:	653b      	str	r3, [r7, #80]	; 0x50
 800997c:	4613      	mov	r3, r2
 800997e:	eb42 0303 	adc.w	r3, r2, r3
 8009982:	657b      	str	r3, [r7, #84]	; 0x54
 8009984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800998c:	f7f6 fc80 	bl	8000290 <__aeabi_uldivmod>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4b61      	ldr	r3, [pc, #388]	; (8009b1c <UART_SetConfig+0x2d4>)
 8009996:	fba3 2302 	umull	r2, r3, r3, r2
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	011c      	lsls	r4, r3, #4
 800999e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80099ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80099b0:	4642      	mov	r2, r8
 80099b2:	464b      	mov	r3, r9
 80099b4:	1891      	adds	r1, r2, r2
 80099b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80099b8:	415b      	adcs	r3, r3
 80099ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80099c0:	4641      	mov	r1, r8
 80099c2:	eb12 0a01 	adds.w	sl, r2, r1
 80099c6:	4649      	mov	r1, r9
 80099c8:	eb43 0b01 	adc.w	fp, r3, r1
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099e0:	4692      	mov	sl, r2
 80099e2:	469b      	mov	fp, r3
 80099e4:	4643      	mov	r3, r8
 80099e6:	eb1a 0303 	adds.w	r3, sl, r3
 80099ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099ee:	464b      	mov	r3, r9
 80099f0:	eb4b 0303 	adc.w	r3, fp, r3
 80099f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	18db      	adds	r3, r3, r3
 8009a10:	643b      	str	r3, [r7, #64]	; 0x40
 8009a12:	4613      	mov	r3, r2
 8009a14:	eb42 0303 	adc.w	r3, r2, r3
 8009a18:	647b      	str	r3, [r7, #68]	; 0x44
 8009a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a22:	f7f6 fc35 	bl	8000290 <__aeabi_uldivmod>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4b3b      	ldr	r3, [pc, #236]	; (8009b1c <UART_SetConfig+0x2d4>)
 8009a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	2264      	movs	r2, #100	; 0x64
 8009a36:	fb02 f303 	mul.w	r3, r2, r3
 8009a3a:	1acb      	subs	r3, r1, r3
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a42:	4b36      	ldr	r3, [pc, #216]	; (8009b1c <UART_SetConfig+0x2d4>)
 8009a44:	fba3 2302 	umull	r2, r3, r3, r2
 8009a48:	095b      	lsrs	r3, r3, #5
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a50:	441c      	add	r4, r3
 8009a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a64:	4642      	mov	r2, r8
 8009a66:	464b      	mov	r3, r9
 8009a68:	1891      	adds	r1, r2, r2
 8009a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a6c:	415b      	adcs	r3, r3
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a74:	4641      	mov	r1, r8
 8009a76:	1851      	adds	r1, r2, r1
 8009a78:	6339      	str	r1, [r7, #48]	; 0x30
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	414b      	adcs	r3, r1
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	f04f 0300 	mov.w	r3, #0
 8009a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	00cb      	lsls	r3, r1, #3
 8009a90:	4651      	mov	r1, sl
 8009a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a96:	4651      	mov	r1, sl
 8009a98:	00ca      	lsls	r2, r1, #3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	189b      	adds	r3, r3, r2
 8009aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	460a      	mov	r2, r1
 8009aac:	eb42 0303 	adc.w	r3, r2, r3
 8009ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ac8:	460b      	mov	r3, r1
 8009aca:	18db      	adds	r3, r3, r3
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ace:	4613      	mov	r3, r2
 8009ad0:	eb42 0303 	adc.w	r3, r2, r3
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ade:	f7f6 fbd7 	bl	8000290 <__aeabi_uldivmod>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <UART_SetConfig+0x2d4>)
 8009ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8009aec:	095b      	lsrs	r3, r3, #5
 8009aee:	2164      	movs	r1, #100	; 0x64
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	3332      	adds	r3, #50	; 0x32
 8009afa:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <UART_SetConfig+0x2d4>)
 8009afc:	fba2 2303 	umull	r2, r3, r2, r3
 8009b00:	095b      	lsrs	r3, r3, #5
 8009b02:	f003 0207 	and.w	r2, r3, #7
 8009b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4422      	add	r2, r4
 8009b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b10:	e105      	b.n	8009d1e <UART_SetConfig+0x4d6>
 8009b12:	bf00      	nop
 8009b14:	40011000 	.word	0x40011000
 8009b18:	40011400 	.word	0x40011400
 8009b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b32:	4642      	mov	r2, r8
 8009b34:	464b      	mov	r3, r9
 8009b36:	1891      	adds	r1, r2, r2
 8009b38:	6239      	str	r1, [r7, #32]
 8009b3a:	415b      	adcs	r3, r3
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b42:	4641      	mov	r1, r8
 8009b44:	1854      	adds	r4, r2, r1
 8009b46:	4649      	mov	r1, r9
 8009b48:	eb43 0501 	adc.w	r5, r3, r1
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	00eb      	lsls	r3, r5, #3
 8009b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b5a:	00e2      	lsls	r2, r4, #3
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	461d      	mov	r5, r3
 8009b60:	4643      	mov	r3, r8
 8009b62:	18e3      	adds	r3, r4, r3
 8009b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b68:	464b      	mov	r3, r9
 8009b6a:	eb45 0303 	adc.w	r3, r5, r3
 8009b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	f04f 0300 	mov.w	r3, #0
 8009b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b8e:	4629      	mov	r1, r5
 8009b90:	008b      	lsls	r3, r1, #2
 8009b92:	4621      	mov	r1, r4
 8009b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b98:	4621      	mov	r1, r4
 8009b9a:	008a      	lsls	r2, r1, #2
 8009b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ba0:	f7f6 fb76 	bl	8000290 <__aeabi_uldivmod>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4b60      	ldr	r3, [pc, #384]	; (8009d2c <UART_SetConfig+0x4e4>)
 8009baa:	fba3 2302 	umull	r2, r3, r3, r2
 8009bae:	095b      	lsrs	r3, r3, #5
 8009bb0:	011c      	lsls	r4, r3, #4
 8009bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	1891      	adds	r1, r2, r2
 8009bca:	61b9      	str	r1, [r7, #24]
 8009bcc:	415b      	adcs	r3, r3
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bd4:	4641      	mov	r1, r8
 8009bd6:	1851      	adds	r1, r2, r1
 8009bd8:	6139      	str	r1, [r7, #16]
 8009bda:	4649      	mov	r1, r9
 8009bdc:	414b      	adcs	r3, r1
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	f04f 0300 	mov.w	r3, #0
 8009be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bec:	4659      	mov	r1, fp
 8009bee:	00cb      	lsls	r3, r1, #3
 8009bf0:	4651      	mov	r1, sl
 8009bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bf6:	4651      	mov	r1, sl
 8009bf8:	00ca      	lsls	r2, r1, #3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4642      	mov	r2, r8
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c08:	464b      	mov	r3, r9
 8009c0a:	460a      	mov	r2, r1
 8009c0c:	eb42 0303 	adc.w	r3, r2, r3
 8009c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c20:	f04f 0200 	mov.w	r2, #0
 8009c24:	f04f 0300 	mov.w	r3, #0
 8009c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	008b      	lsls	r3, r1, #2
 8009c30:	4641      	mov	r1, r8
 8009c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c36:	4641      	mov	r1, r8
 8009c38:	008a      	lsls	r2, r1, #2
 8009c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c3e:	f7f6 fb27 	bl	8000290 <__aeabi_uldivmod>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4b39      	ldr	r3, [pc, #228]	; (8009d2c <UART_SetConfig+0x4e4>)
 8009c48:	fba3 1302 	umull	r1, r3, r3, r2
 8009c4c:	095b      	lsrs	r3, r3, #5
 8009c4e:	2164      	movs	r1, #100	; 0x64
 8009c50:	fb01 f303 	mul.w	r3, r1, r3
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	3332      	adds	r3, #50	; 0x32
 8009c5a:	4a34      	ldr	r2, [pc, #208]	; (8009d2c <UART_SetConfig+0x4e4>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c66:	441c      	add	r4, r3
 8009c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c70:	677a      	str	r2, [r7, #116]	; 0x74
 8009c72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c76:	4642      	mov	r2, r8
 8009c78:	464b      	mov	r3, r9
 8009c7a:	1891      	adds	r1, r2, r2
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	415b      	adcs	r3, r3
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c86:	4641      	mov	r1, r8
 8009c88:	1851      	adds	r1, r2, r1
 8009c8a:	6039      	str	r1, [r7, #0]
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	414b      	adcs	r3, r1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c9e:	4659      	mov	r1, fp
 8009ca0:	00cb      	lsls	r3, r1, #3
 8009ca2:	4651      	mov	r1, sl
 8009ca4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ca8:	4651      	mov	r1, sl
 8009caa:	00ca      	lsls	r2, r1, #3
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	189b      	adds	r3, r3, r2
 8009cb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cb8:	464b      	mov	r3, r9
 8009cba:	460a      	mov	r2, r1
 8009cbc:	eb42 0303 	adc.w	r3, r2, r3
 8009cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	663b      	str	r3, [r7, #96]	; 0x60
 8009ccc:	667a      	str	r2, [r7, #100]	; 0x64
 8009cce:	f04f 0200 	mov.w	r2, #0
 8009cd2:	f04f 0300 	mov.w	r3, #0
 8009cd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009cda:	4649      	mov	r1, r9
 8009cdc:	008b      	lsls	r3, r1, #2
 8009cde:	4641      	mov	r1, r8
 8009ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	008a      	lsls	r2, r1, #2
 8009ce8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cec:	f7f6 fad0 	bl	8000290 <__aeabi_uldivmod>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <UART_SetConfig+0x4e4>)
 8009cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	2164      	movs	r1, #100	; 0x64
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	011b      	lsls	r3, r3, #4
 8009d06:	3332      	adds	r3, #50	; 0x32
 8009d08:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <UART_SetConfig+0x4e4>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	f003 020f 	and.w	r2, r3, #15
 8009d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4422      	add	r2, r4
 8009d1c:	609a      	str	r2, [r3, #8]
}
 8009d1e:	bf00      	nop
 8009d20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d24:	46bd      	mov	sp, r7
 8009d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d2a:	bf00      	nop
 8009d2c:	51eb851f 	.word	0x51eb851f

08009d30 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d123      	bne.n	8009d8a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009d4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	6851      	ldr	r1, [r2, #4]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	6892      	ldr	r2, [r2, #8]
 8009d56:	4311      	orrs	r1, r2
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	68d2      	ldr	r2, [r2, #12]
 8009d5c:	4311      	orrs	r1, r2
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	6912      	ldr	r2, [r2, #16]
 8009d62:	4311      	orrs	r1, r2
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	6952      	ldr	r2, [r2, #20]
 8009d68:	4311      	orrs	r1, r2
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	6992      	ldr	r2, [r2, #24]
 8009d6e:	4311      	orrs	r1, r2
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	69d2      	ldr	r2, [r2, #28]
 8009d74:	4311      	orrs	r1, r2
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	6a12      	ldr	r2, [r2, #32]
 8009d7a:	4311      	orrs	r1, r2
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d80:	430a      	orrs	r2, r1
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	e028      	b.n	8009ddc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	69d9      	ldr	r1, [r3, #28]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	4319      	orrs	r1, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	430b      	orrs	r3, r1
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009db0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	6851      	ldr	r1, [r2, #4]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	6892      	ldr	r2, [r2, #8]
 8009dbc:	4311      	orrs	r1, r2
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	68d2      	ldr	r2, [r2, #12]
 8009dc2:	4311      	orrs	r1, r2
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	6912      	ldr	r2, [r2, #16]
 8009dc8:	4311      	orrs	r1, r2
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	6952      	ldr	r2, [r2, #20]
 8009dce:	4311      	orrs	r1, r2
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	6992      	ldr	r2, [r2, #24]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d128      	bne.n	8009e4e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	1e59      	subs	r1, r3, #1
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4319      	orrs	r1, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	4319      	orrs	r1, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	031b      	lsls	r3, r3, #12
 8009e26:	4319      	orrs	r1, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	4319      	orrs	r1, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	051b      	lsls	r3, r3, #20
 8009e3a:	4319      	orrs	r1, r3
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	061b      	lsls	r3, r3, #24
 8009e44:	430b      	orrs	r3, r1
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	609a      	str	r2, [r3, #8]
 8009e4c:	e02f      	b.n	8009eae <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	68d2      	ldr	r2, [r2, #12]
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	0311      	lsls	r1, r2, #12
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	6952      	ldr	r2, [r2, #20]
 8009e66:	3a01      	subs	r2, #1
 8009e68:	0512      	lsls	r2, r2, #20
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	1e59      	subs	r1, r3, #1
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4319      	orrs	r1, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	021b      	lsls	r3, r3, #8
 8009e92:	4319      	orrs	r1, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	4319      	orrs	r1, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	061b      	lsls	r3, r3, #24
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	f107 001c 	add.w	r0, r7, #28
 8009eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d122      	bne.n	8009f1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d105      	bne.n	8009f0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9c0 	bl	800a294 <USB_CoreReset>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
 8009f18:	e01a      	b.n	8009f50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f9b4 	bl	800a294 <USB_CoreReset>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	639a      	str	r2, [r3, #56]	; 0x38
 8009f42:	e005      	b.n	8009f50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d10b      	bne.n	8009f6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f043 0206 	orr.w	r2, r3, #6
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f043 0220 	orr.w	r2, r3, #32
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f7a:	b004      	add	sp, #16
 8009f7c:	4770      	bx	lr

08009f7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f043 0201 	orr.w	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f023 0201 	bic.w	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d115      	bne.n	800a010 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7f9 f96b 	bl	80032cc <HAL_Delay>
      ms++;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f93a 	bl	800a276 <USB_GetMode>
 800a002:	4603      	mov	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d01e      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b31      	cmp	r3, #49	; 0x31
 800a00c:	d9f0      	bls.n	8009ff0 <USB_SetCurrentMode+0x2e>
 800a00e:	e01a      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d115      	bne.n	800a042 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a022:	2001      	movs	r0, #1
 800a024:	f7f9 f952 	bl	80032cc <HAL_Delay>
      ms++;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f921 	bl	800a276 <USB_GetMode>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b31      	cmp	r3, #49	; 0x31
 800a03e:	d9f0      	bls.n	800a022 <USB_SetCurrentMode+0x60>
 800a040:	e001      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e005      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b32      	cmp	r3, #50	; 0x32
 800a04a:	d101      	bne.n	800a050 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e000      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <USB_FlushTxFifo+0x64>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d901      	bls.n	800a07c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e01b      	b.n	800a0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	daf2      	bge.n	800a06a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	019b      	lsls	r3, r3, #6
 800a08c:	f043 0220 	orr.w	r2, r3, #32
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3301      	adds	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <USB_FlushTxFifo+0x64>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d901      	bls.n	800a0a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e006      	b.n	800a0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d0f0      	beq.n	800a094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	00030d40 	.word	0x00030d40

0800a0c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4a11      	ldr	r2, [pc, #68]	; (800a120 <USB_FlushRxFifo+0x5c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d901      	bls.n	800a0e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e018      	b.n	800a114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	daf2      	bge.n	800a0d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2210      	movs	r2, #16
 800a0f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a08      	ldr	r2, [pc, #32]	; (800a120 <USB_FlushRxFifo+0x5c>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d901      	bls.n	800a106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e006      	b.n	800a114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f003 0310 	and.w	r3, r3, #16
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d0f0      	beq.n	800a0f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	00030d40 	.word	0x00030d40

0800a124 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a124:	b480      	push	{r7}
 800a126:	b089      	sub	sp, #36	; 0x24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	460b      	mov	r3, r1
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	4613      	mov	r3, r2
 800a138:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	d123      	bne.n	800a192 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a14a:	88bb      	ldrh	r3, [r7, #4]
 800a14c:	3303      	adds	r3, #3
 800a14e:	089b      	lsrs	r3, r3, #2
 800a150:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	e018      	b.n	800a18a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	031a      	lsls	r2, r3, #12
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a164:	461a      	mov	r2, r3
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3301      	adds	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	3301      	adds	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	3301      	adds	r3, #1
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d3e2      	bcc.n	800a158 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3724      	adds	r7, #36	; 0x24
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b08b      	sub	sp, #44	; 0x2c
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	089b      	lsrs	r3, r3, #2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	e014      	b.n	800a1f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	3301      	adds	r3, #1
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	623b      	str	r3, [r7, #32]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3e6      	bcc.n	800a1cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1fe:	8bfb      	ldrh	r3, [r7, #30]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01e      	beq.n	800a242 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20e:	461a      	mov	r2, r3
 800a210:	f107 0310 	add.w	r3, r7, #16
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	b2da      	uxtb	r2, r3
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	701a      	strb	r2, [r3, #0]
      i++;
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	3301      	adds	r3, #1
 800a22e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	3301      	adds	r3, #1
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a236:	8bfb      	ldrh	r3, [r7, #30]
 800a238:	3b01      	subs	r3, #1
 800a23a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a23c:	8bfb      	ldrh	r3, [r7, #30]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ea      	bne.n	800a218 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a244:	4618      	mov	r0, r3
 800a246:	372c      	adds	r7, #44	; 0x2c
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4013      	ands	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a268:	68fb      	ldr	r3, [r7, #12]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	f003 0301 	and.w	r3, r3, #1
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4a13      	ldr	r2, [pc, #76]	; (800a2f8 <USB_CoreReset+0x64>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d901      	bls.n	800a2b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e01b      	b.n	800a2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	daf2      	bge.n	800a2a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f043 0201 	orr.w	r2, r3, #1
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <USB_CoreReset+0x64>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d901      	bls.n	800a2dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e006      	b.n	800a2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d0f0      	beq.n	800a2ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	00030d40 	.word	0x00030d40

0800a2fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a30a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a31c:	461a      	mov	r2, r3
 800a31e:	2300      	movs	r3, #0
 800a320:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d018      	beq.n	800a384 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d10a      	bne.n	800a36e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a366:	f043 0304 	orr.w	r3, r3, #4
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	e014      	b.n	800a398 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a37c:	f023 0304 	bic.w	r3, r3, #4
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	e009      	b.n	800a398 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a392:	f023 0304 	bic.w	r3, r3, #4
 800a396:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a398:	2110      	movs	r1, #16
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fe5e 	bl	800a05c <USB_FlushTxFifo>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fe8a 	bl	800a0c4 <USB_FlushRxFifo>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	e015      	b.n	800a3ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d3e5      	bcc.n	800a3c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a400:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a414:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a13      	ldr	r2, [pc, #76]	; (800a468 <USB_HostInit+0x16c>)
 800a41a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a13      	ldr	r2, [pc, #76]	; (800a46c <USB_HostInit+0x170>)
 800a420:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a424:	e009      	b.n	800a43a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2280      	movs	r2, #128	; 0x80
 800a42a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <USB_HostInit+0x174>)
 800a430:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a0f      	ldr	r2, [pc, #60]	; (800a474 <USB_HostInit+0x178>)
 800a436:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d105      	bne.n	800a44c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	f043 0210 	orr.w	r2, r3, #16
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699a      	ldr	r2, [r3, #24]
 800a450:	4b09      	ldr	r3, [pc, #36]	; (800a478 <USB_HostInit+0x17c>)
 800a452:	4313      	orrs	r3, r2
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a458:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a464:	b004      	add	sp, #16
 800a466:	4770      	bx	lr
 800a468:	01000200 	.word	0x01000200
 800a46c:	00e00300 	.word	0x00e00300
 800a470:	00600080 	.word	0x00600080
 800a474:	004000e0 	.word	0x004000e0
 800a478:	a3200008 	.word	0xa3200008

0800a47c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a49a:	f023 0303 	bic.w	r3, r3, #3
 800a49e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	68f9      	ldr	r1, [r7, #12]
 800a4b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a4ca:	6053      	str	r3, [r2, #4]
 800a4cc:	e009      	b.n	800a4e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d106      	bne.n	800a4e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f241 7370 	movw	r3, #6000	; 0x1770
 800a4e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a510:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a520:	2064      	movs	r0, #100	; 0x64
 800a522:	f7f8 fed3 	bl	80032cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a52e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a532:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a534:	200a      	movs	r0, #10
 800a536:	f7f8 fec9 	bl	80032cc <HAL_Delay>

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a568:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <USB_DriveVbus+0x44>
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d106      	bne.n	800a588 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a586:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a592:	d109      	bne.n	800a5a8 <USB_DriveVbus+0x64>
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b085      	sub	sp, #20
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	0c5b      	lsrs	r3, r3, #17
 800a5d4:	f003 0303 	and.w	r3, r3, #3
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	b29b      	uxth	r3, r3
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4603      	mov	r3, r0
 800a618:	70fb      	strb	r3, [r7, #3]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70bb      	strb	r3, [r7, #2]
 800a61e:	4613      	mov	r3, r2
 800a620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	4413      	add	r3, r2
 800a632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a636:	461a      	mov	r2, r3
 800a638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a63c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a63e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a642:	2b03      	cmp	r3, #3
 800a644:	d87e      	bhi.n	800a744 <USB_HC_Init+0x13c>
 800a646:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USB_HC_Init+0x44>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a707 	.word	0x0800a707
 800a654:	0800a65d 	.word	0x0800a65d
 800a658:	0800a6c9 	.word	0x0800a6c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	4413      	add	r3, r2
 800a664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a668:	461a      	mov	r2, r3
 800a66a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a66e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a674:	2b00      	cmp	r3, #0
 800a676:	da10      	bge.n	800a69a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	78fa      	ldrb	r2, [r7, #3]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a696:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a698:	e057      	b.n	800a74a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d051      	beq.n	800a74a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	78fa      	ldrb	r2, [r7, #3]
 800a6b6:	0151      	lsls	r1, r2, #5
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a6c4:	60d3      	str	r3, [r2, #12]
      break;
 800a6c6:	e040      	b.n	800a74a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f240 639d 	movw	r3, #1693	; 0x69d
 800a6da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	da34      	bge.n	800a74e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	78fa      	ldrb	r2, [r7, #3]
 800a6f4:	0151      	lsls	r1, r2, #5
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	440a      	add	r2, r1
 800a6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a702:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a704:	e023      	b.n	800a74e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a712:	461a      	mov	r2, r3
 800a714:	f240 2325 	movw	r3, #549	; 0x225
 800a718:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a71a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	da17      	bge.n	800a752 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	78fa      	ldrb	r2, [r7, #3]
 800a732:	0151      	lsls	r1, r2, #5
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	440a      	add	r2, r1
 800a738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a73c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a740:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a742:	e006      	b.n	800a752 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	77fb      	strb	r3, [r7, #31]
      break;
 800a748:	e004      	b.n	800a754 <USB_HC_Init+0x14c>
      break;
 800a74a:	bf00      	nop
 800a74c:	e002      	b.n	800a754 <USB_HC_Init+0x14c>
      break;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <USB_HC_Init+0x14c>
      break;
 800a752:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	0151      	lsls	r1, r2, #5
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	440a      	add	r2, r1
 800a76a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a77a:	699a      	ldr	r2, [r3, #24]
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	2101      	movs	r1, #1
 800a784:	fa01 f303 	lsl.w	r3, r1, r3
 800a788:	6939      	ldr	r1, [r7, #16]
 800a78a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a78e:	4313      	orrs	r3, r2
 800a790:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a79e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	da03      	bge.n	800a7ae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a7a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7aa:	61bb      	str	r3, [r7, #24]
 800a7ac:	e001      	b.n	800a7b2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff feff 	bl	800a5b6 <USB_GetHostSpeed>
 800a7b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a7ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d106      	bne.n	800a7d0 <USB_HC_Init+0x1c8>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d003      	beq.n	800a7d0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a7c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	e001      	b.n	800a7d4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7d4:	787b      	ldrb	r3, [r7, #1]
 800a7d6:	059b      	lsls	r3, r3, #22
 800a7d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7dc:	78bb      	ldrb	r3, [r7, #2]
 800a7de:	02db      	lsls	r3, r3, #11
 800a7e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a7ea:	049b      	lsls	r3, r3, #18
 800a7ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a7f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a7f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a7f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a7f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	0159      	lsls	r1, r3, #5
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	440b      	add	r3, r1
 800a806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a80a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a810:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a812:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a816:	2b03      	cmp	r3, #3
 800a818:	d003      	beq.n	800a822 <USB_HC_Init+0x21a>
 800a81a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d10f      	bne.n	800a842 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	440a      	add	r2, r1
 800a838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a83c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a840:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a842:	7ffb      	ldrb	r3, [r7, #31]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08c      	sub	sp, #48	; 0x30
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a864:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a868:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a872:	2b00      	cmp	r3, #0
 800a874:	d02d      	beq.n	800a8d2 <USB_HC_StartXfer+0x86>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	791b      	ldrb	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d129      	bne.n	800a8d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d117      	bne.n	800a8b4 <USB_HC_StartXfer+0x68>
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	79db      	ldrb	r3, [r3, #7]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <USB_HC_StartXfer+0x48>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	79db      	ldrb	r3, [r3, #7]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d10f      	bne.n	800a8b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	0151      	lsls	r1, r2, #5
 800a8a6:	6a3a      	ldr	r2, [r7, #32]
 800a8a8:	440a      	add	r2, r1
 800a8aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <USB_HC_StartXfer+0x86>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	795b      	ldrb	r3, [r3, #5]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d107      	bne.n	800a8d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fa0f 	bl	800acec <USB_DoPing>
      return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e0f8      	b.n	800aac4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d018      	beq.n	800a90c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	8912      	ldrh	r2, [r2, #8]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	8912      	ldrh	r2, [r2, #8]
 800a8ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a8f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8f2:	8b7b      	ldrh	r3, [r7, #26]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d90b      	bls.n	800a910 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a8f8:	8b7b      	ldrh	r3, [r7, #26]
 800a8fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a8fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	8912      	ldrh	r2, [r2, #8]
 800a902:	fb03 f202 	mul.w	r2, r3, r2
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	611a      	str	r2, [r3, #16]
 800a90a:	e001      	b.n	800a910 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a90c:	2301      	movs	r3, #1
 800a90e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	78db      	ldrb	r3, [r3, #3]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	8912      	ldrh	r2, [r2, #8]
 800a91e:	fb03 f202 	mul.w	r2, r3, r2
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	611a      	str	r2, [r3, #16]
 800a926:	e003      	b.n	800a930 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	695a      	ldr	r2, [r3, #20]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a93a:	04d9      	lsls	r1, r3, #19
 800a93c:	4b63      	ldr	r3, [pc, #396]	; (800aacc <USB_HC_StartXfer+0x280>)
 800a93e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a940:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	7a9b      	ldrb	r3, [r3, #10]
 800a946:	075b      	lsls	r3, r3, #29
 800a948:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a94c:	69f9      	ldr	r1, [r7, #28]
 800a94e:	0148      	lsls	r0, r1, #5
 800a950:	6a39      	ldr	r1, [r7, #32]
 800a952:	4401      	add	r1, r0
 800a954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a958:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a95a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	68d9      	ldr	r1, [r3, #12]
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a972:	460a      	mov	r2, r1
 800a974:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	bf0c      	ite	eq
 800a986:	2301      	moveq	r3, #1
 800a988:	2300      	movne	r3, #0
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	4413      	add	r3, r2
 800a996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	7e7b      	ldrb	r3, [r7, #25]
 800a9be:	075b      	lsls	r3, r3, #29
 800a9c0:	69f9      	ldr	r1, [r7, #28]
 800a9c2:	0148      	lsls	r0, r1, #5
 800a9c4:	6a39      	ldr	r1, [r7, #32]
 800a9c6:	4401      	add	r1, r0
 800a9c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	78db      	ldrb	r3, [r3, #3]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	e003      	b.n	800aa02 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa00:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa08:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa16:	461a      	mov	r2, r3
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e04e      	b.n	800aac4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	78db      	ldrb	r3, [r3, #3]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d149      	bne.n	800aac2 <USB_HC_StartXfer+0x276>
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d045      	beq.n	800aac2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	79db      	ldrb	r3, [r3, #7]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d830      	bhi.n	800aaa0 <USB_HC_StartXfer+0x254>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <USB_HC_StartXfer+0x1f8>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa55 	.word	0x0800aa55
 800aa48:	0800aa79 	.word	0x0800aa79
 800aa4c:	0800aa55 	.word	0x0800aa55
 800aa50:	0800aa79 	.word	0x0800aa79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	3303      	adds	r3, #3
 800aa5a:	089b      	lsrs	r3, r3, #2
 800aa5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aa5e:	8afa      	ldrh	r2, [r7, #22]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d91c      	bls.n	800aaa4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	f043 0220 	orr.w	r2, r3, #32
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	619a      	str	r2, [r3, #24]
        }
        break;
 800aa76:	e015      	b.n	800aaa4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	3303      	adds	r3, #3
 800aa7e:	089b      	lsrs	r3, r3, #2
 800aa80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aa82:	8afa      	ldrh	r2, [r7, #22]
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d90a      	bls.n	800aaa8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	619a      	str	r2, [r3, #24]
        }
        break;
 800aa9e:	e003      	b.n	800aaa8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800aaa0:	bf00      	nop
 800aaa2:	e002      	b.n	800aaaa <USB_HC_StartXfer+0x25e>
        break;
 800aaa4:	bf00      	nop
 800aaa6:	e000      	b.n	800aaaa <USB_HC_StartXfer+0x25e>
        break;
 800aaa8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68d9      	ldr	r1, [r3, #12]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	785a      	ldrb	r2, [r3, #1]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	2000      	movs	r0, #0
 800aaba:	9000      	str	r0, [sp, #0]
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7ff fb31 	bl	800a124 <USB_WritePacket>
  }

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3728      	adds	r7, #40	; 0x28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	1ff80000 	.word	0x1ff80000

0800aad0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	b29b      	uxth	r3, r3
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b089      	sub	sp, #36	; 0x24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	460b      	mov	r3, r1
 800aafc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	0c9b      	lsrs	r3, r3, #18
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	0fdb      	lsrs	r3, r3, #31
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d104      	bne.n	800ab4c <USB_HC_Halt+0x5a>
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e0c8      	b.n	800acde <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <USB_HC_Halt+0x66>
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d163      	bne.n	800ac20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f003 0320 	and.w	r3, r3, #32
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 80ab 	bne.w	800acdc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d133      	bne.n	800abfa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	0151      	lsls	r1, r2, #5
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	440a      	add	r2, r1
 800aba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abb0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abd0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abde:	d81d      	bhi.n	800ac1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abf6:	d0ec      	beq.n	800abd2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800abf8:	e070      	b.n	800acdc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	0151      	lsls	r1, r2, #5
 800ac0c:	69fa      	ldr	r2, [r7, #28]
 800ac0e:	440a      	add	r2, r1
 800ac10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac1a:	e05f      	b.n	800acdc <USB_HC_Halt+0x1ea>
            break;
 800ac1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac1e:	e05d      	b.n	800acdc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	0151      	lsls	r1, r2, #5
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	440a      	add	r2, r1
 800ac36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d133      	bne.n	800acb8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	0151      	lsls	r1, r2, #5
 800ac62:	69fa      	ldr	r2, [r7, #28]
 800ac64:	440a      	add	r2, r1
 800ac66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac9c:	d81d      	bhi.n	800acda <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acb4:	d0ec      	beq.n	800ac90 <USB_HC_Halt+0x19e>
 800acb6:	e011      	b.n	800acdc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	0151      	lsls	r1, r2, #5
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	440a      	add	r2, r1
 800acce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	e000      	b.n	800acdc <USB_HC_Halt+0x1ea>
          break;
 800acda:	bf00      	nop
    }
  }

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ad00:	2301      	movs	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	04da      	lsls	r2, r3, #19
 800ad08:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <USB_DoPing+0x74>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	0151      	lsls	r1, r2, #5
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	440a      	add	r2, r1
 800ad14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	1ff80000 	.word	0x1ff80000

0800ad64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff f911 	bl	8009fa0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad7e:	2110      	movs	r1, #16
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff f96b 	bl	800a05c <USB_FlushTxFifo>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff f997 	bl	800a0c4 <USB_FlushRxFifo>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ada0:	2300      	movs	r3, #0
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	e01f      	b.n	800ade6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	4413      	add	r3, r2
 800adae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	461a      	mov	r2, r3
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	3301      	adds	r3, #1
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b0f      	cmp	r3, #15
 800adea:	d9dc      	bls.n	800ada6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800adec:	2300      	movs	r3, #0
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	e034      	b.n	800ae5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae26:	461a      	mov	r2, r3
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae38:	d80c      	bhi.n	800ae54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae50:	d0ec      	beq.n	800ae2c <USB_StopHost+0xc8>
 800ae52:	e000      	b.n	800ae56 <USB_StopHost+0xf2>
        break;
 800ae54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	61bb      	str	r3, [r7, #24]
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	2b0f      	cmp	r3, #15
 800ae60:	d9c7      	bls.n	800adf2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae68:	461a      	mov	r2, r3
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff f880 	bl	8009f7e <USB_EnableGlobalInt>

  return ret;
 800ae7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3720      	adds	r7, #32
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800ae8c:	4904      	ldr	r1, [pc, #16]	; (800aea0 <MX_FATFS_Init+0x18>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <MX_FATFS_Init+0x1c>)
 800ae90:	f003 fddc 	bl	800ea4c <FATFS_LinkDriver>
 800ae94:	4603      	mov	r3, r0
 800ae96:	461a      	mov	r2, r3
 800ae98:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <MX_FATFS_Init+0x20>)
 800ae9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae9c:	bf00      	nop
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20003380 	.word	0x20003380
 800aea4:	08010d94 	.word	0x08010d94
 800aea8:	2000337c 	.word	0x2000337c

0800aeac <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	4619      	mov	r1, r3
 800aed6:	4808      	ldr	r0, [pc, #32]	; (800aef8 <USBH_status+0x34>)
 800aed8:	f000 fe32 	bl	800bb40 <USBH_MSC_UnitIsReady>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <USBH_status+0x24>
  {
    res = RES_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	73fb      	strb	r3, [r7, #15]
 800aee6:	e001      	b.n	800aeec <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	200035e8 	.word	0x200035e8

0800aefc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b094      	sub	sp, #80	; 0x50
 800af00:	af02      	add	r7, sp, #8
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800af12:	7bf9      	ldrb	r1, [r7, #15]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4813      	ldr	r0, [pc, #76]	; (800af6c <USBH_read+0x70>)
 800af1e:	f000 fe59 	bl	800bbd4 <USBH_MSC_Read>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d103      	bne.n	800af30 <USBH_read+0x34>
  {
    res = RES_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af2e:	e017      	b.n	800af60 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800af30:	f107 0210 	add.w	r2, r7, #16
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	4619      	mov	r1, r3
 800af38:	480c      	ldr	r0, [pc, #48]	; (800af6c <USBH_read+0x70>)
 800af3a:	f000 fe27 	bl	800bb8c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800af3e:	7f7b      	ldrb	r3, [r7, #29]
 800af40:	2b3a      	cmp	r3, #58	; 0x3a
 800af42:	d005      	beq.n	800af50 <USBH_read+0x54>
 800af44:	2b3a      	cmp	r3, #58	; 0x3a
 800af46:	dc07      	bgt.n	800af58 <USBH_read+0x5c>
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d001      	beq.n	800af50 <USBH_read+0x54>
 800af4c:	2b28      	cmp	r3, #40	; 0x28
 800af4e:	d103      	bne.n	800af58 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800af50:	2303      	movs	r3, #3
 800af52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800af56:	e003      	b.n	800af60 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800af5e:	bf00      	nop
    }
  }

  return res;
 800af60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800af64:	4618      	mov	r0, r3
 800af66:	3748      	adds	r7, #72	; 0x48
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	200035e8 	.word	0x200035e8

0800af70 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b094      	sub	sp, #80	; 0x50
 800af74:	af02      	add	r7, sp, #8
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800af86:	7bf9      	ldrb	r1, [r7, #15]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4817      	ldr	r0, [pc, #92]	; (800aff0 <USBH_write+0x80>)
 800af92:	f000 fe88 	bl	800bca6 <USBH_MSC_Write>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <USBH_write+0x34>
  {
    res = RES_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800afa2:	e01f      	b.n	800afe4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800afa4:	f107 0210 	add.w	r2, r7, #16
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	4619      	mov	r1, r3
 800afac:	4810      	ldr	r0, [pc, #64]	; (800aff0 <USBH_write+0x80>)
 800afae:	f000 fded 	bl	800bb8c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800afb2:	7f7b      	ldrb	r3, [r7, #29]
 800afb4:	2b3a      	cmp	r3, #58	; 0x3a
 800afb6:	d00d      	beq.n	800afd4 <USBH_write+0x64>
 800afb8:	2b3a      	cmp	r3, #58	; 0x3a
 800afba:	dc0f      	bgt.n	800afdc <USBH_write+0x6c>
 800afbc:	2b28      	cmp	r3, #40	; 0x28
 800afbe:	d009      	beq.n	800afd4 <USBH_write+0x64>
 800afc0:	2b28      	cmp	r3, #40	; 0x28
 800afc2:	dc0b      	bgt.n	800afdc <USBH_write+0x6c>
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d005      	beq.n	800afd4 <USBH_write+0x64>
 800afc8:	2b27      	cmp	r3, #39	; 0x27
 800afca:	d107      	bne.n	800afdc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800afcc:	2302      	movs	r3, #2
 800afce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800afd2:	e007      	b.n	800afe4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800afd4:	2303      	movs	r3, #3
 800afd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800afda:	e003      	b.n	800afe4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800afe2:	bf00      	nop
    }
  }

  return res;
 800afe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3748      	adds	r7, #72	; 0x48
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	200035e8 	.word	0x200035e8

0800aff4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b090      	sub	sp, #64	; 0x40
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	603a      	str	r2, [r7, #0]
 800affe:	71fb      	strb	r3, [r7, #7]
 800b000:	460b      	mov	r3, r1
 800b002:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b00a:	79bb      	ldrb	r3, [r7, #6]
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d852      	bhi.n	800b0b6 <USBH_ioctl+0xc2>
 800b010:	a201      	add	r2, pc, #4	; (adr r2, 800b018 <USBH_ioctl+0x24>)
 800b012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b016:	bf00      	nop
 800b018:	0800b029 	.word	0x0800b029
 800b01c:	0800b031 	.word	0x0800b031
 800b020:	0800b05b 	.word	0x0800b05b
 800b024:	0800b087 	.word	0x0800b087
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b02e:	e045      	b.n	800b0bc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b030:	f107 0208 	add.w	r2, r7, #8
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	4619      	mov	r1, r3
 800b038:	4823      	ldr	r0, [pc, #140]	; (800b0c8 <USBH_ioctl+0xd4>)
 800b03a:	f000 fda7 	bl	800bb8c <USBH_MSC_GetLUNInfo>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d106      	bne.n	800b052 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b050:	e034      	b.n	800b0bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b058:	e030      	b.n	800b0bc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b05a:	f107 0208 	add.w	r2, r7, #8
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4619      	mov	r1, r3
 800b062:	4819      	ldr	r0, [pc, #100]	; (800b0c8 <USBH_ioctl+0xd4>)
 800b064:	f000 fd92 	bl	800bb8c <USBH_MSC_GetLUNInfo>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d107      	bne.n	800b07e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b06e:	8a3b      	ldrh	r3, [r7, #16]
 800b070:	461a      	mov	r2, r3
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b07c:	e01e      	b.n	800b0bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b084:	e01a      	b.n	800b0bc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b086:	f107 0208 	add.w	r2, r7, #8
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	4619      	mov	r1, r3
 800b08e:	480e      	ldr	r0, [pc, #56]	; (800b0c8 <USBH_ioctl+0xd4>)
 800b090:	f000 fd7c 	bl	800bb8c <USBH_MSC_GetLUNInfo>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b09a:	8a3b      	ldrh	r3, [r7, #16]
 800b09c:	0a5b      	lsrs	r3, r3, #9
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b0ac:	e006      	b.n	800b0bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b0b4:	e002      	b.n	800b0bc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b0bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3740      	adds	r7, #64	; 0x40
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	200035e8 	.word	0x200035e8

0800b0cc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b089      	sub	sp, #36	; 0x24
 800b0d0:	af04      	add	r7, sp, #16
 800b0d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0da:	7919      	ldrb	r1, [r3, #4]
 800b0dc:	2350      	movs	r3, #80	; 0x50
 800b0de:	2206      	movs	r2, #6
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 fc6b 	bl	800c9bc <USBH_FindInterface>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2bff      	cmp	r3, #255	; 0xff
 800b0ee:	d002      	beq.n	800b0f6 <USBH_MSC_InterfaceInit+0x2a>
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d901      	bls.n	800b0fa <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e106      	b.n	800b308 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 fc40 	bl	800c984 <USBH_SelectInterface>
 800b104:	4603      	mov	r3, r0
 800b106:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b10e:	2302      	movs	r3, #2
 800b110:	e0fa      	b.n	800b308 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b118:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b11c:	f004 f81e 	bl	800f15c <malloc>
 800b120:	4603      	mov	r3, r0
 800b122:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b134:	2302      	movs	r3, #2
 800b136:	e0e7      	b.n	800b308 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b13c:	2100      	movs	r1, #0
 800b13e:	68b8      	ldr	r0, [r7, #8]
 800b140:	f004 f82a 	bl	800f198 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	211a      	movs	r1, #26
 800b14a:	fb01 f303 	mul.w	r3, r1, r3
 800b14e:	4413      	add	r3, r2
 800b150:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b25b      	sxtb	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	da16      	bge.n	800b18a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	211a      	movs	r1, #26
 800b162:	fb01 f303 	mul.w	r3, r1, r3
 800b166:	4413      	add	r3, r2
 800b168:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	211a      	movs	r1, #26
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b182:	881a      	ldrh	r2, [r3, #0]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	815a      	strh	r2, [r3, #10]
 800b188:	e015      	b.n	800b1b6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	211a      	movs	r1, #26
 800b190:	fb01 f303 	mul.w	r3, r1, r3
 800b194:	4413      	add	r3, r2
 800b196:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	211a      	movs	r1, #26
 800b1a6:	fb01 f303 	mul.w	r3, r1, r3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b1b0:	881a      	ldrh	r2, [r3, #0]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	211a      	movs	r1, #26
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	da16      	bge.n	800b1fc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	211a      	movs	r1, #26
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	4413      	add	r3, r2
 800b1da:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b1de:	781a      	ldrb	r2, [r3, #0]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	211a      	movs	r1, #26
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b1f4:	881a      	ldrh	r2, [r3, #0]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	815a      	strh	r2, [r3, #10]
 800b1fa:	e015      	b.n	800b228 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	211a      	movs	r1, #26
 800b202:	fb01 f303 	mul.w	r3, r1, r3
 800b206:	4413      	add	r3, r2
 800b208:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b20c:	781a      	ldrb	r2, [r3, #0]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	211a      	movs	r1, #26
 800b218:	fb01 f303 	mul.w	r3, r1, r3
 800b21c:	4413      	add	r3, r2
 800b21e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2200      	movs	r2, #0
 800b22c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2200      	movs	r2, #0
 800b232:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2200      	movs	r2, #0
 800b238:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	799b      	ldrb	r3, [r3, #6]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f002 fed6 	bl	800dff2 <USBH_AllocPipe>
 800b246:	4603      	mov	r3, r0
 800b248:	461a      	mov	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	79db      	ldrb	r3, [r3, #7]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f002 fecc 	bl	800dff2 <USBH_AllocPipe>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fdc4 	bl	800bdf0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	799b      	ldrb	r3, [r3, #6]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01e      	beq.n	800b2ae <USBH_MSC_InterfaceInit+0x1e2>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	891b      	ldrh	r3, [r3, #8]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d01a      	beq.n	800b2ae <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	7959      	ldrb	r1, [r3, #5]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	7998      	ldrb	r0, [r3, #6]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	8912      	ldrh	r2, [r2, #8]
 800b290:	9202      	str	r2, [sp, #8]
 800b292:	2202      	movs	r2, #2
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4623      	mov	r3, r4
 800b29a:	4602      	mov	r2, r0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f002 fe79 	bl	800df94 <USBH_OpenPipe>
 800b2a2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	79db      	ldrb	r3, [r3, #7]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d02c      	beq.n	800b306 <USBH_MSC_InterfaceInit+0x23a>
 800b2ac:	e001      	b.n	800b2b2 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e02a      	b.n	800b308 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	895b      	ldrh	r3, [r3, #10]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d025      	beq.n	800b306 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	7919      	ldrb	r1, [r3, #4]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	79d8      	ldrb	r0, [r3, #7]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	8952      	ldrh	r2, [r2, #10]
 800b2d2:	9202      	str	r2, [sp, #8]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	9201      	str	r2, [sp, #4]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4623      	mov	r3, r4
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f002 fe58 	bl	800df94 <USBH_OpenPipe>
 800b2e4:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	791b      	ldrb	r3, [r3, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f003 fe52 	bl	800ef98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	795b      	ldrb	r3, [r3, #5]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f003 fe4b 	bl	800ef98 <USBH_LL_SetToggle>

  return USBH_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b306:	2303      	movs	r3, #3
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd90      	pop	{r4, r7, pc}

0800b310 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	795b      	ldrb	r3, [r3, #5]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00e      	beq.n	800b348 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	795b      	ldrb	r3, [r3, #5]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f002 fe4e 	bl	800dfd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	795b      	ldrb	r3, [r3, #5]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f002 fe79 	bl	800e034 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	791b      	ldrb	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00e      	beq.n	800b36e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	791b      	ldrb	r3, [r3, #4]
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f002 fe3b 	bl	800dfd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	791b      	ldrb	r3, [r3, #4]
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f002 fe66 	bl	800e034 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00b      	beq.n	800b392 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	4618      	mov	r0, r3
 800b384:	f003 fef2 	bl	800f16c <free>
    phost->pActiveClass->pData = 0U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38e:	2200      	movs	r2, #0
 800b390:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	7b9b      	ldrb	r3, [r3, #14]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d041      	beq.n	800b43e <USBH_MSC_ClassRequest+0xa2>
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	dc4b      	bgt.n	800b456 <USBH_MSC_ClassRequest+0xba>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <USBH_MSC_ClassRequest+0x2a>
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d147      	bne.n	800b456 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fcf1 	bl	800bdb2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d104      	bne.n	800b3e4 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d137      	bne.n	800b45a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d804      	bhi.n	800b3fc <USBH_MSC_ClassRequest+0x60>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	e000      	b.n	800b3fe <USBH_MSC_ClassRequest+0x62>
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b402:	2300      	movs	r3, #0
 800b404:	73bb      	strb	r3, [r7, #14]
 800b406:	e014      	b.n	800b432 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	2134      	movs	r1, #52	; 0x34
 800b40e:	fb01 f303 	mul.w	r3, r1, r3
 800b412:	4413      	add	r3, r2
 800b414:	3392      	adds	r3, #146	; 0x92
 800b416:	2202      	movs	r2, #2
 800b418:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	2134      	movs	r1, #52	; 0x34
 800b420:	fb01 f303 	mul.w	r3, r1, r3
 800b424:	4413      	add	r3, r2
 800b426:	33c1      	adds	r3, #193	; 0xc1
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	3301      	adds	r3, #1
 800b430:	73bb      	strb	r3, [r7, #14]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	7bba      	ldrb	r2, [r7, #14]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d3e5      	bcc.n	800b408 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b43c:	e00d      	b.n	800b45a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b43e:	2100      	movs	r1, #0
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f002 f888 	bl	800d556 <USBH_ClrFeature>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d108      	bne.n	800b45e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	7bda      	ldrb	r2, [r3, #15]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b454:	e003      	b.n	800b45e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b456:	bf00      	nop
 800b458:	e002      	b.n	800b460 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b45a:	bf00      	nop
 800b45c:	e000      	b.n	800b460 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b45e:	bf00      	nop
  }

  return status;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b47e:	2301      	movs	r3, #1
 800b480:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b482:	2301      	movs	r3, #1
 800b484:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b486:	2301      	movs	r3, #1
 800b488:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	7b1b      	ldrb	r3, [r3, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <USBH_MSC_Process+0x2e>
 800b492:	2b01      	cmp	r3, #1
 800b494:	f000 8271 	beq.w	800b97a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b498:	e272      	b.n	800b980 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	f080 824f 	bcs.w	800b94a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	2334      	movs	r3, #52	; 0x34
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	4413      	add	r3, r2
 800b4be:	3391      	adds	r3, #145	; 0x91
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	2334      	movs	r3, #52	; 0x34
 800b4d0:	fb01 f303 	mul.w	r3, r1, r3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	3390      	adds	r3, #144	; 0x90
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b08      	cmp	r3, #8
 800b4dc:	f200 8243 	bhi.w	800b966 <USBH_MSC_Process+0x4fa>
 800b4e0:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <USBH_MSC_Process+0x7c>)
 800b4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e6:	bf00      	nop
 800b4e8:	0800b50d 	.word	0x0800b50d
 800b4ec:	0800b967 	.word	0x0800b967
 800b4f0:	0800b5d5 	.word	0x0800b5d5
 800b4f4:	0800b759 	.word	0x0800b759
 800b4f8:	0800b533 	.word	0x0800b533
 800b4fc:	0800b825 	.word	0x0800b825
 800b500:	0800b967 	.word	0x0800b967
 800b504:	0800b967 	.word	0x0800b967
 800b508:	0800b939 	.word	0x0800b939
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b512:	4619      	mov	r1, r3
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	2334      	movs	r3, #52	; 0x34
 800b518:	fb01 f303 	mul.w	r3, r1, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	3390      	adds	r3, #144	; 0x90
 800b520:	2204      	movs	r2, #4
 800b522:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b530:	e222      	b.n	800b978 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b538:	b2d9      	uxtb	r1, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b540:	461a      	mov	r2, r3
 800b542:	2334      	movs	r3, #52	; 0x34
 800b544:	fb02 f303 	mul.w	r3, r2, r3
 800b548:	3398      	adds	r3, #152	; 0x98
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4413      	add	r3, r2
 800b54e:	3307      	adds	r3, #7
 800b550:	461a      	mov	r2, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 ff6a 	bl	800c42c <USBH_MSC_SCSI_Inquiry>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10b      	bne.n	800b57a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b568:	4619      	mov	r1, r3
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	2334      	movs	r3, #52	; 0x34
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	3390      	adds	r3, #144	; 0x90
 800b576:	2202      	movs	r2, #2
 800b578:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d10c      	bne.n	800b59a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b586:	4619      	mov	r1, r3
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	2334      	movs	r3, #52	; 0x34
 800b58c:	fb01 f303 	mul.w	r3, r1, r3
 800b590:	4413      	add	r3, r2
 800b592:	3390      	adds	r3, #144	; 0x90
 800b594:	2205      	movs	r2, #5
 800b596:	701a      	strb	r2, [r3, #0]
            break;
 800b598:	e1e7      	b.n	800b96a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	f040 81e4 	bne.w	800b96a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	2334      	movs	r3, #52	; 0x34
 800b5ae:	fb01 f303 	mul.w	r3, r1, r3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	3390      	adds	r3, #144	; 0x90
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	2334      	movs	r3, #52	; 0x34
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3391      	adds	r3, #145	; 0x91
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	701a      	strb	r2, [r3, #0]
            break;
 800b5d2:	e1ca      	b.n	800b96a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fe66 	bl	800c2b0 <USBH_MSC_SCSI_TestUnitReady>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d149      	bne.n	800b682 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	2334      	movs	r3, #52	; 0x34
 800b5fa:	fb01 f303 	mul.w	r3, r1, r3
 800b5fe:	4413      	add	r3, r2
 800b600:	3392      	adds	r3, #146	; 0x92
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00c      	beq.n	800b622 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b60e:	4619      	mov	r1, r3
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	2334      	movs	r3, #52	; 0x34
 800b614:	fb01 f303 	mul.w	r3, r1, r3
 800b618:	4413      	add	r3, r2
 800b61a:	33c1      	adds	r3, #193	; 0xc1
 800b61c:	2201      	movs	r2, #1
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e00b      	b.n	800b63a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b628:	4619      	mov	r1, r3
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	2334      	movs	r3, #52	; 0x34
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	33c1      	adds	r3, #193	; 0xc1
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b640:	4619      	mov	r1, r3
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	2334      	movs	r3, #52	; 0x34
 800b646:	fb01 f303 	mul.w	r3, r1, r3
 800b64a:	4413      	add	r3, r2
 800b64c:	3390      	adds	r3, #144	; 0x90
 800b64e:	2203      	movs	r2, #3
 800b650:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b658:	4619      	mov	r1, r3
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	2334      	movs	r3, #52	; 0x34
 800b65e:	fb01 f303 	mul.w	r3, r1, r3
 800b662:	4413      	add	r3, r2
 800b664:	3391      	adds	r3, #145	; 0x91
 800b666:	2200      	movs	r2, #0
 800b668:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b670:	4619      	mov	r1, r3
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	2334      	movs	r3, #52	; 0x34
 800b676:	fb01 f303 	mul.w	r3, r1, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	3392      	adds	r3, #146	; 0x92
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b682:	7bbb      	ldrb	r3, [r7, #14]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d14a      	bne.n	800b71e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b68e:	4619      	mov	r1, r3
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	2334      	movs	r3, #52	; 0x34
 800b694:	fb01 f303 	mul.w	r3, r1, r3
 800b698:	4413      	add	r3, r2
 800b69a:	3392      	adds	r3, #146	; 0x92
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d00c      	beq.n	800b6bc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	2334      	movs	r3, #52	; 0x34
 800b6ae:	fb01 f303 	mul.w	r3, r1, r3
 800b6b2:	4413      	add	r3, r2
 800b6b4:	33c1      	adds	r3, #193	; 0xc1
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	e00b      	b.n	800b6d4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	2334      	movs	r3, #52	; 0x34
 800b6c8:	fb01 f303 	mul.w	r3, r1, r3
 800b6cc:	4413      	add	r3, r2
 800b6ce:	33c1      	adds	r3, #193	; 0xc1
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6da:	4619      	mov	r1, r3
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	2334      	movs	r3, #52	; 0x34
 800b6e0:	fb01 f303 	mul.w	r3, r1, r3
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3390      	adds	r3, #144	; 0x90
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	2334      	movs	r3, #52	; 0x34
 800b6f8:	fb01 f303 	mul.w	r3, r1, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3391      	adds	r3, #145	; 0x91
 800b700:	2201      	movs	r2, #1
 800b702:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b70a:	4619      	mov	r1, r3
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	2334      	movs	r3, #52	; 0x34
 800b710:	fb01 f303 	mul.w	r3, r1, r3
 800b714:	4413      	add	r3, r2
 800b716:	3392      	adds	r3, #146	; 0x92
 800b718:	2202      	movs	r2, #2
 800b71a:	701a      	strb	r2, [r3, #0]
            break;
 800b71c:	e127      	b.n	800b96e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	2b04      	cmp	r3, #4
 800b722:	f040 8124 	bne.w	800b96e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b72c:	4619      	mov	r1, r3
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	2334      	movs	r3, #52	; 0x34
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	4413      	add	r3, r2
 800b738:	3390      	adds	r3, #144	; 0x90
 800b73a:	2201      	movs	r2, #1
 800b73c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b744:	4619      	mov	r1, r3
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	2334      	movs	r3, #52	; 0x34
 800b74a:	fb01 f303 	mul.w	r3, r1, r3
 800b74e:	4413      	add	r3, r2
 800b750:	3391      	adds	r3, #145	; 0x91
 800b752:	2202      	movs	r2, #2
 800b754:	701a      	strb	r2, [r3, #0]
            break;
 800b756:	e10a      	b.n	800b96e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b75e:	b2d9      	uxtb	r1, r3
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b766:	461a      	mov	r2, r3
 800b768:	2334      	movs	r3, #52	; 0x34
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	3390      	adds	r3, #144	; 0x90
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	4413      	add	r3, r2
 800b774:	3304      	adds	r3, #4
 800b776:	461a      	mov	r2, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fddc 	bl	800c336 <USBH_MSC_SCSI_ReadCapacity>
 800b77e:	4603      	mov	r3, r0
 800b780:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d120      	bne.n	800b7ca <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b78e:	4619      	mov	r1, r3
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	2334      	movs	r3, #52	; 0x34
 800b794:	fb01 f303 	mul.w	r3, r1, r3
 800b798:	4413      	add	r3, r2
 800b79a:	3390      	adds	r3, #144	; 0x90
 800b79c:	2201      	movs	r2, #1
 800b79e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	2334      	movs	r3, #52	; 0x34
 800b7ac:	fb01 f303 	mul.w	r3, r1, r3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	3391      	adds	r3, #145	; 0x91
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7be:	3301      	adds	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b7c8:	e0d3      	b.n	800b972 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d10c      	bne.n	800b7ea <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	2334      	movs	r3, #52	; 0x34
 800b7dc:	fb01 f303 	mul.w	r3, r1, r3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	3390      	adds	r3, #144	; 0x90
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	701a      	strb	r2, [r3, #0]
            break;
 800b7e8:	e0c3      	b.n	800b972 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	f040 80c0 	bne.w	800b972 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	2334      	movs	r3, #52	; 0x34
 800b7fe:	fb01 f303 	mul.w	r3, r1, r3
 800b802:	4413      	add	r3, r2
 800b804:	3390      	adds	r3, #144	; 0x90
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b810:	4619      	mov	r1, r3
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	2334      	movs	r3, #52	; 0x34
 800b816:	fb01 f303 	mul.w	r3, r1, r3
 800b81a:	4413      	add	r3, r2
 800b81c:	3391      	adds	r3, #145	; 0x91
 800b81e:	2202      	movs	r2, #2
 800b820:	701a      	strb	r2, [r3, #0]
            break;
 800b822:	e0a6      	b.n	800b972 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b82a:	b2d9      	uxtb	r1, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b832:	461a      	mov	r2, r3
 800b834:	2334      	movs	r3, #52	; 0x34
 800b836:	fb02 f303 	mul.w	r3, r2, r3
 800b83a:	3398      	adds	r3, #152	; 0x98
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	4413      	add	r3, r2
 800b840:	3304      	adds	r3, #4
 800b842:	461a      	mov	r2, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fe96 	bl	800c576 <USBH_MSC_SCSI_RequestSense>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d145      	bne.n	800b8e0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b85a:	4619      	mov	r1, r3
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	2334      	movs	r3, #52	; 0x34
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	4413      	add	r3, r2
 800b866:	339c      	adds	r3, #156	; 0x9c
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b06      	cmp	r3, #6
 800b86c:	d00c      	beq.n	800b888 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b874:	4619      	mov	r1, r3
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	2334      	movs	r3, #52	; 0x34
 800b87a:	fb01 f303 	mul.w	r3, r1, r3
 800b87e:	4413      	add	r3, r2
 800b880:	339c      	adds	r3, #156	; 0x9c
 800b882:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b884:	2b02      	cmp	r3, #2
 800b886:	d117      	bne.n	800b8b8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	f242 720f 	movw	r2, #9999	; 0x270f
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d80c      	bhi.n	800b8b8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	2334      	movs	r3, #52	; 0x34
 800b8aa:	fb01 f303 	mul.w	r3, r1, r3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	3390      	adds	r3, #144	; 0x90
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	701a      	strb	r2, [r3, #0]
                  break;
 800b8b6:	e05f      	b.n	800b978 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8be:	4619      	mov	r1, r3
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	2334      	movs	r3, #52	; 0x34
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	3390      	adds	r3, #144	; 0x90
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d10c      	bne.n	800b900 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	2334      	movs	r3, #52	; 0x34
 800b8f2:	fb01 f303 	mul.w	r3, r1, r3
 800b8f6:	4413      	add	r3, r2
 800b8f8:	3390      	adds	r3, #144	; 0x90
 800b8fa:	2208      	movs	r2, #8
 800b8fc:	701a      	strb	r2, [r3, #0]
            break;
 800b8fe:	e03a      	b.n	800b976 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b04      	cmp	r3, #4
 800b904:	d137      	bne.n	800b976 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b90c:	4619      	mov	r1, r3
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	2334      	movs	r3, #52	; 0x34
 800b912:	fb01 f303 	mul.w	r3, r1, r3
 800b916:	4413      	add	r3, r2
 800b918:	3390      	adds	r3, #144	; 0x90
 800b91a:	2201      	movs	r2, #1
 800b91c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b924:	4619      	mov	r1, r3
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	2334      	movs	r3, #52	; 0x34
 800b92a:	fb01 f303 	mul.w	r3, r1, r3
 800b92e:	4413      	add	r3, r2
 800b930:	3391      	adds	r3, #145	; 0x91
 800b932:	2202      	movs	r2, #2
 800b934:	701a      	strb	r2, [r3, #0]
            break;
 800b936:	e01e      	b.n	800b976 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b93e:	3301      	adds	r3, #1
 800b940:	b29a      	uxth	r2, r3
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b948:	e016      	b.n	800b978 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2201      	movs	r2, #1
 800b956:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b95e:	2102      	movs	r1, #2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
      break;
 800b964:	e00c      	b.n	800b980 <USBH_MSC_Process+0x514>
            break;
 800b966:	bf00      	nop
 800b968:	e00a      	b.n	800b980 <USBH_MSC_Process+0x514>
            break;
 800b96a:	bf00      	nop
 800b96c:	e008      	b.n	800b980 <USBH_MSC_Process+0x514>
            break;
 800b96e:	bf00      	nop
 800b970:	e006      	b.n	800b980 <USBH_MSC_Process+0x514>
            break;
 800b972:	bf00      	nop
 800b974:	e004      	b.n	800b980 <USBH_MSC_Process+0x514>
            break;
 800b976:	bf00      	nop
      break;
 800b978:	e002      	b.n	800b980 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
      break;
 800b97e:	bf00      	nop
  }
  return error;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop

0800b98c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b088      	sub	sp, #32
 800b9a6:	af02      	add	r7, sp, #8
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	2134      	movs	r1, #52	; 0x34
 800b9c6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3390      	adds	r3, #144	; 0x90
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b07      	cmp	r3, #7
 800b9d2:	d03c      	beq.n	800ba4e <USBH_MSC_RdWrProcess+0xac>
 800b9d4:	2b07      	cmp	r3, #7
 800b9d6:	f300 80a7 	bgt.w	800bb28 <USBH_MSC_RdWrProcess+0x186>
 800b9da:	2b05      	cmp	r3, #5
 800b9dc:	d06c      	beq.n	800bab8 <USBH_MSC_RdWrProcess+0x116>
 800b9de:	2b06      	cmp	r3, #6
 800b9e0:	f040 80a2 	bne.w	800bb28 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b9e4:	78f9      	ldrb	r1, [r7, #3]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fea5 	bl	800c73e <USBH_MSC_SCSI_Read>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10b      	bne.n	800ba16 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b9fe:	78fb      	ldrb	r3, [r7, #3]
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	2134      	movs	r1, #52	; 0x34
 800ba04:	fb01 f303 	mul.w	r3, r1, r3
 800ba08:	4413      	add	r3, r2
 800ba0a:	3390      	adds	r3, #144	; 0x90
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba14:	e08a      	b.n	800bb2c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d109      	bne.n	800ba30 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	2134      	movs	r1, #52	; 0x34
 800ba22:	fb01 f303 	mul.w	r3, r1, r3
 800ba26:	4413      	add	r3, r2
 800ba28:	3390      	adds	r3, #144	; 0x90
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	701a      	strb	r2, [r3, #0]
      break;
 800ba2e:	e07d      	b.n	800bb2c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d17a      	bne.n	800bb2c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ba36:	78fb      	ldrb	r3, [r7, #3]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	2134      	movs	r1, #52	; 0x34
 800ba3c:	fb01 f303 	mul.w	r3, r1, r3
 800ba40:	4413      	add	r3, r2
 800ba42:	3390      	adds	r3, #144	; 0x90
 800ba44:	2208      	movs	r2, #8
 800ba46:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ba48:	2302      	movs	r3, #2
 800ba4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba4c:	e06e      	b.n	800bb2c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ba4e:	78f9      	ldrb	r1, [r7, #3]
 800ba50:	2300      	movs	r3, #0
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	2200      	movs	r2, #0
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fe05 	bl	800c668 <USBH_MSC_SCSI_Write>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10b      	bne.n	800ba80 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	2134      	movs	r1, #52	; 0x34
 800ba6e:	fb01 f303 	mul.w	r3, r1, r3
 800ba72:	4413      	add	r3, r2
 800ba74:	3390      	adds	r3, #144	; 0x90
 800ba76:	2201      	movs	r2, #1
 800ba78:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba7e:	e057      	b.n	800bb30 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d109      	bne.n	800ba9a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ba86:	78fb      	ldrb	r3, [r7, #3]
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	2134      	movs	r1, #52	; 0x34
 800ba8c:	fb01 f303 	mul.w	r3, r1, r3
 800ba90:	4413      	add	r3, r2
 800ba92:	3390      	adds	r3, #144	; 0x90
 800ba94:	2205      	movs	r2, #5
 800ba96:	701a      	strb	r2, [r3, #0]
      break;
 800ba98:	e04a      	b.n	800bb30 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	d147      	bne.n	800bb30 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	2134      	movs	r1, #52	; 0x34
 800baa6:	fb01 f303 	mul.w	r3, r1, r3
 800baaa:	4413      	add	r3, r2
 800baac:	3390      	adds	r3, #144	; 0x90
 800baae:	2208      	movs	r2, #8
 800bab0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bab2:	2302      	movs	r3, #2
 800bab4:	75fb      	strb	r3, [r7, #23]
      break;
 800bab6:	e03b      	b.n	800bb30 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bab8:	78fb      	ldrb	r3, [r7, #3]
 800baba:	2234      	movs	r2, #52	; 0x34
 800babc:	fb02 f303 	mul.w	r3, r2, r3
 800bac0:	3398      	adds	r3, #152	; 0x98
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	4413      	add	r3, r2
 800bac6:	1d1a      	adds	r2, r3, #4
 800bac8:	78fb      	ldrb	r3, [r7, #3]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fd52 	bl	800c576 <USBH_MSC_SCSI_RequestSense>
 800bad2:	4603      	mov	r3, r0
 800bad4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d113      	bne.n	800bb04 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	2134      	movs	r1, #52	; 0x34
 800bae2:	fb01 f303 	mul.w	r3, r1, r3
 800bae6:	4413      	add	r3, r2
 800bae8:	3390      	adds	r3, #144	; 0x90
 800baea:	2201      	movs	r2, #1
 800baec:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	2134      	movs	r1, #52	; 0x34
 800baf4:	fb01 f303 	mul.w	r3, r1, r3
 800baf8:	4413      	add	r3, r2
 800bafa:	3391      	adds	r3, #145	; 0x91
 800bafc:	2202      	movs	r2, #2
 800bafe:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bb00:	2302      	movs	r3, #2
 800bb02:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d014      	beq.n	800bb34 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d111      	bne.n	800bb34 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	2134      	movs	r1, #52	; 0x34
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3390      	adds	r3, #144	; 0x90
 800bb1e:	2208      	movs	r2, #8
 800bb20:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bb22:	2302      	movs	r3, #2
 800bb24:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb26:	e005      	b.n	800bb34 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800bb28:	bf00      	nop
 800bb2a:	e004      	b.n	800bb36 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb2c:	bf00      	nop
 800bb2e:	e002      	b.n	800bb36 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb30:	bf00      	nop
 800bb32:	e000      	b.n	800bb36 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb34:	bf00      	nop

  }
  return error;
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b0b      	cmp	r3, #11
 800bb5e:	d10c      	bne.n	800bb7a <USBH_MSC_UnitIsReady+0x3a>
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	2134      	movs	r1, #52	; 0x34
 800bb66:	fb01 f303 	mul.w	r3, r1, r3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3391      	adds	r3, #145	; 0x91
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bb74:	2301      	movs	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	e001      	b.n	800bb7e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	460b      	mov	r3, r1
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b0b      	cmp	r3, #11
 800bbac:	d10d      	bne.n	800bbca <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	2234      	movs	r2, #52	; 0x34
 800bbb2:	fb02 f303 	mul.w	r3, r2, r3
 800bbb6:	3390      	adds	r3, #144	; 0x90
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	4413      	add	r3, r2
 800bbbc:	2234      	movs	r2, #52	; 0x34
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f003 fadb 	bl	800f17c <memcpy>
    return USBH_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e000      	b.n	800bbcc <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bbca:	2302      	movs	r3, #2
  }
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00e      	beq.n	800bc18 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bc00:	2b0b      	cmp	r3, #11
 800bc02:	d109      	bne.n	800bc18 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	2134      	movs	r1, #52	; 0x34
 800bc0a:	fb01 f303 	mul.w	r3, r1, r3
 800bc0e:	4413      	add	r3, r2
 800bc10:	3390      	adds	r3, #144	; 0x90
 800bc12:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d001      	beq.n	800bc1c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e040      	b.n	800bc9e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2206      	movs	r2, #6
 800bc20:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bc22:	7afb      	ldrb	r3, [r7, #11]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	2134      	movs	r1, #52	; 0x34
 800bc28:	fb01 f303 	mul.w	r3, r1, r3
 800bc2c:	4413      	add	r3, r2
 800bc2e:	3390      	adds	r3, #144	; 0x90
 800bc30:	2206      	movs	r2, #6
 800bc32:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bc3e:	7af9      	ldrb	r1, [r7, #11]
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fd78 	bl	800c73e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc54:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc56:	e016      	b.n	800bc86 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	f242 7110 	movw	r1, #10000	; 0x2710
 800bc68:	fb01 f303 	mul.w	r3, r1, r3
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d805      	bhi.n	800bc7c <USBH_MSC_Read+0xa8>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bc82:	2302      	movs	r3, #2
 800bc84:	e00b      	b.n	800bc9e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc86:	7afb      	ldrb	r3, [r7, #11]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff fe89 	bl	800b9a2 <USBH_MSC_RdWrProcess>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d0e0      	beq.n	800bc58 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b088      	sub	sp, #32
 800bcaa:	af02      	add	r7, sp, #8
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00e      	beq.n	800bcea <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bcd2:	2b0b      	cmp	r3, #11
 800bcd4:	d109      	bne.n	800bcea <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bcd6:	7afb      	ldrb	r3, [r7, #11]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	2134      	movs	r1, #52	; 0x34
 800bcdc:	fb01 f303 	mul.w	r3, r1, r3
 800bce0:	4413      	add	r3, r2
 800bce2:	3390      	adds	r3, #144	; 0x90
 800bce4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d001      	beq.n	800bcee <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bcea:	2302      	movs	r3, #2
 800bcec:	e040      	b.n	800bd70 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	2134      	movs	r1, #52	; 0x34
 800bcfa:	fb01 f303 	mul.w	r3, r1, r3
 800bcfe:	4413      	add	r3, r2
 800bd00:	3390      	adds	r3, #144	; 0x90
 800bd02:	2207      	movs	r2, #7
 800bd04:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bd10:	7af9      	ldrb	r1, [r7, #11]
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 fca4 	bl	800c668 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd26:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bd28:	e016      	b.n	800bd58 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	f242 7110 	movw	r1, #10000	; 0x2710
 800bd3a:	fb01 f303 	mul.w	r3, r1, r3
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d805      	bhi.n	800bd4e <USBH_MSC_Write+0xa8>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2201      	movs	r2, #1
 800bd52:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bd54:	2302      	movs	r3, #2
 800bd56:	e00b      	b.n	800bd70 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bd58:	7afb      	ldrb	r3, [r7, #11]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fe20 	bl	800b9a2 <USBH_MSC_RdWrProcess>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d0e0      	beq.n	800bd2a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2221      	movs	r2, #33	; 0x21
 800bd84:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	22ff      	movs	r2, #255	; 0xff
 800bd8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2100      	movs	r1, #0
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 fea4 	bl	800daf0 <USBH_CtlReq>
 800bda8:	4603      	mov	r3, r0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	22a1      	movs	r2, #161	; 0xa1
 800bdc0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	22fe      	movs	r2, #254	; 0xfe
 800bdc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bdda:	2201      	movs	r2, #1
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 fe86 	bl	800daf0 <USBH_CtlReq>
 800bde4:	4603      	mov	r3, r0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	4a09      	ldr	r2, [pc, #36]	; (800be2c <USBH_MSC_BOT_Init+0x3c>)
 800be06:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4a09      	ldr	r2, [pc, #36]	; (800be30 <USBH_MSC_BOT_Init+0x40>)
 800be0c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	43425355 	.word	0x43425355
 800be30:	20304050 	.word	0x20304050

0800be34 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af02      	add	r7, sp, #8
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800be40:	2301      	movs	r3, #1
 800be42:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800be44:	2301      	movs	r3, #1
 800be46:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800be48:	2301      	movs	r3, #1
 800be4a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be56:	69db      	ldr	r3, [r3, #28]
 800be58:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be64:	3b01      	subs	r3, #1
 800be66:	2b0a      	cmp	r3, #10
 800be68:	f200 819e 	bhi.w	800c1a8 <USBH_MSC_BOT_Process+0x374>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <USBH_MSC_BOT_Process+0x40>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800bea1 	.word	0x0800bea1
 800be78:	0800bec9 	.word	0x0800bec9
 800be7c:	0800bf33 	.word	0x0800bf33
 800be80:	0800bf51 	.word	0x0800bf51
 800be84:	0800bfd5 	.word	0x0800bfd5
 800be88:	0800bff7 	.word	0x0800bff7
 800be8c:	0800c08f 	.word	0x0800c08f
 800be90:	0800c0ab 	.word	0x0800c0ab
 800be94:	0800c0fd 	.word	0x0800c0fd
 800be98:	0800c12d 	.word	0x0800c12d
 800be9c:	0800c18f 	.word	0x0800c18f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	78fa      	ldrb	r2, [r7, #3]
 800bea4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2202      	movs	r2, #2
 800beac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	795b      	ldrb	r3, [r3, #5]
 800beba:	2201      	movs	r2, #1
 800bebc:	9200      	str	r2, [sp, #0]
 800bebe:	221f      	movs	r2, #31
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f002 f824 	bl	800df0e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bec6:	e17e      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	795b      	ldrb	r3, [r3, #5]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 f838 	bl	800ef44 <USBH_LL_GetURBState>
 800bed4:	4603      	mov	r3, r0
 800bed6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bed8:	7d3b      	ldrb	r3, [r7, #20]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d118      	bne.n	800bf10 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00f      	beq.n	800bf06 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800beec:	b25b      	sxtb	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	da04      	bge.n	800befc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2203      	movs	r2, #3
 800bef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800befa:	e157      	b.n	800c1ac <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	2205      	movs	r2, #5
 800bf00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf04:	e152      	b.n	800c1ac <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	2207      	movs	r2, #7
 800bf0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf0e:	e14d      	b.n	800c1ac <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf10:	7d3b      	ldrb	r3, [r7, #20]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d104      	bne.n	800bf20 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf1e:	e145      	b.n	800c1ac <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bf20:	7d3b      	ldrb	r3, [r7, #20]
 800bf22:	2b05      	cmp	r3, #5
 800bf24:	f040 8142 	bne.w	800c1ac <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf30:	e13c      	b.n	800c1ac <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	895a      	ldrh	r2, [r3, #10]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	791b      	ldrb	r3, [r3, #4]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f002 f809 	bl	800df58 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2204      	movs	r2, #4
 800bf4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800bf4e:	e13a      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	791b      	ldrb	r3, [r3, #4]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f002 fff4 	bl	800ef44 <USBH_LL_GetURBState>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf60:	7d3b      	ldrb	r3, [r7, #20]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d12d      	bne.n	800bfc2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	8952      	ldrh	r2, [r2, #10]
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d910      	bls.n	800bf94 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	8952      	ldrh	r2, [r2, #10]
 800bf7c:	441a      	add	r2, r3
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	8952      	ldrh	r2, [r2, #10]
 800bf8c:	1a9a      	subs	r2, r3, r2
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf92:	e002      	b.n	800bf9a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2200      	movs	r2, #0
 800bf98:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	895a      	ldrh	r2, [r3, #10]
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	791b      	ldrb	r3, [r3, #4]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 ffd1 	bl	800df58 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bfb6:	e0fb      	b.n	800c1b0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2207      	movs	r2, #7
 800bfbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfc0:	e0f6      	b.n	800c1b0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800bfc2:	7d3b      	ldrb	r3, [r7, #20]
 800bfc4:	2b05      	cmp	r3, #5
 800bfc6:	f040 80f3 	bne.w	800c1b0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2209      	movs	r2, #9
 800bfce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfd2:	e0ed      	b.n	800c1b0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	891a      	ldrh	r2, [r3, #8]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	795b      	ldrb	r3, [r3, #5]
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	9000      	str	r0, [sp, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 ff91 	bl	800df0e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	2206      	movs	r2, #6
 800bff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bff4:	e0e7      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	795b      	ldrb	r3, [r3, #5]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f002 ffa1 	bl	800ef44 <USBH_LL_GetURBState>
 800c002:	4603      	mov	r3, r0
 800c004:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c006:	7d3b      	ldrb	r3, [r7, #20]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d12f      	bne.n	800c06c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	8912      	ldrh	r2, [r2, #8]
 800c014:	4293      	cmp	r3, r2
 800c016:	d910      	bls.n	800c03a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	8912      	ldrh	r2, [r2, #8]
 800c022:	441a      	add	r2, r3
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	8912      	ldrh	r2, [r2, #8]
 800c032:	1a9a      	subs	r2, r3, r2
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	65da      	str	r2, [r3, #92]	; 0x5c
 800c038:	e002      	b.n	800c040 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2200      	movs	r2, #0
 800c03e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	891a      	ldrh	r2, [r3, #8]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	795b      	ldrb	r3, [r3, #5]
 800c056:	2001      	movs	r0, #1
 800c058:	9000      	str	r0, [sp, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f001 ff57 	bl	800df0e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c060:	e0a8      	b.n	800c1b4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2207      	movs	r2, #7
 800c066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c06a:	e0a3      	b.n	800c1b4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c06c:	7d3b      	ldrb	r3, [r7, #20]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d104      	bne.n	800c07c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2205      	movs	r2, #5
 800c076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c07a:	e09b      	b.n	800c1b4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c07c:	7d3b      	ldrb	r3, [r7, #20]
 800c07e:	2b05      	cmp	r3, #5
 800c080:	f040 8098 	bne.w	800c1b4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	220a      	movs	r2, #10
 800c088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c08c:	e092      	b.n	800c1b4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	791b      	ldrb	r3, [r3, #4]
 800c098:	220d      	movs	r2, #13
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 ff5c 	bl	800df58 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2208      	movs	r2, #8
 800c0a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0a8:	e08d      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	791b      	ldrb	r3, [r3, #4]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f002 ff47 	bl	800ef44 <USBH_LL_GetURBState>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c0ba:	7d3b      	ldrb	r3, [r7, #20]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d115      	bne.n	800c0ec <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f8a9 	bl	800c228 <USBH_MSC_DecodeCSW>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c0da:	7d7b      	ldrb	r3, [r7, #21]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c0e4:	e068      	b.n	800c1b8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ea:	e065      	b.n	800c1b8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c0ec:	7d3b      	ldrb	r3, [r7, #20]
 800c0ee:	2b05      	cmp	r3, #5
 800c0f0:	d162      	bne.n	800c1b8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2209      	movs	r2, #9
 800c0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0fa:	e05d      	b.n	800c1b8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	2200      	movs	r2, #0
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f864 	bl	800c1d0 <USBH_MSC_BOT_Abort>
 800c108:	4603      	mov	r3, r0
 800c10a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c10c:	7dbb      	ldrb	r3, [r7, #22]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d104      	bne.n	800c11c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2207      	movs	r2, #7
 800c116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c11a:	e04f      	b.n	800c1bc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c11c:	7dbb      	ldrb	r3, [r7, #22]
 800c11e:	2b04      	cmp	r3, #4
 800c120:	d14c      	bne.n	800c1bc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	220b      	movs	r2, #11
 800c126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c12a:	e047      	b.n	800c1bc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c12c:	78fb      	ldrb	r3, [r7, #3]
 800c12e:	2201      	movs	r2, #1
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f84c 	bl	800c1d0 <USBH_MSC_BOT_Abort>
 800c138:	4603      	mov	r3, r0
 800c13a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c13c:	7dbb      	ldrb	r3, [r7, #22]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d11d      	bne.n	800c17e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	795b      	ldrb	r3, [r3, #5]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f002 ff55 	bl	800eff8 <USBH_LL_GetToggle>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	7959      	ldrb	r1, [r3, #5]
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	f1c3 0301 	rsb	r3, r3, #1
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	461a      	mov	r2, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f002 ff19 	bl	800ef98 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	791b      	ldrb	r3, [r3, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f002 ff12 	bl	800ef98 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	2209      	movs	r2, #9
 800c178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c17c:	e020      	b.n	800c1c0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c17e:	7dbb      	ldrb	r3, [r7, #22]
 800c180:	2b04      	cmp	r3, #4
 800c182:	d11d      	bne.n	800c1c0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	220b      	movs	r2, #11
 800c188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c18c:	e018      	b.n	800c1c0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fdf2 	bl	800bd78 <USBH_MSC_BOT_REQ_Reset>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d112      	bne.n	800c1c4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c1a6:	e00d      	b.n	800c1c4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c1a8:	bf00      	nop
 800c1aa:	e00c      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1ac:	bf00      	nop
 800c1ae:	e00a      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1b0:	bf00      	nop
 800c1b2:	e008      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1b4:	bf00      	nop
 800c1b6:	e006      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1b8:	bf00      	nop
 800c1ba:	e004      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1bc:	bf00      	nop
 800c1be:	e002      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1c4:	bf00      	nop
  }
  return status;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c1ee:	78bb      	ldrb	r3, [r7, #2]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <USBH_MSC_BOT_Abort+0x2a>
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d009      	beq.n	800c20c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c1f8:	e011      	b.n	800c21e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	79db      	ldrb	r3, [r3, #7]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 f9a8 	bl	800d556 <USBH_ClrFeature>
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]
      break;
 800c20a:	e008      	b.n	800c21e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	799b      	ldrb	r3, [r3, #6]
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 f99f 	bl	800d556 <USBH_ClrFeature>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]
      break;
 800c21c:	bf00      	nop
  }
  return status;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c23a:	2301      	movs	r3, #1
 800c23c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	791b      	ldrb	r3, [r3, #4]
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f002 fdeb 	bl	800ee20 <USBH_LL_GetLastXferSize>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b0d      	cmp	r3, #13
 800c24e:	d002      	beq.n	800c256 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c250:	2302      	movs	r3, #2
 800c252:	73fb      	strb	r3, [r7, #15]
 800c254:	e024      	b.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c25a:	4a14      	ldr	r2, [pc, #80]	; (800c2ac <USBH_MSC_DecodeCSW+0x84>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d11d      	bne.n	800c29c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c268:	429a      	cmp	r2, r3
 800c26a:	d119      	bne.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c272:	2b00      	cmp	r3, #0
 800c274:	d102      	bne.n	800c27c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]
 800c27a:	e011      	b.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c282:	2b01      	cmp	r3, #1
 800c284:	d102      	bne.n	800c28c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c286:	2301      	movs	r3, #1
 800c288:	73fb      	strb	r3, [r7, #15]
 800c28a:	e009      	b.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c292:	2b02      	cmp	r3, #2
 800c294:	d104      	bne.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c296:	2302      	movs	r3, #2
 800c298:	73fb      	strb	r3, [r7, #15]
 800c29a:	e001      	b.n	800c2a0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c29c:	2302      	movs	r3, #2
 800c29e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	53425355 	.word	0x53425355

0800c2b0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c2bc:	2302      	movs	r3, #2
 800c2be:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2c6:	69db      	ldr	r3, [r3, #28]
 800c2c8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d002      	beq.n	800c2da <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d021      	beq.n	800c31c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c2d8:	e028      	b.n	800c32c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	220a      	movs	r2, #10
 800c2ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3363      	adds	r3, #99	; 0x63
 800c2f4:	2210      	movs	r2, #16
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f002 ff4d 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2202      	movs	r2, #2
 800c312:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c316:	2301      	movs	r3, #1
 800c318:	73fb      	strb	r3, [r7, #15]
      break;
 800c31a:	e007      	b.n	800c32c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c31c:	78fb      	ldrb	r3, [r7, #3]
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff fd87 	bl	800be34 <USBH_MSC_BOT_Process>
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]
      break;
 800c32a:	bf00      	nop
  }

  return error;
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b086      	sub	sp, #24
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	460b      	mov	r3, r1
 800c340:	607a      	str	r2, [r7, #4]
 800c342:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c344:	2301      	movs	r3, #1
 800c346:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d002      	beq.n	800c362 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d027      	beq.n	800c3b0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c360:	e05f      	b.n	800c422 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2208      	movs	r2, #8
 800c366:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2280      	movs	r2, #128	; 0x80
 800c36c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	220a      	movs	r2, #10
 800c374:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	3363      	adds	r3, #99	; 0x63
 800c37c:	2210      	movs	r2, #16
 800c37e:	2100      	movs	r1, #0
 800c380:	4618      	mov	r0, r3
 800c382:	f002 ff09 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2225      	movs	r2, #37	; 0x25
 800c38a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2202      	movs	r2, #2
 800c39a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f103 0210 	add.w	r2, r3, #16
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ae:	e038      	b.n	800c422 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff fd3d 	bl	800be34 <USBH_MSC_BOT_Process>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d12d      	bne.n	800c420 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ca:	3303      	adds	r3, #3
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3d6:	3302      	adds	r3, #2
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c3ea:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	061b      	lsls	r3, r3, #24
 800c3f6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c402:	3307      	adds	r3, #7
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	b29a      	uxth	r2, r3
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c40e:	3306      	adds	r3, #6
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	b29b      	uxth	r3, r3
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	b29b      	uxth	r3, r3
 800c418:	4313      	orrs	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	809a      	strh	r2, [r3, #4]
      break;
 800c420:	bf00      	nop
  }

  return error;
 800c422:	7dfb      	ldrb	r3, [r7, #23]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	460b      	mov	r3, r1
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c43a:	2302      	movs	r3, #2
 800c43c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d002      	beq.n	800c458 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c452:	2b02      	cmp	r3, #2
 800c454:	d03d      	beq.n	800c4d2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c456:	e089      	b.n	800c56c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2224      	movs	r2, #36	; 0x24
 800c45c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2280      	movs	r2, #128	; 0x80
 800c462:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	220a      	movs	r2, #10
 800c46a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	3363      	adds	r3, #99	; 0x63
 800c472:	220a      	movs	r2, #10
 800c474:	2100      	movs	r1, #0
 800c476:	4618      	mov	r0, r3
 800c478:	f002 fe8e 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2212      	movs	r2, #18
 800c480:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c484:	7afb      	ldrb	r3, [r7, #11]
 800c486:	015b      	lsls	r3, r3, #5
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2224      	movs	r2, #36	; 0x24
 800c4a4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f103 0210 	add.w	r2, r3, #16
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d0:	e04c      	b.n	800c56c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff fcac 	bl	800be34 <USBH_MSC_BOT_Process>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d141      	bne.n	800c56a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c4e6:	2222      	movs	r2, #34	; 0x22
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f002 fe54 	bl	800f198 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	f003 031f 	and.w	r3, r3, #31
 800c4fc:	b2da      	uxtb	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	095b      	lsrs	r3, r3, #5
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c518:	3301      	adds	r3, #1
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	b25b      	sxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	da03      	bge.n	800c52a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	709a      	strb	r2, [r3, #2]
 800c528:	e002      	b.n	800c530 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	1cd8      	adds	r0, r3, #3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53a:	3308      	adds	r3, #8
 800c53c:	2208      	movs	r2, #8
 800c53e:	4619      	mov	r1, r3
 800c540:	f002 fe1c 	bl	800f17c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f103 000c 	add.w	r0, r3, #12
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c550:	3310      	adds	r3, #16
 800c552:	2210      	movs	r2, #16
 800c554:	4619      	mov	r1, r3
 800c556:	f002 fe11 	bl	800f17c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	331d      	adds	r3, #29
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c564:	3220      	adds	r2, #32
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	601a      	str	r2, [r3, #0]
      break;
 800c56a:	bf00      	nop
  }

  return error;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b086      	sub	sp, #24
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	460b      	mov	r3, r1
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c584:	2302      	movs	r3, #2
 800c586:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d002      	beq.n	800c5a2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d03d      	beq.n	800c61c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c5a0:	e05d      	b.n	800c65e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	220e      	movs	r2, #14
 800c5a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2280      	movs	r2, #128	; 0x80
 800c5ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	220a      	movs	r2, #10
 800c5b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	3363      	adds	r3, #99	; 0x63
 800c5bc:	2210      	movs	r2, #16
 800c5be:	2100      	movs	r1, #0
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f002 fde9 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	015b      	lsls	r3, r3, #5
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	220e      	movs	r2, #14
 800c5ee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2202      	movs	r2, #2
 800c606:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f103 0210 	add.w	r2, r3, #16
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c616:	2301      	movs	r3, #1
 800c618:	75fb      	strb	r3, [r7, #23]
      break;
 800c61a:	e020      	b.n	800c65e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	4619      	mov	r1, r3
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f7ff fc07 	bl	800be34 <USBH_MSC_BOT_Process>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d115      	bne.n	800c65c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c636:	3302      	adds	r3, #2
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c64a:	7b1a      	ldrb	r2, [r3, #12]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c656:	7b5a      	ldrb	r2, [r3, #13]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	709a      	strb	r2, [r3, #2]
      break;
 800c65c:	bf00      	nop
  }

  return error;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	460b      	mov	r3, r1
 800c676:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c678:	2302      	movs	r3, #2
 800c67a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d002      	beq.n	800c696 <USBH_MSC_SCSI_Write+0x2e>
 800c690:	2b02      	cmp	r3, #2
 800c692:	d047      	beq.n	800c724 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c694:	e04e      	b.n	800c734 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c69c:	461a      	mov	r2, r3
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	fb03 f202 	mul.w	r2, r3, r2
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	220a      	movs	r2, #10
 800c6b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	3363      	adds	r3, #99	; 0x63
 800c6bc:	2210      	movs	r2, #16
 800c6be:	2100      	movs	r1, #0
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f002 fd69 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	222a      	movs	r2, #42	; 0x2a
 800c6ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c6ce:	79fa      	ldrb	r2, [r7, #7]
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c6d6:	79ba      	ldrb	r2, [r7, #6]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c6de:	797a      	ldrb	r2, [r7, #5]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	781a      	ldrb	r2, [r3, #0]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c6f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c6fa:	f107 0320 	add.w	r3, r7, #32
 800c6fe:	781a      	ldrb	r2, [r3, #0]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2201      	movs	r2, #1
 800c70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2202      	movs	r2, #2
 800c712:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c71e:	2301      	movs	r3, #1
 800c720:	75fb      	strb	r3, [r7, #23]
      break;
 800c722:	e007      	b.n	800c734 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c724:	7afb      	ldrb	r3, [r7, #11]
 800c726:	4619      	mov	r1, r3
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f7ff fb83 	bl	800be34 <USBH_MSC_BOT_Process>
 800c72e:	4603      	mov	r3, r0
 800c730:	75fb      	strb	r3, [r7, #23]
      break;
 800c732:	bf00      	nop
  }

  return error;
 800c734:	7dfb      	ldrb	r3, [r7, #23]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b086      	sub	sp, #24
 800c742:	af00      	add	r7, sp, #0
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
 800c74a:	460b      	mov	r3, r1
 800c74c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c74e:	2302      	movs	r3, #2
 800c750:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c762:	2b01      	cmp	r3, #1
 800c764:	d002      	beq.n	800c76c <USBH_MSC_SCSI_Read+0x2e>
 800c766:	2b02      	cmp	r3, #2
 800c768:	d047      	beq.n	800c7fa <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c76a:	e04e      	b.n	800c80a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c772:	461a      	mov	r2, r3
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	fb03 f202 	mul.w	r2, r3, r2
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2280      	movs	r2, #128	; 0x80
 800c782:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	220a      	movs	r2, #10
 800c78a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3363      	adds	r3, #99	; 0x63
 800c792:	2210      	movs	r2, #16
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f002 fcfe 	bl	800f198 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	2228      	movs	r2, #40	; 0x28
 800c7a0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c7a4:	79fa      	ldrb	r2, [r7, #7]
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c7ac:	79ba      	ldrb	r2, [r7, #6]
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c7b4:	797a      	ldrb	r2, [r7, #5]
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c7bc:	1d3b      	adds	r3, r7, #4
 800c7be:	781a      	ldrb	r2, [r3, #0]
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c7c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c7d0:	f107 0320 	add.w	r3, r7, #32
 800c7d4:	781a      	ldrb	r2, [r3, #0]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f8:	e007      	b.n	800c80a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c7fa:	7afb      	ldrb	r3, [r7, #11]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff fb18 	bl	800be34 <USBH_MSC_BOT_Process>
 800c804:	4603      	mov	r3, r0
 800c806:	75fb      	strb	r3, [r7, #23]
      break;
 800c808:	bf00      	nop
  }

  return error;
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	4613      	mov	r3, r2
 800c820:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d101      	bne.n	800c82c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c828:	2302      	movs	r3, #2
 800c82a:	e029      	b.n	800c880 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	79fa      	ldrb	r2, [r7, #7]
 800c830:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f000 f81f 	bl	800c888 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d003      	beq.n	800c878 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f002 fa13 	bl	800eca4 <USBH_LL_Init>

  return USBH_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	e009      	b.n	800c8ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	33e0      	adds	r3, #224	; 0xe0
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b0f      	cmp	r3, #15
 800c8b2:	d9f2      	bls.n	800c89a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	e009      	b.n	800c8ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d4:	d3f1      	bcc.n	800c8ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2240      	movs	r2, #64	; 0x40
 800c8fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d016      	beq.n	800c972 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10e      	bne.n	800c96c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c954:	1c59      	adds	r1, r3, #1
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	33de      	adds	r3, #222	; 0xde
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
 800c96a:	e004      	b.n	800c976 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c96c:	2302      	movs	r3, #2
 800c96e:	73fb      	strb	r3, [r7, #15]
 800c970:	e001      	b.n	800c976 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c972:	2302      	movs	r3, #2
 800c974:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c976:	7bfb      	ldrb	r3, [r7, #15]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c99a:	78fa      	ldrb	r2, [r7, #3]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d204      	bcs.n	800c9aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	78fa      	ldrb	r2, [r7, #3]
 800c9a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c9a8:	e001      	b.n	800c9ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	70fb      	strb	r3, [r7, #3]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	70bb      	strb	r3, [r7, #2]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c9e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c9e6:	e025      	b.n	800ca34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	221a      	movs	r2, #26
 800c9ec:	fb02 f303 	mul.w	r3, r2, r3
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	795b      	ldrb	r3, [r3, #5]
 800c9fe:	78fa      	ldrb	r2, [r7, #3]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d002      	beq.n	800ca0a <USBH_FindInterface+0x4e>
 800ca04:	78fb      	ldrb	r3, [r7, #3]
 800ca06:	2bff      	cmp	r3, #255	; 0xff
 800ca08:	d111      	bne.n	800ca2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ca0e:	78ba      	ldrb	r2, [r7, #2]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d002      	beq.n	800ca1a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca14:	78bb      	ldrb	r3, [r7, #2]
 800ca16:	2bff      	cmp	r3, #255	; 0xff
 800ca18:	d109      	bne.n	800ca2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca1e:	787a      	ldrb	r2, [r7, #1]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d002      	beq.n	800ca2a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca24:	787b      	ldrb	r3, [r7, #1]
 800ca26:	2bff      	cmp	r3, #255	; 0xff
 800ca28:	d101      	bne.n	800ca2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	e006      	b.n	800ca3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	3301      	adds	r3, #1
 800ca32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d9d6      	bls.n	800c9e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ca3a:	23ff      	movs	r3, #255	; 0xff
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	371c      	adds	r7, #28
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f002 f96d 	bl	800ed30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ca56:	2101      	movs	r1, #1
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f002 fa86 	bl	800ef6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af04      	add	r7, sp, #16
 800ca6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ca70:	2302      	movs	r3, #2
 800ca72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d102      	bne.n	800ca8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2203      	movs	r2, #3
 800ca88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b0b      	cmp	r3, #11
 800ca92:	f200 81be 	bhi.w	800ce12 <USBH_Process+0x3aa>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <USBH_Process+0x34>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800cacd 	.word	0x0800cacd
 800caa0:	0800caff 	.word	0x0800caff
 800caa4:	0800cb67 	.word	0x0800cb67
 800caa8:	0800cdad 	.word	0x0800cdad
 800caac:	0800ce13 	.word	0x0800ce13
 800cab0:	0800cc0b 	.word	0x0800cc0b
 800cab4:	0800cd53 	.word	0x0800cd53
 800cab8:	0800cc41 	.word	0x0800cc41
 800cabc:	0800cc61 	.word	0x0800cc61
 800cac0:	0800cc81 	.word	0x0800cc81
 800cac4:	0800ccc5 	.word	0x0800ccc5
 800cac8:	0800cd95 	.word	0x0800cd95
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 819e 	beq.w	800ce16 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2201      	movs	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cae0:	20c8      	movs	r0, #200	; 0xc8
 800cae2:	f002 fab9 	bl	800f058 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f002 f97f 	bl	800edea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cafc:	e18b      	b.n	800ce16 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d107      	bne.n	800cb18 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb16:	e18d      	b.n	800ce34 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cb1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb22:	d914      	bls.n	800cb4e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d903      	bls.n	800cb46 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	220d      	movs	r2, #13
 800cb42:	701a      	strb	r2, [r3, #0]
      break;
 800cb44:	e176      	b.n	800ce34 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
      break;
 800cb4c:	e172      	b.n	800ce34 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cb54:	f103 020a 	add.w	r2, r3, #10
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cb5e:	200a      	movs	r0, #10
 800cb60:	f002 fa7a 	bl	800f058 <USBH_Delay>
      break;
 800cb64:	e166      	b.n	800ce34 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb76:	2104      	movs	r1, #4
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cb7c:	2064      	movs	r0, #100	; 0x64
 800cb7e:	f002 fa6b 	bl	800f058 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f002 f90a 	bl	800ed9c <USBH_LL_GetSpeed>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2205      	movs	r2, #5
 800cb96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cb98:	2100      	movs	r1, #0
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f001 fa29 	bl	800dff2 <USBH_AllocPipe>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cba8:	2180      	movs	r1, #128	; 0x80
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 fa21 	bl	800dff2 <USBH_AllocPipe>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7919      	ldrb	r1, [r3, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cbcc:	b292      	uxth	r2, r2
 800cbce:	9202      	str	r2, [sp, #8]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	9201      	str	r2, [sp, #4]
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2280      	movs	r2, #128	; 0x80
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f001 f9da 	bl	800df94 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7959      	ldrb	r1, [r3, #5]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cbf4:	b292      	uxth	r2, r2
 800cbf6:	9202      	str	r2, [sp, #8]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	9201      	str	r2, [sp, #4]
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2200      	movs	r2, #0
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 f9c6 	bl	800df94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc08:	e114      	b.n	800ce34 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f918 	bl	800ce40 <USBH_HandleEnum>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f040 80fe 	bne.w	800ce1a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d103      	bne.n	800cc38 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2208      	movs	r2, #8
 800cc34:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cc36:	e0f0      	b.n	800ce1a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2207      	movs	r2, #7
 800cc3c:	701a      	strb	r2, [r3, #0]
      break;
 800cc3e:	e0ec      	b.n	800ce1a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 80e9 	beq.w	800ce1e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc52:	2101      	movs	r1, #1
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2208      	movs	r2, #8
 800cc5c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cc5e:	e0de      	b.n	800ce1e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fc2c 	bl	800d4c8 <USBH_SetCfg>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f040 80d5 	bne.w	800ce22 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2209      	movs	r2, #9
 800cc7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc7e:	e0d0      	b.n	800ce22 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cc86:	f003 0320 	and.w	r3, r3, #32
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d016      	beq.n	800ccbc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cc8e:	2101      	movs	r1, #1
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fc3c 	bl	800d50e <USBH_SetFeature>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d103      	bne.n	800ccaa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	220a      	movs	r2, #10
 800cca6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cca8:	e0bd      	b.n	800ce26 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	f040 80b9 	bne.w	800ce26 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	220a      	movs	r2, #10
 800ccb8:	701a      	strb	r2, [r3, #0]
      break;
 800ccba:	e0b4      	b.n	800ce26 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	220a      	movs	r2, #10
 800ccc0:	701a      	strb	r2, [r3, #0]
      break;
 800ccc2:	e0b0      	b.n	800ce26 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 80ad 	beq.w	800ce2a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73fb      	strb	r3, [r7, #15]
 800ccdc:	e016      	b.n	800cd0c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ccde:	7bfa      	ldrb	r2, [r7, #15]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	32de      	adds	r2, #222	; 0xde
 800cce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce8:	791a      	ldrb	r2, [r3, #4]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d108      	bne.n	800cd06 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ccf4:	7bfa      	ldrb	r2, [r7, #15]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	32de      	adds	r2, #222	; 0xde
 800ccfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cd04:	e005      	b.n	800cd12 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	73fb      	strb	r3, [r7, #15]
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0e5      	beq.n	800ccde <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d016      	beq.n	800cd4a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	4798      	blx	r3
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d109      	bne.n	800cd42 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2206      	movs	r2, #6
 800cd32:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd3a:	2103      	movs	r1, #3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd40:	e073      	b.n	800ce2a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	220d      	movs	r2, #13
 800cd46:	701a      	strb	r2, [r3, #0]
      break;
 800cd48:	e06f      	b.n	800ce2a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	220d      	movs	r2, #13
 800cd4e:	701a      	strb	r2, [r3, #0]
      break;
 800cd50:	e06b      	b.n	800ce2a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d017      	beq.n	800cd8c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	4798      	blx	r3
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	220b      	movs	r2, #11
 800cd78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd7a:	e058      	b.n	800ce2e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d154      	bne.n	800ce2e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	220d      	movs	r2, #13
 800cd88:	701a      	strb	r2, [r3, #0]
      break;
 800cd8a:	e050      	b.n	800ce2e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	220d      	movs	r2, #13
 800cd90:	701a      	strb	r2, [r3, #0]
      break;
 800cd92:	e04c      	b.n	800ce2e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d049      	beq.n	800ce32 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	4798      	blx	r3
      }
      break;
 800cdaa:	e042      	b.n	800ce32 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fd67 	bl	800c888 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d009      	beq.n	800cdd8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cde8:	2105      	movs	r1, #5
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d107      	bne.n	800ce0a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff fe20 	bl	800ca48 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce08:	e014      	b.n	800ce34 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f001 ff90 	bl	800ed30 <USBH_LL_Start>
      break;
 800ce10:	e010      	b.n	800ce34 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ce12:	bf00      	nop
 800ce14:	e00e      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce16:	bf00      	nop
 800ce18:	e00c      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce1a:	bf00      	nop
 800ce1c:	e00a      	b.n	800ce34 <USBH_Process+0x3cc>
    break;
 800ce1e:	bf00      	nop
 800ce20:	e008      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce22:	bf00      	nop
 800ce24:	e006      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce26:	bf00      	nop
 800ce28:	e004      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce2a:	bf00      	nop
 800ce2c:	e002      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce2e:	bf00      	nop
 800ce30:	e000      	b.n	800ce34 <USBH_Process+0x3cc>
      break;
 800ce32:	bf00      	nop
  }
  return USBH_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop

0800ce40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af04      	add	r7, sp, #16
 800ce46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	2b07      	cmp	r3, #7
 800ce56:	f200 81c1 	bhi.w	800d1dc <USBH_HandleEnum+0x39c>
 800ce5a:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <USBH_HandleEnum+0x20>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800ce81 	.word	0x0800ce81
 800ce64:	0800cf3f 	.word	0x0800cf3f
 800ce68:	0800cfa9 	.word	0x0800cfa9
 800ce6c:	0800d037 	.word	0x0800d037
 800ce70:	0800d0a1 	.word	0x0800d0a1
 800ce74:	0800d111 	.word	0x0800d111
 800ce78:	0800d157 	.word	0x0800d157
 800ce7c:	0800d19d 	.word	0x0800d19d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ce80:	2108      	movs	r1, #8
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fa50 	bl	800d328 <USBH_Get_DevDesc>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d130      	bne.n	800cef4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7919      	ldrb	r1, [r3, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ceb6:	b292      	uxth	r2, r2
 800ceb8:	9202      	str	r2, [sp, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	9201      	str	r2, [sp, #4]
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	4603      	mov	r3, r0
 800cec2:	2280      	movs	r2, #128	; 0x80
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f001 f865 	bl	800df94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	7959      	ldrb	r1, [r3, #5]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cede:	b292      	uxth	r2, r2
 800cee0:	9202      	str	r2, [sp, #8]
 800cee2:	2200      	movs	r2, #0
 800cee4:	9201      	str	r2, [sp, #4]
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	4603      	mov	r3, r0
 800ceea:	2200      	movs	r2, #0
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f001 f851 	bl	800df94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cef2:	e175      	b.n	800d1e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	f040 8172 	bne.w	800d1e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf02:	3301      	adds	r3, #1
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d903      	bls.n	800cf1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	220d      	movs	r2, #13
 800cf1a:	701a      	strb	r2, [r3, #0]
      break;
 800cf1c:	e160      	b.n	800d1e0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	795b      	ldrb	r3, [r3, #5]
 800cf22:	4619      	mov	r1, r3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f001 f885 	bl	800e034 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	791b      	ldrb	r3, [r3, #4]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 f87f 	bl	800e034 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
      break;
 800cf3c:	e150      	b.n	800d1e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cf3e:	2112      	movs	r1, #18
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9f1 	bl	800d328 <USBH_Get_DevDesc>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf56:	e145      	b.n	800d1e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	f040 8142 	bne.w	800d1e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d903      	bls.n	800cf82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	220d      	movs	r2, #13
 800cf7e:	701a      	strb	r2, [r3, #0]
      break;
 800cf80:	e130      	b.n	800d1e4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	795b      	ldrb	r3, [r3, #5]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 f853 	bl	800e034 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	791b      	ldrb	r3, [r3, #4]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 f84d 	bl	800e034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
      break;
 800cfa6:	e11d      	b.n	800d1e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa68 	bl	800d480 <USBH_SetAddress>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d132      	bne.n	800d020 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cfba:	2002      	movs	r0, #2
 800cfbc:	f002 f84c 	bl	800f058 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7919      	ldrb	r1, [r3, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cfe2:	b292      	uxth	r2, r2
 800cfe4:	9202      	str	r2, [sp, #8]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	9201      	str	r2, [sp, #4]
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4603      	mov	r3, r0
 800cfee:	2280      	movs	r2, #128	; 0x80
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 ffcf 	bl	800df94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7959      	ldrb	r1, [r3, #5]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d00a:	b292      	uxth	r2, r2
 800d00c:	9202      	str	r2, [sp, #8]
 800d00e:	2200      	movs	r2, #0
 800d010:	9201      	str	r2, [sp, #4]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	4603      	mov	r3, r0
 800d016:	2200      	movs	r2, #0
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 ffbb 	bl	800df94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d01e:	e0e3      	b.n	800d1e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	2b03      	cmp	r3, #3
 800d024:	f040 80e0 	bne.w	800d1e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	220d      	movs	r2, #13
 800d02c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	705a      	strb	r2, [r3, #1]
      break;
 800d034:	e0d8      	b.n	800d1e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d036:	2109      	movs	r1, #9
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f99d 	bl	800d378 <USBH_Get_CfgDesc>
 800d03e:	4603      	mov	r3, r0
 800d040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d042:	7bbb      	ldrb	r3, [r7, #14]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d103      	bne.n	800d050 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2204      	movs	r2, #4
 800d04c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d04e:	e0cd      	b.n	800d1ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d050:	7bbb      	ldrb	r3, [r7, #14]
 800d052:	2b03      	cmp	r3, #3
 800d054:	f040 80ca 	bne.w	800d1ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d05e:	3301      	adds	r3, #1
 800d060:	b2da      	uxtb	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d903      	bls.n	800d07a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	220d      	movs	r2, #13
 800d076:	701a      	strb	r2, [r3, #0]
      break;
 800d078:	e0b8      	b.n	800d1ec <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	795b      	ldrb	r3, [r3, #5]
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 ffd7 	bl	800e034 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	791b      	ldrb	r3, [r3, #4]
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 ffd1 	bl	800e034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	701a      	strb	r2, [r3, #0]
      break;
 800d09e:	e0a5      	b.n	800d1ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f965 	bl	800d378 <USBH_Get_CfgDesc>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d103      	bne.n	800d0c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2205      	movs	r2, #5
 800d0bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0be:	e097      	b.n	800d1f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	f040 8094 	bne.w	800d1f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d903      	bls.n	800d0ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	220d      	movs	r2, #13
 800d0e6:	701a      	strb	r2, [r3, #0]
      break;
 800d0e8:	e082      	b.n	800d1f0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	795b      	ldrb	r3, [r3, #5]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 ff9f 	bl	800e034 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	791b      	ldrb	r3, [r3, #4]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 ff99 	bl	800e034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	701a      	strb	r2, [r3, #0]
      break;
 800d10e:	e06f      	b.n	800d1f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d116:	2b00      	cmp	r3, #0
 800d118:	d019      	beq.n	800d14e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d126:	23ff      	movs	r3, #255	; 0xff
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f949 	bl	800d3c0 <USBH_Get_StringDesc>
 800d12e:	4603      	mov	r3, r0
 800d130:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d103      	bne.n	800d140 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2206      	movs	r2, #6
 800d13c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d13e:	e059      	b.n	800d1f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	2b03      	cmp	r3, #3
 800d144:	d156      	bne.n	800d1f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2206      	movs	r2, #6
 800d14a:	705a      	strb	r2, [r3, #1]
      break;
 800d14c:	e052      	b.n	800d1f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2206      	movs	r2, #6
 800d152:	705a      	strb	r2, [r3, #1]
      break;
 800d154:	e04e      	b.n	800d1f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d019      	beq.n	800d194 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d16c:	23ff      	movs	r3, #255	; 0xff
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f926 	bl	800d3c0 <USBH_Get_StringDesc>
 800d174:	4603      	mov	r3, r0
 800d176:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d178:	7bbb      	ldrb	r3, [r7, #14]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2207      	movs	r2, #7
 800d182:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d184:	e038      	b.n	800d1f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d135      	bne.n	800d1f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2207      	movs	r2, #7
 800d190:	705a      	strb	r2, [r3, #1]
      break;
 800d192:	e031      	b.n	800d1f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2207      	movs	r2, #7
 800d198:	705a      	strb	r2, [r3, #1]
      break;
 800d19a:	e02d      	b.n	800d1f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d017      	beq.n	800d1d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1b2:	23ff      	movs	r3, #255	; 0xff
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f903 	bl	800d3c0 <USBH_Get_StringDesc>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1be:	7bbb      	ldrb	r3, [r7, #14]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d102      	bne.n	800d1ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d1c8:	e018      	b.n	800d1fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1ca:	7bbb      	ldrb	r3, [r7, #14]
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d115      	bne.n	800d1fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d4:	e012      	b.n	800d1fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1da:	e00f      	b.n	800d1fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d1dc:	bf00      	nop
 800d1de:	e00e      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1e0:	bf00      	nop
 800d1e2:	e00c      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1e4:	bf00      	nop
 800d1e6:	e00a      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1e8:	bf00      	nop
 800d1ea:	e008      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1ec:	bf00      	nop
 800d1ee:	e006      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1f0:	bf00      	nop
 800d1f2:	e004      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1f4:	bf00      	nop
 800d1f6:	e002      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1f8:	bf00      	nop
 800d1fa:	e000      	b.n	800d1fe <USBH_HandleEnum+0x3be>
      break;
 800d1fc:	bf00      	nop
  }
  return Status;
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b082      	sub	sp, #8
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f804 	bl	800d24a <USBH_HandleSof>
}
 800d242:	bf00      	nop
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d10a      	bne.n	800d272 <USBH_HandleSof+0x28>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d26c:	699b      	ldr	r3, [r3, #24]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	4798      	blx	r3
  }
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b083      	sub	sp, #12
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d28a:	bf00      	nop
}
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d2a6:	bf00      	nop
}
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f001 fd30 	bl	800ed66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	791b      	ldrb	r3, [r3, #4]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fe91 	bl	800e034 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	795b      	ldrb	r3, [r3, #5]
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fe8b 	bl	800e034 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d33a:	78fb      	ldrb	r3, [r7, #3]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	4613      	mov	r3, r2
 800d342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d346:	2100      	movs	r1, #0
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f864 	bl	800d416 <USBH_GetDescriptor>
 800d34e:	4603      	mov	r3, r0
 800d350:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	b292      	uxth	r2, r2
 800d368:	4619      	mov	r1, r3
 800d36a:	f000 f918 	bl	800d59e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af02      	add	r7, sp, #8
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	460b      	mov	r3, r1
 800d382:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	331c      	adds	r3, #28
 800d388:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d38a:	887b      	ldrh	r3, [r7, #2]
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d394:	2100      	movs	r1, #0
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f83d 	bl	800d416 <USBH_GetDescriptor>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d107      	bne.n	800d3b6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d3a6:	887b      	ldrh	r3, [r7, #2]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f987 	bl	800d6c0 <USBH_ParseCfgDesc>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	607a      	str	r2, [r7, #4]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	72fb      	strb	r3, [r7, #11]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800d3d4:	7afb      	ldrb	r3, [r7, #11]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d3dc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d3e4:	893b      	ldrh	r3, [r7, #8]
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f812 	bl	800d416 <USBH_GetDescriptor>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d107      	bne.n	800d40c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d402:	893a      	ldrh	r2, [r7, #8]
 800d404:	6879      	ldr	r1, [r7, #4]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fb24 	bl	800da54 <USBH_ParseStringDesc>
  }

  return status;
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	607b      	str	r3, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	72fb      	strb	r3, [r7, #11]
 800d424:	4613      	mov	r3, r2
 800d426:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	789b      	ldrb	r3, [r3, #2]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d11c      	bne.n	800d46a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d430:	7afb      	ldrb	r3, [r7, #11]
 800d432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d436:	b2da      	uxtb	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2206      	movs	r2, #6
 800d440:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	893a      	ldrh	r2, [r7, #8]
 800d446:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d448:	893b      	ldrh	r3, [r7, #8]
 800d44a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d44e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d452:	d104      	bne.n	800d45e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f240 4209 	movw	r2, #1033	; 0x409
 800d45a:	829a      	strh	r2, [r3, #20]
 800d45c:	e002      	b.n	800d464 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	8b3a      	ldrh	r2, [r7, #24]
 800d468:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d46a:	8b3b      	ldrh	r3, [r7, #24]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f000 fb3d 	bl	800daf0 <USBH_CtlReq>
 800d476:	4603      	mov	r3, r0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	789b      	ldrb	r3, [r3, #2]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d10f      	bne.n	800d4b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2205      	movs	r2, #5
 800d49e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d4a0:	78fb      	ldrb	r3, [r7, #3]
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fb19 	bl	800daf0 <USBH_CtlReq>
 800d4be:	4603      	mov	r3, r0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	789b      	ldrb	r3, [r3, #2]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d10e      	bne.n	800d4fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2209      	movs	r2, #9
 800d4e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	887a      	ldrh	r2, [r7, #2]
 800d4ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 faf6 	bl	800daf0 <USBH_CtlReq>
 800d504:	4603      	mov	r3, r0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	460b      	mov	r3, r1
 800d518:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	789b      	ldrb	r3, [r3, #2]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d10f      	bne.n	800d542 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2203      	movs	r2, #3
 800d52c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d52e:	78fb      	ldrb	r3, [r7, #3]
 800d530:	b29a      	uxth	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d542:	2200      	movs	r2, #0
 800d544:	2100      	movs	r1, #0
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fad2 	bl	800daf0 <USBH_CtlReq>
 800d54c:	4603      	mov	r3, r0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	789b      	ldrb	r3, [r3, #2]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d10f      	bne.n	800d58a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2202      	movs	r2, #2
 800d56e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800d58a:	2200      	movs	r2, #0
 800d58c:	2100      	movs	r1, #0
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 faae 	bl	800daf0 <USBH_CtlReq>
 800d594:	4603      	mov	r3, r0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	781a      	ldrb	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	785a      	ldrb	r2, [r3, #1]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	3302      	adds	r3, #2
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	3303      	adds	r3, #3
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	791a      	ldrb	r2, [r3, #4]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	795a      	ldrb	r2, [r3, #5]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	799a      	ldrb	r2, [r3, #6]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	79da      	ldrb	r2, [r3, #7]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	79db      	ldrb	r3, [r3, #7]
 800d5fc:	2b20      	cmp	r3, #32
 800d5fe:	dc11      	bgt.n	800d624 <USBH_ParseDevDesc+0x86>
 800d600:	2b08      	cmp	r3, #8
 800d602:	db16      	blt.n	800d632 <USBH_ParseDevDesc+0x94>
 800d604:	3b08      	subs	r3, #8
 800d606:	2201      	movs	r2, #1
 800d608:	fa02 f303 	lsl.w	r3, r2, r3
 800d60c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d614:	2b00      	cmp	r3, #0
 800d616:	bf14      	ite	ne
 800d618:	2301      	movne	r3, #1
 800d61a:	2300      	moveq	r3, #0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d102      	bne.n	800d628 <USBH_ParseDevDesc+0x8a>
 800d622:	e006      	b.n	800d632 <USBH_ParseDevDesc+0x94>
 800d624:	2b40      	cmp	r3, #64	; 0x40
 800d626:	d104      	bne.n	800d632 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	79da      	ldrb	r2, [r3, #7]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	71da      	strb	r2, [r3, #7]
      break;
 800d630:	e003      	b.n	800d63a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2240      	movs	r2, #64	; 0x40
 800d636:	71da      	strb	r2, [r3, #7]
      break;
 800d638:	bf00      	nop
  }

  if (length > 8U)
 800d63a:	88fb      	ldrh	r3, [r7, #6]
 800d63c:	2b08      	cmp	r3, #8
 800d63e:	d939      	bls.n	800d6b4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	3308      	adds	r3, #8
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b29a      	uxth	r2, r3
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	3309      	adds	r3, #9
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	b29b      	uxth	r3, r3
 800d650:	021b      	lsls	r3, r3, #8
 800d652:	b29b      	uxth	r3, r3
 800d654:	4313      	orrs	r3, r2
 800d656:	b29a      	uxth	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	330a      	adds	r3, #10
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b29a      	uxth	r2, r3
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	330b      	adds	r3, #11
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4313      	orrs	r3, r2
 800d672:	b29a      	uxth	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	330c      	adds	r3, #12
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	b29a      	uxth	r2, r3
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	330d      	adds	r3, #13
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	b29b      	uxth	r3, r3
 800d688:	021b      	lsls	r3, r3, #8
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	4313      	orrs	r3, r2
 800d68e:	b29a      	uxth	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	7b9a      	ldrb	r2, [r3, #14]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	7bda      	ldrb	r2, [r3, #15]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	7c1a      	ldrb	r2, [r3, #16]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	7c5a      	ldrb	r2, [r3, #17]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	745a      	strb	r2, [r3, #17]
  }
}
 800d6b4:	bf00      	nop
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08c      	sub	sp, #48	; 0x30
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d6d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	781a      	ldrb	r2, [r3, #0]
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	785a      	ldrb	r2, [r3, #1]
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	3302      	adds	r3, #2
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	b29a      	uxth	r2, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	3303      	adds	r3, #3
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	b29b      	uxth	r3, r3
 800d710:	021b      	lsls	r3, r3, #8
 800d712:	b29b      	uxth	r3, r3
 800d714:	4313      	orrs	r3, r2
 800d716:	b29b      	uxth	r3, r3
 800d718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d71c:	bf28      	it	cs
 800d71e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d722:	b29a      	uxth	r2, r3
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	791a      	ldrb	r2, [r3, #4]
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	795a      	ldrb	r2, [r3, #5]
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	799a      	ldrb	r2, [r3, #6]
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	79da      	ldrb	r2, [r3, #7]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	7a1a      	ldrb	r2, [r3, #8]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b09      	cmp	r3, #9
 800d756:	d002      	beq.n	800d75e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	2209      	movs	r2, #9
 800d75c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d75e:	88fb      	ldrh	r3, [r7, #6]
 800d760:	2b09      	cmp	r3, #9
 800d762:	f240 809d 	bls.w	800d8a0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d766:	2309      	movs	r3, #9
 800d768:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d76e:	e081      	b.n	800d874 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d770:	f107 0316 	add.w	r3, r7, #22
 800d774:	4619      	mov	r1, r3
 800d776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d778:	f000 f99f 	bl	800daba <USBH_GetNextDesc>
 800d77c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	785b      	ldrb	r3, [r3, #1]
 800d782:	2b04      	cmp	r3, #4
 800d784:	d176      	bne.n	800d874 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	2b09      	cmp	r3, #9
 800d78c:	d002      	beq.n	800d794 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	2209      	movs	r2, #9
 800d792:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d798:	221a      	movs	r2, #26
 800d79a:	fb02 f303 	mul.w	r3, r2, r3
 800d79e:	3308      	adds	r3, #8
 800d7a0:	6a3a      	ldr	r2, [r7, #32]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	3302      	adds	r3, #2
 800d7a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d7a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7aa:	69f8      	ldr	r0, [r7, #28]
 800d7ac:	f000 f87e 	bl	800d8ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d7ba:	e043      	b.n	800d844 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d7bc:	f107 0316 	add.w	r3, r7, #22
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7c4:	f000 f979 	bl	800daba <USBH_GetNextDesc>
 800d7c8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	2b05      	cmp	r3, #5
 800d7d0:	d138      	bne.n	800d844 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	795b      	ldrb	r3, [r3, #5]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d10f      	bne.n	800d7fa <USBH_ParseCfgDesc+0x13a>
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	799b      	ldrb	r3, [r3, #6]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d10b      	bne.n	800d7fa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	79db      	ldrb	r3, [r3, #7]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10f      	bne.n	800d80a <USBH_ParseCfgDesc+0x14a>
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b09      	cmp	r3, #9
 800d7f0:	d00b      	beq.n	800d80a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	2209      	movs	r2, #9
 800d7f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7f8:	e007      	b.n	800d80a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b07      	cmp	r3, #7
 800d800:	d004      	beq.n	800d80c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d804:	2207      	movs	r2, #7
 800d806:	701a      	strb	r2, [r3, #0]
 800d808:	e000      	b.n	800d80c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d80a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d810:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d814:	3201      	adds	r2, #1
 800d816:	00d2      	lsls	r2, r2, #3
 800d818:	211a      	movs	r1, #26
 800d81a:	fb01 f303 	mul.w	r3, r1, r3
 800d81e:	4413      	add	r3, r2
 800d820:	3308      	adds	r3, #8
 800d822:	6a3a      	ldr	r2, [r7, #32]
 800d824:	4413      	add	r3, r2
 800d826:	3304      	adds	r3, #4
 800d828:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d82c:	69b9      	ldr	r1, [r7, #24]
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f000 f86b 	bl	800d90a <USBH_ParseEPDesc>
 800d834:	4603      	mov	r3, r0
 800d836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d83a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d83e:	3301      	adds	r3, #1
 800d840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	791b      	ldrb	r3, [r3, #4]
 800d848:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d204      	bcs.n	800d85a <USBH_ParseCfgDesc+0x19a>
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	885a      	ldrh	r2, [r3, #2]
 800d854:	8afb      	ldrh	r3, [r7, #22]
 800d856:	429a      	cmp	r2, r3
 800d858:	d8b0      	bhi.n	800d7bc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	791b      	ldrb	r3, [r3, #4]
 800d85e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d862:	429a      	cmp	r2, r3
 800d864:	d201      	bcs.n	800d86a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d866:	2303      	movs	r3, #3
 800d868:	e01c      	b.n	800d8a4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d86e:	3301      	adds	r3, #1
 800d870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d805      	bhi.n	800d888 <USBH_ParseCfgDesc+0x1c8>
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	885a      	ldrh	r2, [r3, #2]
 800d880:	8afb      	ldrh	r3, [r7, #22]
 800d882:	429a      	cmp	r2, r3
 800d884:	f63f af74 	bhi.w	800d770 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	791b      	ldrb	r3, [r3, #4]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	bf28      	it	cs
 800d890:	2302      	movcs	r3, #2
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d898:	429a      	cmp	r2, r3
 800d89a:	d201      	bcs.n	800d8a0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d89c:	2303      	movs	r3, #3
 800d89e:	e001      	b.n	800d8a4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3730      	adds	r7, #48	; 0x30
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	785a      	ldrb	r2, [r3, #1]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	789a      	ldrb	r2, [r3, #2]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	78da      	ldrb	r2, [r3, #3]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	791a      	ldrb	r2, [r3, #4]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	795a      	ldrb	r2, [r3, #5]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	799a      	ldrb	r2, [r3, #6]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	79da      	ldrb	r2, [r3, #7]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	7a1a      	ldrb	r2, [r3, #8]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	721a      	strb	r2, [r3, #8]
}
 800d8fe:	bf00      	nop
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b087      	sub	sp, #28
 800d90e:	af00      	add	r7, sp, #0
 800d910:	60f8      	str	r0, [r7, #12]
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	785a      	ldrb	r2, [r3, #1]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	789a      	ldrb	r2, [r3, #2]
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	78da      	ldrb	r2, [r3, #3]
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3304      	adds	r3, #4
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3305      	adds	r3, #5
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	4313      	orrs	r3, r2
 800d950:	b29a      	uxth	r2, r3
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	799a      	ldrb	r2, [r3, #6]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	889b      	ldrh	r3, [r3, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d102      	bne.n	800d96c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d966:	2303      	movs	r3, #3
 800d968:	75fb      	strb	r3, [r7, #23]
 800d96a:	e033      	b.n	800d9d4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	889b      	ldrh	r3, [r3, #4]
 800d970:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d974:	f023 0307 	bic.w	r3, r3, #7
 800d978:	b29a      	uxth	r2, r3
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	889b      	ldrh	r3, [r3, #4]
 800d982:	b21a      	sxth	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	3304      	adds	r3, #4
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	b299      	uxth	r1, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3305      	adds	r3, #5
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b29b      	uxth	r3, r3
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	b29b      	uxth	r3, r3
 800d998:	430b      	orrs	r3, r1
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d110      	bne.n	800d9c6 <USBH_ParseEPDesc+0xbc>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	b299      	uxth	r1, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3305      	adds	r3, #5
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	021b      	lsls	r3, r3, #8
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	430b      	orrs	r3, r1
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	b21b      	sxth	r3, r3
 800d9be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9c2:	b21b      	sxth	r3, r3
 800d9c4:	e001      	b.n	800d9ca <USBH_ParseEPDesc+0xc0>
 800d9c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d116      	bne.n	800da0c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	78db      	ldrb	r3, [r3, #3]
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d005      	beq.n	800d9f6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	78db      	ldrb	r3, [r3, #3]
 800d9ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d127      	bne.n	800da46 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	799b      	ldrb	r3, [r3, #6]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <USBH_ParseEPDesc+0xfc>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	799b      	ldrb	r3, [r3, #6]
 800da02:	2b10      	cmp	r3, #16
 800da04:	d91f      	bls.n	800da46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800da06:	2303      	movs	r3, #3
 800da08:	75fb      	strb	r3, [r7, #23]
 800da0a:	e01c      	b.n	800da46 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	78db      	ldrb	r3, [r3, #3]
 800da10:	f003 0303 	and.w	r3, r3, #3
 800da14:	2b01      	cmp	r3, #1
 800da16:	d10a      	bne.n	800da2e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	799b      	ldrb	r3, [r3, #6]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <USBH_ParseEPDesc+0x11e>
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	799b      	ldrb	r3, [r3, #6]
 800da24:	2b10      	cmp	r3, #16
 800da26:	d90e      	bls.n	800da46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800da28:	2303      	movs	r3, #3
 800da2a:	75fb      	strb	r3, [r7, #23]
 800da2c:	e00b      	b.n	800da46 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	78db      	ldrb	r3, [r3, #3]
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	2b03      	cmp	r3, #3
 800da38:	d105      	bne.n	800da46 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	799b      	ldrb	r3, [r3, #6]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800da42:	2303      	movs	r3, #3
 800da44:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800da46:	7dfb      	ldrb	r3, [r7, #23]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	371c      	adds	r7, #28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3301      	adds	r3, #1
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d120      	bne.n	800daae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	1e9a      	subs	r2, r3, #2
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	4293      	cmp	r3, r2
 800da76:	bf28      	it	cs
 800da78:	4613      	movcs	r3, r2
 800da7a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3302      	adds	r3, #2
 800da80:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800da82:	2300      	movs	r3, #0
 800da84:	82fb      	strh	r3, [r7, #22]
 800da86:	e00b      	b.n	800daa0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800da88:	8afb      	ldrh	r3, [r7, #22]
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	4413      	add	r3, r2
 800da8e:	781a      	ldrb	r2, [r3, #0]
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	701a      	strb	r2, [r3, #0]
      pdest++;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3301      	adds	r3, #1
 800da98:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800da9a:	8afb      	ldrh	r3, [r7, #22]
 800da9c:	3302      	adds	r3, #2
 800da9e:	82fb      	strh	r3, [r7, #22]
 800daa0:	8afa      	ldrh	r2, [r7, #22]
 800daa2:	8abb      	ldrh	r3, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d3ef      	bcc.n	800da88 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	2200      	movs	r2, #0
 800daac:	701a      	strb	r2, [r3, #0]
  }
}
 800daae:	bf00      	nop
 800dab0:	371c      	adds	r7, #28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800daba:	b480      	push	{r7}
 800dabc:	b085      	sub	sp, #20
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	881a      	ldrh	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	4413      	add	r3, r2
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4413      	add	r3, r2
 800dae0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dae2:	68fb      	ldr	r3, [r7, #12]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	4613      	mov	r3, r2
 800dafc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dafe:	2301      	movs	r3, #1
 800db00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	789b      	ldrb	r3, [r3, #2]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d002      	beq.n	800db10 <USBH_CtlReq+0x20>
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d00f      	beq.n	800db2e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800db0e:	e027      	b.n	800db60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	88fa      	ldrh	r2, [r7, #6]
 800db1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2201      	movs	r2, #1
 800db20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2202      	movs	r2, #2
 800db26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800db28:	2301      	movs	r3, #1
 800db2a:	75fb      	strb	r3, [r7, #23]
      break;
 800db2c:	e018      	b.n	800db60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 f81c 	bl	800db6c <USBH_HandleControl>
 800db34:	4603      	mov	r3, r0
 800db36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800db38:	7dfb      	ldrb	r3, [r7, #23]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <USBH_CtlReq+0x54>
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b03      	cmp	r3, #3
 800db42:	d106      	bne.n	800db52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2201      	movs	r2, #1
 800db48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	761a      	strb	r2, [r3, #24]
      break;
 800db50:	e005      	b.n	800db5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800db52:	7dfb      	ldrb	r3, [r7, #23]
 800db54:	2b02      	cmp	r3, #2
 800db56:	d102      	bne.n	800db5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2201      	movs	r2, #1
 800db5c:	709a      	strb	r2, [r3, #2]
      break;
 800db5e:	bf00      	nop
  }
  return status;
 800db60:	7dfb      	ldrb	r3, [r7, #23]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af02      	add	r7, sp, #8
 800db72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800db74:	2301      	movs	r3, #1
 800db76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db78:	2300      	movs	r3, #0
 800db7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7e1b      	ldrb	r3, [r3, #24]
 800db80:	3b01      	subs	r3, #1
 800db82:	2b0a      	cmp	r3, #10
 800db84:	f200 8156 	bhi.w	800de34 <USBH_HandleControl+0x2c8>
 800db88:	a201      	add	r2, pc, #4	; (adr r2, 800db90 <USBH_HandleControl+0x24>)
 800db8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8e:	bf00      	nop
 800db90:	0800dbbd 	.word	0x0800dbbd
 800db94:	0800dbd7 	.word	0x0800dbd7
 800db98:	0800dc41 	.word	0x0800dc41
 800db9c:	0800dc67 	.word	0x0800dc67
 800dba0:	0800dc9f 	.word	0x0800dc9f
 800dba4:	0800dcc9 	.word	0x0800dcc9
 800dba8:	0800dd1b 	.word	0x0800dd1b
 800dbac:	0800dd3d 	.word	0x0800dd3d
 800dbb0:	0800dd79 	.word	0x0800dd79
 800dbb4:	0800dd9f 	.word	0x0800dd9f
 800dbb8:	0800dddd 	.word	0x0800dddd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f103 0110 	add.w	r1, r3, #16
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	795b      	ldrb	r3, [r3, #5]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f943 	bl	800de54 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	761a      	strb	r2, [r3, #24]
      break;
 800dbd4:	e139      	b.n	800de4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	795b      	ldrb	r3, [r3, #5]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f001 f9b1 	bl	800ef44 <USBH_LL_GetURBState>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbe6:	7bbb      	ldrb	r3, [r7, #14]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d11e      	bne.n	800dc2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	7c1b      	ldrb	r3, [r3, #16]
 800dbf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8adb      	ldrh	r3, [r3, #22]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00a      	beq.n	800dc14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dbfe:	7b7b      	ldrb	r3, [r7, #13]
 800dc00:	2b80      	cmp	r3, #128	; 0x80
 800dc02:	d103      	bne.n	800dc0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2203      	movs	r2, #3
 800dc08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc0a:	e115      	b.n	800de38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2205      	movs	r2, #5
 800dc10:	761a      	strb	r2, [r3, #24]
      break;
 800dc12:	e111      	b.n	800de38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dc14:	7b7b      	ldrb	r3, [r7, #13]
 800dc16:	2b80      	cmp	r3, #128	; 0x80
 800dc18:	d103      	bne.n	800dc22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2209      	movs	r2, #9
 800dc1e:	761a      	strb	r2, [r3, #24]
      break;
 800dc20:	e10a      	b.n	800de38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2207      	movs	r2, #7
 800dc26:	761a      	strb	r2, [r3, #24]
      break;
 800dc28:	e106      	b.n	800de38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d003      	beq.n	800dc38 <USBH_HandleControl+0xcc>
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	f040 8100 	bne.w	800de38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	220b      	movs	r2, #11
 800dc3c:	761a      	strb	r2, [r3, #24]
      break;
 800dc3e:	e0fb      	b.n	800de38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6899      	ldr	r1, [r3, #8]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	899a      	ldrh	r2, [r3, #12]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	791b      	ldrb	r3, [r3, #4]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 f93a 	bl	800ded2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2204      	movs	r2, #4
 800dc62:	761a      	strb	r2, [r3, #24]
      break;
 800dc64:	e0f1      	b.n	800de4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	791b      	ldrb	r3, [r3, #4]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f001 f969 	bl	800ef44 <USBH_LL_GetURBState>
 800dc72:	4603      	mov	r3, r0
 800dc74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d102      	bne.n	800dc82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2209      	movs	r2, #9
 800dc80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
 800dc84:	2b05      	cmp	r3, #5
 800dc86:	d102      	bne.n	800dc8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dc88:	2303      	movs	r3, #3
 800dc8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc8c:	e0d6      	b.n	800de3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	f040 80d3 	bne.w	800de3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	220b      	movs	r2, #11
 800dc9a:	761a      	strb	r2, [r3, #24]
      break;
 800dc9c:	e0ce      	b.n	800de3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6899      	ldr	r1, [r3, #8]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	899a      	ldrh	r2, [r3, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	795b      	ldrb	r3, [r3, #5]
 800dcaa:	2001      	movs	r0, #1
 800dcac:	9000      	str	r0, [sp, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f8ea 	bl	800de88 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2206      	movs	r2, #6
 800dcc4:	761a      	strb	r2, [r3, #24]
      break;
 800dcc6:	e0c0      	b.n	800de4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	795b      	ldrb	r3, [r3, #5]
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f001 f938 	bl	800ef44 <USBH_LL_GetURBState>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d103      	bne.n	800dce6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2207      	movs	r2, #7
 800dce2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dce4:	e0ac      	b.n	800de40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800dce6:	7bbb      	ldrb	r3, [r7, #14]
 800dce8:	2b05      	cmp	r3, #5
 800dcea:	d105      	bne.n	800dcf8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	220c      	movs	r2, #12
 800dcf0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	73fb      	strb	r3, [r7, #15]
      break;
 800dcf6:	e0a3      	b.n	800de40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d103      	bne.n	800dd06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2205      	movs	r2, #5
 800dd02:	761a      	strb	r2, [r3, #24]
      break;
 800dd04:	e09c      	b.n	800de40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	f040 8099 	bne.w	800de40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	220b      	movs	r2, #11
 800dd12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dd14:	2302      	movs	r3, #2
 800dd16:	73fb      	strb	r3, [r7, #15]
      break;
 800dd18:	e092      	b.n	800de40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	791b      	ldrb	r3, [r3, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f8d5 	bl	800ded2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2208      	movs	r2, #8
 800dd38:	761a      	strb	r2, [r3, #24]

      break;
 800dd3a:	e086      	b.n	800de4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	791b      	ldrb	r3, [r3, #4]
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f001 f8fe 	bl	800ef44 <USBH_LL_GetURBState>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d105      	bne.n	800dd5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	220d      	movs	r2, #13
 800dd56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd5c:	e072      	b.n	800de44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	2b04      	cmp	r3, #4
 800dd62:	d103      	bne.n	800dd6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	220b      	movs	r2, #11
 800dd68:	761a      	strb	r2, [r3, #24]
      break;
 800dd6a:	e06b      	b.n	800de44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d168      	bne.n	800de44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dd72:	2303      	movs	r3, #3
 800dd74:	73fb      	strb	r3, [r7, #15]
      break;
 800dd76:	e065      	b.n	800de44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	795b      	ldrb	r3, [r3, #5]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	9200      	str	r2, [sp, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	2100      	movs	r1, #0
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f87f 	bl	800de88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	220a      	movs	r2, #10
 800dd9a:	761a      	strb	r2, [r3, #24]
      break;
 800dd9c:	e055      	b.n	800de4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	795b      	ldrb	r3, [r3, #5]
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f001 f8cd 	bl	800ef44 <USBH_LL_GetURBState>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d105      	bne.n	800ddc0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	220d      	movs	r2, #13
 800ddbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ddbe:	e043      	b.n	800de48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ddc0:	7bbb      	ldrb	r3, [r7, #14]
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d103      	bne.n	800ddce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2209      	movs	r2, #9
 800ddca:	761a      	strb	r2, [r3, #24]
      break;
 800ddcc:	e03c      	b.n	800de48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ddce:	7bbb      	ldrb	r3, [r7, #14]
 800ddd0:	2b04      	cmp	r3, #4
 800ddd2:	d139      	bne.n	800de48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	220b      	movs	r2, #11
 800ddd8:	761a      	strb	r2, [r3, #24]
      break;
 800ddda:	e035      	b.n	800de48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	7e5b      	ldrb	r3, [r3, #25]
 800dde0:	3301      	adds	r3, #1
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	765a      	strb	r2, [r3, #25]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	7e5b      	ldrb	r3, [r3, #25]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d806      	bhi.n	800ddfe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ddfc:	e025      	b.n	800de4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de04:	2106      	movs	r1, #6
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	795b      	ldrb	r3, [r3, #5]
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f90c 	bl	800e034 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	791b      	ldrb	r3, [r3, #4]
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f906 	bl	800e034 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800de2e:	2302      	movs	r3, #2
 800de30:	73fb      	strb	r3, [r7, #15]
      break;
 800de32:	e00a      	b.n	800de4a <USBH_HandleControl+0x2de>

    default:
      break;
 800de34:	bf00      	nop
 800de36:	e008      	b.n	800de4a <USBH_HandleControl+0x2de>
      break;
 800de38:	bf00      	nop
 800de3a:	e006      	b.n	800de4a <USBH_HandleControl+0x2de>
      break;
 800de3c:	bf00      	nop
 800de3e:	e004      	b.n	800de4a <USBH_HandleControl+0x2de>
      break;
 800de40:	bf00      	nop
 800de42:	e002      	b.n	800de4a <USBH_HandleControl+0x2de>
      break;
 800de44:	bf00      	nop
 800de46:	e000      	b.n	800de4a <USBH_HandleControl+0x2de>
      break;
 800de48:	bf00      	nop
  }

  return status;
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3710      	adds	r7, #16
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af04      	add	r7, sp, #16
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de62:	79f9      	ldrb	r1, [r7, #7]
 800de64:	2300      	movs	r3, #0
 800de66:	9303      	str	r3, [sp, #12]
 800de68:	2308      	movs	r3, #8
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	2200      	movs	r2, #0
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f001 f832 	bl	800eee2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af04      	add	r7, sp, #16
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4611      	mov	r1, r2
 800de94:	461a      	mov	r2, r3
 800de96:	460b      	mov	r3, r1
 800de98:	80fb      	strh	r3, [r7, #6]
 800de9a:	4613      	mov	r3, r2
 800de9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dea8:	2300      	movs	r3, #0
 800deaa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800deac:	7979      	ldrb	r1, [r7, #5]
 800deae:	7e3b      	ldrb	r3, [r7, #24]
 800deb0:	9303      	str	r3, [sp, #12]
 800deb2:	88fb      	ldrh	r3, [r7, #6]
 800deb4:	9302      	str	r3, [sp, #8]
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	2301      	movs	r3, #1
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2300      	movs	r3, #0
 800dec0:	2200      	movs	r2, #0
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f001 f80d 	bl	800eee2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b088      	sub	sp, #32
 800ded6:	af04      	add	r7, sp, #16
 800ded8:	60f8      	str	r0, [r7, #12]
 800deda:	60b9      	str	r1, [r7, #8]
 800dedc:	4611      	mov	r1, r2
 800dede:	461a      	mov	r2, r3
 800dee0:	460b      	mov	r3, r1
 800dee2:	80fb      	strh	r3, [r7, #6]
 800dee4:	4613      	mov	r3, r2
 800dee6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dee8:	7979      	ldrb	r1, [r7, #5]
 800deea:	2300      	movs	r3, #0
 800deec:	9303      	str	r3, [sp, #12]
 800deee:	88fb      	ldrh	r3, [r7, #6]
 800def0:	9302      	str	r3, [sp, #8]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	2301      	movs	r3, #1
 800def8:	9300      	str	r3, [sp, #0]
 800defa:	2300      	movs	r3, #0
 800defc:	2201      	movs	r2, #1
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f000 ffef 	bl	800eee2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800df04:	2300      	movs	r3, #0

}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b088      	sub	sp, #32
 800df12:	af04      	add	r7, sp, #16
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	4611      	mov	r1, r2
 800df1a:	461a      	mov	r2, r3
 800df1c:	460b      	mov	r3, r1
 800df1e:	80fb      	strh	r3, [r7, #6]
 800df20:	4613      	mov	r3, r2
 800df22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d001      	beq.n	800df32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df32:	7979      	ldrb	r1, [r7, #5]
 800df34:	7e3b      	ldrb	r3, [r7, #24]
 800df36:	9303      	str	r3, [sp, #12]
 800df38:	88fb      	ldrh	r3, [r7, #6]
 800df3a:	9302      	str	r3, [sp, #8]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	9301      	str	r3, [sp, #4]
 800df40:	2301      	movs	r3, #1
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	2302      	movs	r3, #2
 800df46:	2200      	movs	r2, #0
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 ffca 	bl	800eee2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af04      	add	r7, sp, #16
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4611      	mov	r1, r2
 800df64:	461a      	mov	r2, r3
 800df66:	460b      	mov	r3, r1
 800df68:	80fb      	strh	r3, [r7, #6]
 800df6a:	4613      	mov	r3, r2
 800df6c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df6e:	7979      	ldrb	r1, [r7, #5]
 800df70:	2300      	movs	r3, #0
 800df72:	9303      	str	r3, [sp, #12]
 800df74:	88fb      	ldrh	r3, [r7, #6]
 800df76:	9302      	str	r3, [sp, #8]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	9301      	str	r3, [sp, #4]
 800df7c:	2301      	movs	r3, #1
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	2302      	movs	r3, #2
 800df82:	2201      	movs	r2, #1
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 ffac 	bl	800eee2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af04      	add	r7, sp, #16
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	4608      	mov	r0, r1
 800df9e:	4611      	mov	r1, r2
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	70fb      	strb	r3, [r7, #3]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	70bb      	strb	r3, [r7, #2]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dfae:	7878      	ldrb	r0, [r7, #1]
 800dfb0:	78ba      	ldrb	r2, [r7, #2]
 800dfb2:	78f9      	ldrb	r1, [r7, #3]
 800dfb4:	8b3b      	ldrh	r3, [r7, #24]
 800dfb6:	9302      	str	r3, [sp, #8]
 800dfb8:	7d3b      	ldrb	r3, [r7, #20]
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	7c3b      	ldrb	r3, [r7, #16]
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 ff3f 	bl	800ee46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800dfde:	78fb      	ldrb	r3, [r7, #3]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 ff5e 	bl	800eea4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b084      	sub	sp, #16
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	460b      	mov	r3, r1
 800dffc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f836 	bl	800e070 <USBH_GetFreePipe>
 800e004:	4603      	mov	r3, r0
 800e006:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e008:	89fb      	ldrh	r3, [r7, #14]
 800e00a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e00e:	4293      	cmp	r3, r2
 800e010:	d00a      	beq.n	800e028 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e012:	78fa      	ldrb	r2, [r7, #3]
 800e014:	89fb      	ldrh	r3, [r7, #14]
 800e016:	f003 030f 	and.w	r3, r3, #15
 800e01a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	33e0      	adds	r3, #224	; 0xe0
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	b2db      	uxtb	r3, r3
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	2b0f      	cmp	r3, #15
 800e044:	d80d      	bhi.n	800e062 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e046:	78fb      	ldrb	r3, [r7, #3]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	33e0      	adds	r3, #224	; 0xe0
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	78fb      	ldrb	r3, [r7, #3]
 800e054:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	33e0      	adds	r3, #224	; 0xe0
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e078:	2300      	movs	r3, #0
 800e07a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]
 800e080:	e00f      	b.n	800e0a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	33e0      	adds	r3, #224	; 0xe0
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	e007      	b.n	800e0ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	73fb      	strb	r3, [r7, #15]
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
 800e0a4:	2b0f      	cmp	r3, #15
 800e0a6:	d9ec      	bls.n	800e082 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	4a08      	ldr	r2, [pc, #32]	; (800e0e8 <disk_status+0x30>)
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4413      	add	r3, r2
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	79fa      	ldrb	r2, [r7, #7]
 800e0d0:	4905      	ldr	r1, [pc, #20]	; (800e0e8 <disk_status+0x30>)
 800e0d2:	440a      	add	r2, r1
 800e0d4:	7a12      	ldrb	r2, [r2, #8]
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	200035dc 	.word	0x200035dc

0800e0ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <disk_initialize+0x48>)
 800e0fe:	5cd3      	ldrb	r3, [r2, r3]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d111      	bne.n	800e128 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	4a0b      	ldr	r2, [pc, #44]	; (800e134 <disk_initialize+0x48>)
 800e108:	2101      	movs	r1, #1
 800e10a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	4a09      	ldr	r2, [pc, #36]	; (800e134 <disk_initialize+0x48>)
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	79fa      	ldrb	r2, [r7, #7]
 800e11a:	4906      	ldr	r1, [pc, #24]	; (800e134 <disk_initialize+0x48>)
 800e11c:	440a      	add	r2, r1
 800e11e:	7a12      	ldrb	r2, [r2, #8]
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e128:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	200035dc 	.word	0x200035dc

0800e138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60b9      	str	r1, [r7, #8]
 800e140:	607a      	str	r2, [r7, #4]
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	4a0a      	ldr	r2, [pc, #40]	; (800e174 <disk_read+0x3c>)
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	689c      	ldr	r4, [r3, #8]
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4a07      	ldr	r2, [pc, #28]	; (800e174 <disk_read+0x3c>)
 800e158:	4413      	add	r3, r2
 800e15a:	7a18      	ldrb	r0, [r3, #8]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	68b9      	ldr	r1, [r7, #8]
 800e162:	47a0      	blx	r4
 800e164:	4603      	mov	r3, r0
 800e166:	75fb      	strb	r3, [r7, #23]
  return res;
 800e168:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd90      	pop	{r4, r7, pc}
 800e172:	bf00      	nop
 800e174:	200035dc 	.word	0x200035dc

0800e178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b087      	sub	sp, #28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4603      	mov	r3, r0
 800e186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	4a0a      	ldr	r2, [pc, #40]	; (800e1b4 <disk_write+0x3c>)
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4413      	add	r3, r2
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	68dc      	ldr	r4, [r3, #12]
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	4a07      	ldr	r2, [pc, #28]	; (800e1b4 <disk_write+0x3c>)
 800e198:	4413      	add	r3, r2
 800e19a:	7a18      	ldrb	r0, [r3, #8]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68b9      	ldr	r1, [r7, #8]
 800e1a2:	47a0      	blx	r4
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd90      	pop	{r4, r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	200035dc 	.word	0x200035dc

0800e1b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e1c8:	89fb      	ldrh	r3, [r7, #14]
 800e1ca:	021b      	lsls	r3, r3, #8
 800e1cc:	b21a      	sxth	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	b21b      	sxth	r3, r3
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e1da:	89fb      	ldrh	r3, [r7, #14]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3714      	adds	r7, #20
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3303      	adds	r3, #3
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	021b      	lsls	r3, r3, #8
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	3202      	adds	r2, #2
 800e200:	7812      	ldrb	r2, [r2, #0]
 800e202:	4313      	orrs	r3, r2
 800e204:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	3201      	adds	r2, #1
 800e20e:	7812      	ldrb	r2, [r2, #0]
 800e210:	4313      	orrs	r3, r2
 800e212:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	021b      	lsls	r3, r3, #8
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	7812      	ldrb	r2, [r2, #0]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e220:	68fb      	ldr	r3, [r7, #12]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
	...

0800e230 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e238:	2300      	movs	r3, #0
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	e010      	b.n	800e260 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e23e:	4a0d      	ldr	r2, [pc, #52]	; (800e274 <clear_lock+0x44>)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	011b      	lsls	r3, r3, #4
 800e244:	4413      	add	r3, r2
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d105      	bne.n	800e25a <clear_lock+0x2a>
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <clear_lock+0x44>)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	4413      	add	r3, r2
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3301      	adds	r3, #1
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d9eb      	bls.n	800e23e <clear_lock+0xe>
	}
}
 800e266:	bf00      	nop
 800e268:	bf00      	nop
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	200035bc 	.word	0x200035bc

0800e278 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	78db      	ldrb	r3, [r3, #3]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d034      	beq.n	800e2f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e290:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7858      	ldrb	r0, [r3, #1]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e29c:	2301      	movs	r3, #1
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	f7ff ff6a 	bl	800e178 <disk_write>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	73fb      	strb	r3, [r7, #15]
 800e2ae:	e022      	b.n	800e2f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	1ad2      	subs	r2, r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d217      	bcs.n	800e2f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	789b      	ldrb	r3, [r3, #2]
 800e2ca:	613b      	str	r3, [r7, #16]
 800e2cc:	e010      	b.n	800e2f0 <sync_window+0x78>
					wsect += fs->fsize;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	7858      	ldrb	r0, [r3, #1]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	697a      	ldr	r2, [r7, #20]
 800e2e6:	f7ff ff47 	bl	800e178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	613b      	str	r3, [r7, #16]
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d8eb      	bhi.n	800e2ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	429a      	cmp	r2, r3
 800e316:	d01b      	beq.n	800e350 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff ffad 	bl	800e278 <sync_window>
 800e31e:	4603      	mov	r3, r0
 800e320:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e322:	7bfb      	ldrb	r3, [r7, #15]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d113      	bne.n	800e350 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	7858      	ldrb	r0, [r3, #1]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e332:	2301      	movs	r3, #1
 800e334:	683a      	ldr	r2, [r7, #0]
 800e336:	f7ff feff 	bl	800e138 <disk_read>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d004      	beq.n	800e34a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e344:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e346:	2301      	movs	r3, #1
 800e348:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e350:	7bfb      	ldrb	r3, [r7, #15]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b087      	sub	sp, #28
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e366:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d031      	beq.n	800e3d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	e002      	b.n	800e37e <get_ldnumber+0x24>
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	3301      	adds	r3, #1
 800e37c:	617b      	str	r3, [r7, #20]
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	2b20      	cmp	r3, #32
 800e384:	d903      	bls.n	800e38e <get_ldnumber+0x34>
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	2b3a      	cmp	r3, #58	; 0x3a
 800e38c:	d1f4      	bne.n	800e378 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	2b3a      	cmp	r3, #58	; 0x3a
 800e394:	d11c      	bne.n	800e3d0 <get_ldnumber+0x76>
			tp = *path;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	60fa      	str	r2, [r7, #12]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	3b30      	subs	r3, #48	; 0x30
 800e3a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d80e      	bhi.n	800e3cc <get_ldnumber+0x72>
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d10a      	bne.n	800e3cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d107      	bne.n	800e3cc <get_ldnumber+0x72>
					vol = (int)i;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	617b      	str	r3, [r7, #20]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	e002      	b.n	800e3d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e3d4:	693b      	ldr	r3, [r7, #16]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
	...

0800e3e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	70da      	strb	r2, [r3, #3]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff ff7e 	bl	800e300 <move_window>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <check_fs+0x2a>
 800e40a:	2304      	movs	r3, #4
 800e40c:	e038      	b.n	800e480 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	3330      	adds	r3, #48	; 0x30
 800e412:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e416:	4618      	mov	r0, r3
 800e418:	f7ff fece 	bl	800e1b8 <ld_word>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e424:	429a      	cmp	r2, r3
 800e426:	d001      	beq.n	800e42c <check_fs+0x48>
 800e428:	2303      	movs	r3, #3
 800e42a:	e029      	b.n	800e480 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e432:	2be9      	cmp	r3, #233	; 0xe9
 800e434:	d009      	beq.n	800e44a <check_fs+0x66>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e43c:	2beb      	cmp	r3, #235	; 0xeb
 800e43e:	d11e      	bne.n	800e47e <check_fs+0x9a>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e446:	2b90      	cmp	r3, #144	; 0x90
 800e448:	d119      	bne.n	800e47e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3330      	adds	r3, #48	; 0x30
 800e44e:	3336      	adds	r3, #54	; 0x36
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff fec9 	bl	800e1e8 <ld_dword>
 800e456:	4603      	mov	r3, r0
 800e458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e45c:	4a0a      	ldr	r2, [pc, #40]	; (800e488 <check_fs+0xa4>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d101      	bne.n	800e466 <check_fs+0x82>
 800e462:	2300      	movs	r3, #0
 800e464:	e00c      	b.n	800e480 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3330      	adds	r3, #48	; 0x30
 800e46a:	3352      	adds	r3, #82	; 0x52
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff febb 	bl	800e1e8 <ld_dword>
 800e472:	4603      	mov	r3, r0
 800e474:	4a05      	ldr	r2, [pc, #20]	; (800e48c <check_fs+0xa8>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d101      	bne.n	800e47e <check_fs+0x9a>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e000      	b.n	800e480 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e47e:	2302      	movs	r3, #2
}
 800e480:	4618      	mov	r0, r3
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	00544146 	.word	0x00544146
 800e48c:	33544146 	.word	0x33544146

0800e490 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b096      	sub	sp, #88	; 0x58
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	4613      	mov	r3, r2
 800e49c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7ff ff58 	bl	800e35a <get_ldnumber>
 800e4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da01      	bge.n	800e4b6 <find_volume+0x26>
 800e4b2:	230b      	movs	r3, #11
 800e4b4:	e22d      	b.n	800e912 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4b6:	4aa1      	ldr	r2, [pc, #644]	; (800e73c <find_volume+0x2ac>)
 800e4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <find_volume+0x3a>
 800e4c6:	230c      	movs	r3, #12
 800e4c8:	e223      	b.n	800e912 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4d0:	79fb      	ldrb	r3, [r7, #7]
 800e4d2:	f023 0301 	bic.w	r3, r3, #1
 800e4d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d01a      	beq.n	800e516 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	785b      	ldrb	r3, [r3, #1]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff fde7 	bl	800e0b8 <disk_status>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4f4:	f003 0301 	and.w	r3, r3, #1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10c      	bne.n	800e516 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d007      	beq.n	800e512 <find_volume+0x82>
 800e502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e506:	f003 0304 	and.w	r3, r3, #4
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e50e:	230a      	movs	r3, #10
 800e510:	e1ff      	b.n	800e912 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e512:	2300      	movs	r3, #0
 800e514:	e1fd      	b.n	800e912 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e518:	2200      	movs	r2, #0
 800e51a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	785b      	ldrb	r3, [r3, #1]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7ff fddf 	bl	800e0ec <disk_initialize>
 800e52e:	4603      	mov	r3, r0
 800e530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e540:	2303      	movs	r3, #3
 800e542:	e1e6      	b.n	800e912 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d007      	beq.n	800e55a <find_volume+0xca>
 800e54a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e54e:	f003 0304 	and.w	r3, r3, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e556:	230a      	movs	r3, #10
 800e558:	e1db      	b.n	800e912 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e562:	f7ff ff3f 	bl	800e3e4 <check_fs>
 800e566:	4603      	mov	r3, r0
 800e568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e570:	2b02      	cmp	r3, #2
 800e572:	d149      	bne.n	800e608 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e574:	2300      	movs	r3, #0
 800e576:	643b      	str	r3, [r7, #64]	; 0x40
 800e578:	e01e      	b.n	800e5b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e582:	011b      	lsls	r3, r3, #4
 800e584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e588:	4413      	add	r3, r2
 800e58a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58e:	3304      	adds	r3, #4
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d006      	beq.n	800e5a4 <find_volume+0x114>
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	3308      	adds	r3, #8
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fe24 	bl	800e1e8 <ld_dword>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	e000      	b.n	800e5a6 <find_volume+0x116>
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	3358      	adds	r3, #88	; 0x58
 800e5ac:	443b      	add	r3, r7
 800e5ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d9dd      	bls.n	800e57a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e5be:	2300      	movs	r3, #0
 800e5c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <find_volume+0x13e>
 800e5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	3358      	adds	r3, #88	; 0x58
 800e5d4:	443b      	add	r3, r7
 800e5d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e5da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d005      	beq.n	800e5ee <find_volume+0x15e>
 800e5e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5e6:	f7ff fefd 	bl	800e3e4 <check_fs>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	e000      	b.n	800e5f0 <find_volume+0x160>
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e5f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d905      	bls.n	800e608 <find_volume+0x178>
 800e5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fe:	3301      	adds	r3, #1
 800e600:	643b      	str	r3, [r7, #64]	; 0x40
 800e602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e604:	2b03      	cmp	r3, #3
 800e606:	d9e2      	bls.n	800e5ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d101      	bne.n	800e614 <find_volume+0x184>
 800e610:	2301      	movs	r3, #1
 800e612:	e17e      	b.n	800e912 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d901      	bls.n	800e620 <find_volume+0x190>
 800e61c:	230d      	movs	r3, #13
 800e61e:	e178      	b.n	800e912 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e622:	3330      	adds	r3, #48	; 0x30
 800e624:	330b      	adds	r3, #11
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fdc6 	bl	800e1b8 <ld_word>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e632:	d001      	beq.n	800e638 <find_volume+0x1a8>
 800e634:	230d      	movs	r3, #13
 800e636:	e16c      	b.n	800e912 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	3330      	adds	r3, #48	; 0x30
 800e63c:	3316      	adds	r3, #22
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fdba 	bl	800e1b8 <ld_word>
 800e644:	4603      	mov	r3, r0
 800e646:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d106      	bne.n	800e65c <find_volume+0x1cc>
 800e64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e650:	3330      	adds	r3, #48	; 0x30
 800e652:	3324      	adds	r3, #36	; 0x24
 800e654:	4618      	mov	r0, r3
 800e656:	f7ff fdc7 	bl	800e1e8 <ld_dword>
 800e65a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e660:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	789b      	ldrb	r3, [r3, #2]
 800e670:	2b01      	cmp	r3, #1
 800e672:	d005      	beq.n	800e680 <find_volume+0x1f0>
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	789b      	ldrb	r3, [r3, #2]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d001      	beq.n	800e680 <find_volume+0x1f0>
 800e67c:	230d      	movs	r3, #13
 800e67e:	e148      	b.n	800e912 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e682:	789b      	ldrb	r3, [r3, #2]
 800e684:	461a      	mov	r2, r3
 800e686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e688:	fb02 f303 	mul.w	r3, r2, r3
 800e68c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e694:	b29a      	uxth	r2, r3
 800e696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e698:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	895b      	ldrh	r3, [r3, #10]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d008      	beq.n	800e6b4 <find_volume+0x224>
 800e6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a4:	895b      	ldrh	r3, [r3, #10]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	895b      	ldrh	r3, [r3, #10]
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d001      	beq.n	800e6b8 <find_volume+0x228>
 800e6b4:	230d      	movs	r3, #13
 800e6b6:	e12c      	b.n	800e912 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ba:	3330      	adds	r3, #48	; 0x30
 800e6bc:	3311      	adds	r3, #17
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff fd7a 	bl	800e1b8 <ld_word>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	891b      	ldrh	r3, [r3, #8]
 800e6d0:	f003 030f 	and.w	r3, r3, #15
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <find_volume+0x24e>
 800e6da:	230d      	movs	r3, #13
 800e6dc:	e119      	b.n	800e912 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e0:	3330      	adds	r3, #48	; 0x30
 800e6e2:	3313      	adds	r3, #19
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fd67 	bl	800e1b8 <ld_word>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d106      	bne.n	800e702 <find_volume+0x272>
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	3330      	adds	r3, #48	; 0x30
 800e6f8:	3320      	adds	r3, #32
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fd74 	bl	800e1e8 <ld_dword>
 800e700:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e704:	3330      	adds	r3, #48	; 0x30
 800e706:	330e      	adds	r3, #14
 800e708:	4618      	mov	r0, r3
 800e70a:	f7ff fd55 	bl	800e1b8 <ld_word>
 800e70e:	4603      	mov	r3, r0
 800e710:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e712:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e714:	2b00      	cmp	r3, #0
 800e716:	d101      	bne.n	800e71c <find_volume+0x28c>
 800e718:	230d      	movs	r3, #13
 800e71a:	e0fa      	b.n	800e912 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e71c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e720:	4413      	add	r3, r2
 800e722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e724:	8912      	ldrh	r2, [r2, #8]
 800e726:	0912      	lsrs	r2, r2, #4
 800e728:	b292      	uxth	r2, r2
 800e72a:	4413      	add	r3, r2
 800e72c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e72e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	429a      	cmp	r2, r3
 800e734:	d204      	bcs.n	800e740 <find_volume+0x2b0>
 800e736:	230d      	movs	r3, #13
 800e738:	e0eb      	b.n	800e912 <find_volume+0x482>
 800e73a:	bf00      	nop
 800e73c:	200035b4 	.word	0x200035b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e748:	8952      	ldrh	r2, [r2, #10]
 800e74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <find_volume+0x2ca>
 800e756:	230d      	movs	r3, #13
 800e758:	e0db      	b.n	800e912 <find_volume+0x482>
		fmt = FS_FAT32;
 800e75a:	2303      	movs	r3, #3
 800e75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e766:	4293      	cmp	r3, r2
 800e768:	d802      	bhi.n	800e770 <find_volume+0x2e0>
 800e76a:	2302      	movs	r3, #2
 800e76c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e776:	4293      	cmp	r3, r2
 800e778:	d802      	bhi.n	800e780 <find_volume+0x2f0>
 800e77a:	2301      	movs	r3, #1
 800e77c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	1c9a      	adds	r2, r3, #2
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e78c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e78e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e792:	441a      	add	r2, r3
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	441a      	add	r2, r3
 800e79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d11e      	bne.n	800e7e8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	3330      	adds	r3, #48	; 0x30
 800e7ae:	332a      	adds	r3, #42	; 0x2a
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff fd01 	bl	800e1b8 <ld_word>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <find_volume+0x330>
 800e7bc:	230d      	movs	r3, #13
 800e7be:	e0a8      	b.n	800e912 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c2:	891b      	ldrh	r3, [r3, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <find_volume+0x33c>
 800e7c8:	230d      	movs	r3, #13
 800e7ca:	e0a2      	b.n	800e912 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	3330      	adds	r3, #48	; 0x30
 800e7d0:	332c      	adds	r3, #44	; 0x2c
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fd08 	bl	800e1e8 <ld_dword>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800e7e6:	e01f      	b.n	800e828 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	891b      	ldrh	r3, [r3, #8]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d101      	bne.n	800e7f4 <find_volume+0x364>
 800e7f0:	230d      	movs	r3, #13
 800e7f2:	e08e      	b.n	800e912 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	6a1a      	ldr	r2, [r3, #32]
 800e7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fa:	441a      	add	r2, r3
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e804:	2b02      	cmp	r3, #2
 800e806:	d103      	bne.n	800e810 <find_volume+0x380>
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	e00a      	b.n	800e826 <find_volume+0x396>
 800e810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e812:	695a      	ldr	r2, [r3, #20]
 800e814:	4613      	mov	r3, r2
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	4413      	add	r3, r2
 800e81a:	085a      	lsrs	r2, r3, #1
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	695b      	ldr	r3, [r3, #20]
 800e820:	f003 0301 	and.w	r3, r3, #1
 800e824:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e826:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	699a      	ldr	r2, [r3, #24]
 800e82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e82e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e832:	0a5b      	lsrs	r3, r3, #9
 800e834:	429a      	cmp	r2, r3
 800e836:	d201      	bcs.n	800e83c <find_volume+0x3ac>
 800e838:	230d      	movs	r3, #13
 800e83a:	e06a      	b.n	800e912 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e842:	611a      	str	r2, [r3, #16]
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	691a      	ldr	r2, [r3, #16]
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	2280      	movs	r2, #128	; 0x80
 800e850:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e856:	2b03      	cmp	r3, #3
 800e858:	d149      	bne.n	800e8ee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	3330      	adds	r3, #48	; 0x30
 800e85e:	3330      	adds	r3, #48	; 0x30
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fca9 	bl	800e1b8 <ld_word>
 800e866:	4603      	mov	r3, r0
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d140      	bne.n	800e8ee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e86e:	3301      	adds	r3, #1
 800e870:	4619      	mov	r1, r3
 800e872:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e874:	f7ff fd44 	bl	800e300 <move_window>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d137      	bne.n	800e8ee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	2200      	movs	r2, #0
 800e882:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	3330      	adds	r3, #48	; 0x30
 800e888:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7ff fc93 	bl	800e1b8 <ld_word>
 800e892:	4603      	mov	r3, r0
 800e894:	461a      	mov	r2, r3
 800e896:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d127      	bne.n	800e8ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a0:	3330      	adds	r3, #48	; 0x30
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7ff fca0 	bl	800e1e8 <ld_dword>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	4a1c      	ldr	r2, [pc, #112]	; (800e91c <find_volume+0x48c>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d11e      	bne.n	800e8ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b2:	3330      	adds	r3, #48	; 0x30
 800e8b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff fc95 	bl	800e1e8 <ld_dword>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4a17      	ldr	r2, [pc, #92]	; (800e920 <find_volume+0x490>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d113      	bne.n	800e8ee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	3330      	adds	r3, #48	; 0x30
 800e8ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7ff fc8a 	bl	800e1e8 <ld_dword>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	3330      	adds	r3, #48	; 0x30
 800e8de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff fc80 	bl	800e1e8 <ld_dword>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e8f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <find_volume+0x494>)
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	4b09      	ldr	r3, [pc, #36]	; (800e924 <find_volume+0x494>)
 800e900:	801a      	strh	r2, [r3, #0]
 800e902:	4b08      	ldr	r3, [pc, #32]	; (800e924 <find_volume+0x494>)
 800e904:	881a      	ldrh	r2, [r3, #0]
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e90a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e90c:	f7ff fc90 	bl	800e230 <clear_lock>
#endif
	return FR_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3758      	adds	r7, #88	; 0x58
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	41615252 	.word	0x41615252
 800e920:	61417272 	.word	0x61417272
 800e924:	200035b8 	.word	0x200035b8

0800e928 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	4613      	mov	r3, r2
 800e934:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e93a:	f107 0310 	add.w	r3, r7, #16
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff fd0b 	bl	800e35a <get_ldnumber>
 800e944:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	da01      	bge.n	800e950 <f_mount+0x28>
 800e94c:	230b      	movs	r3, #11
 800e94e:	e02b      	b.n	800e9a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e950:	4a17      	ldr	r2, [pc, #92]	; (800e9b0 <f_mount+0x88>)
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e958:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d005      	beq.n	800e96c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e960:	69b8      	ldr	r0, [r7, #24]
 800e962:	f7ff fc65 	bl	800e230 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2200      	movs	r2, #0
 800e96a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d002      	beq.n	800e978 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	490d      	ldr	r1, [pc, #52]	; (800e9b0 <f_mount+0x88>)
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d002      	beq.n	800e98e <f_mount+0x66>
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d001      	beq.n	800e992 <f_mount+0x6a>
 800e98e:	2300      	movs	r3, #0
 800e990:	e00a      	b.n	800e9a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e992:	f107 010c 	add.w	r1, r7, #12
 800e996:	f107 0308 	add.w	r3, r7, #8
 800e99a:	2200      	movs	r2, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fd77 	bl	800e490 <find_volume>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3720      	adds	r7, #32
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	200035b4 	.word	0x200035b4

0800e9b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e9ca:	4b1f      	ldr	r3, [pc, #124]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9cc:	7a5b      	ldrb	r3, [r3, #9]
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d131      	bne.n	800ea38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9d4:	4b1c      	ldr	r3, [pc, #112]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9d6:	7a5b      	ldrb	r3, [r3, #9]
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	461a      	mov	r2, r3
 800e9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9de:	2100      	movs	r1, #0
 800e9e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e9e2:	4b19      	ldr	r3, [pc, #100]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9e4:	7a5b      	ldrb	r3, [r3, #9]
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e9f2:	4b15      	ldr	r3, [pc, #84]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9f4:	7a5b      	ldrb	r3, [r3, #9]
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800e9fc:	4413      	add	r3, r2
 800e9fe:	79fa      	ldrb	r2, [r7, #7]
 800ea00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea02:	4b11      	ldr	r3, [pc, #68]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800ea04:	7a5b      	ldrb	r3, [r3, #9]
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	1c5a      	adds	r2, r3, #1
 800ea0a:	b2d1      	uxtb	r1, r2
 800ea0c:	4a0e      	ldr	r2, [pc, #56]	; (800ea48 <FATFS_LinkDriverEx+0x94>)
 800ea0e:	7251      	strb	r1, [r2, #9]
 800ea10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea12:	7dbb      	ldrb	r3, [r7, #22]
 800ea14:	3330      	adds	r3, #48	; 0x30
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	223a      	movs	r2, #58	; 0x3a
 800ea22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	3302      	adds	r3, #2
 800ea28:	222f      	movs	r2, #47	; 0x2f
 800ea2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	3303      	adds	r3, #3
 800ea30:	2200      	movs	r2, #0
 800ea32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	371c      	adds	r7, #28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	200035dc 	.word	0x200035dc

0800ea4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea56:	2200      	movs	r2, #0
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7ff ffaa 	bl	800e9b4 <FATFS_LinkDriverEx>
 800ea60:	4603      	mov	r3, r0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
	...

0800ea6c <getUSBState>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
extern ApplicationTypeDef getUSBState(){return Appli_state;}
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	4b03      	ldr	r3, [pc, #12]	; (800ea80 <getUSBState+0x14>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	4618      	mov	r0, r3
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	200039c0 	.word	0x200039c0

0800ea84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	490e      	ldr	r1, [pc, #56]	; (800eac4 <MX_USB_HOST_Init+0x40>)
 800ea8c:	480e      	ldr	r0, [pc, #56]	; (800eac8 <MX_USB_HOST_Init+0x44>)
 800ea8e:	f7fd fec1 	bl	800c814 <USBH_Init>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ea98:	f7f3 ff40 	bl	800291c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800ea9c:	490b      	ldr	r1, [pc, #44]	; (800eacc <MX_USB_HOST_Init+0x48>)
 800ea9e:	480a      	ldr	r0, [pc, #40]	; (800eac8 <MX_USB_HOST_Init+0x44>)
 800eaa0:	f7fd ff46 	bl	800c930 <USBH_RegisterClass>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eaaa:	f7f3 ff37 	bl	800291c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800eaae:	4806      	ldr	r0, [pc, #24]	; (800eac8 <MX_USB_HOST_Init+0x44>)
 800eab0:	f7fd ffca 	bl	800ca48 <USBH_Start>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d001      	beq.n	800eabe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eaba:	f7f3 ff2f 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eabe:	bf00      	nop
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	0800eae5 	.word	0x0800eae5
 800eac8:	200035e8 	.word	0x200035e8
 800eacc:	200000d4 	.word	0x200000d4

0800ead0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800ead4:	4802      	ldr	r0, [pc, #8]	; (800eae0 <MX_USB_HOST_Process+0x10>)
 800ead6:	f7fd ffc7 	bl	800ca68 <USBH_Process>
}
 800eada:	bf00      	nop
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	200035e8 	.word	0x200035e8

0800eae4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	2b04      	cmp	r3, #4
 800eaf6:	d819      	bhi.n	800eb2c <USBH_UserProcess+0x48>
 800eaf8:	a201      	add	r2, pc, #4	; (adr r2, 800eb00 <USBH_UserProcess+0x1c>)
 800eafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafe:	bf00      	nop
 800eb00:	0800eb2d 	.word	0x0800eb2d
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb25 	.word	0x0800eb25
 800eb10:	0800eb15 	.word	0x0800eb15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eb14:	4b09      	ldr	r3, [pc, #36]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb16:	2203      	movs	r2, #3
 800eb18:	701a      	strb	r2, [r3, #0]
  break;
 800eb1a:	e008      	b.n	800eb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eb1c:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb1e:	2202      	movs	r2, #2
 800eb20:	701a      	strb	r2, [r3, #0]
  //set flag to be ready
  break;
 800eb22:	e004      	b.n	800eb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eb24:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	701a      	strb	r2, [r3, #0]
  break;
 800eb2a:	e000      	b.n	800eb2e <USBH_UserProcess+0x4a>

  default:
  break;
 800eb2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eb2e:	bf00      	nop
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	200039c0 	.word	0x200039c0

0800eb40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08a      	sub	sp, #40	; 0x28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	605a      	str	r2, [r3, #4]
 800eb52:	609a      	str	r2, [r3, #8]
 800eb54:	60da      	str	r2, [r3, #12]
 800eb56:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a24      	ldr	r2, [pc, #144]	; (800ebf0 <HAL_HCD_MspInit+0xb0>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d141      	bne.n	800ebe6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb62:	2300      	movs	r3, #0
 800eb64:	613b      	str	r3, [r7, #16]
 800eb66:	4b23      	ldr	r3, [pc, #140]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6a:	4a22      	ldr	r2, [pc, #136]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb6c:	f043 0302 	orr.w	r3, r3, #2
 800eb70:	6313      	str	r3, [r2, #48]	; 0x30
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb76:	f003 0302 	and.w	r3, r3, #2
 800eb7a:	613b      	str	r3, [r7, #16]
 800eb7c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800eb7e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800eb82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb84:	2302      	movs	r3, #2
 800eb86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800eb90:	230c      	movs	r3, #12
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb94:	f107 0314 	add.w	r3, r7, #20
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4817      	ldr	r0, [pc, #92]	; (800ebf8 <HAL_HCD_MspInit+0xb8>)
 800eb9c:	f7f5 f864 	bl	8003c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800eba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eba6:	2300      	movs	r3, #0
 800eba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ebae:	f107 0314 	add.w	r3, r7, #20
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4810      	ldr	r0, [pc, #64]	; (800ebf8 <HAL_HCD_MspInit+0xb8>)
 800ebb6:	f7f5 f857 	bl	8003c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc2:	4a0c      	ldr	r2, [pc, #48]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebc8:	6313      	str	r3, [r2, #48]	; 0x30
 800ebca:	4b0a      	ldr	r3, [pc, #40]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2100      	movs	r1, #0
 800ebda:	204d      	movs	r0, #77	; 0x4d
 800ebdc:	f7f4 fc75 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ebe0:	204d      	movs	r0, #77	; 0x4d
 800ebe2:	f7f4 fc8e 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ebe6:	bf00      	nop
 800ebe8:	3728      	adds	r7, #40	; 0x28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	40040000 	.word	0x40040000
 800ebf4:	40023800 	.word	0x40023800
 800ebf8:	40020400 	.word	0x40020400

0800ebfc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fe fb0b 	bl	800d226 <USBH_LL_IncTimer>
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe fb43 	bl	800d2b2 <USBH_LL_Connect>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe fb4c 	bl	800d2e0 <USBH_LL_Disconnect>
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fafd 	bl	800d27a <USBH_LL_PortEnabled>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe fafd 	bl	800d296 <USBH_LL_PortDisabled>
}
 800ec9c:	bf00      	nop
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d132      	bne.n	800ed1c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ecb6:	4a1c      	ldr	r2, [pc, #112]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a19      	ldr	r2, [pc, #100]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecc2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ecc6:	4b18      	ldr	r3, [pc, #96]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecc8:	4a18      	ldr	r2, [pc, #96]	; (800ed2c <USBH_LL_Init+0x88>)
 800ecca:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800eccc:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecce:	220c      	movs	r2, #12
 800ecd0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ecd8:	4b13      	ldr	r3, [pc, #76]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ecde:	4b12      	ldr	r3, [pc, #72]	; (800ed28 <USBH_LL_Init+0x84>)
 800ece0:	2202      	movs	r2, #2
 800ece2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ece4:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <USBH_LL_Init+0x84>)
 800ece6:	2200      	movs	r2, #0
 800ece8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ecea:	4b0f      	ldr	r3, [pc, #60]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ecfc:	480a      	ldr	r0, [pc, #40]	; (800ed28 <USBH_LL_Init+0x84>)
 800ecfe:	f7f5 f9a9 	bl	8004054 <HAL_HCD_Init>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ed08:	f7f3 fe08 	bl	800291c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ed0c:	4806      	ldr	r0, [pc, #24]	; (800ed28 <USBH_LL_Init+0x84>)
 800ed0e:	f7f5 fd8c 	bl	800482a <HAL_HCD_GetCurrentFrame>
 800ed12:	4603      	mov	r3, r0
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7fe fa76 	bl	800d208 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ed1c:	2300      	movs	r3, #0
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3708      	adds	r7, #8
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	200039c4 	.word	0x200039c4
 800ed2c:	40040000 	.word	0x40040000

0800ed30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f5 fcf9 	bl	800473e <HAL_HCD_Start>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f98c 	bl	800f070 <USBH_Get_USB_Status>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f5 fd01 	bl	8004784 <HAL_HCD_Stop>
 800ed82:	4603      	mov	r3, r0
 800ed84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 f971 	bl	800f070 <USBH_Get_USB_Status>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eda4:	2301      	movs	r3, #1
 800eda6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f5 fd49 	bl	8004846 <HAL_HCD_GetCurrentSpeed>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	d00c      	beq.n	800edd4 <USBH_LL_GetSpeed+0x38>
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d80d      	bhi.n	800edda <USBH_LL_GetSpeed+0x3e>
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d002      	beq.n	800edc8 <USBH_LL_GetSpeed+0x2c>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d003      	beq.n	800edce <USBH_LL_GetSpeed+0x32>
 800edc6:	e008      	b.n	800edda <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
    break;
 800edcc:	e008      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800edce:	2301      	movs	r3, #1
 800edd0:	73fb      	strb	r3, [r7, #15]
    break;
 800edd2:	e005      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800edd4:	2302      	movs	r3, #2
 800edd6:	73fb      	strb	r3, [r7, #15]
    break;
 800edd8:	e002      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800edda:	2301      	movs	r3, #1
 800eddc:	73fb      	strb	r3, [r7, #15]
    break;
 800edde:	bf00      	nop
  }
  return  speed;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b084      	sub	sp, #16
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7f5 fcdc 	bl	80047be <HAL_HCD_ResetPort>
 800ee06:	4603      	mov	r3, r0
 800ee08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 f92f 	bl	800f070 <USBH_Get_USB_Status>
 800ee12:	4603      	mov	r3, r0
 800ee14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee32:	78fa      	ldrb	r2, [r7, #3]
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f5 fce3 	bl	8004802 <HAL_HCD_HC_GetXferCount>
 800ee3c:	4603      	mov	r3, r0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ee46:	b590      	push	{r4, r7, lr}
 800ee48:	b089      	sub	sp, #36	; 0x24
 800ee4a:	af04      	add	r7, sp, #16
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	461a      	mov	r2, r3
 800ee54:	4603      	mov	r3, r0
 800ee56:	70fb      	strb	r3, [r7, #3]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70bb      	strb	r3, [r7, #2]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee6e:	787c      	ldrb	r4, [r7, #1]
 800ee70:	78ba      	ldrb	r2, [r7, #2]
 800ee72:	78f9      	ldrb	r1, [r7, #3]
 800ee74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee76:	9302      	str	r3, [sp, #8]
 800ee78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	4623      	mov	r3, r4
 800ee86:	f7f5 f947 	bl	8004118 <HAL_HCD_HC_Init>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 f8ed 	bl	800f070 <USBH_Get_USB_Status>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd90      	pop	{r4, r7, pc}

0800eea4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eebe:	78fa      	ldrb	r2, [r7, #3]
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f5 f9b7 	bl	8004236 <HAL_HCD_HC_Halt>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f8ce 	bl	800f070 <USBH_Get_USB_Status>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eee2:	b590      	push	{r4, r7, lr}
 800eee4:	b089      	sub	sp, #36	; 0x24
 800eee6:	af04      	add	r7, sp, #16
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	461a      	mov	r2, r3
 800eef0:	4603      	mov	r3, r0
 800eef2:	70fb      	strb	r3, [r7, #3]
 800eef4:	460b      	mov	r3, r1
 800eef6:	70bb      	strb	r3, [r7, #2]
 800eef8:	4613      	mov	r3, r2
 800eefa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef0a:	787c      	ldrb	r4, [r7, #1]
 800ef0c:	78ba      	ldrb	r2, [r7, #2]
 800ef0e:	78f9      	ldrb	r1, [r7, #3]
 800ef10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef18:	9302      	str	r3, [sp, #8]
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	4623      	mov	r3, r4
 800ef26:	f7f5 f9a9 	bl	800427c <HAL_HCD_HC_SubmitRequest>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 f89d 	bl	800f070 <USBH_Get_USB_Status>
 800ef36:	4603      	mov	r3, r0
 800ef38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3714      	adds	r7, #20
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd90      	pop	{r4, r7, pc}

0800ef44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f5 fc3d 	bl	80047da <HAL_HCD_HC_GetURBState>
 800ef60:	4603      	mov	r3, r0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d103      	bne.n	800ef88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ef80:	78fb      	ldrb	r3, [r7, #3]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 f8a0 	bl	800f0c8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ef88:	20c8      	movs	r0, #200	; 0xc8
 800ef8a:	f7f4 f99f 	bl	80032cc <HAL_Delay>
  return USBH_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
 800efa4:	4613      	mov	r3, r2
 800efa6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800efb0:	78fb      	ldrb	r3, [r7, #3]
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	212c      	movs	r1, #44	; 0x2c
 800efb6:	fb01 f303 	mul.w	r3, r1, r3
 800efba:	4413      	add	r3, r2
 800efbc:	333b      	adds	r3, #59	; 0x3b
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d009      	beq.n	800efd8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800efc4:	78fb      	ldrb	r3, [r7, #3]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	212c      	movs	r1, #44	; 0x2c
 800efca:	fb01 f303 	mul.w	r3, r1, r3
 800efce:	4413      	add	r3, r2
 800efd0:	3354      	adds	r3, #84	; 0x54
 800efd2:	78ba      	ldrb	r2, [r7, #2]
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	e008      	b.n	800efea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800efd8:	78fb      	ldrb	r3, [r7, #3]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	212c      	movs	r1, #44	; 0x2c
 800efde:	fb01 f303 	mul.w	r3, r1, r3
 800efe2:	4413      	add	r3, r2
 800efe4:	3355      	adds	r3, #85	; 0x55
 800efe6:	78ba      	ldrb	r2, [r7, #2]
 800efe8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f004:	2300      	movs	r3, #0
 800f006:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f00e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	212c      	movs	r1, #44	; 0x2c
 800f016:	fb01 f303 	mul.w	r3, r1, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	333b      	adds	r3, #59	; 0x3b
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d009      	beq.n	800f038 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f024:	78fb      	ldrb	r3, [r7, #3]
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	212c      	movs	r1, #44	; 0x2c
 800f02a:	fb01 f303 	mul.w	r3, r1, r3
 800f02e:	4413      	add	r3, r2
 800f030:	3354      	adds	r3, #84	; 0x54
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	73fb      	strb	r3, [r7, #15]
 800f036:	e008      	b.n	800f04a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	212c      	movs	r1, #44	; 0x2c
 800f03e:	fb01 f303 	mul.w	r3, r1, r3
 800f042:	4413      	add	r3, r2
 800f044:	3355      	adds	r3, #85	; 0x55
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7f4 f933 	bl	80032cc <HAL_Delay>
}
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f07e:	79fb      	ldrb	r3, [r7, #7]
 800f080:	2b03      	cmp	r3, #3
 800f082:	d817      	bhi.n	800f0b4 <USBH_Get_USB_Status+0x44>
 800f084:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <USBH_Get_USB_Status+0x1c>)
 800f086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08a:	bf00      	nop
 800f08c:	0800f09d 	.word	0x0800f09d
 800f090:	0800f0a3 	.word	0x0800f0a3
 800f094:	0800f0a9 	.word	0x0800f0a9
 800f098:	0800f0af 	.word	0x0800f0af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a0:	e00b      	b.n	800f0ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a6:	e008      	b.n	800f0ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ac:	e005      	b.n	800f0ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f0ae:	2302      	movs	r3, #2
 800f0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b2:	e002      	b.n	800f0ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b8:	bf00      	nop
  }
  return usb_status;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f0d2:	79fb      	ldrb	r3, [r7, #7]
 800f0d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800f0d6:	79fb      	ldrb	r3, [r7, #7]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d102      	bne.n	800f0e2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	73fb      	strb	r3, [r7, #15]
 800f0e0:	e001      	b.n	800f0e6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	2110      	movs	r1, #16
 800f0ec:	4803      	ldr	r0, [pc, #12]	; (800f0fc <MX_DriverVbusHS+0x34>)
 800f0ee:	f7f4 ff7f 	bl	8003ff0 <HAL_GPIO_WritePin>
}
 800f0f2:	bf00      	nop
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	40020800 	.word	0x40020800

0800f100 <atoi>:
 800f100:	220a      	movs	r2, #10
 800f102:	2100      	movs	r1, #0
 800f104:	f000 bab6 	b.w	800f674 <strtol>

0800f108 <__errno>:
 800f108:	4b01      	ldr	r3, [pc, #4]	; (800f110 <__errno+0x8>)
 800f10a:	6818      	ldr	r0, [r3, #0]
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	200000f4 	.word	0x200000f4

0800f114 <__libc_init_array>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	4d0d      	ldr	r5, [pc, #52]	; (800f14c <__libc_init_array+0x38>)
 800f118:	4c0d      	ldr	r4, [pc, #52]	; (800f150 <__libc_init_array+0x3c>)
 800f11a:	1b64      	subs	r4, r4, r5
 800f11c:	10a4      	asrs	r4, r4, #2
 800f11e:	2600      	movs	r6, #0
 800f120:	42a6      	cmp	r6, r4
 800f122:	d109      	bne.n	800f138 <__libc_init_array+0x24>
 800f124:	4d0b      	ldr	r5, [pc, #44]	; (800f154 <__libc_init_array+0x40>)
 800f126:	4c0c      	ldr	r4, [pc, #48]	; (800f158 <__libc_init_array+0x44>)
 800f128:	f001 f97c 	bl	8010424 <_init>
 800f12c:	1b64      	subs	r4, r4, r5
 800f12e:	10a4      	asrs	r4, r4, #2
 800f130:	2600      	movs	r6, #0
 800f132:	42a6      	cmp	r6, r4
 800f134:	d105      	bne.n	800f142 <__libc_init_array+0x2e>
 800f136:	bd70      	pop	{r4, r5, r6, pc}
 800f138:	f855 3b04 	ldr.w	r3, [r5], #4
 800f13c:	4798      	blx	r3
 800f13e:	3601      	adds	r6, #1
 800f140:	e7ee      	b.n	800f120 <__libc_init_array+0xc>
 800f142:	f855 3b04 	ldr.w	r3, [r5], #4
 800f146:	4798      	blx	r3
 800f148:	3601      	adds	r6, #1
 800f14a:	e7f2      	b.n	800f132 <__libc_init_array+0x1e>
 800f14c:	08010f4c 	.word	0x08010f4c
 800f150:	08010f4c 	.word	0x08010f4c
 800f154:	08010f4c 	.word	0x08010f4c
 800f158:	08010f50 	.word	0x08010f50

0800f15c <malloc>:
 800f15c:	4b02      	ldr	r3, [pc, #8]	; (800f168 <malloc+0xc>)
 800f15e:	4601      	mov	r1, r0
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	f000 b88d 	b.w	800f280 <_malloc_r>
 800f166:	bf00      	nop
 800f168:	200000f4 	.word	0x200000f4

0800f16c <free>:
 800f16c:	4b02      	ldr	r3, [pc, #8]	; (800f178 <free+0xc>)
 800f16e:	4601      	mov	r1, r0
 800f170:	6818      	ldr	r0, [r3, #0]
 800f172:	f000 b819 	b.w	800f1a8 <_free_r>
 800f176:	bf00      	nop
 800f178:	200000f4 	.word	0x200000f4

0800f17c <memcpy>:
 800f17c:	440a      	add	r2, r1
 800f17e:	4291      	cmp	r1, r2
 800f180:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f184:	d100      	bne.n	800f188 <memcpy+0xc>
 800f186:	4770      	bx	lr
 800f188:	b510      	push	{r4, lr}
 800f18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f192:	4291      	cmp	r1, r2
 800f194:	d1f9      	bne.n	800f18a <memcpy+0xe>
 800f196:	bd10      	pop	{r4, pc}

0800f198 <memset>:
 800f198:	4402      	add	r2, r0
 800f19a:	4603      	mov	r3, r0
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d100      	bne.n	800f1a2 <memset+0xa>
 800f1a0:	4770      	bx	lr
 800f1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1a6:	e7f9      	b.n	800f19c <memset+0x4>

0800f1a8 <_free_r>:
 800f1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1aa:	2900      	cmp	r1, #0
 800f1ac:	d044      	beq.n	800f238 <_free_r+0x90>
 800f1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1b2:	9001      	str	r0, [sp, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ba:	bfb8      	it	lt
 800f1bc:	18e4      	addlt	r4, r4, r3
 800f1be:	f000 fc83 	bl	800fac8 <__malloc_lock>
 800f1c2:	4a1e      	ldr	r2, [pc, #120]	; (800f23c <_free_r+0x94>)
 800f1c4:	9801      	ldr	r0, [sp, #4]
 800f1c6:	6813      	ldr	r3, [r2, #0]
 800f1c8:	b933      	cbnz	r3, 800f1d8 <_free_r+0x30>
 800f1ca:	6063      	str	r3, [r4, #4]
 800f1cc:	6014      	str	r4, [r2, #0]
 800f1ce:	b003      	add	sp, #12
 800f1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1d4:	f000 bc7e 	b.w	800fad4 <__malloc_unlock>
 800f1d8:	42a3      	cmp	r3, r4
 800f1da:	d908      	bls.n	800f1ee <_free_r+0x46>
 800f1dc:	6825      	ldr	r5, [r4, #0]
 800f1de:	1961      	adds	r1, r4, r5
 800f1e0:	428b      	cmp	r3, r1
 800f1e2:	bf01      	itttt	eq
 800f1e4:	6819      	ldreq	r1, [r3, #0]
 800f1e6:	685b      	ldreq	r3, [r3, #4]
 800f1e8:	1949      	addeq	r1, r1, r5
 800f1ea:	6021      	streq	r1, [r4, #0]
 800f1ec:	e7ed      	b.n	800f1ca <_free_r+0x22>
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	b10b      	cbz	r3, 800f1f8 <_free_r+0x50>
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	d9fa      	bls.n	800f1ee <_free_r+0x46>
 800f1f8:	6811      	ldr	r1, [r2, #0]
 800f1fa:	1855      	adds	r5, r2, r1
 800f1fc:	42a5      	cmp	r5, r4
 800f1fe:	d10b      	bne.n	800f218 <_free_r+0x70>
 800f200:	6824      	ldr	r4, [r4, #0]
 800f202:	4421      	add	r1, r4
 800f204:	1854      	adds	r4, r2, r1
 800f206:	42a3      	cmp	r3, r4
 800f208:	6011      	str	r1, [r2, #0]
 800f20a:	d1e0      	bne.n	800f1ce <_free_r+0x26>
 800f20c:	681c      	ldr	r4, [r3, #0]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	6053      	str	r3, [r2, #4]
 800f212:	4421      	add	r1, r4
 800f214:	6011      	str	r1, [r2, #0]
 800f216:	e7da      	b.n	800f1ce <_free_r+0x26>
 800f218:	d902      	bls.n	800f220 <_free_r+0x78>
 800f21a:	230c      	movs	r3, #12
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	e7d6      	b.n	800f1ce <_free_r+0x26>
 800f220:	6825      	ldr	r5, [r4, #0]
 800f222:	1961      	adds	r1, r4, r5
 800f224:	428b      	cmp	r3, r1
 800f226:	bf04      	itt	eq
 800f228:	6819      	ldreq	r1, [r3, #0]
 800f22a:	685b      	ldreq	r3, [r3, #4]
 800f22c:	6063      	str	r3, [r4, #4]
 800f22e:	bf04      	itt	eq
 800f230:	1949      	addeq	r1, r1, r5
 800f232:	6021      	streq	r1, [r4, #0]
 800f234:	6054      	str	r4, [r2, #4]
 800f236:	e7ca      	b.n	800f1ce <_free_r+0x26>
 800f238:	b003      	add	sp, #12
 800f23a:	bd30      	pop	{r4, r5, pc}
 800f23c:	20003cc8 	.word	0x20003cc8

0800f240 <sbrk_aligned>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	4e0e      	ldr	r6, [pc, #56]	; (800f27c <sbrk_aligned+0x3c>)
 800f244:	460c      	mov	r4, r1
 800f246:	6831      	ldr	r1, [r6, #0]
 800f248:	4605      	mov	r5, r0
 800f24a:	b911      	cbnz	r1, 800f252 <sbrk_aligned+0x12>
 800f24c:	f000 f8ba 	bl	800f3c4 <_sbrk_r>
 800f250:	6030      	str	r0, [r6, #0]
 800f252:	4621      	mov	r1, r4
 800f254:	4628      	mov	r0, r5
 800f256:	f000 f8b5 	bl	800f3c4 <_sbrk_r>
 800f25a:	1c43      	adds	r3, r0, #1
 800f25c:	d00a      	beq.n	800f274 <sbrk_aligned+0x34>
 800f25e:	1cc4      	adds	r4, r0, #3
 800f260:	f024 0403 	bic.w	r4, r4, #3
 800f264:	42a0      	cmp	r0, r4
 800f266:	d007      	beq.n	800f278 <sbrk_aligned+0x38>
 800f268:	1a21      	subs	r1, r4, r0
 800f26a:	4628      	mov	r0, r5
 800f26c:	f000 f8aa 	bl	800f3c4 <_sbrk_r>
 800f270:	3001      	adds	r0, #1
 800f272:	d101      	bne.n	800f278 <sbrk_aligned+0x38>
 800f274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f278:	4620      	mov	r0, r4
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	20003ccc 	.word	0x20003ccc

0800f280 <_malloc_r>:
 800f280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f284:	1ccd      	adds	r5, r1, #3
 800f286:	f025 0503 	bic.w	r5, r5, #3
 800f28a:	3508      	adds	r5, #8
 800f28c:	2d0c      	cmp	r5, #12
 800f28e:	bf38      	it	cc
 800f290:	250c      	movcc	r5, #12
 800f292:	2d00      	cmp	r5, #0
 800f294:	4607      	mov	r7, r0
 800f296:	db01      	blt.n	800f29c <_malloc_r+0x1c>
 800f298:	42a9      	cmp	r1, r5
 800f29a:	d905      	bls.n	800f2a8 <_malloc_r+0x28>
 800f29c:	230c      	movs	r3, #12
 800f29e:	603b      	str	r3, [r7, #0]
 800f2a0:	2600      	movs	r6, #0
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a8:	4e2e      	ldr	r6, [pc, #184]	; (800f364 <_malloc_r+0xe4>)
 800f2aa:	f000 fc0d 	bl	800fac8 <__malloc_lock>
 800f2ae:	6833      	ldr	r3, [r6, #0]
 800f2b0:	461c      	mov	r4, r3
 800f2b2:	bb34      	cbnz	r4, 800f302 <_malloc_r+0x82>
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	f7ff ffc2 	bl	800f240 <sbrk_aligned>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	4604      	mov	r4, r0
 800f2c0:	d14d      	bne.n	800f35e <_malloc_r+0xde>
 800f2c2:	6834      	ldr	r4, [r6, #0]
 800f2c4:	4626      	mov	r6, r4
 800f2c6:	2e00      	cmp	r6, #0
 800f2c8:	d140      	bne.n	800f34c <_malloc_r+0xcc>
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	4631      	mov	r1, r6
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	eb04 0803 	add.w	r8, r4, r3
 800f2d4:	f000 f876 	bl	800f3c4 <_sbrk_r>
 800f2d8:	4580      	cmp	r8, r0
 800f2da:	d13a      	bne.n	800f352 <_malloc_r+0xd2>
 800f2dc:	6821      	ldr	r1, [r4, #0]
 800f2de:	3503      	adds	r5, #3
 800f2e0:	1a6d      	subs	r5, r5, r1
 800f2e2:	f025 0503 	bic.w	r5, r5, #3
 800f2e6:	3508      	adds	r5, #8
 800f2e8:	2d0c      	cmp	r5, #12
 800f2ea:	bf38      	it	cc
 800f2ec:	250c      	movcc	r5, #12
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f7ff ffa5 	bl	800f240 <sbrk_aligned>
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	d02b      	beq.n	800f352 <_malloc_r+0xd2>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	442b      	add	r3, r5
 800f2fe:	6023      	str	r3, [r4, #0]
 800f300:	e00e      	b.n	800f320 <_malloc_r+0xa0>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	1b52      	subs	r2, r2, r5
 800f306:	d41e      	bmi.n	800f346 <_malloc_r+0xc6>
 800f308:	2a0b      	cmp	r2, #11
 800f30a:	d916      	bls.n	800f33a <_malloc_r+0xba>
 800f30c:	1961      	adds	r1, r4, r5
 800f30e:	42a3      	cmp	r3, r4
 800f310:	6025      	str	r5, [r4, #0]
 800f312:	bf18      	it	ne
 800f314:	6059      	strne	r1, [r3, #4]
 800f316:	6863      	ldr	r3, [r4, #4]
 800f318:	bf08      	it	eq
 800f31a:	6031      	streq	r1, [r6, #0]
 800f31c:	5162      	str	r2, [r4, r5]
 800f31e:	604b      	str	r3, [r1, #4]
 800f320:	4638      	mov	r0, r7
 800f322:	f104 060b 	add.w	r6, r4, #11
 800f326:	f000 fbd5 	bl	800fad4 <__malloc_unlock>
 800f32a:	f026 0607 	bic.w	r6, r6, #7
 800f32e:	1d23      	adds	r3, r4, #4
 800f330:	1af2      	subs	r2, r6, r3
 800f332:	d0b6      	beq.n	800f2a2 <_malloc_r+0x22>
 800f334:	1b9b      	subs	r3, r3, r6
 800f336:	50a3      	str	r3, [r4, r2]
 800f338:	e7b3      	b.n	800f2a2 <_malloc_r+0x22>
 800f33a:	6862      	ldr	r2, [r4, #4]
 800f33c:	42a3      	cmp	r3, r4
 800f33e:	bf0c      	ite	eq
 800f340:	6032      	streq	r2, [r6, #0]
 800f342:	605a      	strne	r2, [r3, #4]
 800f344:	e7ec      	b.n	800f320 <_malloc_r+0xa0>
 800f346:	4623      	mov	r3, r4
 800f348:	6864      	ldr	r4, [r4, #4]
 800f34a:	e7b2      	b.n	800f2b2 <_malloc_r+0x32>
 800f34c:	4634      	mov	r4, r6
 800f34e:	6876      	ldr	r6, [r6, #4]
 800f350:	e7b9      	b.n	800f2c6 <_malloc_r+0x46>
 800f352:	230c      	movs	r3, #12
 800f354:	603b      	str	r3, [r7, #0]
 800f356:	4638      	mov	r0, r7
 800f358:	f000 fbbc 	bl	800fad4 <__malloc_unlock>
 800f35c:	e7a1      	b.n	800f2a2 <_malloc_r+0x22>
 800f35e:	6025      	str	r5, [r4, #0]
 800f360:	e7de      	b.n	800f320 <_malloc_r+0xa0>
 800f362:	bf00      	nop
 800f364:	20003cc8 	.word	0x20003cc8

0800f368 <iprintf>:
 800f368:	b40f      	push	{r0, r1, r2, r3}
 800f36a:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <iprintf+0x2c>)
 800f36c:	b513      	push	{r0, r1, r4, lr}
 800f36e:	681c      	ldr	r4, [r3, #0]
 800f370:	b124      	cbz	r4, 800f37c <iprintf+0x14>
 800f372:	69a3      	ldr	r3, [r4, #24]
 800f374:	b913      	cbnz	r3, 800f37c <iprintf+0x14>
 800f376:	4620      	mov	r0, r4
 800f378:	f000 faa0 	bl	800f8bc <__sinit>
 800f37c:	ab05      	add	r3, sp, #20
 800f37e:	9a04      	ldr	r2, [sp, #16]
 800f380:	68a1      	ldr	r1, [r4, #8]
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	4620      	mov	r0, r4
 800f386:	f000 fbd5 	bl	800fb34 <_vfiprintf_r>
 800f38a:	b002      	add	sp, #8
 800f38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f390:	b004      	add	sp, #16
 800f392:	4770      	bx	lr
 800f394:	200000f4 	.word	0x200000f4

0800f398 <putchar>:
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <putchar+0x28>)
 800f39a:	b513      	push	{r0, r1, r4, lr}
 800f39c:	681c      	ldr	r4, [r3, #0]
 800f39e:	4601      	mov	r1, r0
 800f3a0:	b134      	cbz	r4, 800f3b0 <putchar+0x18>
 800f3a2:	69a3      	ldr	r3, [r4, #24]
 800f3a4:	b923      	cbnz	r3, 800f3b0 <putchar+0x18>
 800f3a6:	9001      	str	r0, [sp, #4]
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 fa87 	bl	800f8bc <__sinit>
 800f3ae:	9901      	ldr	r1, [sp, #4]
 800f3b0:	68a2      	ldr	r2, [r4, #8]
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	b002      	add	sp, #8
 800f3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ba:	f000 be7f 	b.w	80100bc <_putc_r>
 800f3be:	bf00      	nop
 800f3c0:	200000f4 	.word	0x200000f4

0800f3c4 <_sbrk_r>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	4d06      	ldr	r5, [pc, #24]	; (800f3e0 <_sbrk_r+0x1c>)
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	4608      	mov	r0, r1
 800f3ce:	602b      	str	r3, [r5, #0]
 800f3d0:	f7f3 fe50 	bl	8003074 <_sbrk>
 800f3d4:	1c43      	adds	r3, r0, #1
 800f3d6:	d102      	bne.n	800f3de <_sbrk_r+0x1a>
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	b103      	cbz	r3, 800f3de <_sbrk_r+0x1a>
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	bd38      	pop	{r3, r4, r5, pc}
 800f3e0:	20003cd4 	.word	0x20003cd4

0800f3e4 <setvbuf>:
 800f3e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	461d      	mov	r5, r3
 800f3ea:	4b5d      	ldr	r3, [pc, #372]	; (800f560 <setvbuf+0x17c>)
 800f3ec:	681f      	ldr	r7, [r3, #0]
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	460e      	mov	r6, r1
 800f3f2:	4690      	mov	r8, r2
 800f3f4:	b127      	cbz	r7, 800f400 <setvbuf+0x1c>
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	b913      	cbnz	r3, 800f400 <setvbuf+0x1c>
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	f000 fa5e 	bl	800f8bc <__sinit>
 800f400:	4b58      	ldr	r3, [pc, #352]	; (800f564 <setvbuf+0x180>)
 800f402:	429c      	cmp	r4, r3
 800f404:	d167      	bne.n	800f4d6 <setvbuf+0xf2>
 800f406:	687c      	ldr	r4, [r7, #4]
 800f408:	f1b8 0f02 	cmp.w	r8, #2
 800f40c:	d006      	beq.n	800f41c <setvbuf+0x38>
 800f40e:	f1b8 0f01 	cmp.w	r8, #1
 800f412:	f200 809f 	bhi.w	800f554 <setvbuf+0x170>
 800f416:	2d00      	cmp	r5, #0
 800f418:	f2c0 809c 	blt.w	800f554 <setvbuf+0x170>
 800f41c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f41e:	07db      	lsls	r3, r3, #31
 800f420:	d405      	bmi.n	800f42e <setvbuf+0x4a>
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	0598      	lsls	r0, r3, #22
 800f426:	d402      	bmi.n	800f42e <setvbuf+0x4a>
 800f428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f42a:	f000 fae5 	bl	800f9f8 <__retarget_lock_acquire_recursive>
 800f42e:	4621      	mov	r1, r4
 800f430:	4638      	mov	r0, r7
 800f432:	f000 f9af 	bl	800f794 <_fflush_r>
 800f436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f438:	b141      	cbz	r1, 800f44c <setvbuf+0x68>
 800f43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f43e:	4299      	cmp	r1, r3
 800f440:	d002      	beq.n	800f448 <setvbuf+0x64>
 800f442:	4638      	mov	r0, r7
 800f444:	f7ff feb0 	bl	800f1a8 <_free_r>
 800f448:	2300      	movs	r3, #0
 800f44a:	6363      	str	r3, [r4, #52]	; 0x34
 800f44c:	2300      	movs	r3, #0
 800f44e:	61a3      	str	r3, [r4, #24]
 800f450:	6063      	str	r3, [r4, #4]
 800f452:	89a3      	ldrh	r3, [r4, #12]
 800f454:	0619      	lsls	r1, r3, #24
 800f456:	d503      	bpl.n	800f460 <setvbuf+0x7c>
 800f458:	6921      	ldr	r1, [r4, #16]
 800f45a:	4638      	mov	r0, r7
 800f45c:	f7ff fea4 	bl	800f1a8 <_free_r>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f466:	f023 0303 	bic.w	r3, r3, #3
 800f46a:	f1b8 0f02 	cmp.w	r8, #2
 800f46e:	81a3      	strh	r3, [r4, #12]
 800f470:	d06c      	beq.n	800f54c <setvbuf+0x168>
 800f472:	ab01      	add	r3, sp, #4
 800f474:	466a      	mov	r2, sp
 800f476:	4621      	mov	r1, r4
 800f478:	4638      	mov	r0, r7
 800f47a:	f000 fabf 	bl	800f9fc <__swhatbuf_r>
 800f47e:	89a3      	ldrh	r3, [r4, #12]
 800f480:	4318      	orrs	r0, r3
 800f482:	81a0      	strh	r0, [r4, #12]
 800f484:	2d00      	cmp	r5, #0
 800f486:	d130      	bne.n	800f4ea <setvbuf+0x106>
 800f488:	9d00      	ldr	r5, [sp, #0]
 800f48a:	4628      	mov	r0, r5
 800f48c:	f7ff fe66 	bl	800f15c <malloc>
 800f490:	4606      	mov	r6, r0
 800f492:	2800      	cmp	r0, #0
 800f494:	d155      	bne.n	800f542 <setvbuf+0x15e>
 800f496:	f8dd 9000 	ldr.w	r9, [sp]
 800f49a:	45a9      	cmp	r9, r5
 800f49c:	d14a      	bne.n	800f534 <setvbuf+0x150>
 800f49e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	60a2      	str	r2, [r4, #8]
 800f4a6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f4aa:	6022      	str	r2, [r4, #0]
 800f4ac:	6122      	str	r2, [r4, #16]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b4:	6162      	str	r2, [r4, #20]
 800f4b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4b8:	f043 0302 	orr.w	r3, r3, #2
 800f4bc:	07d2      	lsls	r2, r2, #31
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	d405      	bmi.n	800f4ce <setvbuf+0xea>
 800f4c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f4c6:	d102      	bne.n	800f4ce <setvbuf+0xea>
 800f4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ca:	f000 fa96 	bl	800f9fa <__retarget_lock_release_recursive>
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	b003      	add	sp, #12
 800f4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4d6:	4b24      	ldr	r3, [pc, #144]	; (800f568 <setvbuf+0x184>)
 800f4d8:	429c      	cmp	r4, r3
 800f4da:	d101      	bne.n	800f4e0 <setvbuf+0xfc>
 800f4dc:	68bc      	ldr	r4, [r7, #8]
 800f4de:	e793      	b.n	800f408 <setvbuf+0x24>
 800f4e0:	4b22      	ldr	r3, [pc, #136]	; (800f56c <setvbuf+0x188>)
 800f4e2:	429c      	cmp	r4, r3
 800f4e4:	bf08      	it	eq
 800f4e6:	68fc      	ldreq	r4, [r7, #12]
 800f4e8:	e78e      	b.n	800f408 <setvbuf+0x24>
 800f4ea:	2e00      	cmp	r6, #0
 800f4ec:	d0cd      	beq.n	800f48a <setvbuf+0xa6>
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	b913      	cbnz	r3, 800f4f8 <setvbuf+0x114>
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	f000 f9e2 	bl	800f8bc <__sinit>
 800f4f8:	f1b8 0f01 	cmp.w	r8, #1
 800f4fc:	bf08      	it	eq
 800f4fe:	89a3      	ldrheq	r3, [r4, #12]
 800f500:	6026      	str	r6, [r4, #0]
 800f502:	bf04      	itt	eq
 800f504:	f043 0301 	orreq.w	r3, r3, #1
 800f508:	81a3      	strheq	r3, [r4, #12]
 800f50a:	89a2      	ldrh	r2, [r4, #12]
 800f50c:	f012 0308 	ands.w	r3, r2, #8
 800f510:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f514:	d01c      	beq.n	800f550 <setvbuf+0x16c>
 800f516:	07d3      	lsls	r3, r2, #31
 800f518:	bf41      	itttt	mi
 800f51a:	2300      	movmi	r3, #0
 800f51c:	426d      	negmi	r5, r5
 800f51e:	60a3      	strmi	r3, [r4, #8]
 800f520:	61a5      	strmi	r5, [r4, #24]
 800f522:	bf58      	it	pl
 800f524:	60a5      	strpl	r5, [r4, #8]
 800f526:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f528:	f015 0501 	ands.w	r5, r5, #1
 800f52c:	d115      	bne.n	800f55a <setvbuf+0x176>
 800f52e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f532:	e7c8      	b.n	800f4c6 <setvbuf+0xe2>
 800f534:	4648      	mov	r0, r9
 800f536:	f7ff fe11 	bl	800f15c <malloc>
 800f53a:	4606      	mov	r6, r0
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d0ae      	beq.n	800f49e <setvbuf+0xba>
 800f540:	464d      	mov	r5, r9
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	e7d0      	b.n	800f4ee <setvbuf+0x10a>
 800f54c:	2500      	movs	r5, #0
 800f54e:	e7a8      	b.n	800f4a2 <setvbuf+0xbe>
 800f550:	60a3      	str	r3, [r4, #8]
 800f552:	e7e8      	b.n	800f526 <setvbuf+0x142>
 800f554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f558:	e7b9      	b.n	800f4ce <setvbuf+0xea>
 800f55a:	2500      	movs	r5, #0
 800f55c:	e7b7      	b.n	800f4ce <setvbuf+0xea>
 800f55e:	bf00      	nop
 800f560:	200000f4 	.word	0x200000f4
 800f564:	08010ed0 	.word	0x08010ed0
 800f568:	08010ef0 	.word	0x08010ef0
 800f56c:	08010eb0 	.word	0x08010eb0

0800f570 <_strtol_l.constprop.0>:
 800f570:	2b01      	cmp	r3, #1
 800f572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f576:	d001      	beq.n	800f57c <_strtol_l.constprop.0+0xc>
 800f578:	2b24      	cmp	r3, #36	; 0x24
 800f57a:	d906      	bls.n	800f58a <_strtol_l.constprop.0+0x1a>
 800f57c:	f7ff fdc4 	bl	800f108 <__errno>
 800f580:	2316      	movs	r3, #22
 800f582:	6003      	str	r3, [r0, #0]
 800f584:	2000      	movs	r0, #0
 800f586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f670 <_strtol_l.constprop.0+0x100>
 800f58e:	460d      	mov	r5, r1
 800f590:	462e      	mov	r6, r5
 800f592:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f596:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f59a:	f017 0708 	ands.w	r7, r7, #8
 800f59e:	d1f7      	bne.n	800f590 <_strtol_l.constprop.0+0x20>
 800f5a0:	2c2d      	cmp	r4, #45	; 0x2d
 800f5a2:	d132      	bne.n	800f60a <_strtol_l.constprop.0+0x9a>
 800f5a4:	782c      	ldrb	r4, [r5, #0]
 800f5a6:	2701      	movs	r7, #1
 800f5a8:	1cb5      	adds	r5, r6, #2
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d05b      	beq.n	800f666 <_strtol_l.constprop.0+0xf6>
 800f5ae:	2b10      	cmp	r3, #16
 800f5b0:	d109      	bne.n	800f5c6 <_strtol_l.constprop.0+0x56>
 800f5b2:	2c30      	cmp	r4, #48	; 0x30
 800f5b4:	d107      	bne.n	800f5c6 <_strtol_l.constprop.0+0x56>
 800f5b6:	782c      	ldrb	r4, [r5, #0]
 800f5b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f5bc:	2c58      	cmp	r4, #88	; 0x58
 800f5be:	d14d      	bne.n	800f65c <_strtol_l.constprop.0+0xec>
 800f5c0:	786c      	ldrb	r4, [r5, #1]
 800f5c2:	2310      	movs	r3, #16
 800f5c4:	3502      	adds	r5, #2
 800f5c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f5ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f5ce:	f04f 0c00 	mov.w	ip, #0
 800f5d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800f5d6:	4666      	mov	r6, ip
 800f5d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800f5dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f5e0:	f1be 0f09 	cmp.w	lr, #9
 800f5e4:	d816      	bhi.n	800f614 <_strtol_l.constprop.0+0xa4>
 800f5e6:	4674      	mov	r4, lr
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	dd24      	ble.n	800f636 <_strtol_l.constprop.0+0xc6>
 800f5ec:	f1bc 0f00 	cmp.w	ip, #0
 800f5f0:	db1e      	blt.n	800f630 <_strtol_l.constprop.0+0xc0>
 800f5f2:	45b1      	cmp	r9, r6
 800f5f4:	d31c      	bcc.n	800f630 <_strtol_l.constprop.0+0xc0>
 800f5f6:	d101      	bne.n	800f5fc <_strtol_l.constprop.0+0x8c>
 800f5f8:	45a2      	cmp	sl, r4
 800f5fa:	db19      	blt.n	800f630 <_strtol_l.constprop.0+0xc0>
 800f5fc:	fb06 4603 	mla	r6, r6, r3, r4
 800f600:	f04f 0c01 	mov.w	ip, #1
 800f604:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f608:	e7e8      	b.n	800f5dc <_strtol_l.constprop.0+0x6c>
 800f60a:	2c2b      	cmp	r4, #43	; 0x2b
 800f60c:	bf04      	itt	eq
 800f60e:	782c      	ldrbeq	r4, [r5, #0]
 800f610:	1cb5      	addeq	r5, r6, #2
 800f612:	e7ca      	b.n	800f5aa <_strtol_l.constprop.0+0x3a>
 800f614:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f618:	f1be 0f19 	cmp.w	lr, #25
 800f61c:	d801      	bhi.n	800f622 <_strtol_l.constprop.0+0xb2>
 800f61e:	3c37      	subs	r4, #55	; 0x37
 800f620:	e7e2      	b.n	800f5e8 <_strtol_l.constprop.0+0x78>
 800f622:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f626:	f1be 0f19 	cmp.w	lr, #25
 800f62a:	d804      	bhi.n	800f636 <_strtol_l.constprop.0+0xc6>
 800f62c:	3c57      	subs	r4, #87	; 0x57
 800f62e:	e7db      	b.n	800f5e8 <_strtol_l.constprop.0+0x78>
 800f630:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f634:	e7e6      	b.n	800f604 <_strtol_l.constprop.0+0x94>
 800f636:	f1bc 0f00 	cmp.w	ip, #0
 800f63a:	da05      	bge.n	800f648 <_strtol_l.constprop.0+0xd8>
 800f63c:	2322      	movs	r3, #34	; 0x22
 800f63e:	6003      	str	r3, [r0, #0]
 800f640:	4646      	mov	r6, r8
 800f642:	b942      	cbnz	r2, 800f656 <_strtol_l.constprop.0+0xe6>
 800f644:	4630      	mov	r0, r6
 800f646:	e79e      	b.n	800f586 <_strtol_l.constprop.0+0x16>
 800f648:	b107      	cbz	r7, 800f64c <_strtol_l.constprop.0+0xdc>
 800f64a:	4276      	negs	r6, r6
 800f64c:	2a00      	cmp	r2, #0
 800f64e:	d0f9      	beq.n	800f644 <_strtol_l.constprop.0+0xd4>
 800f650:	f1bc 0f00 	cmp.w	ip, #0
 800f654:	d000      	beq.n	800f658 <_strtol_l.constprop.0+0xe8>
 800f656:	1e69      	subs	r1, r5, #1
 800f658:	6011      	str	r1, [r2, #0]
 800f65a:	e7f3      	b.n	800f644 <_strtol_l.constprop.0+0xd4>
 800f65c:	2430      	movs	r4, #48	; 0x30
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1b1      	bne.n	800f5c6 <_strtol_l.constprop.0+0x56>
 800f662:	2308      	movs	r3, #8
 800f664:	e7af      	b.n	800f5c6 <_strtol_l.constprop.0+0x56>
 800f666:	2c30      	cmp	r4, #48	; 0x30
 800f668:	d0a5      	beq.n	800f5b6 <_strtol_l.constprop.0+0x46>
 800f66a:	230a      	movs	r3, #10
 800f66c:	e7ab      	b.n	800f5c6 <_strtol_l.constprop.0+0x56>
 800f66e:	bf00      	nop
 800f670:	08010dad 	.word	0x08010dad

0800f674 <strtol>:
 800f674:	4613      	mov	r3, r2
 800f676:	460a      	mov	r2, r1
 800f678:	4601      	mov	r1, r0
 800f67a:	4802      	ldr	r0, [pc, #8]	; (800f684 <strtol+0x10>)
 800f67c:	6800      	ldr	r0, [r0, #0]
 800f67e:	f7ff bf77 	b.w	800f570 <_strtol_l.constprop.0>
 800f682:	bf00      	nop
 800f684:	200000f4 	.word	0x200000f4

0800f688 <__sflush_r>:
 800f688:	898a      	ldrh	r2, [r1, #12]
 800f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	4605      	mov	r5, r0
 800f690:	0710      	lsls	r0, r2, #28
 800f692:	460c      	mov	r4, r1
 800f694:	d458      	bmi.n	800f748 <__sflush_r+0xc0>
 800f696:	684b      	ldr	r3, [r1, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	dc05      	bgt.n	800f6a8 <__sflush_r+0x20>
 800f69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	dc02      	bgt.n	800f6a8 <__sflush_r+0x20>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6aa:	2e00      	cmp	r6, #0
 800f6ac:	d0f9      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f6b4:	682f      	ldr	r7, [r5, #0]
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	d032      	beq.n	800f720 <__sflush_r+0x98>
 800f6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	075a      	lsls	r2, r3, #29
 800f6c0:	d505      	bpl.n	800f6ce <__sflush_r+0x46>
 800f6c2:	6863      	ldr	r3, [r4, #4]
 800f6c4:	1ac0      	subs	r0, r0, r3
 800f6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6c8:	b10b      	cbz	r3, 800f6ce <__sflush_r+0x46>
 800f6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6cc:	1ac0      	subs	r0, r0, r3
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6d4:	6a21      	ldr	r1, [r4, #32]
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	47b0      	blx	r6
 800f6da:	1c43      	adds	r3, r0, #1
 800f6dc:	89a3      	ldrh	r3, [r4, #12]
 800f6de:	d106      	bne.n	800f6ee <__sflush_r+0x66>
 800f6e0:	6829      	ldr	r1, [r5, #0]
 800f6e2:	291d      	cmp	r1, #29
 800f6e4:	d82c      	bhi.n	800f740 <__sflush_r+0xb8>
 800f6e6:	4a2a      	ldr	r2, [pc, #168]	; (800f790 <__sflush_r+0x108>)
 800f6e8:	40ca      	lsrs	r2, r1
 800f6ea:	07d6      	lsls	r6, r2, #31
 800f6ec:	d528      	bpl.n	800f740 <__sflush_r+0xb8>
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	6062      	str	r2, [r4, #4]
 800f6f2:	04d9      	lsls	r1, r3, #19
 800f6f4:	6922      	ldr	r2, [r4, #16]
 800f6f6:	6022      	str	r2, [r4, #0]
 800f6f8:	d504      	bpl.n	800f704 <__sflush_r+0x7c>
 800f6fa:	1c42      	adds	r2, r0, #1
 800f6fc:	d101      	bne.n	800f702 <__sflush_r+0x7a>
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	b903      	cbnz	r3, 800f704 <__sflush_r+0x7c>
 800f702:	6560      	str	r0, [r4, #84]	; 0x54
 800f704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f706:	602f      	str	r7, [r5, #0]
 800f708:	2900      	cmp	r1, #0
 800f70a:	d0ca      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f710:	4299      	cmp	r1, r3
 800f712:	d002      	beq.n	800f71a <__sflush_r+0x92>
 800f714:	4628      	mov	r0, r5
 800f716:	f7ff fd47 	bl	800f1a8 <_free_r>
 800f71a:	2000      	movs	r0, #0
 800f71c:	6360      	str	r0, [r4, #52]	; 0x34
 800f71e:	e7c1      	b.n	800f6a4 <__sflush_r+0x1c>
 800f720:	6a21      	ldr	r1, [r4, #32]
 800f722:	2301      	movs	r3, #1
 800f724:	4628      	mov	r0, r5
 800f726:	47b0      	blx	r6
 800f728:	1c41      	adds	r1, r0, #1
 800f72a:	d1c7      	bne.n	800f6bc <__sflush_r+0x34>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0c4      	beq.n	800f6bc <__sflush_r+0x34>
 800f732:	2b1d      	cmp	r3, #29
 800f734:	d001      	beq.n	800f73a <__sflush_r+0xb2>
 800f736:	2b16      	cmp	r3, #22
 800f738:	d101      	bne.n	800f73e <__sflush_r+0xb6>
 800f73a:	602f      	str	r7, [r5, #0]
 800f73c:	e7b1      	b.n	800f6a2 <__sflush_r+0x1a>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f744:	81a3      	strh	r3, [r4, #12]
 800f746:	e7ad      	b.n	800f6a4 <__sflush_r+0x1c>
 800f748:	690f      	ldr	r7, [r1, #16]
 800f74a:	2f00      	cmp	r7, #0
 800f74c:	d0a9      	beq.n	800f6a2 <__sflush_r+0x1a>
 800f74e:	0793      	lsls	r3, r2, #30
 800f750:	680e      	ldr	r6, [r1, #0]
 800f752:	bf08      	it	eq
 800f754:	694b      	ldreq	r3, [r1, #20]
 800f756:	600f      	str	r7, [r1, #0]
 800f758:	bf18      	it	ne
 800f75a:	2300      	movne	r3, #0
 800f75c:	eba6 0807 	sub.w	r8, r6, r7
 800f760:	608b      	str	r3, [r1, #8]
 800f762:	f1b8 0f00 	cmp.w	r8, #0
 800f766:	dd9c      	ble.n	800f6a2 <__sflush_r+0x1a>
 800f768:	6a21      	ldr	r1, [r4, #32]
 800f76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f76c:	4643      	mov	r3, r8
 800f76e:	463a      	mov	r2, r7
 800f770:	4628      	mov	r0, r5
 800f772:	47b0      	blx	r6
 800f774:	2800      	cmp	r0, #0
 800f776:	dc06      	bgt.n	800f786 <__sflush_r+0xfe>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f784:	e78e      	b.n	800f6a4 <__sflush_r+0x1c>
 800f786:	4407      	add	r7, r0
 800f788:	eba8 0800 	sub.w	r8, r8, r0
 800f78c:	e7e9      	b.n	800f762 <__sflush_r+0xda>
 800f78e:	bf00      	nop
 800f790:	20400001 	.word	0x20400001

0800f794 <_fflush_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	690b      	ldr	r3, [r1, #16]
 800f798:	4605      	mov	r5, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b913      	cbnz	r3, 800f7a4 <_fflush_r+0x10>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}
 800f7a4:	b118      	cbz	r0, 800f7ae <_fflush_r+0x1a>
 800f7a6:	6983      	ldr	r3, [r0, #24]
 800f7a8:	b90b      	cbnz	r3, 800f7ae <_fflush_r+0x1a>
 800f7aa:	f000 f887 	bl	800f8bc <__sinit>
 800f7ae:	4b14      	ldr	r3, [pc, #80]	; (800f800 <_fflush_r+0x6c>)
 800f7b0:	429c      	cmp	r4, r3
 800f7b2:	d11b      	bne.n	800f7ec <_fflush_r+0x58>
 800f7b4:	686c      	ldr	r4, [r5, #4]
 800f7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d0ef      	beq.n	800f79e <_fflush_r+0xa>
 800f7be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7c0:	07d0      	lsls	r0, r2, #31
 800f7c2:	d404      	bmi.n	800f7ce <_fflush_r+0x3a>
 800f7c4:	0599      	lsls	r1, r3, #22
 800f7c6:	d402      	bmi.n	800f7ce <_fflush_r+0x3a>
 800f7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ca:	f000 f915 	bl	800f9f8 <__retarget_lock_acquire_recursive>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	f7ff ff59 	bl	800f688 <__sflush_r>
 800f7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7d8:	07da      	lsls	r2, r3, #31
 800f7da:	4605      	mov	r5, r0
 800f7dc:	d4e0      	bmi.n	800f7a0 <_fflush_r+0xc>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	059b      	lsls	r3, r3, #22
 800f7e2:	d4dd      	bmi.n	800f7a0 <_fflush_r+0xc>
 800f7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7e6:	f000 f908 	bl	800f9fa <__retarget_lock_release_recursive>
 800f7ea:	e7d9      	b.n	800f7a0 <_fflush_r+0xc>
 800f7ec:	4b05      	ldr	r3, [pc, #20]	; (800f804 <_fflush_r+0x70>)
 800f7ee:	429c      	cmp	r4, r3
 800f7f0:	d101      	bne.n	800f7f6 <_fflush_r+0x62>
 800f7f2:	68ac      	ldr	r4, [r5, #8]
 800f7f4:	e7df      	b.n	800f7b6 <_fflush_r+0x22>
 800f7f6:	4b04      	ldr	r3, [pc, #16]	; (800f808 <_fflush_r+0x74>)
 800f7f8:	429c      	cmp	r4, r3
 800f7fa:	bf08      	it	eq
 800f7fc:	68ec      	ldreq	r4, [r5, #12]
 800f7fe:	e7da      	b.n	800f7b6 <_fflush_r+0x22>
 800f800:	08010ed0 	.word	0x08010ed0
 800f804:	08010ef0 	.word	0x08010ef0
 800f808:	08010eb0 	.word	0x08010eb0

0800f80c <std>:
 800f80c:	2300      	movs	r3, #0
 800f80e:	b510      	push	{r4, lr}
 800f810:	4604      	mov	r4, r0
 800f812:	e9c0 3300 	strd	r3, r3, [r0]
 800f816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f81a:	6083      	str	r3, [r0, #8]
 800f81c:	8181      	strh	r1, [r0, #12]
 800f81e:	6643      	str	r3, [r0, #100]	; 0x64
 800f820:	81c2      	strh	r2, [r0, #14]
 800f822:	6183      	str	r3, [r0, #24]
 800f824:	4619      	mov	r1, r3
 800f826:	2208      	movs	r2, #8
 800f828:	305c      	adds	r0, #92	; 0x5c
 800f82a:	f7ff fcb5 	bl	800f198 <memset>
 800f82e:	4b05      	ldr	r3, [pc, #20]	; (800f844 <std+0x38>)
 800f830:	6263      	str	r3, [r4, #36]	; 0x24
 800f832:	4b05      	ldr	r3, [pc, #20]	; (800f848 <std+0x3c>)
 800f834:	62a3      	str	r3, [r4, #40]	; 0x28
 800f836:	4b05      	ldr	r3, [pc, #20]	; (800f84c <std+0x40>)
 800f838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f83a:	4b05      	ldr	r3, [pc, #20]	; (800f850 <std+0x44>)
 800f83c:	6224      	str	r4, [r4, #32]
 800f83e:	6323      	str	r3, [r4, #48]	; 0x30
 800f840:	bd10      	pop	{r4, pc}
 800f842:	bf00      	nop
 800f844:	0801014d 	.word	0x0801014d
 800f848:	0801016f 	.word	0x0801016f
 800f84c:	080101a7 	.word	0x080101a7
 800f850:	080101cb 	.word	0x080101cb

0800f854 <_cleanup_r>:
 800f854:	4901      	ldr	r1, [pc, #4]	; (800f85c <_cleanup_r+0x8>)
 800f856:	f000 b8af 	b.w	800f9b8 <_fwalk_reent>
 800f85a:	bf00      	nop
 800f85c:	0800f795 	.word	0x0800f795

0800f860 <__sfmoreglue>:
 800f860:	b570      	push	{r4, r5, r6, lr}
 800f862:	2268      	movs	r2, #104	; 0x68
 800f864:	1e4d      	subs	r5, r1, #1
 800f866:	4355      	muls	r5, r2
 800f868:	460e      	mov	r6, r1
 800f86a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f86e:	f7ff fd07 	bl	800f280 <_malloc_r>
 800f872:	4604      	mov	r4, r0
 800f874:	b140      	cbz	r0, 800f888 <__sfmoreglue+0x28>
 800f876:	2100      	movs	r1, #0
 800f878:	e9c0 1600 	strd	r1, r6, [r0]
 800f87c:	300c      	adds	r0, #12
 800f87e:	60a0      	str	r0, [r4, #8]
 800f880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f884:	f7ff fc88 	bl	800f198 <memset>
 800f888:	4620      	mov	r0, r4
 800f88a:	bd70      	pop	{r4, r5, r6, pc}

0800f88c <__sfp_lock_acquire>:
 800f88c:	4801      	ldr	r0, [pc, #4]	; (800f894 <__sfp_lock_acquire+0x8>)
 800f88e:	f000 b8b3 	b.w	800f9f8 <__retarget_lock_acquire_recursive>
 800f892:	bf00      	nop
 800f894:	20003cd1 	.word	0x20003cd1

0800f898 <__sfp_lock_release>:
 800f898:	4801      	ldr	r0, [pc, #4]	; (800f8a0 <__sfp_lock_release+0x8>)
 800f89a:	f000 b8ae 	b.w	800f9fa <__retarget_lock_release_recursive>
 800f89e:	bf00      	nop
 800f8a0:	20003cd1 	.word	0x20003cd1

0800f8a4 <__sinit_lock_acquire>:
 800f8a4:	4801      	ldr	r0, [pc, #4]	; (800f8ac <__sinit_lock_acquire+0x8>)
 800f8a6:	f000 b8a7 	b.w	800f9f8 <__retarget_lock_acquire_recursive>
 800f8aa:	bf00      	nop
 800f8ac:	20003cd2 	.word	0x20003cd2

0800f8b0 <__sinit_lock_release>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	; (800f8b8 <__sinit_lock_release+0x8>)
 800f8b2:	f000 b8a2 	b.w	800f9fa <__retarget_lock_release_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	20003cd2 	.word	0x20003cd2

0800f8bc <__sinit>:
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	4604      	mov	r4, r0
 800f8c0:	f7ff fff0 	bl	800f8a4 <__sinit_lock_acquire>
 800f8c4:	69a3      	ldr	r3, [r4, #24]
 800f8c6:	b11b      	cbz	r3, 800f8d0 <__sinit+0x14>
 800f8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8cc:	f7ff bff0 	b.w	800f8b0 <__sinit_lock_release>
 800f8d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f8d4:	6523      	str	r3, [r4, #80]	; 0x50
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <__sinit+0x68>)
 800f8d8:	4a13      	ldr	r2, [pc, #76]	; (800f928 <__sinit+0x6c>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	bf04      	itt	eq
 800f8e2:	2301      	moveq	r3, #1
 800f8e4:	61a3      	streq	r3, [r4, #24]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f000 f820 	bl	800f92c <__sfp>
 800f8ec:	6060      	str	r0, [r4, #4]
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f000 f81c 	bl	800f92c <__sfp>
 800f8f4:	60a0      	str	r0, [r4, #8]
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 f818 	bl	800f92c <__sfp>
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	60e0      	str	r0, [r4, #12]
 800f900:	2104      	movs	r1, #4
 800f902:	6860      	ldr	r0, [r4, #4]
 800f904:	f7ff ff82 	bl	800f80c <std>
 800f908:	68a0      	ldr	r0, [r4, #8]
 800f90a:	2201      	movs	r2, #1
 800f90c:	2109      	movs	r1, #9
 800f90e:	f7ff ff7d 	bl	800f80c <std>
 800f912:	68e0      	ldr	r0, [r4, #12]
 800f914:	2202      	movs	r2, #2
 800f916:	2112      	movs	r1, #18
 800f918:	f7ff ff78 	bl	800f80c <std>
 800f91c:	2301      	movs	r3, #1
 800f91e:	61a3      	str	r3, [r4, #24]
 800f920:	e7d2      	b.n	800f8c8 <__sinit+0xc>
 800f922:	bf00      	nop
 800f924:	08010da8 	.word	0x08010da8
 800f928:	0800f855 	.word	0x0800f855

0800f92c <__sfp>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	4607      	mov	r7, r0
 800f930:	f7ff ffac 	bl	800f88c <__sfp_lock_acquire>
 800f934:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <__sfp+0x84>)
 800f936:	681e      	ldr	r6, [r3, #0]
 800f938:	69b3      	ldr	r3, [r6, #24]
 800f93a:	b913      	cbnz	r3, 800f942 <__sfp+0x16>
 800f93c:	4630      	mov	r0, r6
 800f93e:	f7ff ffbd 	bl	800f8bc <__sinit>
 800f942:	3648      	adds	r6, #72	; 0x48
 800f944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f948:	3b01      	subs	r3, #1
 800f94a:	d503      	bpl.n	800f954 <__sfp+0x28>
 800f94c:	6833      	ldr	r3, [r6, #0]
 800f94e:	b30b      	cbz	r3, 800f994 <__sfp+0x68>
 800f950:	6836      	ldr	r6, [r6, #0]
 800f952:	e7f7      	b.n	800f944 <__sfp+0x18>
 800f954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f958:	b9d5      	cbnz	r5, 800f990 <__sfp+0x64>
 800f95a:	4b16      	ldr	r3, [pc, #88]	; (800f9b4 <__sfp+0x88>)
 800f95c:	60e3      	str	r3, [r4, #12]
 800f95e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f962:	6665      	str	r5, [r4, #100]	; 0x64
 800f964:	f000 f847 	bl	800f9f6 <__retarget_lock_init_recursive>
 800f968:	f7ff ff96 	bl	800f898 <__sfp_lock_release>
 800f96c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f974:	6025      	str	r5, [r4, #0]
 800f976:	61a5      	str	r5, [r4, #24]
 800f978:	2208      	movs	r2, #8
 800f97a:	4629      	mov	r1, r5
 800f97c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f980:	f7ff fc0a 	bl	800f198 <memset>
 800f984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f98c:	4620      	mov	r0, r4
 800f98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f990:	3468      	adds	r4, #104	; 0x68
 800f992:	e7d9      	b.n	800f948 <__sfp+0x1c>
 800f994:	2104      	movs	r1, #4
 800f996:	4638      	mov	r0, r7
 800f998:	f7ff ff62 	bl	800f860 <__sfmoreglue>
 800f99c:	4604      	mov	r4, r0
 800f99e:	6030      	str	r0, [r6, #0]
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d1d5      	bne.n	800f950 <__sfp+0x24>
 800f9a4:	f7ff ff78 	bl	800f898 <__sfp_lock_release>
 800f9a8:	230c      	movs	r3, #12
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	e7ee      	b.n	800f98c <__sfp+0x60>
 800f9ae:	bf00      	nop
 800f9b0:	08010da8 	.word	0x08010da8
 800f9b4:	ffff0001 	.word	0xffff0001

0800f9b8 <_fwalk_reent>:
 800f9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9bc:	4606      	mov	r6, r0
 800f9be:	4688      	mov	r8, r1
 800f9c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f9c4:	2700      	movs	r7, #0
 800f9c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9ca:	f1b9 0901 	subs.w	r9, r9, #1
 800f9ce:	d505      	bpl.n	800f9dc <_fwalk_reent+0x24>
 800f9d0:	6824      	ldr	r4, [r4, #0]
 800f9d2:	2c00      	cmp	r4, #0
 800f9d4:	d1f7      	bne.n	800f9c6 <_fwalk_reent+0xe>
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9dc:	89ab      	ldrh	r3, [r5, #12]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d907      	bls.n	800f9f2 <_fwalk_reent+0x3a>
 800f9e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	d003      	beq.n	800f9f2 <_fwalk_reent+0x3a>
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	47c0      	blx	r8
 800f9f0:	4307      	orrs	r7, r0
 800f9f2:	3568      	adds	r5, #104	; 0x68
 800f9f4:	e7e9      	b.n	800f9ca <_fwalk_reent+0x12>

0800f9f6 <__retarget_lock_init_recursive>:
 800f9f6:	4770      	bx	lr

0800f9f8 <__retarget_lock_acquire_recursive>:
 800f9f8:	4770      	bx	lr

0800f9fa <__retarget_lock_release_recursive>:
 800f9fa:	4770      	bx	lr

0800f9fc <__swhatbuf_r>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	460e      	mov	r6, r1
 800fa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa04:	2900      	cmp	r1, #0
 800fa06:	b096      	sub	sp, #88	; 0x58
 800fa08:	4614      	mov	r4, r2
 800fa0a:	461d      	mov	r5, r3
 800fa0c:	da08      	bge.n	800fa20 <__swhatbuf_r+0x24>
 800fa0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	602a      	str	r2, [r5, #0]
 800fa16:	061a      	lsls	r2, r3, #24
 800fa18:	d410      	bmi.n	800fa3c <__swhatbuf_r+0x40>
 800fa1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa1e:	e00e      	b.n	800fa3e <__swhatbuf_r+0x42>
 800fa20:	466a      	mov	r2, sp
 800fa22:	f000 fcb9 	bl	8010398 <_fstat_r>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	dbf1      	blt.n	800fa0e <__swhatbuf_r+0x12>
 800fa2a:	9a01      	ldr	r2, [sp, #4]
 800fa2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa34:	425a      	negs	r2, r3
 800fa36:	415a      	adcs	r2, r3
 800fa38:	602a      	str	r2, [r5, #0]
 800fa3a:	e7ee      	b.n	800fa1a <__swhatbuf_r+0x1e>
 800fa3c:	2340      	movs	r3, #64	; 0x40
 800fa3e:	2000      	movs	r0, #0
 800fa40:	6023      	str	r3, [r4, #0]
 800fa42:	b016      	add	sp, #88	; 0x58
 800fa44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa48 <__smakebuf_r>:
 800fa48:	898b      	ldrh	r3, [r1, #12]
 800fa4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa4c:	079d      	lsls	r5, r3, #30
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460c      	mov	r4, r1
 800fa52:	d507      	bpl.n	800fa64 <__smakebuf_r+0x1c>
 800fa54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	6163      	str	r3, [r4, #20]
 800fa60:	b002      	add	sp, #8
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	ab01      	add	r3, sp, #4
 800fa66:	466a      	mov	r2, sp
 800fa68:	f7ff ffc8 	bl	800f9fc <__swhatbuf_r>
 800fa6c:	9900      	ldr	r1, [sp, #0]
 800fa6e:	4605      	mov	r5, r0
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7ff fc05 	bl	800f280 <_malloc_r>
 800fa76:	b948      	cbnz	r0, 800fa8c <__smakebuf_r+0x44>
 800fa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7c:	059a      	lsls	r2, r3, #22
 800fa7e:	d4ef      	bmi.n	800fa60 <__smakebuf_r+0x18>
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	f043 0302 	orr.w	r3, r3, #2
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	e7e3      	b.n	800fa54 <__smakebuf_r+0xc>
 800fa8c:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <__smakebuf_r+0x7c>)
 800fa8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	6163      	str	r3, [r4, #20]
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	6120      	str	r0, [r4, #16]
 800faa2:	b15b      	cbz	r3, 800fabc <__smakebuf_r+0x74>
 800faa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 fc87 	bl	80103bc <_isatty_r>
 800faae:	b128      	cbz	r0, 800fabc <__smakebuf_r+0x74>
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	f023 0303 	bic.w	r3, r3, #3
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	89a0      	ldrh	r0, [r4, #12]
 800fabe:	4305      	orrs	r5, r0
 800fac0:	81a5      	strh	r5, [r4, #12]
 800fac2:	e7cd      	b.n	800fa60 <__smakebuf_r+0x18>
 800fac4:	0800f855 	.word	0x0800f855

0800fac8 <__malloc_lock>:
 800fac8:	4801      	ldr	r0, [pc, #4]	; (800fad0 <__malloc_lock+0x8>)
 800faca:	f7ff bf95 	b.w	800f9f8 <__retarget_lock_acquire_recursive>
 800face:	bf00      	nop
 800fad0:	20003cd0 	.word	0x20003cd0

0800fad4 <__malloc_unlock>:
 800fad4:	4801      	ldr	r0, [pc, #4]	; (800fadc <__malloc_unlock+0x8>)
 800fad6:	f7ff bf90 	b.w	800f9fa <__retarget_lock_release_recursive>
 800fada:	bf00      	nop
 800fadc:	20003cd0 	.word	0x20003cd0

0800fae0 <__sfputc_r>:
 800fae0:	6893      	ldr	r3, [r2, #8]
 800fae2:	3b01      	subs	r3, #1
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	b410      	push	{r4}
 800fae8:	6093      	str	r3, [r2, #8]
 800faea:	da08      	bge.n	800fafe <__sfputc_r+0x1e>
 800faec:	6994      	ldr	r4, [r2, #24]
 800faee:	42a3      	cmp	r3, r4
 800faf0:	db01      	blt.n	800faf6 <__sfputc_r+0x16>
 800faf2:	290a      	cmp	r1, #10
 800faf4:	d103      	bne.n	800fafe <__sfputc_r+0x1e>
 800faf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fafa:	f000 bb6b 	b.w	80101d4 <__swbuf_r>
 800fafe:	6813      	ldr	r3, [r2, #0]
 800fb00:	1c58      	adds	r0, r3, #1
 800fb02:	6010      	str	r0, [r2, #0]
 800fb04:	7019      	strb	r1, [r3, #0]
 800fb06:	4608      	mov	r0, r1
 800fb08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <__sfputs_r>:
 800fb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb10:	4606      	mov	r6, r0
 800fb12:	460f      	mov	r7, r1
 800fb14:	4614      	mov	r4, r2
 800fb16:	18d5      	adds	r5, r2, r3
 800fb18:	42ac      	cmp	r4, r5
 800fb1a:	d101      	bne.n	800fb20 <__sfputs_r+0x12>
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	e007      	b.n	800fb30 <__sfputs_r+0x22>
 800fb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb24:	463a      	mov	r2, r7
 800fb26:	4630      	mov	r0, r6
 800fb28:	f7ff ffda 	bl	800fae0 <__sfputc_r>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d1f3      	bne.n	800fb18 <__sfputs_r+0xa>
 800fb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb34 <_vfiprintf_r>:
 800fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb38:	460d      	mov	r5, r1
 800fb3a:	b09d      	sub	sp, #116	; 0x74
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	4698      	mov	r8, r3
 800fb40:	4606      	mov	r6, r0
 800fb42:	b118      	cbz	r0, 800fb4c <_vfiprintf_r+0x18>
 800fb44:	6983      	ldr	r3, [r0, #24]
 800fb46:	b90b      	cbnz	r3, 800fb4c <_vfiprintf_r+0x18>
 800fb48:	f7ff feb8 	bl	800f8bc <__sinit>
 800fb4c:	4b89      	ldr	r3, [pc, #548]	; (800fd74 <_vfiprintf_r+0x240>)
 800fb4e:	429d      	cmp	r5, r3
 800fb50:	d11b      	bne.n	800fb8a <_vfiprintf_r+0x56>
 800fb52:	6875      	ldr	r5, [r6, #4]
 800fb54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb56:	07d9      	lsls	r1, r3, #31
 800fb58:	d405      	bmi.n	800fb66 <_vfiprintf_r+0x32>
 800fb5a:	89ab      	ldrh	r3, [r5, #12]
 800fb5c:	059a      	lsls	r2, r3, #22
 800fb5e:	d402      	bmi.n	800fb66 <_vfiprintf_r+0x32>
 800fb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb62:	f7ff ff49 	bl	800f9f8 <__retarget_lock_acquire_recursive>
 800fb66:	89ab      	ldrh	r3, [r5, #12]
 800fb68:	071b      	lsls	r3, r3, #28
 800fb6a:	d501      	bpl.n	800fb70 <_vfiprintf_r+0x3c>
 800fb6c:	692b      	ldr	r3, [r5, #16]
 800fb6e:	b9eb      	cbnz	r3, 800fbac <_vfiprintf_r+0x78>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 fb92 	bl	801029c <__swsetup_r>
 800fb78:	b1c0      	cbz	r0, 800fbac <_vfiprintf_r+0x78>
 800fb7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb7c:	07dc      	lsls	r4, r3, #31
 800fb7e:	d50e      	bpl.n	800fb9e <_vfiprintf_r+0x6a>
 800fb80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb84:	b01d      	add	sp, #116	; 0x74
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	4b7b      	ldr	r3, [pc, #492]	; (800fd78 <_vfiprintf_r+0x244>)
 800fb8c:	429d      	cmp	r5, r3
 800fb8e:	d101      	bne.n	800fb94 <_vfiprintf_r+0x60>
 800fb90:	68b5      	ldr	r5, [r6, #8]
 800fb92:	e7df      	b.n	800fb54 <_vfiprintf_r+0x20>
 800fb94:	4b79      	ldr	r3, [pc, #484]	; (800fd7c <_vfiprintf_r+0x248>)
 800fb96:	429d      	cmp	r5, r3
 800fb98:	bf08      	it	eq
 800fb9a:	68f5      	ldreq	r5, [r6, #12]
 800fb9c:	e7da      	b.n	800fb54 <_vfiprintf_r+0x20>
 800fb9e:	89ab      	ldrh	r3, [r5, #12]
 800fba0:	0598      	lsls	r0, r3, #22
 800fba2:	d4ed      	bmi.n	800fb80 <_vfiprintf_r+0x4c>
 800fba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fba6:	f7ff ff28 	bl	800f9fa <__retarget_lock_release_recursive>
 800fbaa:	e7e9      	b.n	800fb80 <_vfiprintf_r+0x4c>
 800fbac:	2300      	movs	r3, #0
 800fbae:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb0:	2320      	movs	r3, #32
 800fbb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbba:	2330      	movs	r3, #48	; 0x30
 800fbbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fd80 <_vfiprintf_r+0x24c>
 800fbc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbc4:	f04f 0901 	mov.w	r9, #1
 800fbc8:	4623      	mov	r3, r4
 800fbca:	469a      	mov	sl, r3
 800fbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd0:	b10a      	cbz	r2, 800fbd6 <_vfiprintf_r+0xa2>
 800fbd2:	2a25      	cmp	r2, #37	; 0x25
 800fbd4:	d1f9      	bne.n	800fbca <_vfiprintf_r+0x96>
 800fbd6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbda:	d00b      	beq.n	800fbf4 <_vfiprintf_r+0xc0>
 800fbdc:	465b      	mov	r3, fp
 800fbde:	4622      	mov	r2, r4
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	f7ff ff93 	bl	800fb0e <__sfputs_r>
 800fbe8:	3001      	adds	r0, #1
 800fbea:	f000 80aa 	beq.w	800fd42 <_vfiprintf_r+0x20e>
 800fbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbf0:	445a      	add	r2, fp
 800fbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 80a2 	beq.w	800fd42 <_vfiprintf_r+0x20e>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc08:	f10a 0a01 	add.w	sl, sl, #1
 800fc0c:	9304      	str	r3, [sp, #16]
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc14:	931a      	str	r3, [sp, #104]	; 0x68
 800fc16:	4654      	mov	r4, sl
 800fc18:	2205      	movs	r2, #5
 800fc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc1e:	4858      	ldr	r0, [pc, #352]	; (800fd80 <_vfiprintf_r+0x24c>)
 800fc20:	f7f0 fae6 	bl	80001f0 <memchr>
 800fc24:	9a04      	ldr	r2, [sp, #16]
 800fc26:	b9d8      	cbnz	r0, 800fc60 <_vfiprintf_r+0x12c>
 800fc28:	06d1      	lsls	r1, r2, #27
 800fc2a:	bf44      	itt	mi
 800fc2c:	2320      	movmi	r3, #32
 800fc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc32:	0713      	lsls	r3, r2, #28
 800fc34:	bf44      	itt	mi
 800fc36:	232b      	movmi	r3, #43	; 0x2b
 800fc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc40:	2b2a      	cmp	r3, #42	; 0x2a
 800fc42:	d015      	beq.n	800fc70 <_vfiprintf_r+0x13c>
 800fc44:	9a07      	ldr	r2, [sp, #28]
 800fc46:	4654      	mov	r4, sl
 800fc48:	2000      	movs	r0, #0
 800fc4a:	f04f 0c0a 	mov.w	ip, #10
 800fc4e:	4621      	mov	r1, r4
 800fc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc54:	3b30      	subs	r3, #48	; 0x30
 800fc56:	2b09      	cmp	r3, #9
 800fc58:	d94e      	bls.n	800fcf8 <_vfiprintf_r+0x1c4>
 800fc5a:	b1b0      	cbz	r0, 800fc8a <_vfiprintf_r+0x156>
 800fc5c:	9207      	str	r2, [sp, #28]
 800fc5e:	e014      	b.n	800fc8a <_vfiprintf_r+0x156>
 800fc60:	eba0 0308 	sub.w	r3, r0, r8
 800fc64:	fa09 f303 	lsl.w	r3, r9, r3
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	9304      	str	r3, [sp, #16]
 800fc6c:	46a2      	mov	sl, r4
 800fc6e:	e7d2      	b.n	800fc16 <_vfiprintf_r+0xe2>
 800fc70:	9b03      	ldr	r3, [sp, #12]
 800fc72:	1d19      	adds	r1, r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	9103      	str	r1, [sp, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bfbb      	ittet	lt
 800fc7c:	425b      	neglt	r3, r3
 800fc7e:	f042 0202 	orrlt.w	r2, r2, #2
 800fc82:	9307      	strge	r3, [sp, #28]
 800fc84:	9307      	strlt	r3, [sp, #28]
 800fc86:	bfb8      	it	lt
 800fc88:	9204      	strlt	r2, [sp, #16]
 800fc8a:	7823      	ldrb	r3, [r4, #0]
 800fc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fc8e:	d10c      	bne.n	800fcaa <_vfiprintf_r+0x176>
 800fc90:	7863      	ldrb	r3, [r4, #1]
 800fc92:	2b2a      	cmp	r3, #42	; 0x2a
 800fc94:	d135      	bne.n	800fd02 <_vfiprintf_r+0x1ce>
 800fc96:	9b03      	ldr	r3, [sp, #12]
 800fc98:	1d1a      	adds	r2, r3, #4
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	9203      	str	r2, [sp, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	bfb8      	it	lt
 800fca2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fca6:	3402      	adds	r4, #2
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fd90 <_vfiprintf_r+0x25c>
 800fcae:	7821      	ldrb	r1, [r4, #0]
 800fcb0:	2203      	movs	r2, #3
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7f0 fa9c 	bl	80001f0 <memchr>
 800fcb8:	b140      	cbz	r0, 800fccc <_vfiprintf_r+0x198>
 800fcba:	2340      	movs	r3, #64	; 0x40
 800fcbc:	eba0 000a 	sub.w	r0, r0, sl
 800fcc0:	fa03 f000 	lsl.w	r0, r3, r0
 800fcc4:	9b04      	ldr	r3, [sp, #16]
 800fcc6:	4303      	orrs	r3, r0
 800fcc8:	3401      	adds	r4, #1
 800fcca:	9304      	str	r3, [sp, #16]
 800fccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd0:	482c      	ldr	r0, [pc, #176]	; (800fd84 <_vfiprintf_r+0x250>)
 800fcd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcd6:	2206      	movs	r2, #6
 800fcd8:	f7f0 fa8a 	bl	80001f0 <memchr>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d03f      	beq.n	800fd60 <_vfiprintf_r+0x22c>
 800fce0:	4b29      	ldr	r3, [pc, #164]	; (800fd88 <_vfiprintf_r+0x254>)
 800fce2:	bb1b      	cbnz	r3, 800fd2c <_vfiprintf_r+0x1f8>
 800fce4:	9b03      	ldr	r3, [sp, #12]
 800fce6:	3307      	adds	r3, #7
 800fce8:	f023 0307 	bic.w	r3, r3, #7
 800fcec:	3308      	adds	r3, #8
 800fcee:	9303      	str	r3, [sp, #12]
 800fcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf2:	443b      	add	r3, r7
 800fcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf6:	e767      	b.n	800fbc8 <_vfiprintf_r+0x94>
 800fcf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	2001      	movs	r0, #1
 800fd00:	e7a5      	b.n	800fc4e <_vfiprintf_r+0x11a>
 800fd02:	2300      	movs	r3, #0
 800fd04:	3401      	adds	r4, #1
 800fd06:	9305      	str	r3, [sp, #20]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	f04f 0c0a 	mov.w	ip, #10
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd14:	3a30      	subs	r2, #48	; 0x30
 800fd16:	2a09      	cmp	r2, #9
 800fd18:	d903      	bls.n	800fd22 <_vfiprintf_r+0x1ee>
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d0c5      	beq.n	800fcaa <_vfiprintf_r+0x176>
 800fd1e:	9105      	str	r1, [sp, #20]
 800fd20:	e7c3      	b.n	800fcaa <_vfiprintf_r+0x176>
 800fd22:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd26:	4604      	mov	r4, r0
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e7f0      	b.n	800fd0e <_vfiprintf_r+0x1da>
 800fd2c:	ab03      	add	r3, sp, #12
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	462a      	mov	r2, r5
 800fd32:	4b16      	ldr	r3, [pc, #88]	; (800fd8c <_vfiprintf_r+0x258>)
 800fd34:	a904      	add	r1, sp, #16
 800fd36:	4630      	mov	r0, r6
 800fd38:	f3af 8000 	nop.w
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	1c78      	adds	r0, r7, #1
 800fd40:	d1d6      	bne.n	800fcf0 <_vfiprintf_r+0x1bc>
 800fd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd44:	07d9      	lsls	r1, r3, #31
 800fd46:	d405      	bmi.n	800fd54 <_vfiprintf_r+0x220>
 800fd48:	89ab      	ldrh	r3, [r5, #12]
 800fd4a:	059a      	lsls	r2, r3, #22
 800fd4c:	d402      	bmi.n	800fd54 <_vfiprintf_r+0x220>
 800fd4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd50:	f7ff fe53 	bl	800f9fa <__retarget_lock_release_recursive>
 800fd54:	89ab      	ldrh	r3, [r5, #12]
 800fd56:	065b      	lsls	r3, r3, #25
 800fd58:	f53f af12 	bmi.w	800fb80 <_vfiprintf_r+0x4c>
 800fd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd5e:	e711      	b.n	800fb84 <_vfiprintf_r+0x50>
 800fd60:	ab03      	add	r3, sp, #12
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	462a      	mov	r2, r5
 800fd66:	4b09      	ldr	r3, [pc, #36]	; (800fd8c <_vfiprintf_r+0x258>)
 800fd68:	a904      	add	r1, sp, #16
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f000 f880 	bl	800fe70 <_printf_i>
 800fd70:	e7e4      	b.n	800fd3c <_vfiprintf_r+0x208>
 800fd72:	bf00      	nop
 800fd74:	08010ed0 	.word	0x08010ed0
 800fd78:	08010ef0 	.word	0x08010ef0
 800fd7c:	08010eb0 	.word	0x08010eb0
 800fd80:	08010f10 	.word	0x08010f10
 800fd84:	08010f1a 	.word	0x08010f1a
 800fd88:	00000000 	.word	0x00000000
 800fd8c:	0800fb0f 	.word	0x0800fb0f
 800fd90:	08010f16 	.word	0x08010f16

0800fd94 <_printf_common>:
 800fd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd98:	4616      	mov	r6, r2
 800fd9a:	4699      	mov	r9, r3
 800fd9c:	688a      	ldr	r2, [r1, #8]
 800fd9e:	690b      	ldr	r3, [r1, #16]
 800fda0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fda4:	4293      	cmp	r3, r2
 800fda6:	bfb8      	it	lt
 800fda8:	4613      	movlt	r3, r2
 800fdaa:	6033      	str	r3, [r6, #0]
 800fdac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	460c      	mov	r4, r1
 800fdb4:	b10a      	cbz	r2, 800fdba <_printf_common+0x26>
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	6033      	str	r3, [r6, #0]
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	0699      	lsls	r1, r3, #26
 800fdbe:	bf42      	ittt	mi
 800fdc0:	6833      	ldrmi	r3, [r6, #0]
 800fdc2:	3302      	addmi	r3, #2
 800fdc4:	6033      	strmi	r3, [r6, #0]
 800fdc6:	6825      	ldr	r5, [r4, #0]
 800fdc8:	f015 0506 	ands.w	r5, r5, #6
 800fdcc:	d106      	bne.n	800fddc <_printf_common+0x48>
 800fdce:	f104 0a19 	add.w	sl, r4, #25
 800fdd2:	68e3      	ldr	r3, [r4, #12]
 800fdd4:	6832      	ldr	r2, [r6, #0]
 800fdd6:	1a9b      	subs	r3, r3, r2
 800fdd8:	42ab      	cmp	r3, r5
 800fdda:	dc26      	bgt.n	800fe2a <_printf_common+0x96>
 800fddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fde0:	1e13      	subs	r3, r2, #0
 800fde2:	6822      	ldr	r2, [r4, #0]
 800fde4:	bf18      	it	ne
 800fde6:	2301      	movne	r3, #1
 800fde8:	0692      	lsls	r2, r2, #26
 800fdea:	d42b      	bmi.n	800fe44 <_printf_common+0xb0>
 800fdec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdf0:	4649      	mov	r1, r9
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	47c0      	blx	r8
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	d01e      	beq.n	800fe38 <_printf_common+0xa4>
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	68e5      	ldr	r5, [r4, #12]
 800fdfe:	6832      	ldr	r2, [r6, #0]
 800fe00:	f003 0306 	and.w	r3, r3, #6
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	bf08      	it	eq
 800fe08:	1aad      	subeq	r5, r5, r2
 800fe0a:	68a3      	ldr	r3, [r4, #8]
 800fe0c:	6922      	ldr	r2, [r4, #16]
 800fe0e:	bf0c      	ite	eq
 800fe10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe14:	2500      	movne	r5, #0
 800fe16:	4293      	cmp	r3, r2
 800fe18:	bfc4      	itt	gt
 800fe1a:	1a9b      	subgt	r3, r3, r2
 800fe1c:	18ed      	addgt	r5, r5, r3
 800fe1e:	2600      	movs	r6, #0
 800fe20:	341a      	adds	r4, #26
 800fe22:	42b5      	cmp	r5, r6
 800fe24:	d11a      	bne.n	800fe5c <_printf_common+0xc8>
 800fe26:	2000      	movs	r0, #0
 800fe28:	e008      	b.n	800fe3c <_printf_common+0xa8>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	4652      	mov	r2, sl
 800fe2e:	4649      	mov	r1, r9
 800fe30:	4638      	mov	r0, r7
 800fe32:	47c0      	blx	r8
 800fe34:	3001      	adds	r0, #1
 800fe36:	d103      	bne.n	800fe40 <_printf_common+0xac>
 800fe38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe40:	3501      	adds	r5, #1
 800fe42:	e7c6      	b.n	800fdd2 <_printf_common+0x3e>
 800fe44:	18e1      	adds	r1, r4, r3
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	2030      	movs	r0, #48	; 0x30
 800fe4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe4e:	4422      	add	r2, r4
 800fe50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe58:	3302      	adds	r3, #2
 800fe5a:	e7c7      	b.n	800fdec <_printf_common+0x58>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	4622      	mov	r2, r4
 800fe60:	4649      	mov	r1, r9
 800fe62:	4638      	mov	r0, r7
 800fe64:	47c0      	blx	r8
 800fe66:	3001      	adds	r0, #1
 800fe68:	d0e6      	beq.n	800fe38 <_printf_common+0xa4>
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	e7d9      	b.n	800fe22 <_printf_common+0x8e>
	...

0800fe70 <_printf_i>:
 800fe70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe74:	7e0f      	ldrb	r7, [r1, #24]
 800fe76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe78:	2f78      	cmp	r7, #120	; 0x78
 800fe7a:	4691      	mov	r9, r2
 800fe7c:	4680      	mov	r8, r0
 800fe7e:	460c      	mov	r4, r1
 800fe80:	469a      	mov	sl, r3
 800fe82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fe86:	d807      	bhi.n	800fe98 <_printf_i+0x28>
 800fe88:	2f62      	cmp	r7, #98	; 0x62
 800fe8a:	d80a      	bhi.n	800fea2 <_printf_i+0x32>
 800fe8c:	2f00      	cmp	r7, #0
 800fe8e:	f000 80d8 	beq.w	8010042 <_printf_i+0x1d2>
 800fe92:	2f58      	cmp	r7, #88	; 0x58
 800fe94:	f000 80a3 	beq.w	800ffde <_printf_i+0x16e>
 800fe98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fea0:	e03a      	b.n	800ff18 <_printf_i+0xa8>
 800fea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fea6:	2b15      	cmp	r3, #21
 800fea8:	d8f6      	bhi.n	800fe98 <_printf_i+0x28>
 800feaa:	a101      	add	r1, pc, #4	; (adr r1, 800feb0 <_printf_i+0x40>)
 800feac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800feb0:	0800ff09 	.word	0x0800ff09
 800feb4:	0800ff1d 	.word	0x0800ff1d
 800feb8:	0800fe99 	.word	0x0800fe99
 800febc:	0800fe99 	.word	0x0800fe99
 800fec0:	0800fe99 	.word	0x0800fe99
 800fec4:	0800fe99 	.word	0x0800fe99
 800fec8:	0800ff1d 	.word	0x0800ff1d
 800fecc:	0800fe99 	.word	0x0800fe99
 800fed0:	0800fe99 	.word	0x0800fe99
 800fed4:	0800fe99 	.word	0x0800fe99
 800fed8:	0800fe99 	.word	0x0800fe99
 800fedc:	08010029 	.word	0x08010029
 800fee0:	0800ff4d 	.word	0x0800ff4d
 800fee4:	0801000b 	.word	0x0801000b
 800fee8:	0800fe99 	.word	0x0800fe99
 800feec:	0800fe99 	.word	0x0800fe99
 800fef0:	0801004b 	.word	0x0801004b
 800fef4:	0800fe99 	.word	0x0800fe99
 800fef8:	0800ff4d 	.word	0x0800ff4d
 800fefc:	0800fe99 	.word	0x0800fe99
 800ff00:	0800fe99 	.word	0x0800fe99
 800ff04:	08010013 	.word	0x08010013
 800ff08:	682b      	ldr	r3, [r5, #0]
 800ff0a:	1d1a      	adds	r2, r3, #4
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	602a      	str	r2, [r5, #0]
 800ff10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e0a3      	b.n	8010064 <_printf_i+0x1f4>
 800ff1c:	6820      	ldr	r0, [r4, #0]
 800ff1e:	6829      	ldr	r1, [r5, #0]
 800ff20:	0606      	lsls	r6, r0, #24
 800ff22:	f101 0304 	add.w	r3, r1, #4
 800ff26:	d50a      	bpl.n	800ff3e <_printf_i+0xce>
 800ff28:	680e      	ldr	r6, [r1, #0]
 800ff2a:	602b      	str	r3, [r5, #0]
 800ff2c:	2e00      	cmp	r6, #0
 800ff2e:	da03      	bge.n	800ff38 <_printf_i+0xc8>
 800ff30:	232d      	movs	r3, #45	; 0x2d
 800ff32:	4276      	negs	r6, r6
 800ff34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff38:	485e      	ldr	r0, [pc, #376]	; (80100b4 <_printf_i+0x244>)
 800ff3a:	230a      	movs	r3, #10
 800ff3c:	e019      	b.n	800ff72 <_printf_i+0x102>
 800ff3e:	680e      	ldr	r6, [r1, #0]
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ff46:	bf18      	it	ne
 800ff48:	b236      	sxthne	r6, r6
 800ff4a:	e7ef      	b.n	800ff2c <_printf_i+0xbc>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	6820      	ldr	r0, [r4, #0]
 800ff50:	1d19      	adds	r1, r3, #4
 800ff52:	6029      	str	r1, [r5, #0]
 800ff54:	0601      	lsls	r1, r0, #24
 800ff56:	d501      	bpl.n	800ff5c <_printf_i+0xec>
 800ff58:	681e      	ldr	r6, [r3, #0]
 800ff5a:	e002      	b.n	800ff62 <_printf_i+0xf2>
 800ff5c:	0646      	lsls	r6, r0, #25
 800ff5e:	d5fb      	bpl.n	800ff58 <_printf_i+0xe8>
 800ff60:	881e      	ldrh	r6, [r3, #0]
 800ff62:	4854      	ldr	r0, [pc, #336]	; (80100b4 <_printf_i+0x244>)
 800ff64:	2f6f      	cmp	r7, #111	; 0x6f
 800ff66:	bf0c      	ite	eq
 800ff68:	2308      	moveq	r3, #8
 800ff6a:	230a      	movne	r3, #10
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff72:	6865      	ldr	r5, [r4, #4]
 800ff74:	60a5      	str	r5, [r4, #8]
 800ff76:	2d00      	cmp	r5, #0
 800ff78:	bfa2      	ittt	ge
 800ff7a:	6821      	ldrge	r1, [r4, #0]
 800ff7c:	f021 0104 	bicge.w	r1, r1, #4
 800ff80:	6021      	strge	r1, [r4, #0]
 800ff82:	b90e      	cbnz	r6, 800ff88 <_printf_i+0x118>
 800ff84:	2d00      	cmp	r5, #0
 800ff86:	d04d      	beq.n	8010024 <_printf_i+0x1b4>
 800ff88:	4615      	mov	r5, r2
 800ff8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ff8e:	fb03 6711 	mls	r7, r3, r1, r6
 800ff92:	5dc7      	ldrb	r7, [r0, r7]
 800ff94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ff98:	4637      	mov	r7, r6
 800ff9a:	42bb      	cmp	r3, r7
 800ff9c:	460e      	mov	r6, r1
 800ff9e:	d9f4      	bls.n	800ff8a <_printf_i+0x11a>
 800ffa0:	2b08      	cmp	r3, #8
 800ffa2:	d10b      	bne.n	800ffbc <_printf_i+0x14c>
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	07de      	lsls	r6, r3, #31
 800ffa8:	d508      	bpl.n	800ffbc <_printf_i+0x14c>
 800ffaa:	6923      	ldr	r3, [r4, #16]
 800ffac:	6861      	ldr	r1, [r4, #4]
 800ffae:	4299      	cmp	r1, r3
 800ffb0:	bfde      	ittt	le
 800ffb2:	2330      	movle	r3, #48	; 0x30
 800ffb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ffb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ffbc:	1b52      	subs	r2, r2, r5
 800ffbe:	6122      	str	r2, [r4, #16]
 800ffc0:	f8cd a000 	str.w	sl, [sp]
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	aa03      	add	r2, sp, #12
 800ffc8:	4621      	mov	r1, r4
 800ffca:	4640      	mov	r0, r8
 800ffcc:	f7ff fee2 	bl	800fd94 <_printf_common>
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	d14c      	bne.n	801006e <_printf_i+0x1fe>
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffd8:	b004      	add	sp, #16
 800ffda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffde:	4835      	ldr	r0, [pc, #212]	; (80100b4 <_printf_i+0x244>)
 800ffe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ffe4:	6829      	ldr	r1, [r5, #0]
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ffec:	6029      	str	r1, [r5, #0]
 800ffee:	061d      	lsls	r5, r3, #24
 800fff0:	d514      	bpl.n	801001c <_printf_i+0x1ac>
 800fff2:	07df      	lsls	r7, r3, #31
 800fff4:	bf44      	itt	mi
 800fff6:	f043 0320 	orrmi.w	r3, r3, #32
 800fffa:	6023      	strmi	r3, [r4, #0]
 800fffc:	b91e      	cbnz	r6, 8010006 <_printf_i+0x196>
 800fffe:	6823      	ldr	r3, [r4, #0]
 8010000:	f023 0320 	bic.w	r3, r3, #32
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	2310      	movs	r3, #16
 8010008:	e7b0      	b.n	800ff6c <_printf_i+0xfc>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	f043 0320 	orr.w	r3, r3, #32
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	2378      	movs	r3, #120	; 0x78
 8010014:	4828      	ldr	r0, [pc, #160]	; (80100b8 <_printf_i+0x248>)
 8010016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801001a:	e7e3      	b.n	800ffe4 <_printf_i+0x174>
 801001c:	0659      	lsls	r1, r3, #25
 801001e:	bf48      	it	mi
 8010020:	b2b6      	uxthmi	r6, r6
 8010022:	e7e6      	b.n	800fff2 <_printf_i+0x182>
 8010024:	4615      	mov	r5, r2
 8010026:	e7bb      	b.n	800ffa0 <_printf_i+0x130>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	6826      	ldr	r6, [r4, #0]
 801002c:	6961      	ldr	r1, [r4, #20]
 801002e:	1d18      	adds	r0, r3, #4
 8010030:	6028      	str	r0, [r5, #0]
 8010032:	0635      	lsls	r5, r6, #24
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	d501      	bpl.n	801003c <_printf_i+0x1cc>
 8010038:	6019      	str	r1, [r3, #0]
 801003a:	e002      	b.n	8010042 <_printf_i+0x1d2>
 801003c:	0670      	lsls	r0, r6, #25
 801003e:	d5fb      	bpl.n	8010038 <_printf_i+0x1c8>
 8010040:	8019      	strh	r1, [r3, #0]
 8010042:	2300      	movs	r3, #0
 8010044:	6123      	str	r3, [r4, #16]
 8010046:	4615      	mov	r5, r2
 8010048:	e7ba      	b.n	800ffc0 <_printf_i+0x150>
 801004a:	682b      	ldr	r3, [r5, #0]
 801004c:	1d1a      	adds	r2, r3, #4
 801004e:	602a      	str	r2, [r5, #0]
 8010050:	681d      	ldr	r5, [r3, #0]
 8010052:	6862      	ldr	r2, [r4, #4]
 8010054:	2100      	movs	r1, #0
 8010056:	4628      	mov	r0, r5
 8010058:	f7f0 f8ca 	bl	80001f0 <memchr>
 801005c:	b108      	cbz	r0, 8010062 <_printf_i+0x1f2>
 801005e:	1b40      	subs	r0, r0, r5
 8010060:	6060      	str	r0, [r4, #4]
 8010062:	6863      	ldr	r3, [r4, #4]
 8010064:	6123      	str	r3, [r4, #16]
 8010066:	2300      	movs	r3, #0
 8010068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801006c:	e7a8      	b.n	800ffc0 <_printf_i+0x150>
 801006e:	6923      	ldr	r3, [r4, #16]
 8010070:	462a      	mov	r2, r5
 8010072:	4649      	mov	r1, r9
 8010074:	4640      	mov	r0, r8
 8010076:	47d0      	blx	sl
 8010078:	3001      	adds	r0, #1
 801007a:	d0ab      	beq.n	800ffd4 <_printf_i+0x164>
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	079b      	lsls	r3, r3, #30
 8010080:	d413      	bmi.n	80100aa <_printf_i+0x23a>
 8010082:	68e0      	ldr	r0, [r4, #12]
 8010084:	9b03      	ldr	r3, [sp, #12]
 8010086:	4298      	cmp	r0, r3
 8010088:	bfb8      	it	lt
 801008a:	4618      	movlt	r0, r3
 801008c:	e7a4      	b.n	800ffd8 <_printf_i+0x168>
 801008e:	2301      	movs	r3, #1
 8010090:	4632      	mov	r2, r6
 8010092:	4649      	mov	r1, r9
 8010094:	4640      	mov	r0, r8
 8010096:	47d0      	blx	sl
 8010098:	3001      	adds	r0, #1
 801009a:	d09b      	beq.n	800ffd4 <_printf_i+0x164>
 801009c:	3501      	adds	r5, #1
 801009e:	68e3      	ldr	r3, [r4, #12]
 80100a0:	9903      	ldr	r1, [sp, #12]
 80100a2:	1a5b      	subs	r3, r3, r1
 80100a4:	42ab      	cmp	r3, r5
 80100a6:	dcf2      	bgt.n	801008e <_printf_i+0x21e>
 80100a8:	e7eb      	b.n	8010082 <_printf_i+0x212>
 80100aa:	2500      	movs	r5, #0
 80100ac:	f104 0619 	add.w	r6, r4, #25
 80100b0:	e7f5      	b.n	801009e <_printf_i+0x22e>
 80100b2:	bf00      	nop
 80100b4:	08010f21 	.word	0x08010f21
 80100b8:	08010f32 	.word	0x08010f32

080100bc <_putc_r>:
 80100bc:	b570      	push	{r4, r5, r6, lr}
 80100be:	460d      	mov	r5, r1
 80100c0:	4614      	mov	r4, r2
 80100c2:	4606      	mov	r6, r0
 80100c4:	b118      	cbz	r0, 80100ce <_putc_r+0x12>
 80100c6:	6983      	ldr	r3, [r0, #24]
 80100c8:	b90b      	cbnz	r3, 80100ce <_putc_r+0x12>
 80100ca:	f7ff fbf7 	bl	800f8bc <__sinit>
 80100ce:	4b1c      	ldr	r3, [pc, #112]	; (8010140 <_putc_r+0x84>)
 80100d0:	429c      	cmp	r4, r3
 80100d2:	d124      	bne.n	801011e <_putc_r+0x62>
 80100d4:	6874      	ldr	r4, [r6, #4]
 80100d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100d8:	07d8      	lsls	r0, r3, #31
 80100da:	d405      	bmi.n	80100e8 <_putc_r+0x2c>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	0599      	lsls	r1, r3, #22
 80100e0:	d402      	bmi.n	80100e8 <_putc_r+0x2c>
 80100e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100e4:	f7ff fc88 	bl	800f9f8 <__retarget_lock_acquire_recursive>
 80100e8:	68a3      	ldr	r3, [r4, #8]
 80100ea:	3b01      	subs	r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	60a3      	str	r3, [r4, #8]
 80100f0:	da05      	bge.n	80100fe <_putc_r+0x42>
 80100f2:	69a2      	ldr	r2, [r4, #24]
 80100f4:	4293      	cmp	r3, r2
 80100f6:	db1c      	blt.n	8010132 <_putc_r+0x76>
 80100f8:	b2eb      	uxtb	r3, r5
 80100fa:	2b0a      	cmp	r3, #10
 80100fc:	d019      	beq.n	8010132 <_putc_r+0x76>
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	6022      	str	r2, [r4, #0]
 8010104:	701d      	strb	r5, [r3, #0]
 8010106:	b2ed      	uxtb	r5, r5
 8010108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801010a:	07da      	lsls	r2, r3, #31
 801010c:	d405      	bmi.n	801011a <_putc_r+0x5e>
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	059b      	lsls	r3, r3, #22
 8010112:	d402      	bmi.n	801011a <_putc_r+0x5e>
 8010114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010116:	f7ff fc70 	bl	800f9fa <__retarget_lock_release_recursive>
 801011a:	4628      	mov	r0, r5
 801011c:	bd70      	pop	{r4, r5, r6, pc}
 801011e:	4b09      	ldr	r3, [pc, #36]	; (8010144 <_putc_r+0x88>)
 8010120:	429c      	cmp	r4, r3
 8010122:	d101      	bne.n	8010128 <_putc_r+0x6c>
 8010124:	68b4      	ldr	r4, [r6, #8]
 8010126:	e7d6      	b.n	80100d6 <_putc_r+0x1a>
 8010128:	4b07      	ldr	r3, [pc, #28]	; (8010148 <_putc_r+0x8c>)
 801012a:	429c      	cmp	r4, r3
 801012c:	bf08      	it	eq
 801012e:	68f4      	ldreq	r4, [r6, #12]
 8010130:	e7d1      	b.n	80100d6 <_putc_r+0x1a>
 8010132:	4629      	mov	r1, r5
 8010134:	4622      	mov	r2, r4
 8010136:	4630      	mov	r0, r6
 8010138:	f000 f84c 	bl	80101d4 <__swbuf_r>
 801013c:	4605      	mov	r5, r0
 801013e:	e7e3      	b.n	8010108 <_putc_r+0x4c>
 8010140:	08010ed0 	.word	0x08010ed0
 8010144:	08010ef0 	.word	0x08010ef0
 8010148:	08010eb0 	.word	0x08010eb0

0801014c <__sread>:
 801014c:	b510      	push	{r4, lr}
 801014e:	460c      	mov	r4, r1
 8010150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010154:	f000 f954 	bl	8010400 <_read_r>
 8010158:	2800      	cmp	r0, #0
 801015a:	bfab      	itete	ge
 801015c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801015e:	89a3      	ldrhlt	r3, [r4, #12]
 8010160:	181b      	addge	r3, r3, r0
 8010162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010166:	bfac      	ite	ge
 8010168:	6563      	strge	r3, [r4, #84]	; 0x54
 801016a:	81a3      	strhlt	r3, [r4, #12]
 801016c:	bd10      	pop	{r4, pc}

0801016e <__swrite>:
 801016e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010172:	461f      	mov	r7, r3
 8010174:	898b      	ldrh	r3, [r1, #12]
 8010176:	05db      	lsls	r3, r3, #23
 8010178:	4605      	mov	r5, r0
 801017a:	460c      	mov	r4, r1
 801017c:	4616      	mov	r6, r2
 801017e:	d505      	bpl.n	801018c <__swrite+0x1e>
 8010180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010184:	2302      	movs	r3, #2
 8010186:	2200      	movs	r2, #0
 8010188:	f000 f928 	bl	80103dc <_lseek_r>
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010196:	81a3      	strh	r3, [r4, #12]
 8010198:	4632      	mov	r2, r6
 801019a:	463b      	mov	r3, r7
 801019c:	4628      	mov	r0, r5
 801019e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101a2:	f000 b869 	b.w	8010278 <_write_r>

080101a6 <__sseek>:
 80101a6:	b510      	push	{r4, lr}
 80101a8:	460c      	mov	r4, r1
 80101aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ae:	f000 f915 	bl	80103dc <_lseek_r>
 80101b2:	1c43      	adds	r3, r0, #1
 80101b4:	89a3      	ldrh	r3, [r4, #12]
 80101b6:	bf15      	itete	ne
 80101b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80101ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101c2:	81a3      	strheq	r3, [r4, #12]
 80101c4:	bf18      	it	ne
 80101c6:	81a3      	strhne	r3, [r4, #12]
 80101c8:	bd10      	pop	{r4, pc}

080101ca <__sclose>:
 80101ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ce:	f000 b8d3 	b.w	8010378 <_close_r>
	...

080101d4 <__swbuf_r>:
 80101d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d6:	460e      	mov	r6, r1
 80101d8:	4614      	mov	r4, r2
 80101da:	4605      	mov	r5, r0
 80101dc:	b118      	cbz	r0, 80101e6 <__swbuf_r+0x12>
 80101de:	6983      	ldr	r3, [r0, #24]
 80101e0:	b90b      	cbnz	r3, 80101e6 <__swbuf_r+0x12>
 80101e2:	f7ff fb6b 	bl	800f8bc <__sinit>
 80101e6:	4b21      	ldr	r3, [pc, #132]	; (801026c <__swbuf_r+0x98>)
 80101e8:	429c      	cmp	r4, r3
 80101ea:	d12b      	bne.n	8010244 <__swbuf_r+0x70>
 80101ec:	686c      	ldr	r4, [r5, #4]
 80101ee:	69a3      	ldr	r3, [r4, #24]
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	071a      	lsls	r2, r3, #28
 80101f6:	d52f      	bpl.n	8010258 <__swbuf_r+0x84>
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	b36b      	cbz	r3, 8010258 <__swbuf_r+0x84>
 80101fc:	6923      	ldr	r3, [r4, #16]
 80101fe:	6820      	ldr	r0, [r4, #0]
 8010200:	1ac0      	subs	r0, r0, r3
 8010202:	6963      	ldr	r3, [r4, #20]
 8010204:	b2f6      	uxtb	r6, r6
 8010206:	4283      	cmp	r3, r0
 8010208:	4637      	mov	r7, r6
 801020a:	dc04      	bgt.n	8010216 <__swbuf_r+0x42>
 801020c:	4621      	mov	r1, r4
 801020e:	4628      	mov	r0, r5
 8010210:	f7ff fac0 	bl	800f794 <_fflush_r>
 8010214:	bb30      	cbnz	r0, 8010264 <__swbuf_r+0x90>
 8010216:	68a3      	ldr	r3, [r4, #8]
 8010218:	3b01      	subs	r3, #1
 801021a:	60a3      	str	r3, [r4, #8]
 801021c:	6823      	ldr	r3, [r4, #0]
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	6022      	str	r2, [r4, #0]
 8010222:	701e      	strb	r6, [r3, #0]
 8010224:	6963      	ldr	r3, [r4, #20]
 8010226:	3001      	adds	r0, #1
 8010228:	4283      	cmp	r3, r0
 801022a:	d004      	beq.n	8010236 <__swbuf_r+0x62>
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	07db      	lsls	r3, r3, #31
 8010230:	d506      	bpl.n	8010240 <__swbuf_r+0x6c>
 8010232:	2e0a      	cmp	r6, #10
 8010234:	d104      	bne.n	8010240 <__swbuf_r+0x6c>
 8010236:	4621      	mov	r1, r4
 8010238:	4628      	mov	r0, r5
 801023a:	f7ff faab 	bl	800f794 <_fflush_r>
 801023e:	b988      	cbnz	r0, 8010264 <__swbuf_r+0x90>
 8010240:	4638      	mov	r0, r7
 8010242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010244:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <__swbuf_r+0x9c>)
 8010246:	429c      	cmp	r4, r3
 8010248:	d101      	bne.n	801024e <__swbuf_r+0x7a>
 801024a:	68ac      	ldr	r4, [r5, #8]
 801024c:	e7cf      	b.n	80101ee <__swbuf_r+0x1a>
 801024e:	4b09      	ldr	r3, [pc, #36]	; (8010274 <__swbuf_r+0xa0>)
 8010250:	429c      	cmp	r4, r3
 8010252:	bf08      	it	eq
 8010254:	68ec      	ldreq	r4, [r5, #12]
 8010256:	e7ca      	b.n	80101ee <__swbuf_r+0x1a>
 8010258:	4621      	mov	r1, r4
 801025a:	4628      	mov	r0, r5
 801025c:	f000 f81e 	bl	801029c <__swsetup_r>
 8010260:	2800      	cmp	r0, #0
 8010262:	d0cb      	beq.n	80101fc <__swbuf_r+0x28>
 8010264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010268:	e7ea      	b.n	8010240 <__swbuf_r+0x6c>
 801026a:	bf00      	nop
 801026c:	08010ed0 	.word	0x08010ed0
 8010270:	08010ef0 	.word	0x08010ef0
 8010274:	08010eb0 	.word	0x08010eb0

08010278 <_write_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4d07      	ldr	r5, [pc, #28]	; (8010298 <_write_r+0x20>)
 801027c:	4604      	mov	r4, r0
 801027e:	4608      	mov	r0, r1
 8010280:	4611      	mov	r1, r2
 8010282:	2200      	movs	r2, #0
 8010284:	602a      	str	r2, [r5, #0]
 8010286:	461a      	mov	r2, r3
 8010288:	f7f2 fb7c 	bl	8002984 <_write>
 801028c:	1c43      	adds	r3, r0, #1
 801028e:	d102      	bne.n	8010296 <_write_r+0x1e>
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	b103      	cbz	r3, 8010296 <_write_r+0x1e>
 8010294:	6023      	str	r3, [r4, #0]
 8010296:	bd38      	pop	{r3, r4, r5, pc}
 8010298:	20003cd4 	.word	0x20003cd4

0801029c <__swsetup_r>:
 801029c:	4b32      	ldr	r3, [pc, #200]	; (8010368 <__swsetup_r+0xcc>)
 801029e:	b570      	push	{r4, r5, r6, lr}
 80102a0:	681d      	ldr	r5, [r3, #0]
 80102a2:	4606      	mov	r6, r0
 80102a4:	460c      	mov	r4, r1
 80102a6:	b125      	cbz	r5, 80102b2 <__swsetup_r+0x16>
 80102a8:	69ab      	ldr	r3, [r5, #24]
 80102aa:	b913      	cbnz	r3, 80102b2 <__swsetup_r+0x16>
 80102ac:	4628      	mov	r0, r5
 80102ae:	f7ff fb05 	bl	800f8bc <__sinit>
 80102b2:	4b2e      	ldr	r3, [pc, #184]	; (801036c <__swsetup_r+0xd0>)
 80102b4:	429c      	cmp	r4, r3
 80102b6:	d10f      	bne.n	80102d8 <__swsetup_r+0x3c>
 80102b8:	686c      	ldr	r4, [r5, #4]
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102c0:	0719      	lsls	r1, r3, #28
 80102c2:	d42c      	bmi.n	801031e <__swsetup_r+0x82>
 80102c4:	06dd      	lsls	r5, r3, #27
 80102c6:	d411      	bmi.n	80102ec <__swsetup_r+0x50>
 80102c8:	2309      	movs	r3, #9
 80102ca:	6033      	str	r3, [r6, #0]
 80102cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102d0:	81a3      	strh	r3, [r4, #12]
 80102d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102d6:	e03e      	b.n	8010356 <__swsetup_r+0xba>
 80102d8:	4b25      	ldr	r3, [pc, #148]	; (8010370 <__swsetup_r+0xd4>)
 80102da:	429c      	cmp	r4, r3
 80102dc:	d101      	bne.n	80102e2 <__swsetup_r+0x46>
 80102de:	68ac      	ldr	r4, [r5, #8]
 80102e0:	e7eb      	b.n	80102ba <__swsetup_r+0x1e>
 80102e2:	4b24      	ldr	r3, [pc, #144]	; (8010374 <__swsetup_r+0xd8>)
 80102e4:	429c      	cmp	r4, r3
 80102e6:	bf08      	it	eq
 80102e8:	68ec      	ldreq	r4, [r5, #12]
 80102ea:	e7e6      	b.n	80102ba <__swsetup_r+0x1e>
 80102ec:	0758      	lsls	r0, r3, #29
 80102ee:	d512      	bpl.n	8010316 <__swsetup_r+0x7a>
 80102f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102f2:	b141      	cbz	r1, 8010306 <__swsetup_r+0x6a>
 80102f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d002      	beq.n	8010302 <__swsetup_r+0x66>
 80102fc:	4630      	mov	r0, r6
 80102fe:	f7fe ff53 	bl	800f1a8 <_free_r>
 8010302:	2300      	movs	r3, #0
 8010304:	6363      	str	r3, [r4, #52]	; 0x34
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801030c:	81a3      	strh	r3, [r4, #12]
 801030e:	2300      	movs	r3, #0
 8010310:	6063      	str	r3, [r4, #4]
 8010312:	6923      	ldr	r3, [r4, #16]
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	89a3      	ldrh	r3, [r4, #12]
 8010318:	f043 0308 	orr.w	r3, r3, #8
 801031c:	81a3      	strh	r3, [r4, #12]
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	b94b      	cbnz	r3, 8010336 <__swsetup_r+0x9a>
 8010322:	89a3      	ldrh	r3, [r4, #12]
 8010324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801032c:	d003      	beq.n	8010336 <__swsetup_r+0x9a>
 801032e:	4621      	mov	r1, r4
 8010330:	4630      	mov	r0, r6
 8010332:	f7ff fb89 	bl	800fa48 <__smakebuf_r>
 8010336:	89a0      	ldrh	r0, [r4, #12]
 8010338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801033c:	f010 0301 	ands.w	r3, r0, #1
 8010340:	d00a      	beq.n	8010358 <__swsetup_r+0xbc>
 8010342:	2300      	movs	r3, #0
 8010344:	60a3      	str	r3, [r4, #8]
 8010346:	6963      	ldr	r3, [r4, #20]
 8010348:	425b      	negs	r3, r3
 801034a:	61a3      	str	r3, [r4, #24]
 801034c:	6923      	ldr	r3, [r4, #16]
 801034e:	b943      	cbnz	r3, 8010362 <__swsetup_r+0xc6>
 8010350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010354:	d1ba      	bne.n	80102cc <__swsetup_r+0x30>
 8010356:	bd70      	pop	{r4, r5, r6, pc}
 8010358:	0781      	lsls	r1, r0, #30
 801035a:	bf58      	it	pl
 801035c:	6963      	ldrpl	r3, [r4, #20]
 801035e:	60a3      	str	r3, [r4, #8]
 8010360:	e7f4      	b.n	801034c <__swsetup_r+0xb0>
 8010362:	2000      	movs	r0, #0
 8010364:	e7f7      	b.n	8010356 <__swsetup_r+0xba>
 8010366:	bf00      	nop
 8010368:	200000f4 	.word	0x200000f4
 801036c:	08010ed0 	.word	0x08010ed0
 8010370:	08010ef0 	.word	0x08010ef0
 8010374:	08010eb0 	.word	0x08010eb0

08010378 <_close_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4d06      	ldr	r5, [pc, #24]	; (8010394 <_close_r+0x1c>)
 801037c:	2300      	movs	r3, #0
 801037e:	4604      	mov	r4, r0
 8010380:	4608      	mov	r0, r1
 8010382:	602b      	str	r3, [r5, #0]
 8010384:	f7f2 fb2a 	bl	80029dc <_close>
 8010388:	1c43      	adds	r3, r0, #1
 801038a:	d102      	bne.n	8010392 <_close_r+0x1a>
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	b103      	cbz	r3, 8010392 <_close_r+0x1a>
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	bd38      	pop	{r3, r4, r5, pc}
 8010394:	20003cd4 	.word	0x20003cd4

08010398 <_fstat_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d07      	ldr	r5, [pc, #28]	; (80103b8 <_fstat_r+0x20>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	4611      	mov	r1, r2
 80103a4:	602b      	str	r3, [r5, #0]
 80103a6:	f7f2 fb69 	bl	8002a7c <_fstat>
 80103aa:	1c43      	adds	r3, r0, #1
 80103ac:	d102      	bne.n	80103b4 <_fstat_r+0x1c>
 80103ae:	682b      	ldr	r3, [r5, #0]
 80103b0:	b103      	cbz	r3, 80103b4 <_fstat_r+0x1c>
 80103b2:	6023      	str	r3, [r4, #0]
 80103b4:	bd38      	pop	{r3, r4, r5, pc}
 80103b6:	bf00      	nop
 80103b8:	20003cd4 	.word	0x20003cd4

080103bc <_isatty_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4d06      	ldr	r5, [pc, #24]	; (80103d8 <_isatty_r+0x1c>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	4604      	mov	r4, r0
 80103c4:	4608      	mov	r0, r1
 80103c6:	602b      	str	r3, [r5, #0]
 80103c8:	f7f2 fac6 	bl	8002958 <_isatty>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d102      	bne.n	80103d6 <_isatty_r+0x1a>
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	b103      	cbz	r3, 80103d6 <_isatty_r+0x1a>
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	20003cd4 	.word	0x20003cd4

080103dc <_lseek_r>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	4d07      	ldr	r5, [pc, #28]	; (80103fc <_lseek_r+0x20>)
 80103e0:	4604      	mov	r4, r0
 80103e2:	4608      	mov	r0, r1
 80103e4:	4611      	mov	r1, r2
 80103e6:	2200      	movs	r2, #0
 80103e8:	602a      	str	r2, [r5, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	f7f2 fb0d 	bl	8002a0a <_lseek>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_lseek_r+0x1e>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_lseek_r+0x1e>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	20003cd4 	.word	0x20003cd4

08010400 <_read_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4d07      	ldr	r5, [pc, #28]	; (8010420 <_read_r+0x20>)
 8010404:	4604      	mov	r4, r0
 8010406:	4608      	mov	r0, r1
 8010408:	4611      	mov	r1, r2
 801040a:	2200      	movs	r2, #0
 801040c:	602a      	str	r2, [r5, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	f7f2 fb0c 	bl	8002a2c <_read>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d102      	bne.n	801041e <_read_r+0x1e>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	b103      	cbz	r3, 801041e <_read_r+0x1e>
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	20003cd4 	.word	0x20003cd4

08010424 <_init>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	bf00      	nop
 8010428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042a:	bc08      	pop	{r3}
 801042c:	469e      	mov	lr, r3
 801042e:	4770      	bx	lr

08010430 <_fini>:
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010432:	bf00      	nop
 8010434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010436:	bc08      	pop	{r3}
 8010438:	469e      	mov	lr, r3
 801043a:	4770      	bx	lr
