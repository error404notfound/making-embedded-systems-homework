
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f0  0800d2f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f8  0800d2f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f8  0800d2f8  0001d2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2fc  0800d2fc  0001d2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000009d4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a64  20000a64  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026da8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005778  00000000  00000000  00046e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  0004c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a68  00000000  00000000  0004e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c307  00000000  00000000  0004fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000289fc  00000000  00000000  0007bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebb31  00000000  00000000  000a49e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00190514  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008058  00000000  00000000  00190564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd7c 	.word	0x0800cd7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800cd7c 	.word	0x0800cd7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800cd94 	.word	0x0800cd94
 8000738:	0800cddc 	.word	0x0800cddc
 800073c:	0800cde0 	.word	0x0800cde0
 8000740:	200001ac 	.word	0x200001ac
 8000744:	200000ac 	.word	0x200000ac

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001ac 	.word	0x200001ac
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	200001b0 	.word	0x200001b0
 80008ac:	0800cde4 	.word	0x0800cde4
 80008b0:	0800cdec 	.word	0x0800cdec
 80008b4:	0800cddc 	.word	0x0800cddc
 80008b8:	0800cdf4 	.word	0x0800cdf4
 80008bc:	0800cde0 	.word	0x0800cde0

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00b f8a4 	bl	800bb14 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800cea0 	.word	0x0800cea0
 8000d0c:	0800ce50 	.word	0x0800ce50
 8000d10:	0800ce54 	.word	0x0800ce54

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800ce58 	.word	0x0800ce58
 8000dc0:	0800ce68 	.word	0x0800ce68
 8000dc4:	0800ce70 	.word	0x0800ce70
 8000dc8:	0800ce54 	.word	0x0800ce54

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800ce74 	.word	0x0800ce74
 8000e10:	0800ce54 	.word	0x0800ce54

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800ce84 	.word	0x0800ce84
 8000e3c:	0800ce54 	.word	0x0800ce54

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800cea0 	.word	0x0800cea0

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	200001b8 	.word	0x200001b8

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 f949 	bl	8006126 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	200001ca 	.word	0x200001ca

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00a ff42 	bl	800bd7c <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001b8 	.word	0x200001b8
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200001bc 	.word	0x200001bc
 8000f1c:	0800ce98 	.word	0x0800ce98

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00a ff26 	bl	800bd7c <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800ce98 	.word	0x0800ce98

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 f8d6 	bl	8006126 <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001bc 	.word	0x200001bc
 8000f88:	200001ca 	.word	0x200001ca
 8000f8c:	200001c0 	.word	0x200001c0
 8000f90:	200001b8 	.word	0x200001b8
 8000f94:	200001b4 	.word	0x200001b4

08000f98 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	; (8001118 <I3G450D_Init+0x180>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	485c      	ldr	r0, [pc, #368]	; (800111c <I3G450D_Init+0x184>)
 8000fac:	f001 fbfe 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb0:	2014      	movs	r0, #20
 8000fb2:	f001 f853 	bl	800205c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4858      	ldr	r0, [pc, #352]	; (800111c <I3G450D_Init+0x184>)
 8000fbc:	f001 fbf6 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f001 f84b 	bl	800205c <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <I3G450D_Init+0x188>)
 8000fc8:	2220      	movs	r2, #32
 8000fca:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fcc:	4b54      	ldr	r3, [pc, #336]	; (8001120 <I3G450D_Init+0x188>)
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <I3G450D_Init+0x180>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4951      	ldr	r1, [pc, #324]	; (8001120 <I3G450D_Init+0x188>)
 8000fdc:	f003 ff37 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	484d      	ldr	r0, [pc, #308]	; (800111c <I3G450D_Init+0x184>)
 8000fe6:	f001 fbe1 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f001 f836 	bl	800205c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4849      	ldr	r0, [pc, #292]	; (800111c <I3G450D_Init+0x184>)
 8000ff6:	f001 fbd9 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ffa:	2014      	movs	r0, #20
 8000ffc:	f001 f82e 	bl	800205c <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <I3G450D_Init+0x188>)
 8001002:	2221      	movs	r2, #33	; 0x21
 8001004:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001006:	4b46      	ldr	r3, [pc, #280]	; (8001120 <I3G450D_Init+0x188>)
 8001008:	2200      	movs	r2, #0
 800100a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800100c:	4b42      	ldr	r3, [pc, #264]	; (8001118 <I3G450D_Init+0x180>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	2332      	movs	r3, #50	; 0x32
 8001012:	2202      	movs	r2, #2
 8001014:	4942      	ldr	r1, [pc, #264]	; (8001120 <I3G450D_Init+0x188>)
 8001016:	f003 ff1a 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2102      	movs	r1, #2
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <I3G450D_Init+0x184>)
 8001020:	f001 fbc4 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001024:	2014      	movs	r0, #20
 8001026:	f001 f819 	bl	800205c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	483b      	ldr	r0, [pc, #236]	; (800111c <I3G450D_Init+0x184>)
 8001030:	f001 fbbc 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001034:	2014      	movs	r0, #20
 8001036:	f001 f811 	bl	800205c <HAL_Delay>
	spiTxBuf[0]=0x22;
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <I3G450D_Init+0x188>)
 800103c:	2222      	movs	r2, #34	; 0x22
 800103e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <I3G450D_Init+0x188>)
 8001042:	2200      	movs	r2, #0
 8001044:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <I3G450D_Init+0x180>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2332      	movs	r3, #50	; 0x32
 800104c:	2202      	movs	r2, #2
 800104e:	4934      	ldr	r1, [pc, #208]	; (8001120 <I3G450D_Init+0x188>)
 8001050:	f003 fefd 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4830      	ldr	r0, [pc, #192]	; (800111c <I3G450D_Init+0x184>)
 800105a:	f001 fba7 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f000 fffc 	bl	800205c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <I3G450D_Init+0x184>)
 800106a:	f001 fb9f 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800106e:	2014      	movs	r0, #20
 8001070:	f000 fff4 	bl	800205c <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <I3G450D_Init+0x188>)
 8001076:	2223      	movs	r2, #35	; 0x23
 8001078:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <I3G450D_Init+0x188>)
 800107c:	2220      	movs	r2, #32
 800107e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <I3G450D_Init+0x180>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	2332      	movs	r3, #50	; 0x32
 8001086:	2202      	movs	r2, #2
 8001088:	4925      	ldr	r1, [pc, #148]	; (8001120 <I3G450D_Init+0x188>)
 800108a:	f003 fee0 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2102      	movs	r1, #2
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <I3G450D_Init+0x184>)
 8001094:	f001 fb8a 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001098:	2014      	movs	r0, #20
 800109a:	f000 ffdf 	bl	800205c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	481e      	ldr	r0, [pc, #120]	; (800111c <I3G450D_Init+0x184>)
 80010a4:	f001 fb82 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010a8:	2014      	movs	r0, #20
 80010aa:	f000 ffd7 	bl	800205c <HAL_Delay>
	spiTxBuf[0]=0x24;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <I3G450D_Init+0x188>)
 80010b0:	2224      	movs	r2, #36	; 0x24
 80010b2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <I3G450D_Init+0x188>)
 80010b6:	2210      	movs	r2, #16
 80010b8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <I3G450D_Init+0x180>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2332      	movs	r3, #50	; 0x32
 80010c0:	2202      	movs	r2, #2
 80010c2:	4917      	ldr	r1, [pc, #92]	; (8001120 <I3G450D_Init+0x188>)
 80010c4:	f003 fec3 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2102      	movs	r1, #2
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <I3G450D_Init+0x184>)
 80010ce:	f001 fb6d 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f000 ffc2 	bl	800205c <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <I3G450D_Init+0x184>)
 80010de:	f001 fb65 	bl	80027ac <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <I3G450D_Init+0x188>)
 80010e4:	228f      	movs	r2, #143	; 0x8f
 80010e6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <I3G450D_Init+0x180>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	2332      	movs	r3, #50	; 0x32
 80010ee:	2201      	movs	r2, #1
 80010f0:	490b      	ldr	r1, [pc, #44]	; (8001120 <I3G450D_Init+0x188>)
 80010f2:	f003 feac 	bl	8004e4e <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <I3G450D_Init+0x180>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	2332      	movs	r3, #50	; 0x32
 80010fc:	2201      	movs	r2, #1
 80010fe:	4909      	ldr	r1, [pc, #36]	; (8001124 <I3G450D_Init+0x18c>)
 8001100:	f003 ffe1 	bl	80050c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2102      	movs	r1, #2
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <I3G450D_Init+0x184>)
 800110a:	f001 fb4f 	bl	80027ac <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001d8 	.word	0x200001d8
 800111c:	40020800 	.word	0x40020800
 8001120:	200001cc 	.word	0x200001cc
 8001124:	200001d1 	.word	0x200001d1

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112c:	f000 ff24 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001130:	f000 f824 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001134:	f000 f9e0 	bl	80014f8 <MX_GPIO_Init>
  MX_CRC_Init();
 8001138:	f000 f88a 	bl	8001250 <MX_CRC_Init>
  MX_FMC_Init();
 800113c:	f000 f98c 	bl	8001458 <MX_FMC_Init>
  MX_SPI5_Init();
 8001140:	f000 f8da 	bl	80012f8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001144:	f000 f90e 	bl	8001364 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001148:	f000 f95c 	bl	8001404 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800114c:	f00a f9a4 	bl	800b498 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001150:	f007 f82e 	bl	80081b0 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001154:	f000 f890 	bl	8001278 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I3G450D_Init(&hspi5);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <main+0x4c>)
 800115a:	f7ff ff1d 	bl	8000f98 <I3G450D_Init>
 // Lis3dhInit(&hi2c3);
  RetargetInit(&huart1);
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <main+0x50>)
 8001160:	f000 fba4 	bl	80018ac <RetargetInit>
  ConsoleInit(&huart1);
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <main+0x50>)
 8001166:	f7ff fabf 	bl	80006e8 <ConsoleInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800116a:	f00a f9bb 	bl	800b4e4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    ConsoleProcess();
 800116e:	f7ff faeb 	bl	8000748 <ConsoleProcess>
    MX_USB_HOST_Process();
 8001172:	e7fa      	b.n	800116a <main+0x42>
 8001174:	20000238 	.word	0x20000238
 8001178:	200002d8 	.word	0x200002d8

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	; 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fd0e 	bl	800bbac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <SystemClock_Config+0xcc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011c8:	4a20      	ldr	r2, [pc, #128]	; (800124c <SystemClock_Config+0xd0>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011f4:	2348      	movs	r3, #72	; 0x48
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011fc:	2303      	movs	r3, #3
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f003 f8cd 	bl	80043a4 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001210:	f000 fb46 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2102      	movs	r1, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fb2f 	bl	8004894 <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800123c:	f000 fb30 	bl	80018a0 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	; 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_CRC_Init+0x20>)
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <MX_CRC_Init+0x24>)
 8001258:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_CRC_Init+0x20>)
 800125c:	f001 f833 	bl	80022c6 <HAL_CRC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001266:	f000 fb1b 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001dc 	.word	0x200001dc
 8001274:	40023000 	.word	0x40023000

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_I2C1_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_I2C1_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_I2C1_Init+0x74>)
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_I2C1_Init+0x7c>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_I2C1_Init+0x74>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_I2C1_Init+0x74>)
 80012b6:	f002 feb5 	bl	8004024 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 faee 	bl	80018a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_I2C1_Init+0x74>)
 80012c8:	f002 fff0 	bl	80042ac <HAL_I2CEx_ConfigAnalogFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012d2:	f000 fae5 	bl	80018a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x74>)
 80012da:	f003 f823 	bl	8004324 <HAL_I2CEx_ConfigDigitalFilter>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 fadc 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001e4 	.word	0x200001e4
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_SPI5_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_SPI5_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_SPI5_Init+0x64>)
 8001304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_SPI5_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_SPI5_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_SPI5_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_SPI5_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_SPI5_Init+0x64>)
 8001324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001328:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_SPI5_Init+0x64>)
 800132c:	2218      	movs	r2, #24
 800132e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_SPI5_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_SPI5_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_SPI5_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_SPI5_Init+0x64>)
 8001344:	220a      	movs	r2, #10
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_SPI5_Init+0x64>)
 800134a:	f003 fcf7 	bl	8004d3c <HAL_SPI_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 faa4 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000238 	.word	0x20000238
 8001360:	40015000 	.word	0x40015000

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM1_Init+0x98>)
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <MX_TIM1_Init+0x9c>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM1_Init+0x98>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_TIM1_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_TIM1_Init+0x98>)
 80013ae:	f004 fa6d 	bl	800588c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b8:	f000 fa72 	bl	80018a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM1_Init+0x98>)
 80013ca:	f004 faae 	bl	800592a <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013d4:	f000 fa64 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM1_Init+0x98>)
 80013e6:	f004 fca1 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f0:	f000 fa56 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000290 	.word	0x20000290
 8001400:	40010000 	.word	0x40010000

08001404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_USART1_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800143c:	f004 fcf2 	bl	8005e24 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 fa2b 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002d8 	.word	0x200002d8
 8001454:	40011000 	.word	0x40011000

08001458 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_FMC_Init+0x98>)
 8001472:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <MX_FMC_Init+0x9c>)
 8001474:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_FMC_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_FMC_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_FMC_Init+0x98>)
 8001484:	2204      	movs	r2, #4
 8001486:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_FMC_Init+0x98>)
 800148a:	2210      	movs	r2, #16
 800148c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_FMC_Init+0x98>)
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_FMC_Init+0x98>)
 8001496:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800149a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_FMC_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_FMC_Init+0x98>)
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_FMC_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_FMC_Init+0x98>)
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014bc:	2307      	movs	r3, #7
 80014be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80014c4:	2307      	movs	r3, #7
 80014c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80014c8:	2303      	movs	r3, #3
 80014ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_FMC_Init+0x98>)
 80014da:	f003 fbfb 	bl	8004cd4 <HAL_SDRAM_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80014e4:	f000 f9dc 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000031c 	.word	0x2000031c
 80014f4:	a0000140 	.word	0xa0000140

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	4bb2      	ldr	r3, [pc, #712]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4ab1      	ldr	r2, [pc, #708]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4baf      	ldr	r3, [pc, #700]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	4bab      	ldr	r3, [pc, #684]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4aaa      	ldr	r2, [pc, #680]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4ba8      	ldr	r3, [pc, #672]	; (80017dc <MX_GPIO_Init+0x2e4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <MX_GPIO_Init+0x2e4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4aa3      	ldr	r2, [pc, #652]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4ba1      	ldr	r3, [pc, #644]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b9d      	ldr	r3, [pc, #628]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a9c      	ldr	r2, [pc, #624]	; (80017dc <MX_GPIO_Init+0x2e4>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b9a      	ldr	r3, [pc, #616]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b96      	ldr	r3, [pc, #600]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a95      	ldr	r2, [pc, #596]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b93      	ldr	r3, [pc, #588]	; (80017dc <MX_GPIO_Init+0x2e4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a8e      	ldr	r2, [pc, #568]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a87      	ldr	r2, [pc, #540]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b85      	ldr	r3, [pc, #532]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b81      	ldr	r3, [pc, #516]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a80      	ldr	r2, [pc, #512]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <MX_GPIO_Init+0x2e4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2116      	movs	r1, #22
 80015f2:	487b      	ldr	r0, [pc, #492]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80015f4:	f001 f8da 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	4879      	ldr	r0, [pc, #484]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 80015fe:	f001 f8d5 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001608:	4877      	ldr	r0, [pc, #476]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 800160a:	f001 f8cf 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001614:	4875      	ldr	r0, [pc, #468]	; (80017ec <MX_GPIO_Init+0x2f4>)
 8001616:	f001 f8c9 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800162c:	230e      	movs	r3, #14
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	486e      	ldr	r0, [pc, #440]	; (80017f0 <MX_GPIO_Init+0x2f8>)
 8001638:	f000 fef4 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800163c:	2316      	movs	r3, #22
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4863      	ldr	r0, [pc, #396]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 8001654:	f000 fee6 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	485d      	ldr	r0, [pc, #372]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 800166e:	f000 fed9 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001672:	f248 0306 	movw	r3, #32774	; 0x8006
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001678:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4856      	ldr	r0, [pc, #344]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 800168a:	f000 fecb 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 800168e:	2358      	movs	r3, #88	; 0x58
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800169e:	230e      	movs	r3, #14
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	484e      	ldr	r0, [pc, #312]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 80016aa:	f000 febb 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4847      	ldr	r0, [pc, #284]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 80016c6:	f000 fead 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80016ca:	2320      	movs	r3, #32
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	4840      	ldr	r0, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80016e0:	f000 fea0 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80016e4:	2303      	movs	r3, #3
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016f4:	2309      	movs	r3, #9
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	483d      	ldr	r0, [pc, #244]	; (80017f4 <MX_GPIO_Init+0x2fc>)
 8001700:	f000 fe90 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001704:	2304      	movs	r3, #4
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4837      	ldr	r0, [pc, #220]	; (80017f4 <MX_GPIO_Init+0x2fc>)
 8001718:	f000 fe84 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 800171c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800172e:	230e      	movs	r3, #14
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	482e      	ldr	r0, [pc, #184]	; (80017f4 <MX_GPIO_Init+0x2fc>)
 800173a:	f000 fe73 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800173e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4825      	ldr	r0, [pc, #148]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 8001754:	f000 fe66 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001758:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 8001772:	f000 fe57 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 8001776:	23c0      	movs	r3, #192	; 0xc0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001786:	230e      	movs	r3, #14
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <MX_GPIO_Init+0x2f4>)
 8001792:	f000 fe47 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001796:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a8:	230e      	movs	r3, #14
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80017b4:	f000 fe36 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017be:	2312      	movs	r3, #18
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ca:	2304      	movs	r3, #4
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 80017d6:	f000 fe25 	bl	8002424 <HAL_GPIO_Init>
 80017da:	e00d      	b.n	80017f8 <MX_GPIO_Init+0x300>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40020400 	.word	0x40020400

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017f8:	2348      	movs	r3, #72	; 0x48
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001808:	230e      	movs	r3, #14
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <MX_GPIO_Init+0x378>)
 8001814:	f000 fe06 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800182a:	2309      	movs	r3, #9
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <MX_GPIO_Init+0x37c>)
 8001836:	f000 fdf5 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800183a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_GPIO_Init+0x37c>)
 8001854:	f000 fde6 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2006      	movs	r0, #6
 800185e:	f000 fcfc 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001862:	2006      	movs	r0, #6
 8001864:	f000 fd15 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021800 	.word	0x40021800

08001878 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8001882:	2301      	movs	r3, #1
 8001884:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_GPIO_EXTI_Callback+0x24>)
 8001888:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	4619      	mov	r1, r3
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f000 ff74 	bl	800277c <HAL_GPIO_ReadPin>

		//buttonPressed = 1;
	}

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40020000 	.word	0x40020000

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <RetargetInit+0x28>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <RetargetInit+0x2c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2202      	movs	r2, #2
 80018c4:	2100      	movs	r1, #0
 80018c6:	f00a fa81 	bl	800bdcc <setvbuf>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000350 	.word	0x20000350
 80018d8:	2000002c 	.word	0x2000002c

080018dc <_isatty>:

int _isatty(int fd) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db04      	blt.n	80018f4 <_isatty+0x18>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	dc01      	bgt.n	80018f4 <_isatty+0x18>
    return 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e005      	b.n	8001900 <_isatty+0x24>

  errno = EBADF;
 80018f4:	f00a f912 	bl	800bb1c <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2209      	movs	r2, #9
 80018fc:	601a      	str	r2, [r3, #0]
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

int _write(int fd, char* ptr, int len) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <_write+0x18>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d111      	bne.n	8001944 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <_write+0x54>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	f004 fac6 	bl	8005ebe <HAL_UART_Transmit>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <_write+0x38>
      return len;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e008      	b.n	8001952 <_write+0x4a>
    else
      return EIO;
 8001940:	2305      	movs	r3, #5
 8001942:	e006      	b.n	8001952 <_write+0x4a>
  }
  errno = EBADF;
 8001944:	f00a f8ea 	bl	800bb1c <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	2209      	movs	r2, #9
 800194c:	601a      	str	r2, [r3, #0]
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000350 	.word	0x20000350

08001960 <_close>:

int _close(int fd) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db04      	blt.n	8001978 <_close+0x18>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	dc01      	bgt.n	8001978 <_close+0x18>
    return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e006      	b.n	8001986 <_close+0x26>

  errno = EBADF;
 8001978:	f00a f8d0 	bl	800bb1c <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	2209      	movs	r2, #9
 8001980:	601a      	str	r2, [r3, #0]
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800199a:	f00a f8bf 	bl	800bb1c <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	2209      	movs	r2, #9
 80019a2:	601a      	str	r2, [r3, #0]
  return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d110      	bne.n	80019e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <_read+0x4c>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ca:	2201      	movs	r2, #1
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	f004 fb08 	bl	8005fe2 <HAL_UART_Receive>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <_read+0x30>
      return 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	e008      	b.n	80019f2 <_read+0x42>
    else
      return EIO;
 80019e0:	2305      	movs	r3, #5
 80019e2:	e006      	b.n	80019f2 <_read+0x42>
  }
  errno = EBADF;
 80019e4:	f00a f89a 	bl	800bb1c <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2209      	movs	r2, #9
 80019ec:	601a      	str	r2, [r3, #0]
  return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000350 	.word	0x20000350

08001a00 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db08      	blt.n	8001a22 <_fstat+0x22>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	dc05      	bgt.n	8001a22 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
    return 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e005      	b.n	8001a2e <_fstat+0x2e>
  }

  errno = EBADF;
 8001a22:	f00a f87b 	bl	800bb1c <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2209      	movs	r2, #9
 8001a2a:	601a      	str	r2, [r3, #0]
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_CRC_MspInit+0x3c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_CRC_MspInit+0x40>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_CRC_MspInit+0x40>)
 8001aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_CRC_MspInit+0x40>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023000 	.word	0x40023000
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_I2C_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12c      	bne.n	8001b48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0x8c>)
 8001b28:	f000 fc7c 	bl	8002424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_SPI_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001bb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001bd4:	f000 fc26 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40015000 	.word	0x40015000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40021400 	.word	0x40021400

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_Base_MspInit+0x3c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10d      	bne.n	8001c1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_TIM_Base_MspInit+0x40>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_TIM_Base_MspInit+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_TIM_Base_MspInit+0x40>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_UART_MspInit+0x94>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d134      	bne.n	8001cbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_UART_MspInit+0x9c>)
 8001ca8:	f000 fbbc 	bl	8002424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2025      	movs	r0, #37	; 0x25
 8001cb2:	f000 fad2 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb6:	2025      	movs	r0, #37	; 0x25
 8001cb8:	f000 faeb 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_FMC_MspInit+0x104>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d16f      	bne.n	8001dcc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001cec:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_FMC_MspInit+0x104>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_FMC_MspInit+0x108>)
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <HAL_FMC_MspInit+0x108>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6393      	str	r3, [r2, #56]	; 0x38
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_FMC_MspInit+0x108>)
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d12:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d20:	230c      	movs	r3, #12
 8001d22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	482c      	ldr	r0, [pc, #176]	; (8001ddc <HAL_FMC_MspInit+0x10c>)
 8001d2a:	f000 fb7b 	bl	8002424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4826      	ldr	r0, [pc, #152]	; (8001de0 <HAL_FMC_MspInit+0x110>)
 8001d48:	f000 fb6c 	bl	8002424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001d4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001d50:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <HAL_FMC_MspInit+0x114>)
 8001d68:	f000 fb5c 	bl	8002424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001d6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d70:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d7e:	230c      	movs	r3, #12
 8001d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4818      	ldr	r0, [pc, #96]	; (8001de8 <HAL_FMC_MspInit+0x118>)
 8001d88:	f000 fb4c 	bl	8002424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001d8c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001d90:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4811      	ldr	r0, [pc, #68]	; (8001dec <HAL_FMC_MspInit+0x11c>)
 8001da8:	f000 fb3c 	bl	8002424 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001dac:	2360      	movs	r3, #96	; 0x60
 8001dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <HAL_FMC_MspInit+0x120>)
 8001dc6:	f000 fb2d 	bl	8002424 <HAL_GPIO_Init>
 8001dca:	e000      	b.n	8001dce <HAL_FMC_MspInit+0xfe>
    return;
 8001dcc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000354 	.word	0x20000354
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40020400 	.word	0x40020400

08001df4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001dfc:	f7ff ff68 	bl	8001cd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f8e2 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 fcbd 	bl	80027e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <USART1_IRQHandler+0x10>)
 8001e72:	f004 f989 	bl	8006188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200002d8 	.word	0x200002d8

08001e80 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <OTG_HS_IRQHandler+0x10>)
 8001e86:	f000 ff2d 	bl	8002ce4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000750 	.word	0x20000750

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f009 fe2a 	bl	800bb1c <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20030000 	.word	0x20030000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	20000358 	.word	0x20000358
 8001efc:	20000a68 	.word	0x20000a68

08001f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff ffd7 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f009 fde9 	bl	800bb28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff f8e7 	bl	8001128 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001f68:	0800d300 	.word	0x0800d300
  ldr r2, =_sbss
 8001f6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001f70:	20000a64 	.word	0x20000a64

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f94f 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fd44 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f967 	bl	80022ae <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	f000 f92f 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	20000008 	.word	0x20000008
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	2000035c 	.word	0x2000035c

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000035c 	.word	0x2000035c

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00e      	b.n	80022f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	795b      	ldrb	r3, [r3, #5]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fbcd 	bl	8001a88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff fe9a 	bl	8002044 <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d008      	beq.n	8002330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e052      	b.n	80023d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0216 	bic.w	r2, r2, #22
 800233e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <HAL_DMA_Abort+0x62>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0208 	bic.w	r2, r2, #8
 800236e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002380:	e013      	b.n	80023aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002382:	f7ff fe5f 	bl	8002044 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b05      	cmp	r3, #5
 800238e:	d90c      	bls.n	80023aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e015      	b.n	80023d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e4      	bne.n	8002382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	223f      	movs	r2, #63	; 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00c      	b.n	8002416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2205      	movs	r2, #5
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e177      	b.n	8002730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8166 	bne.w	800272a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80c0 	beq.w	800272a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_GPIO_Init+0x328>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_GPIO_Init+0x32c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d037      	beq.n	8002662 <HAL_GPIO_Init+0x23e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_GPIO_Init+0x330>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d031      	beq.n	800265e <HAL_GPIO_Init+0x23a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a56      	ldr	r2, [pc, #344]	; (8002758 <HAL_GPIO_Init+0x334>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x236>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a55      	ldr	r2, [pc, #340]	; (800275c <HAL_GPIO_Init+0x338>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x232>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a54      	ldr	r2, [pc, #336]	; (8002760 <HAL_GPIO_Init+0x33c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x22e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a53      	ldr	r2, [pc, #332]	; (8002764 <HAL_GPIO_Init+0x340>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x22a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_GPIO_Init+0x344>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x226>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a51      	ldr	r2, [pc, #324]	; (800276c <HAL_GPIO_Init+0x348>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x222>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a50      	ldr	r2, [pc, #320]	; (8002770 <HAL_GPIO_Init+0x34c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x21e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_GPIO_Init+0x350>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x21a>
 800263a:	2309      	movs	r3, #9
 800263c:	e012      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800263e:	230a      	movs	r3, #10
 8002640:	e010      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002642:	2308      	movs	r3, #8
 8002644:	e00e      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002646:	2307      	movs	r3, #7
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800264a:	2306      	movs	r3, #6
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x328>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a34      	ldr	r2, [pc, #208]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae84 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40021c00 	.word	0x40021c00
 8002770:	40022000 	.word	0x40022000
 8002774:	40022400 	.word	0x40022400
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e001      	b.n	800279e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f83a 	bl	8001878 <HAL_GPIO_EXTI_Callback>
  }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b08f      	sub	sp, #60	; 0x3c
 8002814:	af0a      	add	r7, sp, #40	; 0x28
 8002816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e054      	b.n	80028cc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f008 fe89 	bl	800b554 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2203      	movs	r2, #3
 8002846:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f004 fd31 	bl	80072c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	687e      	ldr	r6, [r7, #4]
 800286e:	466d      	mov	r5, sp
 8002870:	f106 0410 	add.w	r4, r6, #16
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002880:	e885 0003 	stmia.w	r5, {r0, r1}
 8002884:	1d33      	adds	r3, r6, #4
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f004 fcab 	bl	80071e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f004 fd28 	bl	80072ea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	687e      	ldr	r6, [r7, #4]
 80028a2:	466d      	mov	r5, sp
 80028a4:	f106 0410 	add.w	r4, r6, #16
 80028a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80028b8:	1d33      	adds	r3, r6, #4
 80028ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f004 feb1 	bl	8007624 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af04      	add	r7, sp, #16
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	70fb      	strb	r3, [r7, #3]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70bb      	strb	r3, [r7, #2]
 80028ea:	4613      	mov	r3, r2
 80028ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_HCD_HC_Init+0x28>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e076      	b.n	80029ea <HAL_HCD_HC_Init+0x116>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333d      	adds	r3, #61	; 0x3d
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3338      	adds	r3, #56	; 0x38
 8002924:	787a      	ldrb	r2, [r7, #1]
 8002926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3340      	adds	r3, #64	; 0x40
 8002936:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002938:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3339      	adds	r3, #57	; 0x39
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	333f      	adds	r3, #63	; 0x3f
 800295a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800295e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002968:	b2d0      	uxtb	r0, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	333a      	adds	r3, #58	; 0x3a
 8002976:	4602      	mov	r2, r0
 8002978:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800297a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800297e:	2b00      	cmp	r3, #0
 8002980:	da09      	bge.n	8002996 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333b      	adds	r3, #59	; 0x3b
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e008      	b.n	80029a8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333b      	adds	r3, #59	; 0x3b
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	333c      	adds	r3, #60	; 0x3c
 80029b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	787c      	ldrb	r4, [r7, #1]
 80029c2:	78ba      	ldrb	r2, [r7, #2]
 80029c4:	78f9      	ldrb	r1, [r7, #3]
 80029c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4623      	mov	r3, r4
 80029d8:	f004 ffaa 	bl	8007930 <USB_HC_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}

080029f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_HCD_HC_Halt+0x1e>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e00f      	b.n	8002a30 <HAL_HCD_HC_Halt+0x3e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 f9fa 	bl	8007e1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	70fb      	strb	r3, [r7, #3]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70bb      	strb	r3, [r7, #2]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	333b      	adds	r3, #59	; 0x3b
 8002a60:	78ba      	ldrb	r2, [r7, #2]
 8002a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	333f      	adds	r3, #63	; 0x3f
 8002a72:	787a      	ldrb	r2, [r7, #1]
 8002a74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a76:	7c3b      	ldrb	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d112      	bne.n	8002aa2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	333d      	adds	r3, #61	; 0x3d
 8002a9c:	7f3a      	ldrb	r2, [r7, #28]
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e008      	b.n	8002ab4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3342      	adds	r3, #66	; 0x42
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	f200 80c6 	bhi.w	8002c48 <HAL_HCD_HC_SubmitRequest+0x210>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002c35 	.word	0x08002c35
 8002acc:	08002b39 	.word	0x08002b39
 8002ad0:	08002bb7 	.word	0x08002bb7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ad4:	7c3b      	ldrb	r3, [r7, #16]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 80b8 	bne.w	8002c4c <HAL_HCD_HC_SubmitRequest+0x214>
 8002adc:	78bb      	ldrb	r3, [r7, #2]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 80b4 	bne.w	8002c4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ae4:	8b3b      	ldrh	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3355      	adds	r3, #85	; 0x55
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3355      	adds	r3, #85	; 0x55
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3342      	adds	r3, #66	; 0x42
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b22:	e093      	b.n	8002c4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3342      	adds	r3, #66	; 0x42
 8002b32:	2202      	movs	r2, #2
 8002b34:	701a      	strb	r2, [r3, #0]
      break;
 8002b36:	e089      	b.n	8002c4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b38:	78bb      	ldrb	r3, [r7, #2]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11d      	bne.n	8002b7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3355      	adds	r3, #85	; 0x55
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3342      	adds	r3, #66	; 0x42
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b64:	e073      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3342      	adds	r3, #66	; 0x42
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
      break;
 8002b78:	e069      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3354      	adds	r3, #84	; 0x54
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3342      	adds	r3, #66	; 0x42
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
      break;
 8002ba0:	e055      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3342      	adds	r3, #66	; 0x42
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
      break;
 8002bb4:	e04b      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bb6:	78bb      	ldrb	r3, [r7, #2]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11d      	bne.n	8002bf8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3355      	adds	r3, #85	; 0x55
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3342      	adds	r3, #66	; 0x42
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002be2:	e034      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3342      	adds	r3, #66	; 0x42
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
      break;
 8002bf6:	e02a      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3354      	adds	r3, #84	; 0x54
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3342      	adds	r3, #66	; 0x42
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
      break;
 8002c1e:	e016      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3342      	adds	r3, #66	; 0x42
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3342      	adds	r3, #66	; 0x42
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3344      	adds	r3, #68	; 0x44
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	8b3a      	ldrh	r2, [r7, #24]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	202c      	movs	r0, #44	; 0x2c
 8002c68:	fb00 f303 	mul.w	r3, r0, r3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334c      	adds	r3, #76	; 0x4c
 8002c70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3350      	adds	r3, #80	; 0x50
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3339      	adds	r3, #57	; 0x39
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	222c      	movs	r2, #44	; 0x2c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	3338      	adds	r3, #56	; 0x38
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	18d1      	adds	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f004 ff4e 	bl	8007b74 <USB_HC_StartXfer>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fc4f 	bl	800759e <USB_GetMode>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 80f6 	bne.w	8002ef4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fc33 	bl	8007578 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ec 	beq.w	8002ef2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fc2a 	bl	8007578 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2e:	d104      	bne.n	8002d3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fc1a 	bl	8007578 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d104      	bne.n	8002d5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fc0a 	bl	8007578 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6e:	d104      	bne.n	8002d7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fbfa 	bl	8007578 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fbec 	bl	8007578 <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002daa:	d11c      	bne.n	8002de6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002db4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	6938      	ldr	r0, [r7, #16]
 8002dca:	f004 fadb 	bl	8007384 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f004 fb0c 	bl	80073ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fce2 	bl	80077a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f008 fc31 	bl	800b648 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fbc4 	bl	8007578 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfa:	d102      	bne.n	8002e02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f001 f89e 	bl	8003f3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f004 fbb6 	bl	8007578 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d106      	bne.n	8002e24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f008 fbfa 	bl	800b610 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2208      	movs	r2, #8
 8002e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fba5 	bl	8007578 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d101      	bne.n	8002e3c <HAL_HCD_IRQHandler+0x158>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_HCD_IRQHandler+0x15a>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0210 	bic.w	r2, r2, #16
 8002e50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ffa1 	bl	8003d9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0210 	orr.w	r2, r2, #16
 8002e66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fb83 	bl	8007578 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e7c:	d13a      	bne.n	8002ef4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 ffb8 	bl	8007df8 <USB_HC_ReadInterrupt>
 8002e88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e025      	b.n	8002edc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d018      	beq.n	8002ed6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eba:	d106      	bne.n	8002eca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8ab 	bl	800301e <HCD_HC_IN_IRQHandler>
 8002ec8:	e005      	b.n	8002ed6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fbf9 	bl	80036c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d3d4      	bcc.n	8002e90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eee:	615a      	str	r2, [r3, #20]
 8002ef0:	e000      	b.n	8002ef4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002ef2:	bf00      	nop
    }
  }
}
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_HCD_Start+0x16>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e013      	b.n	8002f38 <HAL_HCD_Start+0x3e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fca4 	bl	800786c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 f9bc 	bl	80072a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_HCD_Stop+0x16>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e00d      	b.n	8002f72 <HAL_HCD_Stop+0x32>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 f892 	bl	800808c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fc46 	bl	8007818 <USB_ResetPort>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3360      	adds	r3, #96	; 0x60
 8002fb0:	781b      	ldrb	r3, [r3, #0]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3350      	adds	r3, #80	; 0x50
 8002fd8:	681b      	ldr	r3, [r3, #0]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fc8a 	bl	800790c <USB_GetCurrentFrame>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fc65 	bl	80078de <USB_GetHostSpeed>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d11a      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	461a      	mov	r2, r3
 800305c:	2304      	movs	r3, #4
 800305e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3361      	adds	r3, #97	; 0x61
 800306e:	2206      	movs	r2, #6
 8003070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f004 fecc 	bl	8007e1a <USB_HC_Halt>
 8003082:	e0af      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309a:	d11b      	bne.n	80030d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	2207      	movs	r2, #7
 80030c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fea4 	bl	8007e1a <USB_HC_Halt>
 80030d2:	e087      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d109      	bne.n	80030fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2320      	movs	r3, #32
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	e072      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d11a      	bne.n	800314a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2308      	movs	r3, #8
 8003124:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3361      	adds	r3, #97	; 0x61
 8003134:	2205      	movs	r2, #5
 8003136:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fe69 	bl	8007e1a <USB_HC_Halt>
 8003148:	e04c      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d11b      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3361      	adds	r3, #97	; 0x61
 8003184:	2208      	movs	r2, #8
 8003186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fe41 	bl	8007e1a <USB_HC_Halt>
 8003198:	e024      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d119      	bne.n	80031e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3361      	adds	r3, #97	; 0x61
 80031d0:	2206      	movs	r2, #6
 80031d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 fe1b 	bl	8007e1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fa:	d112      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fe07 	bl	8007e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003220:	e24e      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 80df 	bne.w	80033f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3348      	adds	r3, #72	; 0x48
 8003250:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0159      	lsls	r1, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	440b      	add	r3, r1
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003264:	1ad2      	subs	r2, r2, r3
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	202c      	movs	r0, #44	; 0x2c
 800326c:	fb00 f303 	mul.w	r3, r0, r3
 8003270:	440b      	add	r3, r1
 8003272:	3350      	adds	r3, #80	; 0x50
 8003274:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3361      	adds	r3, #97	; 0x61
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	335c      	adds	r3, #92	; 0x5c
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	461a      	mov	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	333f      	adds	r3, #63	; 0x3f
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	333f      	adds	r3, #63	; 0x3f
 80032ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d111      	bne.n	80032f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fd9b 	bl	8007e1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	461a      	mov	r2, r3
 80032f2:	2310      	movs	r3, #16
 80032f4:	6093      	str	r3, [r2, #8]
 80032f6:	e03a      	b.n	800336e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	333f      	adds	r3, #63	; 0x3f
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d009      	beq.n	8003320 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	333f      	adds	r3, #63	; 0x3f
 800331a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800331c:	2b01      	cmp	r3, #1
 800331e:	d126      	bne.n	800336e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	440a      	add	r2, r1
 8003336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800333a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800333e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3360      	adds	r3, #96	; 0x60
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	b2d9      	uxtb	r1, r3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	202c      	movs	r0, #44	; 0x2c
 800335c:	fb00 f303 	mul.w	r3, r0, r3
 8003360:	4413      	add	r3, r2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f008 f97b 	bl	800b664 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d12b      	bne.n	80033ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3348      	adds	r3, #72	; 0x48
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	202c      	movs	r0, #44	; 0x2c
 800338c:	fb00 f202 	mul.w	r2, r0, r2
 8003390:	440a      	add	r2, r1
 8003392:	3240      	adds	r2, #64	; 0x40
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	fbb3 f3f2 	udiv	r3, r3, r2
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 818e 	beq.w	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3354      	adds	r3, #84	; 0x54
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f083 0301 	eor.w	r3, r3, #1
 80033b8:	b2d8      	uxtb	r0, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3354      	adds	r3, #84	; 0x54
 80033c8:	4602      	mov	r2, r0
 80033ca:	701a      	strb	r2, [r3, #0]
}
 80033cc:	e178      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3354      	adds	r3, #84	; 0x54
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2d8      	uxtb	r0, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3354      	adds	r3, #84	; 0x54
 80033f2:	4602      	mov	r2, r0
 80033f4:	701a      	strb	r2, [r3, #0]
}
 80033f6:	e163      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	f040 80f6 	bne.w	80035fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3361      	adds	r3, #97	; 0x61
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d109      	bne.n	8003438 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3360      	adds	r3, #96	; 0x60
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e0c9      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3361      	adds	r3, #97	; 0x61
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d109      	bne.n	8003460 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3360      	adds	r3, #96	; 0x60
 800345a:	2205      	movs	r2, #5
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e0b5      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3361      	adds	r3, #97	; 0x61
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b06      	cmp	r3, #6
 8003472:	d009      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	3361      	adds	r3, #97	; 0x61
 8003482:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003484:	2b08      	cmp	r3, #8
 8003486:	d150      	bne.n	800352a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	335c      	adds	r3, #92	; 0x5c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	202c      	movs	r0, #44	; 0x2c
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	440b      	add	r3, r1
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	335c      	adds	r3, #92	; 0x5c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d912      	bls.n	80034e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	335c      	adds	r3, #92	; 0x5c
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3360      	adds	r3, #96	; 0x60
 80034de:	2204      	movs	r2, #4
 80034e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034e2:	e073      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3360      	adds	r3, #96	; 0x60
 80034f2:	2202      	movs	r2, #2
 80034f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800350c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003514:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003528:	e050      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	3361      	adds	r3, #97	; 0x61
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d122      	bne.n	8003584 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	3360      	adds	r3, #96	; 0x60
 800354c:	2202      	movs	r2, #2
 800354e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003566:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800356e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e023      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b07      	cmp	r3, #7
 8003596:	d119      	bne.n	80035cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	202c      	movs	r0, #44	; 0x2c
 80035b0:	fb00 f303 	mul.w	r3, r0, r3
 80035b4:	440b      	add	r3, r1
 80035b6:	335c      	adds	r3, #92	; 0x5c
 80035b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3360      	adds	r3, #96	; 0x60
 80035c8:	2204      	movs	r2, #4
 80035ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	2302      	movs	r3, #2
 80035dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b2d9      	uxtb	r1, r3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	202c      	movs	r0, #44	; 0x2c
 80035e8:	fb00 f303 	mul.w	r3, r0, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	3360      	adds	r3, #96	; 0x60
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f008 f835 	bl	800b664 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035fa:	e061      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d156      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	333f      	adds	r3, #63	; 0x3f
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d111      	bne.n	800364a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	335c      	adds	r3, #92	; 0x5c
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f004 fbe9 	bl	8007e1a <USB_HC_Halt>
 8003648:	e031      	b.n	80036ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	333f      	adds	r3, #63	; 0x3f
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	333f      	adds	r3, #63	; 0x3f
 800366c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800366e:	2b02      	cmp	r3, #2
 8003670:	d11d      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	335c      	adds	r3, #92	; 0x5c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3361      	adds	r3, #97	; 0x61
 800369a:	2203      	movs	r2, #3
 800369c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 fbb6 	bl	8007e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	2310      	movs	r3, #16
 80036be:	6093      	str	r3, [r2, #8]
}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d11a      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2304      	movs	r3, #4
 8003708:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3361      	adds	r3, #97	; 0x61
 8003718:	2206      	movs	r2, #6
 800371a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fb77 	bl	8007e1a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800372c:	e331      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d12e      	bne.n	80037a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	461a      	mov	r2, r3
 8003752:	2320      	movs	r3, #32
 8003754:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	333d      	adds	r3, #61	; 0x3d
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	f040 8313 	bne.w	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	333d      	adds	r3, #61	; 0x3d
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f004 fb3d 	bl	8007e1a <USB_HC_Halt>
}
 80037a0:	e2f7      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d112      	bne.n	80037e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fb1e 	bl	8007e1a <USB_HC_Halt>
}
 80037de:	e2d8      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d140      	bne.n	8003878 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d111      	bne.n	8003842 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	333d      	adds	r3, #61	; 0x3d
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	461a      	mov	r2, r3
 8003850:	2301      	movs	r3, #1
 8003852:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3361      	adds	r3, #97	; 0x61
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f004 fad2 	bl	8007e1a <USB_HC_Halt>
}
 8003876:	e28c      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d12c      	bne.n	80038e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3361      	adds	r3, #97	; 0x61
 800389c:	2204      	movs	r2, #4
 800389e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	333d      	adds	r3, #61	; 0x3d
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	335c      	adds	r3, #92	; 0x5c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 faa3 	bl	8007e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	6093      	str	r3, [r2, #8]
}
 80038e6:	e254      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d11a      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	2308      	movs	r3, #8
 800390e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3361      	adds	r3, #97	; 0x61
 800391e:	2205      	movs	r2, #5
 8003920:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f004 fa74 	bl	8007e1a <USB_HC_Halt>
}
 8003932:	e22e      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	d140      	bne.n	80039cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	335c      	adds	r3, #92	; 0x5c
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	2203      	movs	r2, #3
 800396c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	333d      	adds	r3, #61	; 0x3d
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d112      	bne.n	80039a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	333c      	adds	r3, #60	; 0x3c
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d108      	bne.n	80039a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	333d      	adds	r3, #61	; 0x3d
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 fa31 	bl	8007e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	2310      	movs	r3, #16
 80039c8:	6093      	str	r3, [r2, #8]
}
 80039ca:	e1e2      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d164      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d111      	bne.n	8003a0e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3361      	adds	r3, #97	; 0x61
 80039f8:	2206      	movs	r2, #6
 80039fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fa07 	bl	8007e1a <USB_HC_Halt>
 8003a0c:	e044      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	335c      	adds	r3, #92	; 0x5c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	202c      	movs	r0, #44	; 0x2c
 8003a26:	fb00 f303 	mul.w	r3, r0, r3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	335c      	adds	r3, #92	; 0x5c
 8003a2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	335c      	adds	r3, #92	; 0x5c
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d920      	bls.n	8003a86 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	335c      	adds	r3, #92	; 0x5c
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3360      	adds	r3, #96	; 0x60
 8003a64:	2204      	movs	r2, #4
 8003a66:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	b2d9      	uxtb	r1, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	202c      	movs	r0, #44	; 0x2c
 8003a72:	fb00 f303 	mul.w	r3, r0, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3360      	adds	r3, #96	; 0x60
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f007 fdf0 	bl	800b664 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a84:	e008      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3360      	adds	r3, #96	; 0x60
 8003a94:	2202      	movs	r2, #2
 8003a96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	6093      	str	r3, [r2, #8]
}
 8003aaa:	e172      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d11b      	bne.n	8003afc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3361      	adds	r3, #97	; 0x61
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 f99a 	bl	8007e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	461a      	mov	r2, r3
 8003af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af8:	6093      	str	r3, [r2, #8]
}
 8003afa:	e14a      	b.n	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 813f 	bne.w	8003d92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3361      	adds	r3, #97	; 0x61
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d17d      	bne.n	8003c24 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3360      	adds	r3, #96	; 0x60
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	333f      	adds	r3, #63	; 0x3f
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d00a      	beq.n	8003b64 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	333f      	adds	r3, #63	; 0x3f
 8003b5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	f040 8100 	bne.w	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3355      	adds	r3, #85	; 0x55
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2d8      	uxtb	r0, r3
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3355      	adds	r3, #85	; 0x55
 8003b90:	4602      	mov	r2, r0
 8003b92:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	f040 80e3 	bne.w	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	334c      	adds	r3, #76	; 0x4c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80d8 	beq.w	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	334c      	adds	r3, #76	; 0x4c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	202c      	movs	r0, #44	; 0x2c
 8003bca:	fb00 f202 	mul.w	r2, r0, r2
 8003bce:	440a      	add	r2, r1
 8003bd0:	3240      	adds	r2, #64	; 0x40
 8003bd2:	8812      	ldrh	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	202c      	movs	r0, #44	; 0x2c
 8003bde:	fb00 f202 	mul.w	r2, r0, r2
 8003be2:	440a      	add	r2, r1
 8003be4:	3240      	adds	r2, #64	; 0x40
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80b5 	beq.w	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	3355      	adds	r3, #85	; 0x55
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	f083 0301 	eor.w	r3, r3, #1
 8003c0e:	b2d8      	uxtb	r0, r3
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3355      	adds	r3, #85	; 0x55
 8003c1e:	4602      	mov	r2, r0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e09f      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3361      	adds	r3, #97	; 0x61
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d109      	bne.n	8003c4c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3360      	adds	r3, #96	; 0x60
 8003c46:	2202      	movs	r2, #2
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e08b      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3361      	adds	r3, #97	; 0x61
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d109      	bne.n	8003c74 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3360      	adds	r3, #96	; 0x60
 8003c6e:	2202      	movs	r2, #2
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e077      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3361      	adds	r3, #97	; 0x61
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d109      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	2205      	movs	r2, #5
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e063      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3361      	adds	r3, #97	; 0x61
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d009      	beq.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3361      	adds	r3, #97	; 0x61
 8003cbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d14f      	bne.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	335c      	adds	r3, #92	; 0x5c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	202c      	movs	r0, #44	; 0x2c
 8003cdc:	fb00 f303 	mul.w	r3, r0, r3
 8003ce0:	440b      	add	r3, r1
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	335c      	adds	r3, #92	; 0x5c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d912      	bls.n	8003d20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	335c      	adds	r3, #92	; 0x5c
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3360      	adds	r3, #96	; 0x60
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e021      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3360      	adds	r3, #96	; 0x60
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	461a      	mov	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	2302      	movs	r3, #2
 8003d74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	b2d9      	uxtb	r1, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	202c      	movs	r0, #44	; 0x2c
 8003d80:	fb00 f303 	mul.w	r3, r0, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3360      	adds	r3, #96	; 0x60
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f007 fc69 	bl	800b664 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d92:	bf00      	nop
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b08a      	sub	sp, #40	; 0x28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	0c5b      	lsrs	r3, r3, #17
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d004      	beq.n	8003de0 <HCD_RXQLVL_IRQHandler+0x46>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	f000 80a9 	beq.w	8003f30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dde:	e0aa      	b.n	8003f36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a6 	beq.w	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3344      	adds	r3, #68	; 0x44
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 809b 	beq.w	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	3350      	adds	r3, #80	; 0x50
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	441a      	add	r2, r3
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	202c      	movs	r0, #44	; 0x2c
 8003e18:	fb00 f303 	mul.w	r3, r0, r3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	334c      	adds	r3, #76	; 0x4c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d87a      	bhi.n	8003f1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	3344      	adds	r3, #68	; 0x44
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f003 fb42 	bl	80074c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3344      	adds	r3, #68	; 0x44
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	441a      	add	r2, r3
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	202c      	movs	r0, #44	; 0x2c
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	440b      	add	r3, r1
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3350      	adds	r3, #80	; 0x50
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	202c      	movs	r0, #44	; 0x2c
 8003e82:	fb00 f303 	mul.w	r3, r0, r3
 8003e86:	440b      	add	r3, r1
 8003e88:	3350      	adds	r3, #80	; 0x50
 8003e8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	0cdb      	lsrs	r3, r3, #19
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3340      	adds	r3, #64	; 0x40
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d13c      	bne.n	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d039      	beq.n	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ed6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ede:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	3354      	adds	r3, #84	; 0x54
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f083 0301 	eor.w	r3, r3, #1
 8003f06:	b2d8      	uxtb	r0, r3
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3354      	adds	r3, #84	; 0x54
 8003f16:	4602      	mov	r2, r0
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e00b      	b.n	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3360      	adds	r3, #96	; 0x60
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	701a      	strb	r2, [r3, #0]
      break;
 8003f2e:	e001      	b.n	8003f34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f34:	bf00      	nop
  }
}
 8003f36:	bf00      	nop
 8003f38:	3728      	adds	r7, #40	; 0x28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d10b      	bne.n	8003f8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f007 fb53 	bl	800b62c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d132      	bne.n	8003ffe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d126      	bne.n	8003ff8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d113      	bne.n	8003fda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fbc:	d106      	bne.n	8003fcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fbed 	bl	80077a4 <USB_InitFSLSPClkSel>
 8003fca:	e011      	b.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fbe6 	bl	80077a4 <USB_InitFSLSPClkSel>
 8003fd8:	e00a      	b.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d106      	bne.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f007 fb45 	bl	800b680 <HAL_HCD_PortEnabled_Callback>
 8003ff6:	e002      	b.n	8003ffe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f007 fb4f 	bl	800b69c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d103      	bne.n	8004010 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f043 0320 	orr.w	r3, r3, #32
 800400e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e12b      	b.n	800428e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fd3e 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004088:	f000 fdfc 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 800408c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a81      	ldr	r2, [pc, #516]	; (8004298 <HAL_I2C_Init+0x274>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d807      	bhi.n	80040a8 <HAL_I2C_Init+0x84>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a80      	ldr	r2, [pc, #512]	; (800429c <HAL_I2C_Init+0x278>)
 800409c:	4293      	cmp	r3, r2
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e006      	b.n	80040b6 <HAL_I2C_Init+0x92>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a7d      	ldr	r2, [pc, #500]	; (80042a0 <HAL_I2C_Init+0x27c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0e7      	b.n	800428e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a78      	ldr	r2, [pc, #480]	; (80042a4 <HAL_I2C_Init+0x280>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a6a      	ldr	r2, [pc, #424]	; (8004298 <HAL_I2C_Init+0x274>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d802      	bhi.n	80040f8 <HAL_I2C_Init+0xd4>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	e009      	b.n	800410c <HAL_I2C_Init+0xe8>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a69      	ldr	r2, [pc, #420]	; (80042a8 <HAL_I2C_Init+0x284>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	3301      	adds	r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	430b      	orrs	r3, r1
 8004112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800411e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	495c      	ldr	r1, [pc, #368]	; (8004298 <HAL_I2C_Init+0x274>)
 8004128:	428b      	cmp	r3, r1
 800412a:	d819      	bhi.n	8004160 <HAL_I2C_Init+0x13c>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e59      	subs	r1, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fbb1 f3f3 	udiv	r3, r1, r3
 800413a:	1c59      	adds	r1, r3, #1
 800413c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004140:	400b      	ands	r3, r1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_I2C_Init+0x138>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1e59      	subs	r1, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fbb1 f3f3 	udiv	r3, r1, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	e051      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 800415c:	2304      	movs	r3, #4
 800415e:	e04f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <HAL_I2C_Init+0x168>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e012      	b.n	80041b2 <HAL_I2C_Init+0x18e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	0099      	lsls	r1, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Init+0x196>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e022      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_I2C_Init+0x1bc>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e58      	subs	r0, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	440b      	add	r3, r1
 80041d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041de:	e00f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	0099      	lsls	r1, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	6809      	ldr	r1, [r1, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800422e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6911      	ldr	r1, [r2, #16]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	000186a0 	.word	0x000186a0
 800429c:	001e847f 	.word	0x001e847f
 80042a0:	003d08ff 	.word	0x003d08ff
 80042a4:	431bde83 	.word	0x431bde83
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d129      	bne.n	8004316 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	; 0x24
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0210 	bic.w	r2, r2, #16
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d12a      	bne.n	8004394 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2224      	movs	r2, #36	; 0x24
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	f023 030f 	bic.w	r3, r3, #15
 8004364:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e267      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d075      	beq.n	80044ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c2:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b85      	ldr	r3, [pc, #532]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d112      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d10b      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b7e      	ldr	r3, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05b      	beq.n	80044ac <HAL_RCC_OscConfig+0x108>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d157      	bne.n	80044ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e242      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x74>
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x98>
 8004422:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6f      	ldr	r2, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6c      	ldr	r2, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 800443c:	4b69      	ldr	r3, [pc, #420]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a68      	ldr	r2, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd fdf2 	bl	8002044 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fd fdee 	bl	8002044 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e207      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xc0>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd fdde 	bl	8002044 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd fdda 	bl	8002044 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1f3      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0xe8>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ba:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1c7      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4937      	ldr	r1, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e03a      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fd fd93 	bl	8002044 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fd fd8f 	bl	8002044 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1a8      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4925      	ldr	r1, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fd72 	bl	8002044 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fd6e 	bl	8002044 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e187      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d036      	beq.n	80045fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd fd52 	bl	8002044 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fd fd4e 	bl	8002044 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e167      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x200>
 80045c2:	e01b      	b.n	80045fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ca:	f7fd fd3b 	bl	8002044 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	e00e      	b.n	80045f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d2:	f7fd fd37 	bl	8002044 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d907      	bls.n	80045f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e150      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	42470000 	.word	0x42470000
 80045ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ea      	bne.n	80045d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8097 	beq.w	8004738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b7d      	ldr	r3, [pc, #500]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fd fcf7 	bl	8002044 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fd fcf3 	bl	8002044 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e10c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x2ea>
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a63      	ldr	r2, [pc, #396]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e01c      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x30c>
 8004696:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 80046b0:	4b58      	ldr	r3, [pc, #352]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	4b55      	ldr	r3, [pc, #340]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a54      	ldr	r2, [pc, #336]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fcb8 	bl	8002044 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fd fcb4 	bl	8002044 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0cb      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ee      	beq.n	80046d8 <HAL_RCC_OscConfig+0x334>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fc:	f7fd fca2 	bl	8002044 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fd fc9e 	bl	8002044 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0b5      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ee      	bne.n	8004704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b39      	ldr	r3, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	4a38      	ldr	r2, [pc, #224]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a1 	beq.w	8004884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004742:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d05c      	beq.n	8004808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d141      	bne.n	80047da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fc72 	bl	8002044 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fc6e 	bl	8002044 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e087      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd fc47 	bl	8002044 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd fc43 	bl	8002044 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e05c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x416>
 80047d8:	e054      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd fc30 	bl	8002044 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fd fc2c 	bl	8002044 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e045      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x444>
 8004806:	e03d      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e038      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	40007000 	.word	0x40007000
 800481c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d028      	beq.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d121      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	3b01      	subs	r3, #1
 800486a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cc      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d90c      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d003      	beq.n	8004952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	2b03      	cmp	r3, #3
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e067      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fd fb5e 	bl	8002044 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fd fb5a 	bl	8002044 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20c      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 f821 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490a      	ldr	r1, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd fabe 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800d128 	.word	0x0800d128
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	20000004 	.word	0x20000004

08004a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b094      	sub	sp, #80	; 0x50
 8004a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a70:	2300      	movs	r3, #0
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a78:	4b79      	ldr	r3, [pc, #484]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	f200 80e1 	bhi.w	8004c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a92:	e0db      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b73      	ldr	r3, [pc, #460]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a98:	e0db      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9a:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a9e:	e0d8      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d063      	beq.n	8004b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	099b      	lsrs	r3, r3, #6
 8004abc:	2200      	movs	r2, #0
 8004abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aca:	2300      	movs	r3, #0
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae4:	0150      	lsls	r0, r2, #5
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4621      	mov	r1, r4
 8004aec:	1a51      	subs	r1, r2, r1
 8004aee:	6139      	str	r1, [r7, #16]
 8004af0:	4629      	mov	r1, r5
 8004af2:	eb63 0301 	sbc.w	r3, r3, r1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b04:	4659      	mov	r1, fp
 8004b06:	018b      	lsls	r3, r1, #6
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b0e:	4651      	mov	r1, sl
 8004b10:	018a      	lsls	r2, r1, #6
 8004b12:	4651      	mov	r1, sl
 8004b14:	ebb2 0801 	subs.w	r8, r2, r1
 8004b18:	4659      	mov	r1, fp
 8004b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b32:	4690      	mov	r8, r2
 8004b34:	4699      	mov	r9, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	eb18 0303 	adds.w	r3, r8, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	462b      	mov	r3, r5
 8004b40:	eb49 0303 	adc.w	r3, r9, r3
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b52:	4629      	mov	r1, r5
 8004b54:	024b      	lsls	r3, r1, #9
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	024a      	lsls	r2, r1, #9
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b66:	2200      	movs	r2, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b70:	f7fb fb8e 	bl	8000290 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	e058      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	4611      	mov	r1, r2
 8004b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	2300      	movs	r3, #0
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	0159      	lsls	r1, r3, #5
 8004ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004baa:	0150      	lsls	r0, r2, #5
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	00eb      	lsls	r3, r5, #3
 8004be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be6:	00e2      	lsls	r2, r4, #3
 8004be8:	4614      	mov	r4, r2
 8004bea:	461d      	mov	r5, r3
 8004bec:	4643      	mov	r3, r8
 8004bee:	18e3      	adds	r3, r4, r3
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	eb45 0303 	adc.w	r3, r5, r3
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c06:	4629      	mov	r1, r5
 8004c08:	028b      	lsls	r3, r1, #10
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c10:	4621      	mov	r1, r4
 8004c12:	028a      	lsls	r2, r1, #10
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	61fa      	str	r2, [r7, #28]
 8004c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c24:	f7fb fb34 	bl	8000290 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c4a:	e002      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3750      	adds	r7, #80	; 0x50
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200

08004c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800d138 	.word	0x0800d138

08004cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb0:	f7ff ffdc 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0b5b      	lsrs	r3, r3, #13
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800d138 	.word	0x0800d138

08004cd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e025      	b.n	8004d34 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fd f879 	bl	8001df4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f002 f99f 	bl	8007058 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	f002 f9f4 	bl	8007112 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e07b      	b.n	8004e46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5e:	d009      	beq.n	8004d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	61da      	str	r2, [r3, #28]
 8004d66:	e005      	b.n	8004d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc fee4 	bl	8001b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	ea42 0103 	orr.w	r1, r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 0104 	and.w	r1, r3, #4
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0210 	and.w	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b088      	sub	sp, #32
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_SPI_Transmit+0x22>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e126      	b.n	80050be <HAL_SPI_Transmit+0x270>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e78:	f7fd f8e4 	bl	8002044 <HAL_GetTick>
 8004e7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e92:	e10b      	b.n	80050ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_Transmit+0x52>
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ea4:	e102      	b.n	80050ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eec:	d10f      	bne.n	8004f0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d007      	beq.n	8004f2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f34:	d14b      	bne.n	8004fce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Transmit+0xf6>
 8004f3e:	8afb      	ldrh	r3, [r7, #22]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d13e      	bne.n	8004fc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f68:	e02b      	b.n	8004fc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d112      	bne.n	8004f9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f9c:	e011      	b.n	8004fc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9e:	f7fd f851 	bl	8002044 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d803      	bhi.n	8004fb6 <HAL_SPI_Transmit+0x168>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x16e>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fc0:	e074      	b.n	80050ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ce      	bne.n	8004f6a <HAL_SPI_Transmit+0x11c>
 8004fcc:	e04c      	b.n	8005068 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_SPI_Transmit+0x18e>
 8004fd6:	8afb      	ldrh	r3, [r7, #22]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d140      	bne.n	800505e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005002:	e02c      	b.n	800505e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d113      	bne.n	800503a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	86da      	strh	r2, [r3, #54]	; 0x36
 8005038:	e011      	b.n	800505e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503a:	f7fd f803 	bl	8002044 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d803      	bhi.n	8005052 <HAL_SPI_Transmit+0x204>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Transmit+0x20a>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800505c:	e026      	b.n	80050ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1cd      	bne.n	8005004 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fbcb 	bl	8005808 <SPI_EndRxTxTransaction>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e000      	b.n	80050ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80050aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d112      	bne.n	800510a <HAL_SPI_Receive+0x44>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8f1 	bl	80052e8 <HAL_SPI_TransmitReceive>
 8005106:	4603      	mov	r3, r0
 8005108:	e0ea      	b.n	80052e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_SPI_Receive+0x52>
 8005114:	2302      	movs	r3, #2
 8005116:	e0e3      	b.n	80052e0 <HAL_SPI_Receive+0x21a>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005120:	f7fc ff90 	bl	8002044 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005136:	e0ca      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Receive+0x7e>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005148:	e0c1      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2204      	movs	r2, #4
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d10f      	bne.n	80051b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d162      	bne.n	800529e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051d8:	e02e      	b.n	8005238 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d115      	bne.n	8005214 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f103 020c 	add.w	r2, r3, #12
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005212:	e011      	b.n	8005238 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005214:	f7fc ff16 	bl	8002044 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d803      	bhi.n	800522c <HAL_SPI_Receive+0x166>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800522a:	d102      	bne.n	8005232 <HAL_SPI_Receive+0x16c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005236:	e04a      	b.n	80052ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1cb      	bne.n	80051da <HAL_SPI_Receive+0x114>
 8005242:	e031      	b.n	80052a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d113      	bne.n	800527a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	b292      	uxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005278:	e011      	b.n	800529e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fc fee3 	bl	8002044 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d803      	bhi.n	8005292 <HAL_SPI_Receive+0x1cc>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005290:	d102      	bne.n	8005298 <HAL_SPI_Receive+0x1d2>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800529c:	e017      	b.n	80052ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1cd      	bne.n	8005244 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fa45 	bl	800573c <SPI_EndRxTransaction>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
 80052ca:	e000      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

error :
 80052cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052f6:	2301      	movs	r3, #1
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_SPI_TransmitReceive+0x26>
 800530a:	2302      	movs	r3, #2
 800530c:	e18a      	b.n	8005624 <HAL_SPI_TransmitReceive+0x33c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005316:	f7fc fe95 	bl	8002044 <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005334:	2b01      	cmp	r3, #1
 8005336:	d00f      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x70>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d107      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x68>
 8005348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534c:	2b04      	cmp	r3, #4
 800534e:	d003      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005350:	2302      	movs	r3, #2
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005356:	e15b      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_SPI_TransmitReceive+0x82>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SPI_TransmitReceive+0x82>
 8005364:	887b      	ldrh	r3, [r7, #2]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005370:	e14e      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b04      	cmp	r3, #4
 800537c:	d003      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2205      	movs	r2, #5
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	887a      	ldrh	r2, [r7, #2]
 80053ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d007      	beq.n	80053da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d178      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x10a>
 80053ec:	8b7b      	ldrh	r3, [r7, #26]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d166      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005416:	e053      	b.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d11b      	bne.n	800545e <HAL_SPI_TransmitReceive+0x176>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_SPI_TransmitReceive+0x176>
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d113      	bne.n	800545e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1b8>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d014      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	b292      	uxth	r2, r2
 8005482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800549c:	2301      	movs	r3, #1
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054a0:	f7fc fdd0 	bl	8002044 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d807      	bhi.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b6:	d003      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054be:	e0a7      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1a6      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x130>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1a1      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x130>
 80054d4:	e07c      	b.n	80055d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x1fc>
 80054de:	8b7b      	ldrh	r3, [r7, #26]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d16b      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800550a:	e057      	b.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d11c      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d017      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d114      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d119      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x2ae>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d014      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005592:	2301      	movs	r3, #1
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005596:	f7fc fd55 	bl	8002044 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_TransmitReceive+0x2c6>
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x2cc>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055ba:	e029      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1a2      	bne.n	800550c <HAL_SPI_TransmitReceive+0x224>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d19d      	bne.n	800550c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f917 	bl	8005808 <SPI_EndRxTxTransaction>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055ec:	e010      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e000      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800560e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800563c:	f7fc fd02 	bl	8002044 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	4413      	add	r3, r2
 800564a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800564c:	f7fc fcfa 	bl	8002044 <HAL_GetTick>
 8005650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	015b      	lsls	r3, r3, #5
 8005658:	0d1b      	lsrs	r3, r3, #20
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005662:	e054      	b.n	800570e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566a:	d050      	beq.n	800570e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800566c:	f7fc fcea 	bl	8002044 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	429a      	cmp	r2, r3
 800567a:	d902      	bls.n	8005682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d13d      	bne.n	80056fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569a:	d111      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d004      	beq.n	80056b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ae:	d107      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	d10f      	bne.n	80056ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e017      	b.n	800572e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3b01      	subs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d19b      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000000 	.word	0x20000000

0800573c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005750:	d111      	bne.n	8005776 <SPI_EndRxTransaction+0x3a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d004      	beq.n	8005766 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d107      	bne.n	8005776 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d12a      	bne.n	80057d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005788:	d012      	beq.n	80057b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff49 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e026      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2101      	movs	r1, #1
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ff36 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01a      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e013      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	2101      	movs	r1, #1
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff ff23 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e000      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <SPI_EndRxTxTransaction+0x7c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <SPI_EndRxTxTransaction+0x80>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	0d5b      	lsrs	r3, r3, #21
 8005820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005824:	fb02 f303 	mul.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d112      	bne.n	800585a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fef4 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e00f      	b.n	800587a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3b01      	subs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d0f2      	beq.n	800585a <SPI_EndRxTxTransaction+0x52>
 8005874:	e000      	b.n	8005878 <SPI_EndRxTxTransaction+0x70>
        break;
 8005876:	bf00      	nop
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000000 	.word	0x20000000
 8005888:	165e9f81 	.word	0x165e9f81

0800588c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e041      	b.n	8005922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc f99a 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f000 f8f4 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_TIM_ConfigClockSource+0x1c>
 8005942:	2302      	movs	r3, #2
 8005944:	e0b4      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x186>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005964:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	d03e      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0xd4>
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005984:	f200 8087 	bhi.w	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	f000 8086 	beq.w	8005a9c <HAL_TIM_ConfigClockSource+0x172>
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d87f      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 8005996:	2b70      	cmp	r3, #112	; 0x70
 8005998:	d01a      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0xa6>
 800599a:	2b70      	cmp	r3, #112	; 0x70
 800599c:	d87b      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 800599e:	2b60      	cmp	r3, #96	; 0x60
 80059a0:	d050      	beq.n	8005a44 <HAL_TIM_ConfigClockSource+0x11a>
 80059a2:	2b60      	cmp	r3, #96	; 0x60
 80059a4:	d877      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 80059a6:	2b50      	cmp	r3, #80	; 0x50
 80059a8:	d03c      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xfa>
 80059aa:	2b50      	cmp	r3, #80	; 0x50
 80059ac:	d873      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d058      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0x13a>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d86f      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 80059b6:	2b30      	cmp	r3, #48	; 0x30
 80059b8:	d064      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x15a>
 80059ba:	2b30      	cmp	r3, #48	; 0x30
 80059bc:	d86b      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d060      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x15a>
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d867      	bhi.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d05c      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x15a>
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d05a      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x15a>
 80059ce:	e062      	b.n	8005a96 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f000 f984 	bl	8005cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
      break;
 80059fc:	e04f      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6899      	ldr	r1, [r3, #8]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f000 f96d 	bl	8005cec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e03c      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	461a      	mov	r2, r3
 8005a32:	f000 f8e1 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2150      	movs	r1, #80	; 0x50
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f93a 	bl	8005cb6 <TIM_ITRx_SetConfig>
      break;
 8005a42:	e02c      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	461a      	mov	r2, r3
 8005a52:	f000 f900 	bl	8005c56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2160      	movs	r1, #96	; 0x60
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f92a 	bl	8005cb6 <TIM_ITRx_SetConfig>
      break;
 8005a62:	e01c      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	461a      	mov	r2, r3
 8005a72:	f000 f8c1 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2140      	movs	r1, #64	; 0x40
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f91a 	bl	8005cb6 <TIM_ITRx_SetConfig>
      break;
 8005a82:	e00c      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f000 f911 	bl	8005cb6 <TIM_ITRx_SetConfig>
      break;
 8005a94:	e003      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      break;
 8005a9a:	e000      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	d00f      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3a      	ldr	r2, [pc, #232]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d108      	bne.n	8005b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d02b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b18:	d027      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d023      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01f      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d017      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <TIM_Base_SetConfig+0x128>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <TIM_Base_SetConfig+0x130>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a25      	ldr	r2, [pc, #148]	; (8005bec <TIM_Base_SetConfig+0x134>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <TIM_Base_SetConfig+0x138>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <TIM_Base_SetConfig+0x13c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800
 8005bec:	40001800 	.word	0x40001800
 8005bf0:	40001c00 	.word	0x40001c00
 8005bf4:	40002000 	.word	0x40002000

08005bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0201 	bic.w	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 030a 	bic.w	r3, r3, #10
 8005c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0210 	bic.w	r2, r3, #16
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f043 0307 	orr.w	r3, r3, #7
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	609a      	str	r2, [r3, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e05a      	b.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d01d      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10c      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40010400 	.word	0x40010400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40001800 	.word	0x40001800

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03f      	b.n	8005eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fb fef0 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fe81 	bl	8006b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b08a      	sub	sp, #40	; 0x28
 8005ec2:	af02      	add	r7, sp, #8
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d17c      	bne.n	8005fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_UART_Transmit+0x2c>
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e075      	b.n	8005fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_UART_Transmit+0x3e>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e06e      	b.n	8005fda <HAL_UART_Transmit+0x11c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2221      	movs	r2, #33	; 0x21
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f12:	f7fc f897 	bl	8002044 <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	88fa      	ldrh	r2, [r7, #6]
 8005f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d108      	bne.n	8005f40 <HAL_UART_Transmit+0x82>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e003      	b.n	8005f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f50:	e02a      	b.n	8005fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fbc1 	bl	80066e4 <UART_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e036      	b.n	8005fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	3302      	adds	r3, #2
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e007      	b.n	8005f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1cf      	bne.n	8005f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2140      	movs	r1, #64	; 0x40
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fb91 	bl	80066e4 <UART_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e006      	b.n	8005fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e000      	b.n	8005fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fd8:	2302      	movs	r3, #2
  }
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b08a      	sub	sp, #40	; 0x28
 8005fe6:	af02      	add	r7, sp, #8
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	f040 808c 	bne.w	800611c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_UART_Receive+0x2e>
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e084      	b.n	800611e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UART_Receive+0x40>
 800601e:	2302      	movs	r3, #2
 8006020:	e07d      	b.n	800611e <HAL_UART_Receive+0x13c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2222      	movs	r2, #34	; 0x22
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603e:	f7fc f801 	bl	8002044 <HAL_GetTick>
 8006042:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d108      	bne.n	800606c <HAL_UART_Receive+0x8a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e003      	b.n	8006074 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800607c:	e043      	b.n	8006106 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	2120      	movs	r1, #32
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fb2b 	bl	80066e4 <UART_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e042      	b.n	800611e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10c      	bne.n	80060b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3302      	adds	r3, #2
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e01f      	b.n	80060f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c0:	d007      	beq.n	80060d2 <HAL_UART_Receive+0xf0>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_UART_Receive+0xfe>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e008      	b.n	80060f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	3301      	adds	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1b6      	bne.n	800607e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d11d      	bne.n	800617c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Receive_IT+0x26>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e016      	b.n	800617e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_UART_Receive_IT+0x38>
 800615a:	2302      	movs	r3, #2
 800615c:	e00f      	b.n	800617e <HAL_UART_Receive_IT+0x58>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	461a      	mov	r2, r3
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fb24 	bl	80067c0 <UART_Start_Receive_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	e000      	b.n	800617e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b0ba      	sub	sp, #232	; 0xe8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_UART_IRQHandler+0x66>
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fc07 	bl	80069fa <UART_Receive_IT>
      return;
 80061ec:	e256      	b.n	800669c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80de 	beq.w	80063b4 <HAL_UART_IRQHandler+0x22c>
 80061f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80d1 	beq.w	80063b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_UART_IRQHandler+0xae>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <HAL_UART_IRQHandler+0xd2>
 8006242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f043 0202 	orr.w	r2, r3, #2
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HAL_UART_IRQHandler+0xf6>
 8006266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d011      	beq.n	80062ae <HAL_UART_IRQHandler+0x126>
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0208 	orr.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81ed 	beq.w	8006692 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_UART_IRQHandler+0x14e>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb92 	bl	80069fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <HAL_UART_IRQHandler+0x17a>
 80062fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04f      	beq.n	80063a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa9a 	bl	800683c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d141      	bne.n	800639a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800632c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800634e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800635a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1d9      	bne.n	8006316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	2b00      	cmp	r3, #0
 8006368:	d013      	beq.n	8006392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	4a7d      	ldr	r2, [pc, #500]	; (8006564 <HAL_UART_IRQHandler+0x3dc>)
 8006370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	4618      	mov	r0, r3
 8006378:	f7fc f831 	bl	80023de <HAL_DMA_Abort_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e00e      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f990 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	e00a      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f98c 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e006      	b.n	80063b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f988 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063ae:	e170      	b.n	8006692 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	bf00      	nop
    return;
 80063b2:	e16e      	b.n	8006692 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 814a 	bne.w	8006652 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8143 	beq.w	8006652 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 813c 	beq.w	8006652 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	f040 80b4 	bne.w	8006568 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800640c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8140 	beq.w	8006696 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641e:	429a      	cmp	r2, r3
 8006420:	f080 8139 	bcs.w	8006696 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800642a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006436:	f000 8088 	beq.w	800654a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800647e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1d9      	bne.n	800643a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3314      	adds	r3, #20
 80064a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e1      	bne.n	8006486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800652c:	65ba      	str	r2, [r7, #88]	; 0x58
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800653a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e3      	bne.n	8006508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	4618      	mov	r0, r3
 8006546:	f7fb feda 	bl	80022fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006552:	b29b      	uxth	r3, r3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f8b6 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006560:	e099      	b.n	8006696 <HAL_UART_IRQHandler+0x50e>
 8006562:	bf00      	nop
 8006564:	08006903 	.word	0x08006903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 808b 	beq.w	800669a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8086 	beq.w	800669a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065b2:	647a      	str	r2, [r7, #68]	; 0x44
 80065b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	623b      	str	r3, [r7, #32]
   return(result);
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065ea:	633a      	str	r2, [r7, #48]	; 0x30
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e3      	bne.n	80065c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60fb      	str	r3, [r7, #12]
   return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006630:	61fa      	str	r2, [r7, #28]
 8006632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	617b      	str	r3, [r7, #20]
   return(result);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e3      	bne.n	800660c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f83e 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006650:	e023      	b.n	800669a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <HAL_UART_IRQHandler+0x4ea>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f95d 	bl	800692a <UART_Transmit_IT>
    return;
 8006670:	e014      	b.n	800669c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <HAL_UART_IRQHandler+0x514>
 800667e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f99d 	bl	80069ca <UART_EndTransmit_IT>
    return;
 8006690:	e004      	b.n	800669c <HAL_UART_IRQHandler+0x514>
    return;
 8006692:	bf00      	nop
 8006694:	e002      	b.n	800669c <HAL_UART_IRQHandler+0x514>
      return;
 8006696:	bf00      	nop
 8006698:	e000      	b.n	800669c <HAL_UART_IRQHandler+0x514>
      return;
 800669a:	bf00      	nop
  }
}
 800669c:	37e8      	adds	r7, #232	; 0xe8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop

080066a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b090      	sub	sp, #64	; 0x40
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f4:	e050      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fc:	d04c      	beq.n	8006798 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <UART_WaitOnFlagUntilTimeout+0x30>
 8006704:	f7fb fc9e 	bl	8002044 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006710:	429a      	cmp	r2, r3
 8006712:	d241      	bcs.n	8006798 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006734:	637a      	str	r2, [r7, #52]	; 0x34
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800673a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	613b      	str	r3, [r7, #16]
   return(result);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006768:	623a      	str	r2, [r7, #32]
 800676a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	61bb      	str	r3, [r7, #24]
   return(result);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e00f      	b.n	80067b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d09f      	beq.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3740      	adds	r7, #64	; 0x40
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2222      	movs	r2, #34	; 0x22
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0220 	orr.w	r2, r2, #32
 800682c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b095      	sub	sp, #84	; 0x54
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006864:	643a      	str	r2, [r7, #64]	; 0x40
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800686a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3314      	adds	r3, #20
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d119      	bne.n	80068e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 0310 	bic.w	r3, r3, #16
 80068ca:	647b      	str	r3, [r7, #68]	; 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d4:	61ba      	str	r2, [r7, #24]
 80068d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	613b      	str	r3, [r7, #16]
   return(result);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068f6:	bf00      	nop
 80068f8:	3754      	adds	r7, #84	; 0x54
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff fecb 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b21      	cmp	r3, #33	; 0x21
 800693c:	d13e      	bne.n	80069bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006946:	d114      	bne.n	8006972 <UART_Transmit_IT+0x48>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d110      	bne.n	8006972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	621a      	str	r2, [r3, #32]
 8006970:	e008      	b.n	8006984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6211      	str	r1, [r2, #32]
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4619      	mov	r1, r3
 8006992:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10f      	bne.n	80069b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e000      	b.n	80069be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069bc:	2302      	movs	r3, #2
  }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fe5a 	bl	80066a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b08c      	sub	sp, #48	; 0x30
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b22      	cmp	r3, #34	; 0x22
 8006a0c:	f040 80ab 	bne.w	8006b66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a18:	d117      	bne.n	8006a4a <UART_Receive_IT+0x50>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d113      	bne.n	8006a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
 8006a48:	e026      	b.n	8006a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d007      	beq.n	8006a6e <UART_Receive_IT+0x74>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <UART_Receive_IT+0x82>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e008      	b.n	8006a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d15a      	bne.n	8006b62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0220 	bic.w	r2, r2, #32
 8006aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d135      	bne.n	8006b58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	330c      	adds	r3, #12
 8006af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	613b      	str	r3, [r7, #16]
   return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f023 0310 	bic.w	r3, r3, #16
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	623a      	str	r2, [r7, #32]
 8006b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	69f9      	ldr	r1, [r7, #28]
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d10a      	bne.n	8006b4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff fdbb 	bl	80066cc <HAL_UARTEx_RxEventCallback>
 8006b56:	e002      	b.n	8006b5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fa f9f1 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e002      	b.n	8006b68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e000      	b.n	8006b68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b66:	2302      	movs	r3, #2
  }
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b74:	b0c0      	sub	sp, #256	; 0x100
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	68d9      	ldr	r1, [r3, #12]
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	ea40 0301 	orr.w	r3, r0, r1
 8006b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bc8:	f021 010c 	bic.w	r1, r1, #12
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bea:	6999      	ldr	r1, [r3, #24]
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	ea40 0301 	orr.w	r3, r0, r1
 8006bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b8f      	ldr	r3, [pc, #572]	; (8006e3c <UART_SetConfig+0x2cc>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d005      	beq.n	8006c10 <UART_SetConfig+0xa0>
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b8d      	ldr	r3, [pc, #564]	; (8006e40 <UART_SetConfig+0x2d0>)
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d104      	bne.n	8006c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c10:	f7fe f84c 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 8006c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c18:	e003      	b.n	8006c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c1a:	f7fe f833 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c2c:	f040 810c 	bne.w	8006e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	1891      	adds	r1, r2, r2
 8006c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c4a:	415b      	adcs	r3, r3
 8006c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c52:	4621      	mov	r1, r4
 8006c54:	eb12 0801 	adds.w	r8, r2, r1
 8006c58:	4629      	mov	r1, r5
 8006c5a:	eb43 0901 	adc.w	r9, r3, r1
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c72:	4690      	mov	r8, r2
 8006c74:	4699      	mov	r9, r3
 8006c76:	4623      	mov	r3, r4
 8006c78:	eb18 0303 	adds.w	r3, r8, r3
 8006c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c80:	462b      	mov	r3, r5
 8006c82:	eb49 0303 	adc.w	r3, r9, r3
 8006c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	18db      	adds	r3, r3, r3
 8006ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	eb42 0303 	adc.w	r3, r2, r3
 8006caa:	657b      	str	r3, [r7, #84]	; 0x54
 8006cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cb4:	f7f9 faec 	bl	8000290 <__aeabi_uldivmod>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4b61      	ldr	r3, [pc, #388]	; (8006e44 <UART_SetConfig+0x2d4>)
 8006cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	011c      	lsls	r4, r3, #4
 8006cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cd8:	4642      	mov	r2, r8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	1891      	adds	r1, r2, r2
 8006cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ce0:	415b      	adcs	r3, r3
 8006ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ce8:	4641      	mov	r1, r8
 8006cea:	eb12 0a01 	adds.w	sl, r2, r1
 8006cee:	4649      	mov	r1, r9
 8006cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d08:	4692      	mov	sl, r2
 8006d0a:	469b      	mov	fp, r3
 8006d0c:	4643      	mov	r3, r8
 8006d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d16:	464b      	mov	r3, r9
 8006d18:	eb4b 0303 	adc.w	r3, fp, r3
 8006d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d34:	460b      	mov	r3, r1
 8006d36:	18db      	adds	r3, r3, r3
 8006d38:	643b      	str	r3, [r7, #64]	; 0x40
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	eb42 0303 	adc.w	r3, r2, r3
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
 8006d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d4a:	f7f9 faa1 	bl	8000290 <__aeabi_uldivmod>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <UART_SetConfig+0x2d4>)
 8006d56:	fba3 2301 	umull	r2, r3, r3, r1
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	2264      	movs	r2, #100	; 0x64
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	1acb      	subs	r3, r1, r3
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <UART_SetConfig+0x2d4>)
 8006d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d78:	441c      	add	r4, r3
 8006d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	1891      	adds	r1, r2, r2
 8006d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d94:	415b      	adcs	r3, r3
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	1851      	adds	r1, r2, r1
 8006da0:	6339      	str	r1, [r7, #48]	; 0x30
 8006da2:	4649      	mov	r1, r9
 8006da4:	414b      	adcs	r3, r1
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006db4:	4659      	mov	r1, fp
 8006db6:	00cb      	lsls	r3, r1, #3
 8006db8:	4651      	mov	r1, sl
 8006dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	00ca      	lsls	r2, r1, #3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4642      	mov	r2, r8
 8006dca:	189b      	adds	r3, r3, r2
 8006dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	460a      	mov	r2, r1
 8006dd4:	eb42 0303 	adc.w	r3, r2, r3
 8006dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006df0:	460b      	mov	r3, r1
 8006df2:	18db      	adds	r3, r3, r3
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df6:	4613      	mov	r3, r2
 8006df8:	eb42 0303 	adc.w	r3, r2, r3
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e06:	f7f9 fa43 	bl	8000290 <__aeabi_uldivmod>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <UART_SetConfig+0x2d4>)
 8006e10:	fba3 1302 	umull	r1, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	2164      	movs	r1, #100	; 0x64
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	3332      	adds	r3, #50	; 0x32
 8006e22:	4a08      	ldr	r2, [pc, #32]	; (8006e44 <UART_SetConfig+0x2d4>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	f003 0207 	and.w	r2, r3, #7
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4422      	add	r2, r4
 8006e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e38:	e105      	b.n	8007046 <UART_SetConfig+0x4d6>
 8006e3a:	bf00      	nop
 8006e3c:	40011000 	.word	0x40011000
 8006e40:	40011400 	.word	0x40011400
 8006e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e5a:	4642      	mov	r2, r8
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	1891      	adds	r1, r2, r2
 8006e60:	6239      	str	r1, [r7, #32]
 8006e62:	415b      	adcs	r3, r3
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
 8006e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	1854      	adds	r4, r2, r1
 8006e6e:	4649      	mov	r1, r9
 8006e70:	eb43 0501 	adc.w	r5, r3, r1
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	00eb      	lsls	r3, r5, #3
 8006e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e82:	00e2      	lsls	r2, r4, #3
 8006e84:	4614      	mov	r4, r2
 8006e86:	461d      	mov	r5, r3
 8006e88:	4643      	mov	r3, r8
 8006e8a:	18e3      	adds	r3, r4, r3
 8006e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e90:	464b      	mov	r3, r9
 8006e92:	eb45 0303 	adc.w	r3, r5, r3
 8006e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	008b      	lsls	r3, r1, #2
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	008a      	lsls	r2, r1, #2
 8006ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ec8:	f7f9 f9e2 	bl	8000290 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4b60      	ldr	r3, [pc, #384]	; (8007054 <UART_SetConfig+0x4e4>)
 8006ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	011c      	lsls	r4, r3, #4
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	1891      	adds	r1, r2, r2
 8006ef2:	61b9      	str	r1, [r7, #24]
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006efc:	4641      	mov	r1, r8
 8006efe:	1851      	adds	r1, r2, r1
 8006f00:	6139      	str	r1, [r7, #16]
 8006f02:	4649      	mov	r1, r9
 8006f04:	414b      	adcs	r3, r1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f14:	4659      	mov	r1, fp
 8006f16:	00cb      	lsls	r3, r1, #3
 8006f18:	4651      	mov	r1, sl
 8006f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f1e:	4651      	mov	r1, sl
 8006f20:	00ca      	lsls	r2, r1, #3
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	4642      	mov	r2, r8
 8006f2a:	189b      	adds	r3, r3, r2
 8006f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f30:	464b      	mov	r3, r9
 8006f32:	460a      	mov	r2, r1
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f54:	4649      	mov	r1, r9
 8006f56:	008b      	lsls	r3, r1, #2
 8006f58:	4641      	mov	r1, r8
 8006f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f5e:	4641      	mov	r1, r8
 8006f60:	008a      	lsls	r2, r1, #2
 8006f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f66:	f7f9 f993 	bl	8000290 <__aeabi_uldivmod>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4b39      	ldr	r3, [pc, #228]	; (8007054 <UART_SetConfig+0x4e4>)
 8006f70:	fba3 1302 	umull	r1, r3, r3, r2
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	2164      	movs	r1, #100	; 0x64
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	3332      	adds	r3, #50	; 0x32
 8006f82:	4a34      	ldr	r2, [pc, #208]	; (8007054 <UART_SetConfig+0x4e4>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f8e:	441c      	add	r4, r3
 8006f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f94:	2200      	movs	r2, #0
 8006f96:	673b      	str	r3, [r7, #112]	; 0x70
 8006f98:	677a      	str	r2, [r7, #116]	; 0x74
 8006f9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f9e:	4642      	mov	r2, r8
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	1891      	adds	r1, r2, r2
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	415b      	adcs	r3, r3
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fae:	4641      	mov	r1, r8
 8006fb0:	1851      	adds	r1, r2, r1
 8006fb2:	6039      	str	r1, [r7, #0]
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	414b      	adcs	r3, r1
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	00cb      	lsls	r3, r1, #3
 8006fca:	4651      	mov	r1, sl
 8006fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	00ca      	lsls	r2, r1, #3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4642      	mov	r2, r8
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	eb42 0303 	adc.w	r3, r2, r3
 8006fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ff4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007002:	4649      	mov	r1, r9
 8007004:	008b      	lsls	r3, r1, #2
 8007006:	4641      	mov	r1, r8
 8007008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800700c:	4641      	mov	r1, r8
 800700e:	008a      	lsls	r2, r1, #2
 8007010:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007014:	f7f9 f93c 	bl	8000290 <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <UART_SetConfig+0x4e4>)
 800701e:	fba3 1302 	umull	r1, r3, r3, r2
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	2164      	movs	r1, #100	; 0x64
 8007026:	fb01 f303 	mul.w	r3, r1, r3
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	3332      	adds	r3, #50	; 0x32
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <UART_SetConfig+0x4e4>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4422      	add	r2, r4
 8007044:	609a      	str	r2, [r3, #8]
}
 8007046:	bf00      	nop
 8007048:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800704c:	46bd      	mov	sp, r7
 800704e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007052:	bf00      	nop
 8007054:	51eb851f 	.word	0x51eb851f

08007058 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d123      	bne.n	80070b2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	6851      	ldr	r1, [r2, #4]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	6892      	ldr	r2, [r2, #8]
 800707e:	4311      	orrs	r1, r2
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	68d2      	ldr	r2, [r2, #12]
 8007084:	4311      	orrs	r1, r2
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	6912      	ldr	r2, [r2, #16]
 800708a:	4311      	orrs	r1, r2
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	6952      	ldr	r2, [r2, #20]
 8007090:	4311      	orrs	r1, r2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	6992      	ldr	r2, [r2, #24]
 8007096:	4311      	orrs	r1, r2
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	69d2      	ldr	r2, [r2, #28]
 800709c:	4311      	orrs	r1, r2
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	6a12      	ldr	r2, [r2, #32]
 80070a2:	4311      	orrs	r1, r2
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070a8:	430a      	orrs	r2, r1
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e028      	b.n	8007104 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	69d9      	ldr	r1, [r3, #28]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4319      	orrs	r1, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	430b      	orrs	r3, r1
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80070d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	6851      	ldr	r1, [r2, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	6892      	ldr	r2, [r2, #8]
 80070e4:	4311      	orrs	r1, r2
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	68d2      	ldr	r2, [r2, #12]
 80070ea:	4311      	orrs	r1, r2
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	6912      	ldr	r2, [r2, #16]
 80070f0:	4311      	orrs	r1, r2
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	6952      	ldr	r2, [r2, #20]
 80070f6:	4311      	orrs	r1, r2
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	6992      	ldr	r2, [r2, #24]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d128      	bne.n	8007176 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1e59      	subs	r1, r3, #1
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	4319      	orrs	r1, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	3b01      	subs	r3, #1
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	4319      	orrs	r1, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	4319      	orrs	r1, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	3b01      	subs	r3, #1
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	4319      	orrs	r1, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	3b01      	subs	r3, #1
 8007160:	051b      	lsls	r3, r3, #20
 8007162:	4319      	orrs	r1, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	3b01      	subs	r3, #1
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	430b      	orrs	r3, r1
 800716e:	431a      	orrs	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	e02f      	b.n	80071d6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800717e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	68d2      	ldr	r2, [r2, #12]
 8007186:	3a01      	subs	r2, #1
 8007188:	0311      	lsls	r1, r2, #12
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	6952      	ldr	r2, [r2, #20]
 800718e:	3a01      	subs	r2, #1
 8007190:	0512      	lsls	r2, r2, #20
 8007192:	430a      	orrs	r2, r1
 8007194:	431a      	orrs	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1e59      	subs	r1, r3, #1
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4319      	orrs	r1, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	4319      	orrs	r1, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	041b      	lsls	r3, r3, #16
 80071c4:	4319      	orrs	r1, r3
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	061b      	lsls	r3, r3, #24
 80071ce:	430b      	orrs	r3, r1
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071e4:	b084      	sub	sp, #16
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	f107 001c 	add.w	r0, r7, #28
 80071f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d122      	bne.n	8007242 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d105      	bne.n	8007236 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9c0 	bl	80075bc <USB_CoreReset>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
 8007240:	e01a      	b.n	8007278 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9b4 	bl	80075bc <USB_CoreReset>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	639a      	str	r2, [r3, #56]	; 0x38
 800726a:	e005      	b.n	8007278 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10b      	bne.n	8007296 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f043 0206 	orr.w	r2, r3, #6
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f043 0220 	orr.w	r2, r3, #32
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072a2:	b004      	add	sp, #16
 80072a4:	4770      	bx	lr

080072a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f043 0201 	orr.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 0201 	bic.w	r2, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d115      	bne.n	8007338 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007318:	2001      	movs	r0, #1
 800731a:	f7fa fe9f 	bl	800205c <HAL_Delay>
      ms++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f93a 	bl	800759e <USB_GetMode>
 800732a:	4603      	mov	r3, r0
 800732c:	2b01      	cmp	r3, #1
 800732e:	d01e      	beq.n	800736e <USB_SetCurrentMode+0x84>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b31      	cmp	r3, #49	; 0x31
 8007334:	d9f0      	bls.n	8007318 <USB_SetCurrentMode+0x2e>
 8007336:	e01a      	b.n	800736e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d115      	bne.n	800736a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800734a:	2001      	movs	r0, #1
 800734c:	f7fa fe86 	bl	800205c <HAL_Delay>
      ms++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f921 	bl	800759e <USB_GetMode>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <USB_SetCurrentMode+0x84>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b31      	cmp	r3, #49	; 0x31
 8007366:	d9f0      	bls.n	800734a <USB_SetCurrentMode+0x60>
 8007368:	e001      	b.n	800736e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e005      	b.n	800737a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b32      	cmp	r3, #50	; 0x32
 8007372:	d101      	bne.n	8007378 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3301      	adds	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <USB_FlushTxFifo+0x64>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e01b      	b.n	80073dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	daf2      	bge.n	8007392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	019b      	lsls	r3, r3, #6
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <USB_FlushTxFifo+0x64>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e006      	b.n	80073dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d0f0      	beq.n	80073bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	00030d40 	.word	0x00030d40

080073ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a11      	ldr	r2, [pc, #68]	; (8007448 <USB_FlushRxFifo+0x5c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e018      	b.n	800743c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	daf2      	bge.n	80073f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2210      	movs	r2, #16
 800741a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a08      	ldr	r2, [pc, #32]	; (8007448 <USB_FlushRxFifo+0x5c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e006      	b.n	800743c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b10      	cmp	r3, #16
 8007438:	d0f0      	beq.n	800741c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	00030d40 	.word	0x00030d40

0800744c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800744c:	b480      	push	{r7}
 800744e:	b089      	sub	sp, #36	; 0x24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4611      	mov	r1, r2
 8007458:	461a      	mov	r2, r3
 800745a:	460b      	mov	r3, r1
 800745c:	71fb      	strb	r3, [r7, #7]
 800745e:	4613      	mov	r3, r2
 8007460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800746a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d123      	bne.n	80074ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007472:	88bb      	ldrh	r3, [r7, #4]
 8007474:	3303      	adds	r3, #3
 8007476:	089b      	lsrs	r3, r3, #2
 8007478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800747a:	2300      	movs	r3, #0
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	e018      	b.n	80074b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	031a      	lsls	r2, r3, #12
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	4413      	add	r3, r2
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	461a      	mov	r2, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3301      	adds	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d3e2      	bcc.n	8007480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3724      	adds	r7, #36	; 0x24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b08b      	sub	sp, #44	; 0x2c
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	089b      	lsrs	r3, r3, #2
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	623b      	str	r3, [r7, #32]
 80074f2:	e014      	b.n	800751e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	3301      	adds	r3, #1
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	3301      	adds	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	3301      	adds	r3, #1
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	3301      	adds	r3, #1
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	3301      	adds	r3, #1
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	6a3a      	ldr	r2, [r7, #32]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	429a      	cmp	r2, r3
 8007524:	d3e6      	bcc.n	80074f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007526:	8bfb      	ldrh	r3, [r7, #30]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01e      	beq.n	800756a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	461a      	mov	r2, r3
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	b2da      	uxtb	r2, r3
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	701a      	strb	r2, [r3, #0]
      i++;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	3301      	adds	r3, #1
 8007556:	623b      	str	r3, [r7, #32]
      pDest++;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	3301      	adds	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800755e:	8bfb      	ldrh	r3, [r7, #30]
 8007560:	3b01      	subs	r3, #1
 8007562:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007564:	8bfb      	ldrh	r3, [r7, #30]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ea      	bne.n	8007540 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800756c:	4618      	mov	r0, r3
 800756e:	372c      	adds	r7, #44	; 0x2c
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4013      	ands	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0301 	and.w	r3, r3, #1
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <USB_CoreReset+0x64>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e01b      	b.n	8007612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	daf2      	bge.n	80075c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a09      	ldr	r2, [pc, #36]	; (8007620 <USB_CoreReset+0x64>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d901      	bls.n	8007604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e006      	b.n	8007612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b01      	cmp	r3, #1
 800760e:	d0f0      	beq.n	80075f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	00030d40 	.word	0x00030d40

08007624 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007624:	b084      	sub	sp, #16
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007644:	461a      	mov	r2, r3
 8007646:	2300      	movs	r3, #0
 8007648:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d018      	beq.n	80076ac <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10a      	bne.n	8007696 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800768e:	f043 0304 	orr.w	r3, r3, #4
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	e014      	b.n	80076c0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076a4:	f023 0304 	bic.w	r3, r3, #4
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	e009      	b.n	80076c0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076ba:	f023 0304 	bic.w	r3, r3, #4
 80076be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076c0:	2110      	movs	r1, #16
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fe5e 	bl	8007384 <USB_FlushTxFifo>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fe8a 	bl	80073ec <USB_FlushRxFifo>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	e015      	b.n	8007714 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	461a      	mov	r2, r3
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007708:	461a      	mov	r2, r3
 800770a:	2300      	movs	r3, #0
 800770c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	429a      	cmp	r2, r3
 800771a:	d3e5      	bcc.n	80076e8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007728:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a13      	ldr	r2, [pc, #76]	; (8007790 <USB_HostInit+0x16c>)
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a13      	ldr	r2, [pc, #76]	; (8007794 <USB_HostInit+0x170>)
 8007748:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800774c:	e009      	b.n	8007762 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2280      	movs	r2, #128	; 0x80
 8007752:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a10      	ldr	r2, [pc, #64]	; (8007798 <USB_HostInit+0x174>)
 8007758:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a0f      	ldr	r2, [pc, #60]	; (800779c <USB_HostInit+0x178>)
 800775e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f043 0210 	orr.w	r2, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <USB_HostInit+0x17c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800778c:	b004      	add	sp, #16
 800778e:	4770      	bx	lr
 8007790:	01000200 	.word	0x01000200
 8007794:	00e00300 	.word	0x00e00300
 8007798:	00600080 	.word	0x00600080
 800779c:	004000e0 	.word	0x004000e0
 80077a0:	a3200008 	.word	0xa3200008

080077a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077dc:	4313      	orrs	r3, r2
 80077de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d107      	bne.n	80077f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ec:	461a      	mov	r2, r3
 80077ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80077f2:	6053      	str	r3, [r2, #4]
 80077f4:	e009      	b.n	800780a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d106      	bne.n	800780a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007802:	461a      	mov	r2, r3
 8007804:	f241 7370 	movw	r3, #6000	; 0x1770
 8007808:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007838:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007846:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007848:	2064      	movs	r0, #100	; 0x64
 800784a:	f7fa fc07 	bl	800205c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800785a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800785c:	200a      	movs	r0, #10
 800785e:	f7fa fbfd 	bl	800205c <HAL_Delay>

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007890:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <USB_DriveVbus+0x44>
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d106      	bne.n	80078b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ba:	d109      	bne.n	80078d0 <USB_DriveVbus+0x64>
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	0c5b      	lsrs	r3, r3, #17
 80078fc:	f003 0303 	and.w	r3, r3, #3
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	b29b      	uxth	r3, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	461a      	mov	r2, r3
 800793e:	4603      	mov	r3, r0
 8007940:	70fb      	strb	r3, [r7, #3]
 8007942:	460b      	mov	r3, r1
 8007944:	70bb      	strb	r3, [r7, #2]
 8007946:	4613      	mov	r3, r2
 8007948:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4413      	add	r3, r2
 800795a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795e:	461a      	mov	r2, r3
 8007960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007964:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007966:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800796a:	2b03      	cmp	r3, #3
 800796c:	d87e      	bhi.n	8007a6c <USB_HC_Init+0x13c>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <USB_HC_Init+0x44>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	08007985 	.word	0x08007985
 8007978:	08007a2f 	.word	0x08007a2f
 800797c:	08007985 	.word	0x08007985
 8007980:	080079f1 	.word	0x080079f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007990:	461a      	mov	r2, r3
 8007992:	f240 439d 	movw	r3, #1181	; 0x49d
 8007996:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	da10      	bge.n	80079c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80079c0:	e057      	b.n	8007a72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d051      	beq.n	8007a72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079ec:	60d3      	str	r3, [r2, #12]
      break;
 80079ee:	e040      	b.n	8007a72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fc:	461a      	mov	r2, r3
 80079fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	da34      	bge.n	8007a76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a2c:	e023      	b.n	8007a76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f240 2325 	movw	r3, #549	; 0x225
 8007a40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	da17      	bge.n	8007a7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a6a:	e006      	b.n	8007a7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	77fb      	strb	r3, [r7, #31]
      break;
 8007a70:	e004      	b.n	8007a7c <USB_HC_Init+0x14c>
      break;
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <USB_HC_Init+0x14c>
      break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <USB_HC_Init+0x14c>
      break;
 8007a7a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a96:	f043 0302 	orr.w	r3, r3, #2
 8007a9a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	2101      	movs	r1, #1
 8007aac:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da03      	bge.n	8007ad6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e001      	b.n	8007ada <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff feff 	bl	80078de <USB_GetHostSpeed>
 8007ae0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d106      	bne.n	8007af8 <USB_HC_Init+0x1c8>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d003      	beq.n	8007af8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e001      	b.n	8007afc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007afc:	787b      	ldrb	r3, [r7, #1]
 8007afe:	059b      	lsls	r3, r3, #22
 8007b00:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b04:	78bb      	ldrb	r3, [r7, #2]
 8007b06:	02db      	lsls	r3, r3, #11
 8007b08:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b0c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b12:	049b      	lsls	r3, r3, #18
 8007b14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	0159      	lsls	r1, r3, #5
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b38:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d003      	beq.n	8007b4a <USB_HC_Init+0x21a>
 8007b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10f      	bne.n	8007b6a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	0151      	lsls	r1, r2, #5
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	440a      	add	r2, r1
 8007b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b68:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08c      	sub	sp, #48	; 0x30
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b90:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02d      	beq.n	8007bfa <USB_HC_StartXfer+0x86>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d129      	bne.n	8007bfa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d117      	bne.n	8007bdc <USB_HC_StartXfer+0x68>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	79db      	ldrb	r3, [r3, #7]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <USB_HC_StartXfer+0x48>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	79db      	ldrb	r3, [r3, #7]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d10f      	bne.n	8007bdc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <USB_HC_StartXfer+0x86>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d107      	bne.n	8007bfa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fa0f 	bl	8008014 <USB_DoPing>
      return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e0f8      	b.n	8007dec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	8912      	ldrh	r2, [r2, #8]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	8912      	ldrh	r2, [r2, #8]
 8007c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c1a:	8b7b      	ldrh	r3, [r7, #26]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d90b      	bls.n	8007c38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c20:	8b7b      	ldrh	r3, [r7, #26]
 8007c22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	8912      	ldrh	r2, [r2, #8]
 8007c2a:	fb03 f202 	mul.w	r2, r3, r2
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	611a      	str	r2, [r3, #16]
 8007c32:	e001      	b.n	8007c38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007c34:	2301      	movs	r3, #1
 8007c36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	78db      	ldrb	r3, [r3, #3]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	8912      	ldrh	r2, [r2, #8]
 8007c46:	fb03 f202 	mul.w	r2, r3, r2
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	611a      	str	r2, [r3, #16]
 8007c4e:	e003      	b.n	8007c58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	695a      	ldr	r2, [r3, #20]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	4b63      	ldr	r3, [pc, #396]	; (8007df4 <USB_HC_StartXfer+0x280>)
 8007c66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	7a9b      	ldrb	r3, [r3, #10]
 8007c6e:	075b      	lsls	r3, r3, #29
 8007c70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c74:	69f9      	ldr	r1, [r7, #28]
 8007c76:	0148      	lsls	r0, r1, #5
 8007c78:	6a39      	ldr	r1, [r7, #32]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	68d9      	ldr	r1, [r3, #12]
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	7e7b      	ldrb	r3, [r7, #25]
 8007ce6:	075b      	lsls	r3, r3, #29
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	0148      	lsls	r0, r1, #5
 8007cec:	6a39      	ldr	r1, [r7, #32]
 8007cee:	4401      	add	r1, r0
 8007cf0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	e003      	b.n	8007d2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e04e      	b.n	8007dec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	78db      	ldrb	r3, [r3, #3]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d149      	bne.n	8007dea <USB_HC_StartXfer+0x276>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d045      	beq.n	8007dea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	79db      	ldrb	r3, [r3, #7]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d830      	bhi.n	8007dc8 <USB_HC_StartXfer+0x254>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <USB_HC_StartXfer+0x1f8>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007da1 	.word	0x08007da1
 8007d74:	08007d7d 	.word	0x08007d7d
 8007d78:	08007da1 	.word	0x08007da1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	3303      	adds	r3, #3
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d86:	8afa      	ldrh	r2, [r7, #22]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d91c      	bls.n	8007dcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f043 0220 	orr.w	r2, r3, #32
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d9e:	e015      	b.n	8007dcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	3303      	adds	r3, #3
 8007da6:	089b      	lsrs	r3, r3, #2
 8007da8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007daa:	8afa      	ldrh	r2, [r7, #22]
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d90a      	bls.n	8007dd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dc6:	e003      	b.n	8007dd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007dc8:	bf00      	nop
 8007dca:	e002      	b.n	8007dd2 <USB_HC_StartXfer+0x25e>
        break;
 8007dcc:	bf00      	nop
 8007dce:	e000      	b.n	8007dd2 <USB_HC_StartXfer+0x25e>
        break;
 8007dd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	68d9      	ldr	r1, [r3, #12]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	785a      	ldrb	r2, [r3, #1]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2000      	movs	r0, #0
 8007de2:	9000      	str	r0, [sp, #0]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff fb31 	bl	800744c <USB_WritePacket>
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3728      	adds	r7, #40	; 0x28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	1ff80000 	.word	0x1ff80000

08007df8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	b29b      	uxth	r3, r3
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b089      	sub	sp, #36	; 0x24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	0c9b      	lsrs	r3, r3, #18
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	0fdb      	lsrs	r3, r3, #31
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d104      	bne.n	8007e74 <USB_HC_Halt+0x5a>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e0c8      	b.n	8008006 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <USB_HC_Halt+0x66>
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d163      	bne.n	8007f48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f040 80ab 	bne.w	8008004 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d133      	bne.n	8007f22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ef8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f06:	d81d      	bhi.n	8007f44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1e:	d0ec      	beq.n	8007efa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f20:	e070      	b.n	8008004 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f42:	e05f      	b.n	8008004 <USB_HC_Halt+0x1ea>
            break;
 8007f44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f46:	e05d      	b.n	8008004 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d133      	bne.n	8007fe0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fc4:	d81d      	bhi.n	8008002 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fdc:	d0ec      	beq.n	8007fb8 <USB_HC_Halt+0x19e>
 8007fde:	e011      	b.n	8008004 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	e000      	b.n	8008004 <USB_HC_Halt+0x1ea>
          break;
 8008002:	bf00      	nop
    }
  }

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3724      	adds	r7, #36	; 0x24
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008028:	2301      	movs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	04da      	lsls	r2, r3, #19
 8008030:	4b15      	ldr	r3, [pc, #84]	; (8008088 <USB_DoPing+0x74>)
 8008032:	4013      	ands	r3, r2
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	440a      	add	r2, r1
 800803c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008044:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800805c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008064:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	461a      	mov	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	1ff80000 	.word	0x1ff80000

0800808c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff f911 	bl	80072c8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080a6:	2110      	movs	r1, #16
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff f96b 	bl	8007384 <USB_FlushTxFifo>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff f997 	bl	80073ec <USB_FlushRxFifo>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080c8:	2300      	movs	r3, #0
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	e01f      	b.n	800810e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008102:	461a      	mov	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	3301      	adds	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	d9dc      	bls.n	80080ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	e034      	b.n	8008184 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008130:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008140:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	461a      	mov	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008160:	d80c      	bhi.n	800817c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	4413      	add	r3, r2
 800816a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008178:	d0ec      	beq.n	8008154 <USB_StopHost+0xc8>
 800817a:	e000      	b.n	800817e <USB_StopHost+0xf2>
        break;
 800817c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	3301      	adds	r3, #1
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b0f      	cmp	r3, #15
 8008188:	d9c7      	bls.n	800811a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008190:	461a      	mov	r2, r3
 8008192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008196:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff f880 	bl	80072a6 <USB_EnableGlobalInt>

  return ret;
 80081a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3720      	adds	r7, #32
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80081b4:	4904      	ldr	r1, [pc, #16]	; (80081c8 <MX_FATFS_Init+0x18>)
 80081b6:	4805      	ldr	r0, [pc, #20]	; (80081cc <MX_FATFS_Init+0x1c>)
 80081b8:	f003 f95e 	bl	800b478 <FATFS_LinkDriver>
 80081bc:	4603      	mov	r3, r0
 80081be:	461a      	mov	r2, r3
 80081c0:	4b03      	ldr	r3, [pc, #12]	; (80081d0 <MX_FATFS_Init+0x20>)
 80081c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081c4:	bf00      	nop
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000364 	.word	0x20000364
 80081cc:	0800d140 	.word	0x0800d140
 80081d0:	20000360 	.word	0x20000360

080081d4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	4619      	mov	r1, r3
 80081fe:	4808      	ldr	r0, [pc, #32]	; (8008220 <USBH_status+0x34>)
 8008200:	f000 fe32 	bl	8008e68 <USBH_MSC_UnitIsReady>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <USBH_status+0x24>
  {
    res = RES_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
 800820e:	e001      	b.n	8008214 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000374 	.word	0x20000374

08008224 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b094      	sub	sp, #80	; 0x50
 8008228:	af02      	add	r7, sp, #8
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800823a:	7bf9      	ldrb	r1, [r7, #15]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	4813      	ldr	r0, [pc, #76]	; (8008294 <USBH_read+0x70>)
 8008246:	f000 fe59 	bl	8008efc <USBH_MSC_Read>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <USBH_read+0x34>
  {
    res = RES_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008256:	e017      	b.n	8008288 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008258:	f107 0210 	add.w	r2, r7, #16
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4619      	mov	r1, r3
 8008260:	480c      	ldr	r0, [pc, #48]	; (8008294 <USBH_read+0x70>)
 8008262:	f000 fe27 	bl	8008eb4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008266:	7f7b      	ldrb	r3, [r7, #29]
 8008268:	2b3a      	cmp	r3, #58	; 0x3a
 800826a:	d005      	beq.n	8008278 <USBH_read+0x54>
 800826c:	2b3a      	cmp	r3, #58	; 0x3a
 800826e:	dc07      	bgt.n	8008280 <USBH_read+0x5c>
 8008270:	2b04      	cmp	r3, #4
 8008272:	d001      	beq.n	8008278 <USBH_read+0x54>
 8008274:	2b28      	cmp	r3, #40	; 0x28
 8008276:	d103      	bne.n	8008280 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008278:	2303      	movs	r3, #3
 800827a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800827e:	e003      	b.n	8008288 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008286:	bf00      	nop
    }
  }

  return res;
 8008288:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800828c:	4618      	mov	r0, r3
 800828e:	3748      	adds	r7, #72	; 0x48
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000374 	.word	0x20000374

08008298 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b094      	sub	sp, #80	; 0x50
 800829c:	af02      	add	r7, sp, #8
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80082ae:	7bf9      	ldrb	r1, [r7, #15]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4817      	ldr	r0, [pc, #92]	; (8008318 <USBH_write+0x80>)
 80082ba:	f000 fe88 	bl	8008fce <USBH_MSC_Write>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <USBH_write+0x34>
  {
    res = RES_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80082ca:	e01f      	b.n	800830c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80082cc:	f107 0210 	add.w	r2, r7, #16
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4810      	ldr	r0, [pc, #64]	; (8008318 <USBH_write+0x80>)
 80082d6:	f000 fded 	bl	8008eb4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80082da:	7f7b      	ldrb	r3, [r7, #29]
 80082dc:	2b3a      	cmp	r3, #58	; 0x3a
 80082de:	d00d      	beq.n	80082fc <USBH_write+0x64>
 80082e0:	2b3a      	cmp	r3, #58	; 0x3a
 80082e2:	dc0f      	bgt.n	8008304 <USBH_write+0x6c>
 80082e4:	2b28      	cmp	r3, #40	; 0x28
 80082e6:	d009      	beq.n	80082fc <USBH_write+0x64>
 80082e8:	2b28      	cmp	r3, #40	; 0x28
 80082ea:	dc0b      	bgt.n	8008304 <USBH_write+0x6c>
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d005      	beq.n	80082fc <USBH_write+0x64>
 80082f0:	2b27      	cmp	r3, #39	; 0x27
 80082f2:	d107      	bne.n	8008304 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80082f4:	2302      	movs	r3, #2
 80082f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80082fa:	e007      	b.n	800830c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80082fc:	2303      	movs	r3, #3
 80082fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008302:	e003      	b.n	800830c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800830a:	bf00      	nop
    }
  }

  return res;
 800830c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008310:	4618      	mov	r0, r3
 8008312:	3748      	adds	r7, #72	; 0x48
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000374 	.word	0x20000374

0800831c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b090      	sub	sp, #64	; 0x40
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	603a      	str	r2, [r7, #0]
 8008326:	71fb      	strb	r3, [r7, #7]
 8008328:	460b      	mov	r3, r1
 800832a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008332:	79bb      	ldrb	r3, [r7, #6]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d852      	bhi.n	80083de <USBH_ioctl+0xc2>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <USBH_ioctl+0x24>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008351 	.word	0x08008351
 8008344:	08008359 	.word	0x08008359
 8008348:	08008383 	.word	0x08008383
 800834c:	080083af 	.word	0x080083af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008356:	e045      	b.n	80083e4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	4619      	mov	r1, r3
 8008360:	4823      	ldr	r0, [pc, #140]	; (80083f0 <USBH_ioctl+0xd4>)
 8008362:	f000 fda7 	bl	8008eb4 <USBH_MSC_GetLUNInfo>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008378:	e034      	b.n	80083e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008380:	e030      	b.n	80083e4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008382:	f107 0208 	add.w	r2, r7, #8
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	4619      	mov	r1, r3
 800838a:	4819      	ldr	r0, [pc, #100]	; (80083f0 <USBH_ioctl+0xd4>)
 800838c:	f000 fd92 	bl	8008eb4 <USBH_MSC_GetLUNInfo>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008396:	8a3b      	ldrh	r3, [r7, #16]
 8008398:	461a      	mov	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083a4:	e01e      	b.n	80083e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083ac:	e01a      	b.n	80083e4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80083ae:	f107 0208 	add.w	r2, r7, #8
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	4619      	mov	r1, r3
 80083b6:	480e      	ldr	r0, [pc, #56]	; (80083f0 <USBH_ioctl+0xd4>)
 80083b8:	f000 fd7c 	bl	8008eb4 <USBH_MSC_GetLUNInfo>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80083c2:	8a3b      	ldrh	r3, [r7, #16]
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80083d4:	e006      	b.n	80083e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80083dc:	e002      	b.n	80083e4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80083de:	2304      	movs	r3, #4
 80083e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80083e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3740      	adds	r7, #64	; 0x40
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000374 	.word	0x20000374

080083f4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b089      	sub	sp, #36	; 0x24
 80083f8:	af04      	add	r7, sp, #16
 80083fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008402:	7919      	ldrb	r1, [r3, #4]
 8008404:	2350      	movs	r3, #80	; 0x50
 8008406:	2206      	movs	r2, #6
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fc6b 	bl	8009ce4 <USBH_FindInterface>
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	d002      	beq.n	800841e <USBH_MSC_InterfaceInit+0x2a>
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d901      	bls.n	8008422 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800841e:	2302      	movs	r3, #2
 8008420:	e106      	b.n	8008630 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fc40 	bl	8009cac <USBH_SelectInterface>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008436:	2302      	movs	r3, #2
 8008438:	e0fa      	b.n	8008630 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008440:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008444:	f003 fb94 	bl	800bb70 <malloc>
 8008448:	4603      	mov	r3, r0
 800844a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800845c:	2302      	movs	r3, #2
 800845e:	e0e7      	b.n	8008630 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008464:	2100      	movs	r1, #0
 8008466:	68b8      	ldr	r0, [r7, #8]
 8008468:	f003 fba0 	bl	800bbac <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	211a      	movs	r1, #26
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b25b      	sxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	da16      	bge.n	80084b2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	211a      	movs	r1, #26
 800848a:	fb01 f303 	mul.w	r3, r1, r3
 800848e:	4413      	add	r3, r2
 8008490:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	211a      	movs	r1, #26
 80084a0:	fb01 f303 	mul.w	r3, r1, r3
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084aa:	881a      	ldrh	r2, [r3, #0]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	815a      	strh	r2, [r3, #10]
 80084b0:	e015      	b.n	80084de <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	211a      	movs	r1, #26
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	4413      	add	r3, r2
 80084be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084c2:	781a      	ldrb	r2, [r3, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	211a      	movs	r1, #26
 80084ce:	fb01 f303 	mul.w	r3, r1, r3
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084d8:	881a      	ldrh	r2, [r3, #0]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	211a      	movs	r1, #26
 80084e4:	fb01 f303 	mul.w	r3, r1, r3
 80084e8:	4413      	add	r3, r2
 80084ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da16      	bge.n	8008524 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	211a      	movs	r1, #26
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	4413      	add	r3, r2
 8008502:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	211a      	movs	r1, #26
 8008512:	fb01 f303 	mul.w	r3, r1, r3
 8008516:	4413      	add	r3, r2
 8008518:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800851c:	881a      	ldrh	r2, [r3, #0]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	815a      	strh	r2, [r3, #10]
 8008522:	e015      	b.n	8008550 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	211a      	movs	r1, #26
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	4413      	add	r3, r2
 8008530:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	211a      	movs	r1, #26
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800854a:	881a      	ldrh	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2200      	movs	r2, #0
 800855a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	799b      	ldrb	r3, [r3, #6]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f002 fed6 	bl	800b31a <USBH_AllocPipe>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	79db      	ldrb	r3, [r3, #7]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f002 fecc 	bl	800b31a <USBH_AllocPipe>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fdc4 	bl	8009118 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	799b      	ldrb	r3, [r3, #6]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01e      	beq.n	80085d6 <USBH_MSC_InterfaceInit+0x1e2>
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	891b      	ldrh	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	7959      	ldrb	r1, [r3, #5]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	7998      	ldrb	r0, [r3, #6]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	8912      	ldrh	r2, [r2, #8]
 80085b8:	9202      	str	r2, [sp, #8]
 80085ba:	2202      	movs	r2, #2
 80085bc:	9201      	str	r2, [sp, #4]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4623      	mov	r3, r4
 80085c2:	4602      	mov	r2, r0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f002 fe79 	bl	800b2bc <USBH_OpenPipe>
 80085ca:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	79db      	ldrb	r3, [r3, #7]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d02c      	beq.n	800862e <USBH_MSC_InterfaceInit+0x23a>
 80085d4:	e001      	b.n	80085da <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e02a      	b.n	8008630 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	895b      	ldrh	r3, [r3, #10]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d025      	beq.n	800862e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	7919      	ldrb	r1, [r3, #4]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	79d8      	ldrb	r0, [r3, #7]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	8952      	ldrh	r2, [r2, #10]
 80085fa:	9202      	str	r2, [sp, #8]
 80085fc:	2202      	movs	r2, #2
 80085fe:	9201      	str	r2, [sp, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4623      	mov	r3, r4
 8008604:	4602      	mov	r2, r0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 fe58 	bl	800b2bc <USBH_OpenPipe>
 800860c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f003 f9c8 	bl	800b9ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	795b      	ldrb	r3, [r3, #5]
 8008620:	2200      	movs	r2, #0
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f003 f9c1 	bl	800b9ac <USBH_LL_SetToggle>

  return USBH_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800862e:	2303      	movs	r3, #3
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bd90      	pop	{r4, r7, pc}

08008638 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	795b      	ldrb	r3, [r3, #5]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	795b      	ldrb	r3, [r3, #5]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f002 fe4e 	bl	800b2fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	795b      	ldrb	r3, [r3, #5]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 fe79 	bl	800b35c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	791b      	ldrb	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00e      	beq.n	8008696 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	791b      	ldrb	r3, [r3, #4]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 fe3b 	bl	800b2fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f002 fe66 	bl	800b35c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00b      	beq.n	80086ba <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f003 fa68 	bl	800bb80 <free>
    phost->pActiveClass->pData = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086b6:	2200      	movs	r2, #0
 80086b8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086d6:	2301      	movs	r3, #1
 80086d8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	7b9b      	ldrb	r3, [r3, #14]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d041      	beq.n	8008766 <USBH_MSC_ClassRequest+0xa2>
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	dc4b      	bgt.n	800877e <USBH_MSC_ClassRequest+0xba>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <USBH_MSC_ClassRequest+0x2a>
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d147      	bne.n	800877e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fcf1 	bl	80090da <USBH_MSC_BOT_REQ_GetMaxLUN>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d104      	bne.n	800870c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d137      	bne.n	8008782 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d804      	bhi.n	8008724 <USBH_MSC_ClassRequest+0x60>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	3301      	adds	r3, #1
 8008720:	b2da      	uxtb	r2, r3
 8008722:	e000      	b.n	8008726 <USBH_MSC_ClassRequest+0x62>
 8008724:	2202      	movs	r2, #2
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800872a:	2300      	movs	r3, #0
 800872c:	73bb      	strb	r3, [r7, #14]
 800872e:	e014      	b.n	800875a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	2134      	movs	r1, #52	; 0x34
 8008736:	fb01 f303 	mul.w	r3, r1, r3
 800873a:	4413      	add	r3, r2
 800873c:	3392      	adds	r3, #146	; 0x92
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	2134      	movs	r1, #52	; 0x34
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	4413      	add	r3, r2
 800874e:	33c1      	adds	r3, #193	; 0xc1
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	3301      	adds	r3, #1
 8008758:	73bb      	strb	r3, [r7, #14]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	7bba      	ldrb	r2, [r7, #14]
 8008760:	429a      	cmp	r2, r3
 8008762:	d3e5      	bcc.n	8008730 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008764:	e00d      	b.n	8008782 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008766:	2100      	movs	r1, #0
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f002 f888 	bl	800a87e <USBH_ClrFeature>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d108      	bne.n	8008786 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	7bda      	ldrb	r2, [r3, #15]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800877c:	e003      	b.n	8008786 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800877e:	bf00      	nop
 8008780:	e002      	b.n	8008788 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008782:	bf00      	nop
 8008784:	e000      	b.n	8008788 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008786:	bf00      	nop
  }

  return status;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80087aa:	2301      	movs	r3, #1
 80087ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	7b1b      	ldrb	r3, [r3, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <USBH_MSC_Process+0x2e>
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	f000 8271 	beq.w	8008ca2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80087c0:	e272      	b.n	8008ca8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	429a      	cmp	r2, r3
 80087d0:	f080 824f 	bcs.w	8008c72 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087da:	4619      	mov	r1, r3
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	2334      	movs	r3, #52	; 0x34
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	4413      	add	r3, r2
 80087e6:	3391      	adds	r3, #145	; 0x91
 80087e8:	2201      	movs	r2, #1
 80087ea:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087f2:	4619      	mov	r1, r3
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	2334      	movs	r3, #52	; 0x34
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	4413      	add	r3, r2
 80087fe:	3390      	adds	r3, #144	; 0x90
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b08      	cmp	r3, #8
 8008804:	f200 8243 	bhi.w	8008c8e <USBH_MSC_Process+0x4fa>
 8008808:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <USBH_MSC_Process+0x7c>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008835 	.word	0x08008835
 8008814:	08008c8f 	.word	0x08008c8f
 8008818:	080088fd 	.word	0x080088fd
 800881c:	08008a81 	.word	0x08008a81
 8008820:	0800885b 	.word	0x0800885b
 8008824:	08008b4d 	.word	0x08008b4d
 8008828:	08008c8f 	.word	0x08008c8f
 800882c:	08008c8f 	.word	0x08008c8f
 8008830:	08008c61 	.word	0x08008c61
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800883a:	4619      	mov	r1, r3
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	2334      	movs	r3, #52	; 0x34
 8008840:	fb01 f303 	mul.w	r3, r1, r3
 8008844:	4413      	add	r3, r2
 8008846:	3390      	adds	r3, #144	; 0x90
 8008848:	2204      	movs	r2, #4
 800884a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008858:	e222      	b.n	8008ca0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008860:	b2d9      	uxtb	r1, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008868:	461a      	mov	r2, r3
 800886a:	2334      	movs	r3, #52	; 0x34
 800886c:	fb02 f303 	mul.w	r3, r2, r3
 8008870:	3398      	adds	r3, #152	; 0x98
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4413      	add	r3, r2
 8008876:	3307      	adds	r3, #7
 8008878:	461a      	mov	r2, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 ff6a 	bl	8009754 <USBH_MSC_SCSI_Inquiry>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008890:	4619      	mov	r1, r3
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	2334      	movs	r3, #52	; 0x34
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	4413      	add	r3, r2
 800889c:	3390      	adds	r3, #144	; 0x90
 800889e:	2202      	movs	r2, #2
 80088a0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d10c      	bne.n	80088c2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088ae:	4619      	mov	r1, r3
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	2334      	movs	r3, #52	; 0x34
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	4413      	add	r3, r2
 80088ba:	3390      	adds	r3, #144	; 0x90
 80088bc:	2205      	movs	r2, #5
 80088be:	701a      	strb	r2, [r3, #0]
            break;
 80088c0:	e1e7      	b.n	8008c92 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	f040 81e4 	bne.w	8008c92 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088d0:	4619      	mov	r1, r3
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	2334      	movs	r3, #52	; 0x34
 80088d6:	fb01 f303 	mul.w	r3, r1, r3
 80088da:	4413      	add	r3, r2
 80088dc:	3390      	adds	r3, #144	; 0x90
 80088de:	2201      	movs	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088e8:	4619      	mov	r1, r3
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	2334      	movs	r3, #52	; 0x34
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	3391      	adds	r3, #145	; 0x91
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]
            break;
 80088fa:	e1ca      	b.n	8008c92 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008902:	b2db      	uxtb	r3, r3
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fe66 	bl	80095d8 <USBH_MSC_SCSI_TestUnitReady>
 800890c:	4603      	mov	r3, r0
 800890e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d149      	bne.n	80089aa <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800891c:	4619      	mov	r1, r3
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	2334      	movs	r3, #52	; 0x34
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	3392      	adds	r3, #146	; 0x92
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008936:	4619      	mov	r1, r3
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	2334      	movs	r3, #52	; 0x34
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	4413      	add	r3, r2
 8008942:	33c1      	adds	r3, #193	; 0xc1
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	e00b      	b.n	8008962 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008950:	4619      	mov	r1, r3
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	2334      	movs	r3, #52	; 0x34
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	33c1      	adds	r3, #193	; 0xc1
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008968:	4619      	mov	r1, r3
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	2334      	movs	r3, #52	; 0x34
 800896e:	fb01 f303 	mul.w	r3, r1, r3
 8008972:	4413      	add	r3, r2
 8008974:	3390      	adds	r3, #144	; 0x90
 8008976:	2203      	movs	r2, #3
 8008978:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008980:	4619      	mov	r1, r3
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	2334      	movs	r3, #52	; 0x34
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	3391      	adds	r3, #145	; 0x91
 800898e:	2200      	movs	r2, #0
 8008990:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008998:	4619      	mov	r1, r3
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	2334      	movs	r3, #52	; 0x34
 800899e:	fb01 f303 	mul.w	r3, r1, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	3392      	adds	r3, #146	; 0x92
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d14a      	bne.n	8008a46 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089b6:	4619      	mov	r1, r3
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	2334      	movs	r3, #52	; 0x34
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	4413      	add	r3, r2
 80089c2:	3392      	adds	r3, #146	; 0x92
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d00c      	beq.n	80089e4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089d0:	4619      	mov	r1, r3
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	2334      	movs	r3, #52	; 0x34
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	33c1      	adds	r3, #193	; 0xc1
 80089de:	2201      	movs	r2, #1
 80089e0:	701a      	strb	r2, [r3, #0]
 80089e2:	e00b      	b.n	80089fc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ea:	4619      	mov	r1, r3
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	2334      	movs	r3, #52	; 0x34
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	33c1      	adds	r3, #193	; 0xc1
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a02:	4619      	mov	r1, r3
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	2334      	movs	r3, #52	; 0x34
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3390      	adds	r3, #144	; 0x90
 8008a10:	2205      	movs	r2, #5
 8008a12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	2334      	movs	r3, #52	; 0x34
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	3391      	adds	r3, #145	; 0x91
 8008a28:	2201      	movs	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a32:	4619      	mov	r1, r3
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	2334      	movs	r3, #52	; 0x34
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3392      	adds	r3, #146	; 0x92
 8008a40:	2202      	movs	r2, #2
 8008a42:	701a      	strb	r2, [r3, #0]
            break;
 8008a44:	e127      	b.n	8008c96 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	f040 8124 	bne.w	8008c96 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a54:	4619      	mov	r1, r3
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	2334      	movs	r3, #52	; 0x34
 8008a5a:	fb01 f303 	mul.w	r3, r1, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	3390      	adds	r3, #144	; 0x90
 8008a62:	2201      	movs	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	2334      	movs	r3, #52	; 0x34
 8008a72:	fb01 f303 	mul.w	r3, r1, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	3391      	adds	r3, #145	; 0x91
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	701a      	strb	r2, [r3, #0]
            break;
 8008a7e:	e10a      	b.n	8008c96 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a86:	b2d9      	uxtb	r1, r3
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2334      	movs	r3, #52	; 0x34
 8008a92:	fb02 f303 	mul.w	r3, r2, r3
 8008a96:	3390      	adds	r3, #144	; 0x90
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fddc 	bl	800965e <USBH_MSC_SCSI_ReadCapacity>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d120      	bne.n	8008af2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	2334      	movs	r3, #52	; 0x34
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	3390      	adds	r3, #144	; 0x90
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ace:	4619      	mov	r1, r3
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	2334      	movs	r3, #52	; 0x34
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	3391      	adds	r3, #145	; 0x91
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008af0:	e0d3      	b.n	8008c9a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d10c      	bne.n	8008b12 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008afe:	4619      	mov	r1, r3
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	2334      	movs	r3, #52	; 0x34
 8008b04:	fb01 f303 	mul.w	r3, r1, r3
 8008b08:	4413      	add	r3, r2
 8008b0a:	3390      	adds	r3, #144	; 0x90
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	701a      	strb	r2, [r3, #0]
            break;
 8008b10:	e0c3      	b.n	8008c9a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	f040 80c0 	bne.w	8008c9a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b20:	4619      	mov	r1, r3
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	2334      	movs	r3, #52	; 0x34
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3390      	adds	r3, #144	; 0x90
 8008b2e:	2201      	movs	r2, #1
 8008b30:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	2334      	movs	r3, #52	; 0x34
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3391      	adds	r3, #145	; 0x91
 8008b46:	2202      	movs	r2, #2
 8008b48:	701a      	strb	r2, [r3, #0]
            break;
 8008b4a:	e0a6      	b.n	8008c9a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b52:	b2d9      	uxtb	r1, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2334      	movs	r3, #52	; 0x34
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	3398      	adds	r3, #152	; 0x98
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	3304      	adds	r3, #4
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fe96 	bl	800989e <USBH_MSC_SCSI_RequestSense>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d145      	bne.n	8008c08 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b82:	4619      	mov	r1, r3
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	2334      	movs	r3, #52	; 0x34
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	339c      	adds	r3, #156	; 0x9c
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b06      	cmp	r3, #6
 8008b94:	d00c      	beq.n	8008bb0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	2334      	movs	r3, #52	; 0x34
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	339c      	adds	r3, #156	; 0x9c
 8008baa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d117      	bne.n	8008be0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d80c      	bhi.n	8008be0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bcc:	4619      	mov	r1, r3
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	2334      	movs	r3, #52	; 0x34
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3390      	adds	r3, #144	; 0x90
 8008bda:	2202      	movs	r2, #2
 8008bdc:	701a      	strb	r2, [r3, #0]
                  break;
 8008bde:	e05f      	b.n	8008ca0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008be6:	4619      	mov	r1, r3
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	2334      	movs	r3, #52	; 0x34
 8008bec:	fb01 f303 	mul.w	r3, r1, r3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3390      	adds	r3, #144	; 0x90
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bfe:	3301      	adds	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d10c      	bne.n	8008c28 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c14:	4619      	mov	r1, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	2334      	movs	r3, #52	; 0x34
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	3390      	adds	r3, #144	; 0x90
 8008c22:	2208      	movs	r2, #8
 8008c24:	701a      	strb	r2, [r3, #0]
            break;
 8008c26:	e03a      	b.n	8008c9e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d137      	bne.n	8008c9e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c34:	4619      	mov	r1, r3
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	2334      	movs	r3, #52	; 0x34
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	3390      	adds	r3, #144	; 0x90
 8008c42:	2201      	movs	r2, #1
 8008c44:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	2334      	movs	r3, #52	; 0x34
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	3391      	adds	r3, #145	; 0x91
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	701a      	strb	r2, [r3, #0]
            break;
 8008c5e:	e01e      	b.n	8008c9e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c66:	3301      	adds	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008c70:	e016      	b.n	8008ca0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c86:	2102      	movs	r1, #2
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
      break;
 8008c8c:	e00c      	b.n	8008ca8 <USBH_MSC_Process+0x514>
            break;
 8008c8e:	bf00      	nop
 8008c90:	e00a      	b.n	8008ca8 <USBH_MSC_Process+0x514>
            break;
 8008c92:	bf00      	nop
 8008c94:	e008      	b.n	8008ca8 <USBH_MSC_Process+0x514>
            break;
 8008c96:	bf00      	nop
 8008c98:	e006      	b.n	8008ca8 <USBH_MSC_Process+0x514>
            break;
 8008c9a:	bf00      	nop
 8008c9c:	e004      	b.n	8008ca8 <USBH_MSC_Process+0x514>
            break;
 8008c9e:	bf00      	nop
      break;
 8008ca0:	e002      	b.n	8008ca8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca6:	bf00      	nop
  }
  return error;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop

08008cb4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b088      	sub	sp, #32
 8008cce:	af02      	add	r7, sp, #8
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	2134      	movs	r1, #52	; 0x34
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	3390      	adds	r3, #144	; 0x90
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b07      	cmp	r3, #7
 8008cfa:	d03c      	beq.n	8008d76 <USBH_MSC_RdWrProcess+0xac>
 8008cfc:	2b07      	cmp	r3, #7
 8008cfe:	f300 80a7 	bgt.w	8008e50 <USBH_MSC_RdWrProcess+0x186>
 8008d02:	2b05      	cmp	r3, #5
 8008d04:	d06c      	beq.n	8008de0 <USBH_MSC_RdWrProcess+0x116>
 8008d06:	2b06      	cmp	r3, #6
 8008d08:	f040 80a2 	bne.w	8008e50 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008d0c:	78f9      	ldrb	r1, [r7, #3]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fea5 	bl	8009a66 <USBH_MSC_SCSI_Read>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	2134      	movs	r1, #52	; 0x34
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	3390      	adds	r3, #144	; 0x90
 8008d34:	2201      	movs	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d3c:	e08a      	b.n	8008e54 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d109      	bne.n	8008d58 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	2134      	movs	r1, #52	; 0x34
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3390      	adds	r3, #144	; 0x90
 8008d52:	2205      	movs	r2, #5
 8008d54:	701a      	strb	r2, [r3, #0]
      break;
 8008d56:	e07d      	b.n	8008e54 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d17a      	bne.n	8008e54 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	2134      	movs	r1, #52	; 0x34
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	3390      	adds	r3, #144	; 0x90
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008d70:	2302      	movs	r3, #2
 8008d72:	75fb      	strb	r3, [r7, #23]
      break;
 8008d74:	e06e      	b.n	8008e54 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008d76:	78f9      	ldrb	r1, [r7, #3]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fe05 	bl	8009990 <USBH_MSC_SCSI_Write>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	2134      	movs	r1, #52	; 0x34
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3390      	adds	r3, #144	; 0x90
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008da6:	e057      	b.n	8008e58 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d109      	bne.n	8008dc2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	2134      	movs	r1, #52	; 0x34
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	3390      	adds	r3, #144	; 0x90
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	701a      	strb	r2, [r3, #0]
      break;
 8008dc0:	e04a      	b.n	8008e58 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d147      	bne.n	8008e58 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	2134      	movs	r1, #52	; 0x34
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	3390      	adds	r3, #144	; 0x90
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dde:	e03b      	b.n	8008e58 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	2234      	movs	r2, #52	; 0x34
 8008de4:	fb02 f303 	mul.w	r3, r2, r3
 8008de8:	3398      	adds	r3, #152	; 0x98
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4413      	add	r3, r2
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fd52 	bl	800989e <USBH_MSC_SCSI_RequestSense>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d113      	bne.n	8008e2c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	2134      	movs	r1, #52	; 0x34
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	4413      	add	r3, r2
 8008e10:	3390      	adds	r3, #144	; 0x90
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	2134      	movs	r1, #52	; 0x34
 8008e1c:	fb01 f303 	mul.w	r3, r1, r3
 8008e20:	4413      	add	r3, r2
 8008e22:	3391      	adds	r3, #145	; 0x91
 8008e24:	2202      	movs	r2, #2
 8008e26:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d014      	beq.n	8008e5c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d111      	bne.n	8008e5c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	2134      	movs	r1, #52	; 0x34
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	4413      	add	r3, r2
 8008e44:	3390      	adds	r3, #144	; 0x90
 8008e46:	2208      	movs	r2, #8
 8008e48:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e4e:	e005      	b.n	8008e5c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008e50:	bf00      	nop
 8008e52:	e004      	b.n	8008e5e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e54:	bf00      	nop
 8008e56:	e002      	b.n	8008e5e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008e5c:	bf00      	nop

  }
  return error;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b0b      	cmp	r3, #11
 8008e86:	d10c      	bne.n	8008ea2 <USBH_MSC_UnitIsReady+0x3a>
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	2134      	movs	r1, #52	; 0x34
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	4413      	add	r3, r2
 8008e94:	3391      	adds	r3, #145	; 0x91
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d102      	bne.n	8008ea2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	e001      	b.n	8008ea6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b0b      	cmp	r3, #11
 8008ed4:	d10d      	bne.n	8008ef2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2234      	movs	r2, #52	; 0x34
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
 8008ede:	3390      	adds	r3, #144	; 0x90
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	2234      	movs	r2, #52	; 0x34
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f002 fe51 	bl	800bb90 <memcpy>
    return USBH_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e000      	b.n	8008ef4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008ef2:	2302      	movs	r3, #2
  }
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008f28:	2b0b      	cmp	r3, #11
 8008f2a:	d109      	bne.n	8008f40 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	2134      	movs	r1, #52	; 0x34
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	3390      	adds	r3, #144	; 0x90
 8008f3a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d001      	beq.n	8008f44 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	e040      	b.n	8008fc6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2206      	movs	r2, #6
 8008f48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	2134      	movs	r1, #52	; 0x34
 8008f50:	fb01 f303 	mul.w	r3, r1, r3
 8008f54:	4413      	add	r3, r2
 8008f56:	3390      	adds	r3, #144	; 0x90
 8008f58:	2206      	movs	r2, #6
 8008f5a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008f66:	7af9      	ldrb	r1, [r7, #11]
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fd78 	bl	8009a66 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f7c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f7e:	e016      	b.n	8008fae <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad2      	subs	r2, r2, r3
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d805      	bhi.n	8008fa4 <USBH_MSC_Read+0xa8>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d104      	bne.n	8008fae <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008faa:	2302      	movs	r3, #2
 8008fac:	e00b      	b.n	8008fc6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008fae:	7afb      	ldrb	r3, [r7, #11]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fe89 	bl	8008cca <USBH_MSC_RdWrProcess>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d0e0      	beq.n	8008f80 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b088      	sub	sp, #32
 8008fd2:	af02      	add	r7, sp, #8
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00e      	beq.n	8009012 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008ffa:	2b0b      	cmp	r3, #11
 8008ffc:	d109      	bne.n	8009012 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	2134      	movs	r1, #52	; 0x34
 8009004:	fb01 f303 	mul.w	r3, r1, r3
 8009008:	4413      	add	r3, r2
 800900a:	3390      	adds	r3, #144	; 0x90
 800900c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800900e:	2b01      	cmp	r3, #1
 8009010:	d001      	beq.n	8009016 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009012:	2302      	movs	r3, #2
 8009014:	e040      	b.n	8009098 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2207      	movs	r2, #7
 800901a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	2134      	movs	r1, #52	; 0x34
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	3390      	adds	r3, #144	; 0x90
 800902a:	2207      	movs	r2, #7
 800902c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	b29a      	uxth	r2, r3
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009038:	7af9      	ldrb	r1, [r7, #11]
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fca4 	bl	8009990 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800904e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009050:	e016      	b.n	8009080 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	429a      	cmp	r2, r3
 8009068:	d805      	bhi.n	8009076 <USBH_MSC_Write+0xa8>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2201      	movs	r2, #1
 800907a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800907c:	2302      	movs	r3, #2
 800907e:	e00b      	b.n	8009098 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	4619      	mov	r1, r3
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fe20 	bl	8008cca <USBH_MSC_RdWrProcess>
 800908a:	4603      	mov	r3, r0
 800908c:	2b01      	cmp	r3, #1
 800908e:	d0e0      	beq.n	8009052 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2201      	movs	r2, #1
 8009094:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2221      	movs	r2, #33	; 0x21
 80090ac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	22ff      	movs	r2, #255	; 0xff
 80090b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 fea4 	bl	800ae18 <USBH_CtlReq>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	22a1      	movs	r2, #161	; 0xa1
 80090e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	22fe      	movs	r2, #254	; 0xfe
 80090ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009102:	2201      	movs	r2, #1
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 fe86 	bl	800ae18 <USBH_CtlReq>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4a09      	ldr	r2, [pc, #36]	; (8009154 <USBH_MSC_BOT_Init+0x3c>)
 800912e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a09      	ldr	r2, [pc, #36]	; (8009158 <USBH_MSC_BOT_Init+0x40>)
 8009134:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	43425355 	.word	0x43425355
 8009158:	20304050 	.word	0x20304050

0800915c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af02      	add	r7, sp, #8
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009168:	2301      	movs	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009170:	2301      	movs	r3, #1
 8009172:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009174:	2300      	movs	r3, #0
 8009176:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800918c:	3b01      	subs	r3, #1
 800918e:	2b0a      	cmp	r3, #10
 8009190:	f200 819e 	bhi.w	80094d0 <USBH_MSC_BOT_Process+0x374>
 8009194:	a201      	add	r2, pc, #4	; (adr r2, 800919c <USBH_MSC_BOT_Process+0x40>)
 8009196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	080091f1 	.word	0x080091f1
 80091a4:	0800925b 	.word	0x0800925b
 80091a8:	08009279 	.word	0x08009279
 80091ac:	080092fd 	.word	0x080092fd
 80091b0:	0800931f 	.word	0x0800931f
 80091b4:	080093b7 	.word	0x080093b7
 80091b8:	080093d3 	.word	0x080093d3
 80091bc:	08009425 	.word	0x08009425
 80091c0:	08009455 	.word	0x08009455
 80091c4:	080094b7 	.word	0x080094b7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	795b      	ldrb	r3, [r3, #5]
 80091e2:	2201      	movs	r2, #1
 80091e4:	9200      	str	r2, [sp, #0]
 80091e6:	221f      	movs	r2, #31
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 f824 	bl	800b236 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80091ee:	e17e      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	795b      	ldrb	r3, [r3, #5]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f002 fbae 	bl	800b958 <USBH_LL_GetURBState>
 80091fc:	4603      	mov	r3, r0
 80091fe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009200:	7d3b      	ldrb	r3, [r7, #20]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d118      	bne.n	8009238 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00f      	beq.n	800922e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009214:	b25b      	sxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	da04      	bge.n	8009224 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2203      	movs	r2, #3
 800921e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009222:	e157      	b.n	80094d4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2205      	movs	r2, #5
 8009228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800922c:	e152      	b.n	80094d4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2207      	movs	r2, #7
 8009232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009236:	e14d      	b.n	80094d4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009238:	7d3b      	ldrb	r3, [r7, #20]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d104      	bne.n	8009248 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009246:	e145      	b.n	80094d4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009248:	7d3b      	ldrb	r3, [r7, #20]
 800924a:	2b05      	cmp	r3, #5
 800924c:	f040 8142 	bne.w	80094d4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	220a      	movs	r2, #10
 8009254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009258:	e13c      	b.n	80094d4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	895a      	ldrh	r2, [r3, #10]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	791b      	ldrb	r3, [r3, #4]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f002 f809 	bl	800b280 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2204      	movs	r2, #4
 8009272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009276:	e13a      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	791b      	ldrb	r3, [r3, #4]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f002 fb6a 	bl	800b958 <USBH_LL_GetURBState>
 8009284:	4603      	mov	r3, r0
 8009286:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009288:	7d3b      	ldrb	r3, [r7, #20]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d12d      	bne.n	80092ea <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	8952      	ldrh	r2, [r2, #10]
 8009296:	4293      	cmp	r3, r2
 8009298:	d910      	bls.n	80092bc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	8952      	ldrh	r2, [r2, #10]
 80092a4:	441a      	add	r2, r3
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	8952      	ldrh	r2, [r2, #10]
 80092b4:	1a9a      	subs	r2, r3, r2
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80092ba:	e002      	b.n	80092c2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2200      	movs	r2, #0
 80092c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	895a      	ldrh	r2, [r3, #10]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	791b      	ldrb	r3, [r3, #4]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 ffd1 	bl	800b280 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80092de:	e0fb      	b.n	80094d8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	2207      	movs	r2, #7
 80092e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092e8:	e0f6      	b.n	80094d8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80092ea:	7d3b      	ldrb	r3, [r7, #20]
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	f040 80f3 	bne.w	80094d8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2209      	movs	r2, #9
 80092f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092fa:	e0ed      	b.n	80094d8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	891a      	ldrh	r2, [r3, #8]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	795b      	ldrb	r3, [r3, #5]
 800930a:	2001      	movs	r0, #1
 800930c:	9000      	str	r0, [sp, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 ff91 	bl	800b236 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2206      	movs	r2, #6
 8009318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800931c:	e0e7      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	795b      	ldrb	r3, [r3, #5]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f002 fb17 	bl	800b958 <USBH_LL_GetURBState>
 800932a:	4603      	mov	r3, r0
 800932c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800932e:	7d3b      	ldrb	r3, [r7, #20]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d12f      	bne.n	8009394 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	8912      	ldrh	r2, [r2, #8]
 800933c:	4293      	cmp	r3, r2
 800933e:	d910      	bls.n	8009362 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	8912      	ldrh	r2, [r2, #8]
 800934a:	441a      	add	r2, r3
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	8912      	ldrh	r2, [r2, #8]
 800935a:	1a9a      	subs	r2, r3, r2
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009360:	e002      	b.n	8009368 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2200      	movs	r2, #0
 8009366:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	891a      	ldrh	r2, [r3, #8]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	795b      	ldrb	r3, [r3, #5]
 800937e:	2001      	movs	r0, #1
 8009380:	9000      	str	r0, [sp, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 ff57 	bl	800b236 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009388:	e0a8      	b.n	80094dc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2207      	movs	r2, #7
 800938e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009392:	e0a3      	b.n	80094dc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009394:	7d3b      	ldrb	r3, [r7, #20]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d104      	bne.n	80093a4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2205      	movs	r2, #5
 800939e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093a2:	e09b      	b.n	80094dc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80093a4:	7d3b      	ldrb	r3, [r7, #20]
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	f040 8098 	bne.w	80094dc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	220a      	movs	r2, #10
 80093b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093b4:	e092      	b.n	80094dc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	791b      	ldrb	r3, [r3, #4]
 80093c0:	220d      	movs	r2, #13
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 ff5c 	bl	800b280 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2208      	movs	r2, #8
 80093cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093d0:	e08d      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	791b      	ldrb	r3, [r3, #4]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 fabd 	bl	800b958 <USBH_LL_GetURBState>
 80093de:	4603      	mov	r3, r0
 80093e0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80093e2:	7d3b      	ldrb	r3, [r7, #20]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d115      	bne.n	8009414 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8a9 	bl	8009550 <USBH_MSC_DecodeCSW>
 80093fe:	4603      	mov	r3, r0
 8009400:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009402:	7d7b      	ldrb	r3, [r7, #21]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800940c:	e068      	b.n	80094e0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800940e:	2302      	movs	r3, #2
 8009410:	75fb      	strb	r3, [r7, #23]
      break;
 8009412:	e065      	b.n	80094e0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009414:	7d3b      	ldrb	r3, [r7, #20]
 8009416:	2b05      	cmp	r3, #5
 8009418:	d162      	bne.n	80094e0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2209      	movs	r2, #9
 800941e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009422:	e05d      	b.n	80094e0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	2200      	movs	r2, #0
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f864 	bl	80094f8 <USBH_MSC_BOT_Abort>
 8009430:	4603      	mov	r3, r0
 8009432:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009434:	7dbb      	ldrb	r3, [r7, #22]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d104      	bne.n	8009444 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2207      	movs	r2, #7
 800943e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009442:	e04f      	b.n	80094e4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009444:	7dbb      	ldrb	r3, [r7, #22]
 8009446:	2b04      	cmp	r3, #4
 8009448:	d14c      	bne.n	80094e4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	220b      	movs	r2, #11
 800944e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009452:	e047      	b.n	80094e4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	2201      	movs	r2, #1
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f84c 	bl	80094f8 <USBH_MSC_BOT_Abort>
 8009460:	4603      	mov	r3, r0
 8009462:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009464:	7dbb      	ldrb	r3, [r7, #22]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d11d      	bne.n	80094a6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	795b      	ldrb	r3, [r3, #5]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f002 facb 	bl	800ba0c <USBH_LL_GetToggle>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	7959      	ldrb	r1, [r3, #5]
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	f1c3 0301 	rsb	r3, r3, #1
 8009484:	b2db      	uxtb	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fa8f 	bl	800b9ac <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	791b      	ldrb	r3, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fa88 	bl	800b9ac <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2209      	movs	r2, #9
 80094a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80094a4:	e020      	b.n	80094e8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80094a6:	7dbb      	ldrb	r3, [r7, #22]
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d11d      	bne.n	80094e8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	220b      	movs	r2, #11
 80094b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094b4:	e018      	b.n	80094e8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff fdf2 	bl	80090a0 <USBH_MSC_BOT_REQ_Reset>
 80094bc:	4603      	mov	r3, r0
 80094be:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d112      	bne.n	80094ec <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80094ce:	e00d      	b.n	80094ec <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80094d0:	bf00      	nop
 80094d2:	e00c      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094d4:	bf00      	nop
 80094d6:	e00a      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094d8:	bf00      	nop
 80094da:	e008      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094dc:	bf00      	nop
 80094de:	e006      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094e0:	bf00      	nop
 80094e2:	e004      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094e4:	bf00      	nop
 80094e6:	e002      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094e8:	bf00      	nop
 80094ea:	e000      	b.n	80094ee <USBH_MSC_BOT_Process+0x392>
      break;
 80094ec:	bf00      	nop
  }
  return status;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
 8009504:	4613      	mov	r3, r2
 8009506:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009508:	2302      	movs	r3, #2
 800950a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <USBH_MSC_BOT_Abort+0x2a>
 800951c:	2b01      	cmp	r3, #1
 800951e:	d009      	beq.n	8009534 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009520:	e011      	b.n	8009546 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	79db      	ldrb	r3, [r3, #7]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f9a8 	bl	800a87e <USBH_ClrFeature>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]
      break;
 8009532:	e008      	b.n	8009546 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	799b      	ldrb	r3, [r3, #6]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f99f 	bl	800a87e <USBH_ClrFeature>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
      break;
 8009544:	bf00      	nop
  }
  return status;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009562:	2301      	movs	r3, #1
 8009564:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	791b      	ldrb	r3, [r3, #4]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f002 f961 	bl	800b834 <USBH_LL_GetLastXferSize>
 8009572:	4603      	mov	r3, r0
 8009574:	2b0d      	cmp	r3, #13
 8009576:	d002      	beq.n	800957e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009578:	2302      	movs	r3, #2
 800957a:	73fb      	strb	r3, [r7, #15]
 800957c:	e024      	b.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009582:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <USBH_MSC_DecodeCSW+0x84>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d11d      	bne.n	80095c4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009590:	429a      	cmp	r2, r3
 8009592:	d119      	bne.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800959a:	2b00      	cmp	r3, #0
 800959c:	d102      	bne.n	80095a4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
 80095a2:	e011      	b.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d102      	bne.n	80095b4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80095ae:	2301      	movs	r3, #1
 80095b0:	73fb      	strb	r3, [r7, #15]
 80095b2:	e009      	b.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d104      	bne.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80095be:	2302      	movs	r3, #2
 80095c0:	73fb      	strb	r3, [r7, #15]
 80095c2:	e001      	b.n	80095c8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80095c4:	2302      	movs	r3, #2
 80095c6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	53425355 	.word	0x53425355

080095d8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80095e4:	2302      	movs	r3, #2
 80095e6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d002      	beq.n	8009602 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d021      	beq.n	8009644 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009600:	e028      	b.n	8009654 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2200      	movs	r2, #0
 8009606:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	220a      	movs	r2, #10
 8009614:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	3363      	adds	r3, #99	; 0x63
 800961c:	2210      	movs	r2, #16
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f002 fac3 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800963e:	2301      	movs	r3, #1
 8009640:	73fb      	strb	r3, [r7, #15]
      break;
 8009642:	e007      	b.n	8009654 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff fd87 	bl	800915c <USBH_MSC_BOT_Process>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
      break;
 8009652:	bf00      	nop
  }

  return error;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	460b      	mov	r3, r1
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800966c:	2301      	movs	r3, #1
 800966e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009680:	2b01      	cmp	r3, #1
 8009682:	d002      	beq.n	800968a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009684:	2b02      	cmp	r3, #2
 8009686:	d027      	beq.n	80096d8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009688:	e05f      	b.n	800974a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2208      	movs	r2, #8
 800968e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2280      	movs	r2, #128	; 0x80
 8009694:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	220a      	movs	r2, #10
 800969c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	3363      	adds	r3, #99	; 0x63
 80096a4:	2210      	movs	r2, #16
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f002 fa7f 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2225      	movs	r2, #37	; 0x25
 80096b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f103 0210 	add.w	r2, r3, #16
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80096d2:	2301      	movs	r3, #1
 80096d4:	75fb      	strb	r3, [r7, #23]
      break;
 80096d6:	e038      	b.n	800974a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fd3d 	bl	800915c <USBH_MSC_BOT_Process>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d12d      	bne.n	8009748 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f2:	3303      	adds	r3, #3
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fe:	3302      	adds	r3, #2
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	021b      	lsls	r3, r3, #8
 8009704:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970c:	3301      	adds	r3, #1
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009712:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	061b      	lsls	r3, r3, #24
 800971e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972a:	3307      	adds	r3, #7
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b29a      	uxth	r2, r3
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009736:	3306      	adds	r3, #6
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	021b      	lsls	r3, r3, #8
 800973e:	b29b      	uxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	809a      	strh	r2, [r3, #4]
      break;
 8009748:	bf00      	nop
  }

  return error;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	460b      	mov	r3, r1
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009762:	2302      	movs	r3, #2
 8009764:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009776:	2b01      	cmp	r3, #1
 8009778:	d002      	beq.n	8009780 <USBH_MSC_SCSI_Inquiry+0x2c>
 800977a:	2b02      	cmp	r3, #2
 800977c:	d03d      	beq.n	80097fa <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800977e:	e089      	b.n	8009894 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2224      	movs	r2, #36	; 0x24
 8009784:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2280      	movs	r2, #128	; 0x80
 800978a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	220a      	movs	r2, #10
 8009792:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	3363      	adds	r3, #99	; 0x63
 800979a:	220a      	movs	r2, #10
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 fa04 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2212      	movs	r2, #18
 80097a8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	015b      	lsls	r3, r3, #5
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2224      	movs	r2, #36	; 0x24
 80097cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f103 0210 	add.w	r2, r3, #16
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
      break;
 80097f8:	e04c      	b.n	8009894 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80097fa:	7afb      	ldrb	r3, [r7, #11]
 80097fc:	4619      	mov	r1, r3
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff fcac 	bl	800915c <USBH_MSC_BOT_Process>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d141      	bne.n	8009892 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800980e:	2222      	movs	r2, #34	; 0x22
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f002 f9ca 	bl	800bbac <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	b2da      	uxtb	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	b2da      	uxtb	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009840:	3301      	adds	r3, #1
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b25b      	sxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	da03      	bge.n	8009852 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	709a      	strb	r2, [r3, #2]
 8009850:	e002      	b.n	8009858 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	1cd8      	adds	r0, r3, #3
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009862:	3308      	adds	r3, #8
 8009864:	2208      	movs	r2, #8
 8009866:	4619      	mov	r1, r3
 8009868:	f002 f992 	bl	800bb90 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f103 000c 	add.w	r0, r3, #12
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009878:	3310      	adds	r3, #16
 800987a:	2210      	movs	r2, #16
 800987c:	4619      	mov	r1, r3
 800987e:	f002 f987 	bl	800bb90 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	331d      	adds	r3, #29
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800988c:	3220      	adds	r2, #32
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	601a      	str	r2, [r3, #0]
      break;
 8009892:	bf00      	nop
  }

  return error;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	460b      	mov	r3, r1
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80098ac:	2302      	movs	r3, #2
 80098ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d002      	beq.n	80098ca <USBH_MSC_SCSI_RequestSense+0x2c>
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d03d      	beq.n	8009944 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80098c8:	e05d      	b.n	8009986 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	220e      	movs	r2, #14
 80098ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2280      	movs	r2, #128	; 0x80
 80098d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	220a      	movs	r2, #10
 80098dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	3363      	adds	r3, #99	; 0x63
 80098e4:	2210      	movs	r2, #16
 80098e6:	2100      	movs	r1, #0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f002 f95f 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2203      	movs	r2, #3
 80098f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	015b      	lsls	r3, r3, #5
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	220e      	movs	r2, #14
 8009916:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2202      	movs	r2, #2
 800992e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f103 0210 	add.w	r2, r3, #16
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
      break;
 8009942:	e020      	b.n	8009986 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	4619      	mov	r1, r3
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff fc07 	bl	800915c <USBH_MSC_BOT_Process>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d115      	bne.n	8009984 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800995e:	3302      	adds	r3, #2
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009972:	7b1a      	ldrb	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997e:	7b5a      	ldrb	r2, [r3, #13]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	709a      	strb	r2, [r3, #2]
      break;
 8009984:	bf00      	nop
  }

  return error;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099a0:	2302      	movs	r3, #2
 80099a2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d002      	beq.n	80099be <USBH_MSC_SCSI_Write+0x2e>
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d047      	beq.n	8009a4c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099bc:	e04e      	b.n	8009a5c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80099c4:	461a      	mov	r2, r3
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	fb03 f202 	mul.w	r2, r3, r2
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	220a      	movs	r2, #10
 80099dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	3363      	adds	r3, #99	; 0x63
 80099e4:	2210      	movs	r2, #16
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 f8df 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	222a      	movs	r2, #42	; 0x2a
 80099f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80099f6:	79fa      	ldrb	r2, [r7, #7]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80099fe:	79ba      	ldrb	r2, [r7, #6]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009a06:	797a      	ldrb	r2, [r7, #5]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	781a      	ldrb	r2, [r3, #0]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009a18:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009a22:	f107 0320 	add.w	r3, r7, #32
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a46:	2301      	movs	r3, #1
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	e007      	b.n	8009a5c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a4c:	7afb      	ldrb	r3, [r7, #11]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7ff fb83 	bl	800915c <USBH_MSC_BOT_Process>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5a:	bf00      	nop
  }

  return error;
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b086      	sub	sp, #24
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	460b      	mov	r3, r1
 8009a74:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a76:	2302      	movs	r3, #2
 8009a78:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d002      	beq.n	8009a94 <USBH_MSC_SCSI_Read+0x2e>
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d047      	beq.n	8009b22 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a92:	e04e      	b.n	8009b32 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	fb03 f202 	mul.w	r2, r3, r2
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2280      	movs	r2, #128	; 0x80
 8009aaa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3363      	adds	r3, #99	; 0x63
 8009aba:	2210      	movs	r2, #16
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f002 f874 	bl	800bbac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2228      	movs	r2, #40	; 0x28
 8009ac8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009acc:	79fa      	ldrb	r2, [r7, #7]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009ad4:	79ba      	ldrb	r2, [r7, #6]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009adc:	797a      	ldrb	r2, [r7, #5]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ae4:	1d3b      	adds	r3, r7, #4
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009aee:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009af8:	f107 0320 	add.w	r3, r7, #32
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b20:	e007      	b.n	8009b32 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	4619      	mov	r1, r3
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fb18 	bl	800915c <USBH_MSC_BOT_Process>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b30:	bf00      	nop
  }

  return error;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b50:	2302      	movs	r3, #2
 8009b52:	e029      	b.n	8009ba8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	79fa      	ldrb	r2, [r7, #7]
 8009b58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 f81f 	bl	8009bb0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f001 fd89 	bl	800b6b8 <USBH_LL_Init>

  return USBH_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e009      	b.n	8009bd6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	33e0      	adds	r3, #224	; 0xe0
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	2200      	movs	r2, #0
 8009bce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b0f      	cmp	r3, #15
 8009bda:	d9f2      	bls.n	8009bc2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e009      	b.n	8009bf6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bfc:	d3f1      	bcc.n	8009be2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2240      	movs	r2, #64	; 0x40
 8009c22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d016      	beq.n	8009c9a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10e      	bne.n	8009c94 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c7c:	1c59      	adds	r1, r3, #1
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	33de      	adds	r3, #222	; 0xde
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	e004      	b.n	8009c9e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c94:	2302      	movs	r3, #2
 8009c96:	73fb      	strb	r3, [r7, #15]
 8009c98:	e001      	b.n	8009c9e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d204      	bcs.n	8009cd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009cd0:	e001      	b.n	8009cd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	4608      	mov	r0, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	70fb      	strb	r3, [r7, #3]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70bb      	strb	r3, [r7, #2]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d0e:	e025      	b.n	8009d5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	221a      	movs	r2, #26
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
 8009d18:	3308      	adds	r3, #8
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3302      	adds	r3, #2
 8009d20:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	795b      	ldrb	r3, [r3, #5]
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d002      	beq.n	8009d32 <USBH_FindInterface+0x4e>
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	2bff      	cmp	r3, #255	; 0xff
 8009d30:	d111      	bne.n	8009d56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d36:	78ba      	ldrb	r2, [r7, #2]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d002      	beq.n	8009d42 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d3c:	78bb      	ldrb	r3, [r7, #2]
 8009d3e:	2bff      	cmp	r3, #255	; 0xff
 8009d40:	d109      	bne.n	8009d56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d46:	787a      	ldrb	r2, [r7, #1]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d002      	beq.n	8009d52 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d4c:	787b      	ldrb	r3, [r7, #1]
 8009d4e:	2bff      	cmp	r3, #255	; 0xff
 8009d50:	d101      	bne.n	8009d56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	e006      	b.n	8009d64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d9d6      	bls.n	8009d10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d62:	23ff      	movs	r3, #255	; 0xff
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fce3 	bl	800b744 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009d7e:	2101      	movs	r1, #1
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fdfc 	bl	800b97e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af04      	add	r7, sp, #16
 8009d96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d102      	bne.n	8009db2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2203      	movs	r2, #3
 8009db0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b0b      	cmp	r3, #11
 8009dba:	f200 81be 	bhi.w	800a13a <USBH_Process+0x3aa>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USBH_Process+0x34>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009df5 	.word	0x08009df5
 8009dc8:	08009e27 	.word	0x08009e27
 8009dcc:	08009e8f 	.word	0x08009e8f
 8009dd0:	0800a0d5 	.word	0x0800a0d5
 8009dd4:	0800a13b 	.word	0x0800a13b
 8009dd8:	08009f33 	.word	0x08009f33
 8009ddc:	0800a07b 	.word	0x0800a07b
 8009de0:	08009f69 	.word	0x08009f69
 8009de4:	08009f89 	.word	0x08009f89
 8009de8:	08009fa9 	.word	0x08009fa9
 8009dec:	08009fed 	.word	0x08009fed
 8009df0:	0800a0bd 	.word	0x0800a0bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 819e 	beq.w	800a13e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e08:	20c8      	movs	r0, #200	; 0xc8
 8009e0a:	f001 fe2f 	bl	800ba6c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fcf5 	bl	800b7fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e24:	e18b      	b.n	800a13e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d107      	bne.n	8009e40 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e3e:	e18d      	b.n	800a15c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e4a:	d914      	bls.n	8009e76 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e52:	3301      	adds	r3, #1
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d903      	bls.n	8009e6e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	220d      	movs	r2, #13
 8009e6a:	701a      	strb	r2, [r3, #0]
      break;
 8009e6c:	e176      	b.n	800a15c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	701a      	strb	r2, [r3, #0]
      break;
 8009e74:	e172      	b.n	800a15c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e7c:	f103 020a 	add.w	r2, r3, #10
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e86:	200a      	movs	r0, #10
 8009e88:	f001 fdf0 	bl	800ba6c <USBH_Delay>
      break;
 8009e8c:	e166      	b.n	800a15c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d005      	beq.n	8009ea4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e9e:	2104      	movs	r1, #4
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ea4:	2064      	movs	r0, #100	; 0x64
 8009ea6:	f001 fde1 	bl	800ba6c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fc80 	bl	800b7b0 <USBH_LL_GetSpeed>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2205      	movs	r2, #5
 8009ebe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 fa29 	bl	800b31a <USBH_AllocPipe>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ed0:	2180      	movs	r1, #128	; 0x80
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fa21 	bl	800b31a <USBH_AllocPipe>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	7919      	ldrb	r1, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	9202      	str	r2, [sp, #8]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	9201      	str	r2, [sp, #4]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4603      	mov	r3, r0
 8009f00:	2280      	movs	r2, #128	; 0x80
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f9da 	bl	800b2bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7959      	ldrb	r1, [r3, #5]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	9202      	str	r2, [sp, #8]
 8009f20:	2200      	movs	r2, #0
 8009f22:	9201      	str	r2, [sp, #4]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	4603      	mov	r3, r0
 8009f28:	2200      	movs	r2, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 f9c6 	bl	800b2bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f30:	e114      	b.n	800a15c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f918 	bl	800a168 <USBH_HandleEnum>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f040 80fe 	bne.w	800a142 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d103      	bne.n	8009f60 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f5e:	e0f0      	b.n	800a142 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2207      	movs	r2, #7
 8009f64:	701a      	strb	r2, [r3, #0]
      break;
 8009f66:	e0ec      	b.n	800a142 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80e9 	beq.w	800a146 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2208      	movs	r2, #8
 8009f84:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009f86:	e0de      	b.n	800a146 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fc2c 	bl	800a7f0 <USBH_SetCfg>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 80d5 	bne.w	800a14a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2209      	movs	r2, #9
 8009fa4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fa6:	e0d0      	b.n	800a14a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009fae:	f003 0320 	and.w	r3, r3, #32
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d016      	beq.n	8009fe4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fc3c 	bl	800a836 <USBH_SetFeature>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d103      	bne.n	8009fd2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	220a      	movs	r2, #10
 8009fce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fd0:	e0bd      	b.n	800a14e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	f040 80b9 	bne.w	800a14e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	220a      	movs	r2, #10
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e0b4      	b.n	800a14e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	701a      	strb	r2, [r3, #0]
      break;
 8009fea:	e0b0      	b.n	800a14e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80ad 	beq.w	800a152 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	e016      	b.n	800a034 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a006:	7bfa      	ldrb	r2, [r7, #15]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	32de      	adds	r2, #222	; 0xde
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	791a      	ldrb	r2, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a018:	429a      	cmp	r2, r3
 800a01a:	d108      	bne.n	800a02e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a01c:	7bfa      	ldrb	r2, [r7, #15]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	32de      	adds	r2, #222	; 0xde
 800a022:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a02c:	e005      	b.n	800a03a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	3301      	adds	r3, #1
 800a032:	73fb      	strb	r3, [r7, #15]
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0e5      	beq.n	800a006 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d016      	beq.n	800a072 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	4798      	blx	r3
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d109      	bne.n	800a06a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2206      	movs	r2, #6
 800a05a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a062:	2103      	movs	r1, #3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a068:	e073      	b.n	800a152 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	220d      	movs	r2, #13
 800a06e:	701a      	strb	r2, [r3, #0]
      break;
 800a070:	e06f      	b.n	800a152 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	220d      	movs	r2, #13
 800a076:	701a      	strb	r2, [r3, #0]
      break;
 800a078:	e06b      	b.n	800a152 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d017      	beq.n	800a0b4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	4798      	blx	r3
 800a090:	4603      	mov	r3, r0
 800a092:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d103      	bne.n	800a0a4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	220b      	movs	r2, #11
 800a0a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a0a2:	e058      	b.n	800a156 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d154      	bne.n	800a156 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	220d      	movs	r2, #13
 800a0b0:	701a      	strb	r2, [r3, #0]
      break;
 800a0b2:	e050      	b.n	800a156 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	220d      	movs	r2, #13
 800a0b8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ba:	e04c      	b.n	800a156 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d049      	beq.n	800a15a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
      }
      break;
 800a0d2:	e042      	b.n	800a15a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fd67 	bl	8009bb0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d009      	beq.n	800a100 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a110:	2105      	movs	r1, #5
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d107      	bne.n	800a132 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fe20 	bl	8009d70 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a130:	e014      	b.n	800a15c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fb06 	bl	800b744 <USBH_LL_Start>
      break;
 800a138:	e010      	b.n	800a15c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a13a:	bf00      	nop
 800a13c:	e00e      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a13e:	bf00      	nop
 800a140:	e00c      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a142:	bf00      	nop
 800a144:	e00a      	b.n	800a15c <USBH_Process+0x3cc>
    break;
 800a146:	bf00      	nop
 800a148:	e008      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a14a:	bf00      	nop
 800a14c:	e006      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a14e:	bf00      	nop
 800a150:	e004      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a152:	bf00      	nop
 800a154:	e002      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a156:	bf00      	nop
 800a158:	e000      	b.n	800a15c <USBH_Process+0x3cc>
      break;
 800a15a:	bf00      	nop
  }
  return USBH_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop

0800a168 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af04      	add	r7, sp, #16
 800a16e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a170:	2301      	movs	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a174:	2301      	movs	r3, #1
 800a176:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	2b07      	cmp	r3, #7
 800a17e:	f200 81c1 	bhi.w	800a504 <USBH_HandleEnum+0x39c>
 800a182:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBH_HandleEnum+0x20>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a1a9 	.word	0x0800a1a9
 800a18c:	0800a267 	.word	0x0800a267
 800a190:	0800a2d1 	.word	0x0800a2d1
 800a194:	0800a35f 	.word	0x0800a35f
 800a198:	0800a3c9 	.word	0x0800a3c9
 800a19c:	0800a439 	.word	0x0800a439
 800a1a0:	0800a47f 	.word	0x0800a47f
 800a1a4:	0800a4c5 	.word	0x0800a4c5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a1a8:	2108      	movs	r1, #8
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa50 	bl	800a650 <USBH_Get_DevDesc>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d130      	bne.n	800a21c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7919      	ldrb	r1, [r3, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	9202      	str	r2, [sp, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	9201      	str	r2, [sp, #4]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 f865 	bl	800b2bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7959      	ldrb	r1, [r3, #5]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a206:	b292      	uxth	r2, r2
 800a208:	9202      	str	r2, [sp, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	9201      	str	r2, [sp, #4]
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4603      	mov	r3, r0
 800a212:	2200      	movs	r2, #0
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f001 f851 	bl	800b2bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a21a:	e175      	b.n	800a508 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	2b03      	cmp	r3, #3
 800a220:	f040 8172 	bne.w	800a508 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a22a:	3301      	adds	r3, #1
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d903      	bls.n	800a246 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	220d      	movs	r2, #13
 800a242:	701a      	strb	r2, [r3, #0]
      break;
 800a244:	e160      	b.n	800a508 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	795b      	ldrb	r3, [r3, #5]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 f885 	bl	800b35c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	791b      	ldrb	r3, [r3, #4]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 f87f 	bl	800b35c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
      break;
 800a264:	e150      	b.n	800a508 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a266:	2112      	movs	r1, #18
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f9f1 	bl	800a650 <USBH_Get_DevDesc>
 800a26e:	4603      	mov	r3, r0
 800a270:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d103      	bne.n	800a280 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2202      	movs	r2, #2
 800a27c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a27e:	e145      	b.n	800a50c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	2b03      	cmp	r3, #3
 800a284:	f040 8142 	bne.w	800a50c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a28e:	3301      	adds	r3, #1
 800a290:	b2da      	uxtb	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d903      	bls.n	800a2aa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	220d      	movs	r2, #13
 800a2a6:	701a      	strb	r2, [r3, #0]
      break;
 800a2a8:	e130      	b.n	800a50c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	795b      	ldrb	r3, [r3, #5]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 f853 	bl	800b35c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	791b      	ldrb	r3, [r3, #4]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 f84d 	bl	800b35c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
      break;
 800a2ce:	e11d      	b.n	800a50c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa68 	bl	800a7a8 <USBH_SetAddress>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d132      	bne.n	800a348 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2e2:	2002      	movs	r0, #2
 800a2e4:	f001 fbc2 	bl	800ba6c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7919      	ldrb	r1, [r3, #4]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a30a:	b292      	uxth	r2, r2
 800a30c:	9202      	str	r2, [sp, #8]
 800a30e:	2200      	movs	r2, #0
 800a310:	9201      	str	r2, [sp, #4]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4603      	mov	r3, r0
 800a316:	2280      	movs	r2, #128	; 0x80
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 ffcf 	bl	800b2bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	7959      	ldrb	r1, [r3, #5]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a332:	b292      	uxth	r2, r2
 800a334:	9202      	str	r2, [sp, #8]
 800a336:	2200      	movs	r2, #0
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4603      	mov	r3, r0
 800a33e:	2200      	movs	r2, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 ffbb 	bl	800b2bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a346:	e0e3      	b.n	800a510 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	f040 80e0 	bne.w	800a510 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220d      	movs	r2, #13
 800a354:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	705a      	strb	r2, [r3, #1]
      break;
 800a35c:	e0d8      	b.n	800a510 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a35e:	2109      	movs	r1, #9
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f99d 	bl	800a6a0 <USBH_Get_CfgDesc>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2204      	movs	r2, #4
 800a374:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a376:	e0cd      	b.n	800a514 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	f040 80ca 	bne.w	800a514 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a386:	3301      	adds	r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a396:	2b03      	cmp	r3, #3
 800a398:	d903      	bls.n	800a3a2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	220d      	movs	r2, #13
 800a39e:	701a      	strb	r2, [r3, #0]
      break;
 800a3a0:	e0b8      	b.n	800a514 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	795b      	ldrb	r3, [r3, #5]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 ffd7 	bl	800b35c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	791b      	ldrb	r3, [r3, #4]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 ffd1 	bl	800b35c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
      break;
 800a3c6:	e0a5      	b.n	800a514 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f965 	bl	800a6a0 <USBH_Get_CfgDesc>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2205      	movs	r2, #5
 800a3e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3e6:	e097      	b.n	800a518 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	f040 8094 	bne.w	800a518 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a406:	2b03      	cmp	r3, #3
 800a408:	d903      	bls.n	800a412 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	220d      	movs	r2, #13
 800a40e:	701a      	strb	r2, [r3, #0]
      break;
 800a410:	e082      	b.n	800a518 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	795b      	ldrb	r3, [r3, #5]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ff9f 	bl	800b35c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	791b      	ldrb	r3, [r3, #4]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 ff99 	bl	800b35c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
      break;
 800a436:	e06f      	b.n	800a518 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d019      	beq.n	800a476 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a44e:	23ff      	movs	r3, #255	; 0xff
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f949 	bl	800a6e8 <USBH_Get_StringDesc>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2206      	movs	r2, #6
 800a464:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a466:	e059      	b.n	800a51c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d156      	bne.n	800a51c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2206      	movs	r2, #6
 800a472:	705a      	strb	r2, [r3, #1]
      break;
 800a474:	e052      	b.n	800a51c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2206      	movs	r2, #6
 800a47a:	705a      	strb	r2, [r3, #1]
      break;
 800a47c:	e04e      	b.n	800a51c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a484:	2b00      	cmp	r3, #0
 800a486:	d019      	beq.n	800a4bc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a494:	23ff      	movs	r3, #255	; 0xff
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f926 	bl	800a6e8 <USBH_Get_StringDesc>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a4ac:	e038      	b.n	800a520 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d135      	bne.n	800a520 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2207      	movs	r2, #7
 800a4b8:	705a      	strb	r2, [r3, #1]
      break;
 800a4ba:	e031      	b.n	800a520 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2207      	movs	r2, #7
 800a4c0:	705a      	strb	r2, [r3, #1]
      break;
 800a4c2:	e02d      	b.n	800a520 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d017      	beq.n	800a4fe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4da:	23ff      	movs	r3, #255	; 0xff
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f903 	bl	800a6e8 <USBH_Get_StringDesc>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4f0:	e018      	b.n	800a524 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d115      	bne.n	800a524 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e012      	b.n	800a524 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
      break;
 800a502:	e00f      	b.n	800a524 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a504:	bf00      	nop
 800a506:	e00e      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a508:	bf00      	nop
 800a50a:	e00c      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a50c:	bf00      	nop
 800a50e:	e00a      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a510:	bf00      	nop
 800a512:	e008      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a514:	bf00      	nop
 800a516:	e006      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a518:	bf00      	nop
 800a51a:	e004      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <USBH_HandleEnum+0x3be>
      break;
 800a524:	bf00      	nop
  }
  return Status;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f804 	bl	800a572 <USBH_HandleSof>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b0b      	cmp	r3, #11
 800a582:	d10a      	bne.n	800a59a <USBH_HandleSof+0x28>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
  }
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a5b2:	bf00      	nop
}
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a5ce:	bf00      	nop
}
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f8a6 	bl	800b77a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	791b      	ldrb	r3, [r3, #4]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fe91 	bl	800b35c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	795b      	ldrb	r3, [r3, #5]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fe8b 	bl	800b35c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	b29b      	uxth	r3, r3
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f864 	bl	800a73e <USBH_GetDescriptor>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a68c:	78fa      	ldrb	r2, [r7, #3]
 800a68e:	b292      	uxth	r2, r2
 800a690:	4619      	mov	r1, r3
 800a692:	f000 f918 	bl	800a8c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af02      	add	r7, sp, #8
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	331c      	adds	r3, #28
 800a6b0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f83d 	bl	800a73e <USBH_GetDescriptor>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d107      	bne.n	800a6de <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a6ce:	887b      	ldrh	r3, [r7, #2]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f987 	bl	800a9e8 <USBH_ParseCfgDesc>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	607a      	str	r2, [r7, #4]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	72fb      	strb	r3, [r7, #11]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a704:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a70c:	893b      	ldrh	r3, [r7, #8]
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	460b      	mov	r3, r1
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f812 	bl	800a73e <USBH_GetDescriptor>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d107      	bne.n	800a734 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a72a:	893a      	ldrh	r2, [r7, #8]
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fb24 	bl	800ad7c <USBH_ParseStringDesc>
  }

  return status;
 800a734:	7dfb      	ldrb	r3, [r7, #23]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	72fb      	strb	r3, [r7, #11]
 800a74c:	4613      	mov	r3, r2
 800a74e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	789b      	ldrb	r3, [r3, #2]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d11c      	bne.n	800a792 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2206      	movs	r2, #6
 800a768:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	893a      	ldrh	r2, [r7, #8]
 800a76e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a770:	893b      	ldrh	r3, [r7, #8]
 800a772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a77a:	d104      	bne.n	800a786 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f240 4209 	movw	r2, #1033	; 0x409
 800a782:	829a      	strh	r2, [r3, #20]
 800a784:	e002      	b.n	800a78c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	8b3a      	ldrh	r2, [r7, #24]
 800a790:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a792:	8b3b      	ldrh	r3, [r7, #24]
 800a794:	461a      	mov	r2, r3
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fb3d 	bl	800ae18 <USBH_CtlReq>
 800a79e:	4603      	mov	r3, r0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	789b      	ldrb	r3, [r3, #2]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d10f      	bne.n	800a7dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2205      	movs	r2, #5
 800a7c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fb19 	bl	800ae18 <USBH_CtlReq>
 800a7e6:	4603      	mov	r3, r0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	789b      	ldrb	r3, [r3, #2]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10e      	bne.n	800a822 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2209      	movs	r2, #9
 800a80e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	887a      	ldrh	r2, [r7, #2]
 800a814:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a822:	2200      	movs	r2, #0
 800a824:	2100      	movs	r1, #0
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 faf6 	bl	800ae18 <USBH_CtlReq>
 800a82c:	4603      	mov	r3, r0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	789b      	ldrb	r3, [r3, #2]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d10f      	bne.n	800a86a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2203      	movs	r2, #3
 800a854:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	b29a      	uxth	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a86a:	2200      	movs	r2, #0
 800a86c:	2100      	movs	r1, #0
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fad2 	bl	800ae18 <USBH_CtlReq>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	460b      	mov	r3, r1
 800a888:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	789b      	ldrb	r3, [r3, #2]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d10f      	bne.n	800a8b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2202      	movs	r2, #2
 800a896:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 faae 	bl	800ae18 <USBH_CtlReq>
 800a8bc:	4603      	mov	r3, r0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	785a      	ldrb	r2, [r3, #1]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	3302      	adds	r3, #2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	3303      	adds	r3, #3
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	791a      	ldrb	r2, [r3, #4]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	795a      	ldrb	r2, [r3, #5]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	799a      	ldrb	r2, [r3, #6]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	79da      	ldrb	r2, [r3, #7]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	79db      	ldrb	r3, [r3, #7]
 800a924:	2b20      	cmp	r3, #32
 800a926:	dc11      	bgt.n	800a94c <USBH_ParseDevDesc+0x86>
 800a928:	2b08      	cmp	r3, #8
 800a92a:	db16      	blt.n	800a95a <USBH_ParseDevDesc+0x94>
 800a92c:	3b08      	subs	r3, #8
 800a92e:	2201      	movs	r2, #1
 800a930:	fa02 f303 	lsl.w	r3, r2, r3
 800a934:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bf14      	ite	ne
 800a940:	2301      	movne	r3, #1
 800a942:	2300      	moveq	r3, #0
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <USBH_ParseDevDesc+0x8a>
 800a94a:	e006      	b.n	800a95a <USBH_ParseDevDesc+0x94>
 800a94c:	2b40      	cmp	r3, #64	; 0x40
 800a94e:	d104      	bne.n	800a95a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	79da      	ldrb	r2, [r3, #7]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	71da      	strb	r2, [r3, #7]
      break;
 800a958:	e003      	b.n	800a962 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2240      	movs	r2, #64	; 0x40
 800a95e:	71da      	strb	r2, [r3, #7]
      break;
 800a960:	bf00      	nop
  }

  if (length > 8U)
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	2b08      	cmp	r3, #8
 800a966:	d939      	bls.n	800a9dc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	3308      	adds	r3, #8
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	3309      	adds	r3, #9
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b29b      	uxth	r3, r3
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	330a      	adds	r3, #10
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	330b      	adds	r3, #11
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b29b      	uxth	r3, r3
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	b29b      	uxth	r3, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	330d      	adds	r3, #13
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	021b      	lsls	r3, r3, #8
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	7b9a      	ldrb	r2, [r3, #14]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	7bda      	ldrb	r2, [r3, #15]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	7c1a      	ldrb	r2, [r3, #16]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	7c5a      	ldrb	r2, [r3, #17]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	745a      	strb	r2, [r3, #17]
  }
}
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08c      	sub	sp, #48	; 0x30
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a9fc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	781a      	ldrb	r2, [r3, #0]
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	785a      	ldrb	r2, [r3, #1]
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	3302      	adds	r3, #2
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	3303      	adds	r3, #3
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa44:	bf28      	it	cs
 800aa46:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	791a      	ldrb	r2, [r3, #4]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	795a      	ldrb	r2, [r3, #5]
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	799a      	ldrb	r2, [r3, #6]
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	79da      	ldrb	r2, [r3, #7]
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	7a1a      	ldrb	r2, [r3, #8]
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	d002      	beq.n	800aa86 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	2209      	movs	r2, #9
 800aa84:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	2b09      	cmp	r3, #9
 800aa8a:	f240 809d 	bls.w	800abc8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800aa8e:	2309      	movs	r3, #9
 800aa90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa96:	e081      	b.n	800ab9c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa98:	f107 0316 	add.w	r3, r7, #22
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa0:	f000 f99f 	bl	800ade2 <USBH_GetNextDesc>
 800aaa4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d176      	bne.n	800ab9c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b09      	cmp	r3, #9
 800aab4:	d002      	beq.n	800aabc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	2209      	movs	r2, #9
 800aaba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aac0:	221a      	movs	r2, #26
 800aac2:	fb02 f303 	mul.w	r3, r2, r3
 800aac6:	3308      	adds	r3, #8
 800aac8:	6a3a      	ldr	r2, [r7, #32]
 800aaca:	4413      	add	r3, r2
 800aacc:	3302      	adds	r3, #2
 800aace:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aad2:	69f8      	ldr	r0, [r7, #28]
 800aad4:	f000 f87e 	bl	800abd4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aade:	2300      	movs	r3, #0
 800aae0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aae2:	e043      	b.n	800ab6c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aae4:	f107 0316 	add.w	r3, r7, #22
 800aae8:	4619      	mov	r1, r3
 800aaea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaec:	f000 f979 	bl	800ade2 <USBH_GetNextDesc>
 800aaf0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d138      	bne.n	800ab6c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10f      	bne.n	800ab22 <USBH_ParseCfgDesc+0x13a>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	799b      	ldrb	r3, [r3, #6]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d10b      	bne.n	800ab22 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	79db      	ldrb	r3, [r3, #7]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10f      	bne.n	800ab32 <USBH_ParseCfgDesc+0x14a>
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b09      	cmp	r3, #9
 800ab18:	d00b      	beq.n	800ab32 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2209      	movs	r2, #9
 800ab1e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab20:	e007      	b.n	800ab32 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b07      	cmp	r3, #7
 800ab28:	d004      	beq.n	800ab34 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	2207      	movs	r2, #7
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	e000      	b.n	800ab34 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab32:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	00d2      	lsls	r2, r2, #3
 800ab40:	211a      	movs	r1, #26
 800ab42:	fb01 f303 	mul.w	r3, r1, r3
 800ab46:	4413      	add	r3, r2
 800ab48:	3308      	adds	r3, #8
 800ab4a:	6a3a      	ldr	r2, [r7, #32]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	3304      	adds	r3, #4
 800ab50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ab52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab54:	69b9      	ldr	r1, [r7, #24]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 f86b 	bl	800ac32 <USBH_ParseEPDesc>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ab62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab66:	3301      	adds	r3, #1
 800ab68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	791b      	ldrb	r3, [r3, #4]
 800ab70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d204      	bcs.n	800ab82 <USBH_ParseCfgDesc+0x19a>
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	885a      	ldrh	r2, [r3, #2]
 800ab7c:	8afb      	ldrh	r3, [r7, #22]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d8b0      	bhi.n	800aae4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d201      	bcs.n	800ab92 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e01c      	b.n	800abcc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ab92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab96:	3301      	adds	r3, #1
 800ab98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d805      	bhi.n	800abb0 <USBH_ParseCfgDesc+0x1c8>
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	885a      	ldrh	r2, [r3, #2]
 800aba8:	8afb      	ldrh	r3, [r7, #22]
 800abaa:	429a      	cmp	r2, r3
 800abac:	f63f af74 	bhi.w	800aa98 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	791b      	ldrb	r3, [r3, #4]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	bf28      	it	cs
 800abb8:	2302      	movcs	r3, #2
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d201      	bcs.n	800abc8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e001      	b.n	800abcc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800abc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3730      	adds	r7, #48	; 0x30
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	785a      	ldrb	r2, [r3, #1]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	789a      	ldrb	r2, [r3, #2]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	78da      	ldrb	r2, [r3, #3]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	791a      	ldrb	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	795a      	ldrb	r2, [r3, #5]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	799a      	ldrb	r2, [r3, #6]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	79da      	ldrb	r2, [r3, #7]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	7a1a      	ldrb	r2, [r3, #8]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	721a      	strb	r2, [r3, #8]
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b087      	sub	sp, #28
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	785a      	ldrb	r2, [r3, #1]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	789a      	ldrb	r2, [r3, #2]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	78da      	ldrb	r2, [r3, #3]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3304      	adds	r3, #4
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3305      	adds	r3, #5
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4313      	orrs	r3, r2
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	799a      	ldrb	r2, [r3, #6]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	889b      	ldrh	r3, [r3, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d102      	bne.n	800ac94 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	75fb      	strb	r3, [r7, #23]
 800ac92:	e033      	b.n	800acfc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	889b      	ldrh	r3, [r3, #4]
 800ac98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ac9c:	f023 0307 	bic.w	r3, r3, #7
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	889b      	ldrh	r3, [r3, #4]
 800acaa:	b21a      	sxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	b299      	uxth	r1, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3305      	adds	r3, #5
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	430b      	orrs	r3, r1
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d110      	bne.n	800acee <USBH_ParseEPDesc+0xbc>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3304      	adds	r3, #4
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b299      	uxth	r1, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3305      	adds	r3, #5
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	b29b      	uxth	r3, r3
 800ace0:	430b      	orrs	r3, r1
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	b21b      	sxth	r3, r3
 800ace6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acea:	b21b      	sxth	r3, r3
 800acec:	e001      	b.n	800acf2 <USBH_ParseEPDesc+0xc0>
 800acee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acf2:	4313      	orrs	r3, r2
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d116      	bne.n	800ad34 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	78db      	ldrb	r3, [r3, #3]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d005      	beq.n	800ad1e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	78db      	ldrb	r3, [r3, #3]
 800ad16:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d127      	bne.n	800ad6e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	799b      	ldrb	r3, [r3, #6]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <USBH_ParseEPDesc+0xfc>
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	799b      	ldrb	r3, [r3, #6]
 800ad2a:	2b10      	cmp	r3, #16
 800ad2c:	d91f      	bls.n	800ad6e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	75fb      	strb	r3, [r7, #23]
 800ad32:	e01c      	b.n	800ad6e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	78db      	ldrb	r3, [r3, #3]
 800ad38:	f003 0303 	and.w	r3, r3, #3
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d10a      	bne.n	800ad56 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	799b      	ldrb	r3, [r3, #6]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <USBH_ParseEPDesc+0x11e>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	799b      	ldrb	r3, [r3, #6]
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d90e      	bls.n	800ad6e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ad50:	2303      	movs	r3, #3
 800ad52:	75fb      	strb	r3, [r7, #23]
 800ad54:	e00b      	b.n	800ad6e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	78db      	ldrb	r3, [r3, #3]
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d105      	bne.n	800ad6e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	799b      	ldrb	r3, [r3, #6]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	371c      	adds	r7, #28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	4613      	mov	r3, r2
 800ad88:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	d120      	bne.n	800add6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	1e9a      	subs	r2, r3, #2
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	bf28      	it	cs
 800ada0:	4613      	movcs	r3, r2
 800ada2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3302      	adds	r3, #2
 800ada8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800adaa:	2300      	movs	r3, #0
 800adac:	82fb      	strh	r3, [r7, #22]
 800adae:	e00b      	b.n	800adc8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800adb0:	8afb      	ldrh	r3, [r7, #22]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	701a      	strb	r2, [r3, #0]
      pdest++;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800adc2:	8afb      	ldrh	r3, [r7, #22]
 800adc4:	3302      	adds	r3, #2
 800adc6:	82fb      	strh	r3, [r7, #22]
 800adc8:	8afa      	ldrh	r2, [r7, #22]
 800adca:	8abb      	ldrh	r3, [r7, #20]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d3ef      	bcc.n	800adb0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2200      	movs	r2, #0
 800add4:	701a      	strb	r2, [r3, #0]
  }
}
 800add6:	bf00      	nop
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	881a      	ldrh	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	4413      	add	r3, r2
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4413      	add	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ae26:	2301      	movs	r3, #1
 800ae28:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	789b      	ldrb	r3, [r3, #2]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d002      	beq.n	800ae38 <USBH_CtlReq+0x20>
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d00f      	beq.n	800ae56 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ae36:	e027      	b.n	800ae88 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	88fa      	ldrh	r2, [r7, #6]
 800ae42:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ae50:	2301      	movs	r3, #1
 800ae52:	75fb      	strb	r3, [r7, #23]
      break;
 800ae54:	e018      	b.n	800ae88 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f81c 	bl	800ae94 <USBH_HandleControl>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <USBH_CtlReq+0x54>
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	2b03      	cmp	r3, #3
 800ae6a:	d106      	bne.n	800ae7a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	761a      	strb	r2, [r3, #24]
      break;
 800ae78:	e005      	b.n	800ae86 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d102      	bne.n	800ae86 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	709a      	strb	r2, [r3, #2]
      break;
 800ae86:	bf00      	nop
  }
  return status;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7e1b      	ldrb	r3, [r3, #24]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2b0a      	cmp	r3, #10
 800aeac:	f200 8156 	bhi.w	800b15c <USBH_HandleControl+0x2c8>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <USBH_HandleControl+0x24>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aee5 	.word	0x0800aee5
 800aebc:	0800aeff 	.word	0x0800aeff
 800aec0:	0800af69 	.word	0x0800af69
 800aec4:	0800af8f 	.word	0x0800af8f
 800aec8:	0800afc7 	.word	0x0800afc7
 800aecc:	0800aff1 	.word	0x0800aff1
 800aed0:	0800b043 	.word	0x0800b043
 800aed4:	0800b065 	.word	0x0800b065
 800aed8:	0800b0a1 	.word	0x0800b0a1
 800aedc:	0800b0c7 	.word	0x0800b0c7
 800aee0:	0800b105 	.word	0x0800b105
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f103 0110 	add.w	r1, r3, #16
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	795b      	ldrb	r3, [r3, #5]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f943 	bl	800b17c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	761a      	strb	r2, [r3, #24]
      break;
 800aefc:	e139      	b.n	800b172 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	795b      	ldrb	r3, [r3, #5]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fd27 	bl	800b958 <USBH_LL_GetURBState>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d11e      	bne.n	800af52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7c1b      	ldrb	r3, [r3, #16]
 800af18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	8adb      	ldrh	r3, [r3, #22]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800af26:	7b7b      	ldrb	r3, [r7, #13]
 800af28:	2b80      	cmp	r3, #128	; 0x80
 800af2a:	d103      	bne.n	800af34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2203      	movs	r2, #3
 800af30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af32:	e115      	b.n	800b160 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2205      	movs	r2, #5
 800af38:	761a      	strb	r2, [r3, #24]
      break;
 800af3a:	e111      	b.n	800b160 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800af3c:	7b7b      	ldrb	r3, [r7, #13]
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	d103      	bne.n	800af4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2209      	movs	r2, #9
 800af46:	761a      	strb	r2, [r3, #24]
      break;
 800af48:	e10a      	b.n	800b160 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2207      	movs	r2, #7
 800af4e:	761a      	strb	r2, [r3, #24]
      break;
 800af50:	e106      	b.n	800b160 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b04      	cmp	r3, #4
 800af56:	d003      	beq.n	800af60 <USBH_HandleControl+0xcc>
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	f040 8100 	bne.w	800b160 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	220b      	movs	r2, #11
 800af64:	761a      	strb	r2, [r3, #24]
      break;
 800af66:	e0fb      	b.n	800b160 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af6e:	b29a      	uxth	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6899      	ldr	r1, [r3, #8]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	899a      	ldrh	r2, [r3, #12]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	791b      	ldrb	r3, [r3, #4]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f93a 	bl	800b1fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2204      	movs	r2, #4
 800af8a:	761a      	strb	r2, [r3, #24]
      break;
 800af8c:	e0f1      	b.n	800b172 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	791b      	ldrb	r3, [r3, #4]
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fcdf 	bl	800b958 <USBH_LL_GetURBState>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d102      	bne.n	800afaa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2209      	movs	r2, #9
 800afa8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800afaa:	7bbb      	ldrb	r3, [r7, #14]
 800afac:	2b05      	cmp	r3, #5
 800afae:	d102      	bne.n	800afb6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800afb0:	2303      	movs	r3, #3
 800afb2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800afb4:	e0d6      	b.n	800b164 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	f040 80d3 	bne.w	800b164 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	220b      	movs	r2, #11
 800afc2:	761a      	strb	r2, [r3, #24]
      break;
 800afc4:	e0ce      	b.n	800b164 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6899      	ldr	r1, [r3, #8]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	899a      	ldrh	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	795b      	ldrb	r3, [r3, #5]
 800afd2:	2001      	movs	r0, #1
 800afd4:	9000      	str	r0, [sp, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8ea 	bl	800b1b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2206      	movs	r2, #6
 800afec:	761a      	strb	r2, [r3, #24]
      break;
 800afee:	e0c0      	b.n	800b172 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	795b      	ldrb	r3, [r3, #5]
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fcae 	bl	800b958 <USBH_LL_GetURBState>
 800affc:	4603      	mov	r3, r0
 800affe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d103      	bne.n	800b00e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2207      	movs	r2, #7
 800b00a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b00c:	e0ac      	b.n	800b168 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	2b05      	cmp	r3, #5
 800b012:	d105      	bne.n	800b020 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	220c      	movs	r2, #12
 800b018:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b01a:	2303      	movs	r3, #3
 800b01c:	73fb      	strb	r3, [r7, #15]
      break;
 800b01e:	e0a3      	b.n	800b168 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d103      	bne.n	800b02e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2205      	movs	r2, #5
 800b02a:	761a      	strb	r2, [r3, #24]
      break;
 800b02c:	e09c      	b.n	800b168 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	2b04      	cmp	r3, #4
 800b032:	f040 8099 	bne.w	800b168 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	220b      	movs	r2, #11
 800b03a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b03c:	2302      	movs	r3, #2
 800b03e:	73fb      	strb	r3, [r7, #15]
      break;
 800b040:	e092      	b.n	800b168 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	791b      	ldrb	r3, [r3, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	2100      	movs	r1, #0
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f8d5 	bl	800b1fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2208      	movs	r2, #8
 800b060:	761a      	strb	r2, [r3, #24]

      break;
 800b062:	e086      	b.n	800b172 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	791b      	ldrb	r3, [r3, #4]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fc74 	bl	800b958 <USBH_LL_GetURBState>
 800b070:	4603      	mov	r3, r0
 800b072:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d105      	bne.n	800b086 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	220d      	movs	r2, #13
 800b07e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b084:	e072      	b.n	800b16c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d103      	bne.n	800b094 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	220b      	movs	r2, #11
 800b090:	761a      	strb	r2, [r3, #24]
      break;
 800b092:	e06b      	b.n	800b16c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b05      	cmp	r3, #5
 800b098:	d168      	bne.n	800b16c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b09a:	2303      	movs	r3, #3
 800b09c:	73fb      	strb	r3, [r7, #15]
      break;
 800b09e:	e065      	b.n	800b16c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	795b      	ldrb	r3, [r3, #5]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	9200      	str	r2, [sp, #0]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f87f 	bl	800b1b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	761a      	strb	r2, [r3, #24]
      break;
 800b0c4:	e055      	b.n	800b172 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	795b      	ldrb	r3, [r3, #5]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc43 	bl	800b958 <USBH_LL_GetURBState>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d105      	bne.n	800b0e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	220d      	movs	r2, #13
 800b0e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b0e6:	e043      	b.n	800b170 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d103      	bne.n	800b0f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2209      	movs	r2, #9
 800b0f2:	761a      	strb	r2, [r3, #24]
      break;
 800b0f4:	e03c      	b.n	800b170 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	d139      	bne.n	800b170 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	220b      	movs	r2, #11
 800b100:	761a      	strb	r2, [r3, #24]
      break;
 800b102:	e035      	b.n	800b170 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7e5b      	ldrb	r3, [r3, #25]
 800b108:	3301      	adds	r3, #1
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	765a      	strb	r2, [r3, #25]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7e5b      	ldrb	r3, [r3, #25]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d806      	bhi.n	800b126 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b124:	e025      	b.n	800b172 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b12c:	2106      	movs	r1, #6
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	795b      	ldrb	r3, [r3, #5]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f90c 	bl	800b35c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	791b      	ldrb	r3, [r3, #4]
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f906 	bl	800b35c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b156:	2302      	movs	r3, #2
 800b158:	73fb      	strb	r3, [r7, #15]
      break;
 800b15a:	e00a      	b.n	800b172 <USBH_HandleControl+0x2de>

    default:
      break;
 800b15c:	bf00      	nop
 800b15e:	e008      	b.n	800b172 <USBH_HandleControl+0x2de>
      break;
 800b160:	bf00      	nop
 800b162:	e006      	b.n	800b172 <USBH_HandleControl+0x2de>
      break;
 800b164:	bf00      	nop
 800b166:	e004      	b.n	800b172 <USBH_HandleControl+0x2de>
      break;
 800b168:	bf00      	nop
 800b16a:	e002      	b.n	800b172 <USBH_HandleControl+0x2de>
      break;
 800b16c:	bf00      	nop
 800b16e:	e000      	b.n	800b172 <USBH_HandleControl+0x2de>
      break;
 800b170:	bf00      	nop
  }

  return status;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af04      	add	r7, sp, #16
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b18a:	79f9      	ldrb	r1, [r7, #7]
 800b18c:	2300      	movs	r3, #0
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	2308      	movs	r3, #8
 800b192:	9302      	str	r3, [sp, #8]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	2300      	movs	r3, #0
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	2300      	movs	r3, #0
 800b19e:	2200      	movs	r2, #0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 fba8 	bl	800b8f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af04      	add	r7, sp, #16
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	460b      	mov	r3, r1
 800b1c0:	80fb      	strh	r3, [r7, #6]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1d4:	7979      	ldrb	r1, [r7, #5]
 800b1d6:	7e3b      	ldrb	r3, [r7, #24]
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	88fb      	ldrh	r3, [r7, #6]
 800b1dc:	9302      	str	r3, [sp, #8]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f000 fb83 	bl	800b8f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b088      	sub	sp, #32
 800b1fe:	af04      	add	r7, sp, #16
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	60b9      	str	r1, [r7, #8]
 800b204:	4611      	mov	r1, r2
 800b206:	461a      	mov	r2, r3
 800b208:	460b      	mov	r3, r1
 800b20a:	80fb      	strh	r3, [r7, #6]
 800b20c:	4613      	mov	r3, r2
 800b20e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b210:	7979      	ldrb	r1, [r7, #5]
 800b212:	2300      	movs	r3, #0
 800b214:	9303      	str	r3, [sp, #12]
 800b216:	88fb      	ldrh	r3, [r7, #6]
 800b218:	9302      	str	r3, [sp, #8]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	2301      	movs	r3, #1
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	2201      	movs	r2, #1
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 fb65 	bl	800b8f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b22c:	2300      	movs	r3, #0

}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b088      	sub	sp, #32
 800b23a:	af04      	add	r7, sp, #16
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	4611      	mov	r1, r2
 800b242:	461a      	mov	r2, r3
 800b244:	460b      	mov	r3, r1
 800b246:	80fb      	strh	r3, [r7, #6]
 800b248:	4613      	mov	r3, r2
 800b24a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b25a:	7979      	ldrb	r1, [r7, #5]
 800b25c:	7e3b      	ldrb	r3, [r7, #24]
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	9302      	str	r3, [sp, #8]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	2301      	movs	r3, #1
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	2302      	movs	r3, #2
 800b26e:	2200      	movs	r2, #0
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fb40 	bl	800b8f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af04      	add	r7, sp, #16
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	4611      	mov	r1, r2
 800b28c:	461a      	mov	r2, r3
 800b28e:	460b      	mov	r3, r1
 800b290:	80fb      	strh	r3, [r7, #6]
 800b292:	4613      	mov	r3, r2
 800b294:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b296:	7979      	ldrb	r1, [r7, #5]
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 fb22 	bl	800b8f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af04      	add	r7, sp, #16
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	70fb      	strb	r3, [r7, #3]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70bb      	strb	r3, [r7, #2]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b2d6:	7878      	ldrb	r0, [r7, #1]
 800b2d8:	78ba      	ldrb	r2, [r7, #2]
 800b2da:	78f9      	ldrb	r1, [r7, #3]
 800b2dc:	8b3b      	ldrh	r3, [r7, #24]
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	7d3b      	ldrb	r3, [r7, #20]
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	7c3b      	ldrb	r3, [r7, #16]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fab5 	bl	800b85a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fad4 	bl	800b8b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f836 	bl	800b398 <USBH_GetFreePipe>
 800b32c:	4603      	mov	r3, r0
 800b32e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b330:	89fb      	ldrh	r3, [r7, #14]
 800b332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b336:	4293      	cmp	r3, r2
 800b338:	d00a      	beq.n	800b350 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b33a:	78fa      	ldrb	r2, [r7, #3]
 800b33c:	89fb      	ldrh	r3, [r7, #14]
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	33e0      	adds	r3, #224	; 0xe0
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b350:	89fb      	ldrh	r3, [r7, #14]
 800b352:	b2db      	uxtb	r3, r3
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	2b0f      	cmp	r3, #15
 800b36c:	d80d      	bhi.n	800b38a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b36e:	78fb      	ldrb	r3, [r7, #3]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	33e0      	adds	r3, #224	; 0xe0
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	33e0      	adds	r3, #224	; 0xe0
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	440b      	add	r3, r1
 800b388:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
 800b3a8:	e00f      	b.n	800b3ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	33e0      	adds	r3, #224	; 0xe0
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d102      	bne.n	800b3c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	e007      	b.n	800b3d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	73fb      	strb	r3, [r7, #15]
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	2b0f      	cmp	r3, #15
 800b3ce:	d9ec      	bls.n	800b3aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b3d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b3f8:	7a5b      	ldrb	r3, [r3, #9]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d131      	bne.n	800b464 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b400:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b402:	7a5b      	ldrb	r3, [r3, #9]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b40a:	2100      	movs	r1, #0
 800b40c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b40e:	4b19      	ldr	r3, [pc, #100]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b410:	7a5b      	ldrb	r3, [r3, #9]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4a17      	ldr	r2, [pc, #92]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b420:	7a5b      	ldrb	r3, [r3, #9]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	461a      	mov	r2, r3
 800b426:	4b13      	ldr	r3, [pc, #76]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b428:	4413      	add	r3, r2
 800b42a:	79fa      	ldrb	r2, [r7, #7]
 800b42c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b430:	7a5b      	ldrb	r3, [r3, #9]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	b2d1      	uxtb	r1, r2
 800b438:	4a0e      	ldr	r2, [pc, #56]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b43a:	7251      	strb	r1, [r2, #9]
 800b43c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b43e:	7dbb      	ldrb	r3, [r7, #22]
 800b440:	3330      	adds	r3, #48	; 0x30
 800b442:	b2da      	uxtb	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3301      	adds	r3, #1
 800b44c:	223a      	movs	r2, #58	; 0x3a
 800b44e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3302      	adds	r3, #2
 800b454:	222f      	movs	r2, #47	; 0x2f
 800b456:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3303      	adds	r3, #3
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000368 	.word	0x20000368

0800b478 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b482:	2200      	movs	r2, #0
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ffaa 	bl	800b3e0 <FATFS_LinkDriverEx>
 800b48c:	4603      	mov	r3, r0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b49c:	2200      	movs	r2, #0
 800b49e:	490e      	ldr	r1, [pc, #56]	; (800b4d8 <MX_USB_HOST_Init+0x40>)
 800b4a0:	480e      	ldr	r0, [pc, #56]	; (800b4dc <MX_USB_HOST_Init+0x44>)
 800b4a2:	f7fe fb4b 	bl	8009b3c <USBH_Init>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b4ac:	f7f6 f9f8 	bl	80018a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800b4b0:	490b      	ldr	r1, [pc, #44]	; (800b4e0 <MX_USB_HOST_Init+0x48>)
 800b4b2:	480a      	ldr	r0, [pc, #40]	; (800b4dc <MX_USB_HOST_Init+0x44>)
 800b4b4:	f7fe fbd0 	bl	8009c58 <USBH_RegisterClass>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b4be:	f7f6 f9ef 	bl	80018a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b4c2:	4806      	ldr	r0, [pc, #24]	; (800b4dc <MX_USB_HOST_Init+0x44>)
 800b4c4:	f7fe fc54 	bl	8009d70 <USBH_Start>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b4ce:	f7f6 f9e7 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b4d2:	bf00      	nop
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	20000374 	.word	0x20000374
 800b4e0:	2000000c 	.word	0x2000000c

0800b4e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800b4e8:	4802      	ldr	r0, [pc, #8]	; (800b4f4 <MX_USB_HOST_Process+0x10>)
 800b4ea:	f7fe fc51 	bl	8009d90 <USBH_Process>
}
 800b4ee:	bf00      	nop
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000374 	.word	0x20000374

0800b4f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b504:	78fb      	ldrb	r3, [r7, #3]
 800b506:	3b01      	subs	r3, #1
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d819      	bhi.n	800b540 <USBH_UserProcess+0x48>
 800b50c:	a201      	add	r2, pc, #4	; (adr r2, 800b514 <USBH_UserProcess+0x1c>)
 800b50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b512:	bf00      	nop
 800b514:	0800b541 	.word	0x0800b541
 800b518:	0800b531 	.word	0x0800b531
 800b51c:	0800b541 	.word	0x0800b541
 800b520:	0800b539 	.word	0x0800b539
 800b524:	0800b529 	.word	0x0800b529
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <USBH_UserProcess+0x58>)
 800b52a:	2203      	movs	r2, #3
 800b52c:	701a      	strb	r2, [r3, #0]
  break;
 800b52e:	e008      	b.n	800b542 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b530:	4b07      	ldr	r3, [pc, #28]	; (800b550 <USBH_UserProcess+0x58>)
 800b532:	2202      	movs	r2, #2
 800b534:	701a      	strb	r2, [r3, #0]
  break;
 800b536:	e004      	b.n	800b542 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b538:	4b05      	ldr	r3, [pc, #20]	; (800b550 <USBH_UserProcess+0x58>)
 800b53a:	2201      	movs	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
  break;
 800b53e:	e000      	b.n	800b542 <USBH_UserProcess+0x4a>

  default:
  break;
 800b540:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	2000074c 	.word	0x2000074c

0800b554 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08a      	sub	sp, #40	; 0x28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b55c:	f107 0314 	add.w	r3, r7, #20
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	60da      	str	r2, [r3, #12]
 800b56a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a24      	ldr	r2, [pc, #144]	; (800b604 <HAL_HCD_MspInit+0xb0>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d141      	bne.n	800b5fa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
 800b57a:	4b23      	ldr	r3, [pc, #140]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57e:	4a22      	ldr	r2, [pc, #136]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b580:	f043 0302 	orr.w	r3, r3, #2
 800b584:	6313      	str	r3, [r2, #48]	; 0x30
 800b586:	4b20      	ldr	r3, [pc, #128]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	613b      	str	r3, [r7, #16]
 800b590:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b592:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b598:	2302      	movs	r3, #2
 800b59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4817      	ldr	r0, [pc, #92]	; (800b60c <HAL_HCD_MspInit+0xb8>)
 800b5b0:	f7f6 ff38 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b5b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b5c2:	f107 0314 	add.w	r3, r7, #20
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	4810      	ldr	r0, [pc, #64]	; (800b60c <HAL_HCD_MspInit+0xb8>)
 800b5ca:	f7f6 ff2b 	bl	8002424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d6:	4a0c      	ldr	r2, [pc, #48]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b5d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b5de:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <HAL_HCD_MspInit+0xb4>)
 800b5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	204d      	movs	r0, #77	; 0x4d
 800b5f0:	f7f6 fe33 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b5f4:	204d      	movs	r0, #77	; 0x4d
 800b5f6:	f7f6 fe4c 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	3728      	adds	r7, #40	; 0x28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	40040000 	.word	0x40040000
 800b608:	40023800 	.word	0x40023800
 800b60c:	40020400 	.word	0x40020400

0800b610 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe ff95 	bl	800a54e <USBH_LL_IncTimer>
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe ffcd 	bl	800a5da <USBH_LL_Connect>
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe ffd6 	bl	800a608 <USBH_LL_Disconnect>
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
 800b670:	4613      	mov	r3, r2
 800b672:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe ff87 	bl	800a5a2 <USBH_LL_PortEnabled>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe ff87 	bl	800a5be <USBH_LL_PortDisabled>
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d132      	bne.n	800b730 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	; (800b73c <USBH_LL_Init+0x84>)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a19      	ldr	r2, [pc, #100]	; (800b73c <USBH_LL_Init+0x84>)
 800b6d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b6da:	4b18      	ldr	r3, [pc, #96]	; (800b73c <USBH_LL_Init+0x84>)
 800b6dc:	4a18      	ldr	r2, [pc, #96]	; (800b740 <USBH_LL_Init+0x88>)
 800b6de:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b6e0:	4b16      	ldr	r3, [pc, #88]	; (800b73c <USBH_LL_Init+0x84>)
 800b6e2:	220c      	movs	r2, #12
 800b6e4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b6e6:	4b15      	ldr	r3, [pc, #84]	; (800b73c <USBH_LL_Init+0x84>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <USBH_LL_Init+0x84>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <USBH_LL_Init+0x84>)
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b6f8:	4b10      	ldr	r3, [pc, #64]	; (800b73c <USBH_LL_Init+0x84>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <USBH_LL_Init+0x84>)
 800b700:	2200      	movs	r2, #0
 800b702:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <USBH_LL_Init+0x84>)
 800b706:	2200      	movs	r2, #0
 800b708:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b70a:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <USBH_LL_Init+0x84>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b710:	480a      	ldr	r0, [pc, #40]	; (800b73c <USBH_LL_Init+0x84>)
 800b712:	f7f7 f87d 	bl	8002810 <HAL_HCD_Init>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b71c:	f7f6 f8c0 	bl	80018a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b720:	4806      	ldr	r0, [pc, #24]	; (800b73c <USBH_LL_Init+0x84>)
 800b722:	f7f7 fc60 	bl	8002fe6 <HAL_HCD_GetCurrentFrame>
 800b726:	4603      	mov	r3, r0
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7fe ff00 	bl	800a530 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000750 	.word	0x20000750
 800b740:	40040000 	.word	0x40040000

0800b744 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f7 fbcd 	bl	8002efa <HAL_HCD_Start>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f98c 	bl	800ba84 <USBH_Get_USB_Status>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b770:	7bbb      	ldrb	r3, [r7, #14]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b790:	4618      	mov	r0, r3
 800b792:	f7f7 fbd5 	bl	8002f40 <HAL_HCD_Stop>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f971 	bl	800ba84 <USBH_Get_USB_Status>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f7 fc1d 	bl	8003002 <HAL_HCD_GetCurrentSpeed>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d00c      	beq.n	800b7e8 <USBH_LL_GetSpeed+0x38>
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d80d      	bhi.n	800b7ee <USBH_LL_GetSpeed+0x3e>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d002      	beq.n	800b7dc <USBH_LL_GetSpeed+0x2c>
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d003      	beq.n	800b7e2 <USBH_LL_GetSpeed+0x32>
 800b7da:	e008      	b.n	800b7ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e0:	e008      	b.n	800b7f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e6:	e005      	b.n	800b7f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ec:	e002      	b.n	800b7f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f2:	bf00      	nop
  }
  return  speed;
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b814:	4618      	mov	r0, r3
 800b816:	f7f7 fbb0 	bl	8002f7a <HAL_HCD_ResetPort>
 800b81a:	4603      	mov	r3, r0
 800b81c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	4618      	mov	r0, r3
 800b822:	f000 f92f 	bl	800ba84 <USBH_Get_USB_Status>
 800b826:	4603      	mov	r3, r0
 800b828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f7 fbb7 	bl	8002fbe <HAL_HCD_HC_GetXferCount>
 800b850:	4603      	mov	r3, r0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b85a:	b590      	push	{r4, r7, lr}
 800b85c:	b089      	sub	sp, #36	; 0x24
 800b85e:	af04      	add	r7, sp, #16
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	4608      	mov	r0, r1
 800b864:	4611      	mov	r1, r2
 800b866:	461a      	mov	r2, r3
 800b868:	4603      	mov	r3, r0
 800b86a:	70fb      	strb	r3, [r7, #3]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70bb      	strb	r3, [r7, #2]
 800b870:	4613      	mov	r3, r2
 800b872:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b882:	787c      	ldrb	r4, [r7, #1]
 800b884:	78ba      	ldrb	r2, [r7, #2]
 800b886:	78f9      	ldrb	r1, [r7, #3]
 800b888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b88a:	9302      	str	r3, [sp, #8]
 800b88c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	4623      	mov	r3, r4
 800b89a:	f7f7 f81b 	bl	80028d4 <HAL_HCD_HC_Init>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 f8ed 	bl	800ba84 <USBH_Get_USB_Status>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd90      	pop	{r4, r7, pc}

0800b8b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8d2:	78fa      	ldrb	r2, [r7, #3]
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f7 f88b 	bl	80029f2 <HAL_HCD_HC_Halt>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f8ce 	bl	800ba84 <USBH_Get_USB_Status>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b8f6:	b590      	push	{r4, r7, lr}
 800b8f8:	b089      	sub	sp, #36	; 0x24
 800b8fa:	af04      	add	r7, sp, #16
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	4608      	mov	r0, r1
 800b900:	4611      	mov	r1, r2
 800b902:	461a      	mov	r2, r3
 800b904:	4603      	mov	r3, r0
 800b906:	70fb      	strb	r3, [r7, #3]
 800b908:	460b      	mov	r3, r1
 800b90a:	70bb      	strb	r3, [r7, #2]
 800b90c:	4613      	mov	r3, r2
 800b90e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b91e:	787c      	ldrb	r4, [r7, #1]
 800b920:	78ba      	ldrb	r2, [r7, #2]
 800b922:	78f9      	ldrb	r1, [r7, #3]
 800b924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b928:	9303      	str	r3, [sp, #12]
 800b92a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	4623      	mov	r3, r4
 800b93a:	f7f7 f87d 	bl	8002a38 <HAL_HCD_HC_SubmitRequest>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 f89d 	bl	800ba84 <USBH_Get_USB_Status>
 800b94a:	4603      	mov	r3, r0
 800b94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	bd90      	pop	{r4, r7, pc}

0800b958 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b96a:	78fa      	ldrb	r2, [r7, #3]
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f7 fb11 	bl	8002f96 <HAL_HCD_HC_GetURBState>
 800b974:	4603      	mov	r3, r0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f8a0 	bl	800badc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b99c:	20c8      	movs	r0, #200	; 0xc8
 800b99e:	f7f6 fb5d 	bl	800205c <HAL_Delay>
  return USBH_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	212c      	movs	r1, #44	; 0x2c
 800b9ca:	fb01 f303 	mul.w	r3, r1, r3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	333b      	adds	r3, #59	; 0x3b
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d009      	beq.n	800b9ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	212c      	movs	r1, #44	; 0x2c
 800b9de:	fb01 f303 	mul.w	r3, r1, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	3354      	adds	r3, #84	; 0x54
 800b9e6:	78ba      	ldrb	r2, [r7, #2]
 800b9e8:	701a      	strb	r2, [r3, #0]
 800b9ea:	e008      	b.n	800b9fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	212c      	movs	r1, #44	; 0x2c
 800b9f2:	fb01 f303 	mul.w	r3, r1, r3
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3355      	adds	r3, #85	; 0x55
 800b9fa:	78ba      	ldrb	r2, [r7, #2]
 800b9fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba22:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	212c      	movs	r1, #44	; 0x2c
 800ba2a:	fb01 f303 	mul.w	r3, r1, r3
 800ba2e:	4413      	add	r3, r2
 800ba30:	333b      	adds	r3, #59	; 0x3b
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	212c      	movs	r1, #44	; 0x2c
 800ba3e:	fb01 f303 	mul.w	r3, r1, r3
 800ba42:	4413      	add	r3, r2
 800ba44:	3354      	adds	r3, #84	; 0x54
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	73fb      	strb	r3, [r7, #15]
 800ba4a:	e008      	b.n	800ba5e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800ba4c:	78fb      	ldrb	r3, [r7, #3]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	212c      	movs	r1, #44	; 0x2c
 800ba52:	fb01 f303 	mul.w	r3, r1, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	3355      	adds	r3, #85	; 0x55
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7f6 faf1 	bl	800205c <HAL_Delay>
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d817      	bhi.n	800bac8 <USBH_Get_USB_Status+0x44>
 800ba98:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <USBH_Get_USB_Status+0x1c>)
 800ba9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9e:	bf00      	nop
 800baa0:	0800bab1 	.word	0x0800bab1
 800baa4:	0800bab7 	.word	0x0800bab7
 800baa8:	0800babd 	.word	0x0800babd
 800baac:	0800bac3 	.word	0x0800bac3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
    break;
 800bab4:	e00b      	b.n	800bace <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bab6:	2302      	movs	r3, #2
 800bab8:	73fb      	strb	r3, [r7, #15]
    break;
 800baba:	e008      	b.n	800bace <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800babc:	2301      	movs	r3, #1
 800babe:	73fb      	strb	r3, [r7, #15]
    break;
 800bac0:	e005      	b.n	800bace <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bac2:	2302      	movs	r3, #2
 800bac4:	73fb      	strb	r3, [r7, #15]
    break;
 800bac6:	e002      	b.n	800bace <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bac8:	2302      	movs	r3, #2
 800baca:	73fb      	strb	r3, [r7, #15]
    break;
 800bacc:	bf00      	nop
  }
  return usb_status;
 800bace:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800baea:	79fb      	ldrb	r3, [r7, #7]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d102      	bne.n	800baf6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800baf0:	2301      	movs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
 800baf4:	e001      	b.n	800bafa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	461a      	mov	r2, r3
 800bafe:	2110      	movs	r1, #16
 800bb00:	4803      	ldr	r0, [pc, #12]	; (800bb10 <MX_DriverVbusHS+0x34>)
 800bb02:	f7f6 fe53 	bl	80027ac <HAL_GPIO_WritePin>
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40020800 	.word	0x40020800

0800bb14 <atoi>:
 800bb14:	220a      	movs	r2, #10
 800bb16:	2100      	movs	r1, #0
 800bb18:	f000 baa0 	b.w	800c05c <strtol>

0800bb1c <__errno>:
 800bb1c:	4b01      	ldr	r3, [pc, #4]	; (800bb24 <__errno+0x8>)
 800bb1e:	6818      	ldr	r0, [r3, #0]
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	2000002c 	.word	0x2000002c

0800bb28 <__libc_init_array>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4d0d      	ldr	r5, [pc, #52]	; (800bb60 <__libc_init_array+0x38>)
 800bb2c:	4c0d      	ldr	r4, [pc, #52]	; (800bb64 <__libc_init_array+0x3c>)
 800bb2e:	1b64      	subs	r4, r4, r5
 800bb30:	10a4      	asrs	r4, r4, #2
 800bb32:	2600      	movs	r6, #0
 800bb34:	42a6      	cmp	r6, r4
 800bb36:	d109      	bne.n	800bb4c <__libc_init_array+0x24>
 800bb38:	4d0b      	ldr	r5, [pc, #44]	; (800bb68 <__libc_init_array+0x40>)
 800bb3a:	4c0c      	ldr	r4, [pc, #48]	; (800bb6c <__libc_init_array+0x44>)
 800bb3c:	f001 f91e 	bl	800cd7c <_init>
 800bb40:	1b64      	subs	r4, r4, r5
 800bb42:	10a4      	asrs	r4, r4, #2
 800bb44:	2600      	movs	r6, #0
 800bb46:	42a6      	cmp	r6, r4
 800bb48:	d105      	bne.n	800bb56 <__libc_init_array+0x2e>
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb50:	4798      	blx	r3
 800bb52:	3601      	adds	r6, #1
 800bb54:	e7ee      	b.n	800bb34 <__libc_init_array+0xc>
 800bb56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5a:	4798      	blx	r3
 800bb5c:	3601      	adds	r6, #1
 800bb5e:	e7f2      	b.n	800bb46 <__libc_init_array+0x1e>
 800bb60:	0800d2f8 	.word	0x0800d2f8
 800bb64:	0800d2f8 	.word	0x0800d2f8
 800bb68:	0800d2f8 	.word	0x0800d2f8
 800bb6c:	0800d2fc 	.word	0x0800d2fc

0800bb70 <malloc>:
 800bb70:	4b02      	ldr	r3, [pc, #8]	; (800bb7c <malloc+0xc>)
 800bb72:	4601      	mov	r1, r0
 800bb74:	6818      	ldr	r0, [r3, #0]
 800bb76:	f000 b88d 	b.w	800bc94 <_malloc_r>
 800bb7a:	bf00      	nop
 800bb7c:	2000002c 	.word	0x2000002c

0800bb80 <free>:
 800bb80:	4b02      	ldr	r3, [pc, #8]	; (800bb8c <free+0xc>)
 800bb82:	4601      	mov	r1, r0
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	f000 b819 	b.w	800bbbc <_free_r>
 800bb8a:	bf00      	nop
 800bb8c:	2000002c 	.word	0x2000002c

0800bb90 <memcpy>:
 800bb90:	440a      	add	r2, r1
 800bb92:	4291      	cmp	r1, r2
 800bb94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb98:	d100      	bne.n	800bb9c <memcpy+0xc>
 800bb9a:	4770      	bx	lr
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bba6:	4291      	cmp	r1, r2
 800bba8:	d1f9      	bne.n	800bb9e <memcpy+0xe>
 800bbaa:	bd10      	pop	{r4, pc}

0800bbac <memset>:
 800bbac:	4402      	add	r2, r0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d100      	bne.n	800bbb6 <memset+0xa>
 800bbb4:	4770      	bx	lr
 800bbb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbba:	e7f9      	b.n	800bbb0 <memset+0x4>

0800bbbc <_free_r>:
 800bbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d044      	beq.n	800bc4c <_free_r+0x90>
 800bbc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbc6:	9001      	str	r0, [sp, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f1a1 0404 	sub.w	r4, r1, #4
 800bbce:	bfb8      	it	lt
 800bbd0:	18e4      	addlt	r4, r4, r3
 800bbd2:	f000 fc6d 	bl	800c4b0 <__malloc_lock>
 800bbd6:	4a1e      	ldr	r2, [pc, #120]	; (800bc50 <_free_r+0x94>)
 800bbd8:	9801      	ldr	r0, [sp, #4]
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	b933      	cbnz	r3, 800bbec <_free_r+0x30>
 800bbde:	6063      	str	r3, [r4, #4]
 800bbe0:	6014      	str	r4, [r2, #0]
 800bbe2:	b003      	add	sp, #12
 800bbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbe8:	f000 bc68 	b.w	800c4bc <__malloc_unlock>
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	d908      	bls.n	800bc02 <_free_r+0x46>
 800bbf0:	6825      	ldr	r5, [r4, #0]
 800bbf2:	1961      	adds	r1, r4, r5
 800bbf4:	428b      	cmp	r3, r1
 800bbf6:	bf01      	itttt	eq
 800bbf8:	6819      	ldreq	r1, [r3, #0]
 800bbfa:	685b      	ldreq	r3, [r3, #4]
 800bbfc:	1949      	addeq	r1, r1, r5
 800bbfe:	6021      	streq	r1, [r4, #0]
 800bc00:	e7ed      	b.n	800bbde <_free_r+0x22>
 800bc02:	461a      	mov	r2, r3
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	b10b      	cbz	r3, 800bc0c <_free_r+0x50>
 800bc08:	42a3      	cmp	r3, r4
 800bc0a:	d9fa      	bls.n	800bc02 <_free_r+0x46>
 800bc0c:	6811      	ldr	r1, [r2, #0]
 800bc0e:	1855      	adds	r5, r2, r1
 800bc10:	42a5      	cmp	r5, r4
 800bc12:	d10b      	bne.n	800bc2c <_free_r+0x70>
 800bc14:	6824      	ldr	r4, [r4, #0]
 800bc16:	4421      	add	r1, r4
 800bc18:	1854      	adds	r4, r2, r1
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	6011      	str	r1, [r2, #0]
 800bc1e:	d1e0      	bne.n	800bbe2 <_free_r+0x26>
 800bc20:	681c      	ldr	r4, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	6053      	str	r3, [r2, #4]
 800bc26:	4421      	add	r1, r4
 800bc28:	6011      	str	r1, [r2, #0]
 800bc2a:	e7da      	b.n	800bbe2 <_free_r+0x26>
 800bc2c:	d902      	bls.n	800bc34 <_free_r+0x78>
 800bc2e:	230c      	movs	r3, #12
 800bc30:	6003      	str	r3, [r0, #0]
 800bc32:	e7d6      	b.n	800bbe2 <_free_r+0x26>
 800bc34:	6825      	ldr	r5, [r4, #0]
 800bc36:	1961      	adds	r1, r4, r5
 800bc38:	428b      	cmp	r3, r1
 800bc3a:	bf04      	itt	eq
 800bc3c:	6819      	ldreq	r1, [r3, #0]
 800bc3e:	685b      	ldreq	r3, [r3, #4]
 800bc40:	6063      	str	r3, [r4, #4]
 800bc42:	bf04      	itt	eq
 800bc44:	1949      	addeq	r1, r1, r5
 800bc46:	6021      	streq	r1, [r4, #0]
 800bc48:	6054      	str	r4, [r2, #4]
 800bc4a:	e7ca      	b.n	800bbe2 <_free_r+0x26>
 800bc4c:	b003      	add	sp, #12
 800bc4e:	bd30      	pop	{r4, r5, pc}
 800bc50:	20000a54 	.word	0x20000a54

0800bc54 <sbrk_aligned>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4e0e      	ldr	r6, [pc, #56]	; (800bc90 <sbrk_aligned+0x3c>)
 800bc58:	460c      	mov	r4, r1
 800bc5a:	6831      	ldr	r1, [r6, #0]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	b911      	cbnz	r1, 800bc66 <sbrk_aligned+0x12>
 800bc60:	f000 f8a4 	bl	800bdac <_sbrk_r>
 800bc64:	6030      	str	r0, [r6, #0]
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 f89f 	bl	800bdac <_sbrk_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d00a      	beq.n	800bc88 <sbrk_aligned+0x34>
 800bc72:	1cc4      	adds	r4, r0, #3
 800bc74:	f024 0403 	bic.w	r4, r4, #3
 800bc78:	42a0      	cmp	r0, r4
 800bc7a:	d007      	beq.n	800bc8c <sbrk_aligned+0x38>
 800bc7c:	1a21      	subs	r1, r4, r0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f894 	bl	800bdac <_sbrk_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d101      	bne.n	800bc8c <sbrk_aligned+0x38>
 800bc88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	20000a58 	.word	0x20000a58

0800bc94 <_malloc_r>:
 800bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc98:	1ccd      	adds	r5, r1, #3
 800bc9a:	f025 0503 	bic.w	r5, r5, #3
 800bc9e:	3508      	adds	r5, #8
 800bca0:	2d0c      	cmp	r5, #12
 800bca2:	bf38      	it	cc
 800bca4:	250c      	movcc	r5, #12
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	4607      	mov	r7, r0
 800bcaa:	db01      	blt.n	800bcb0 <_malloc_r+0x1c>
 800bcac:	42a9      	cmp	r1, r5
 800bcae:	d905      	bls.n	800bcbc <_malloc_r+0x28>
 800bcb0:	230c      	movs	r3, #12
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcbc:	4e2e      	ldr	r6, [pc, #184]	; (800bd78 <_malloc_r+0xe4>)
 800bcbe:	f000 fbf7 	bl	800c4b0 <__malloc_lock>
 800bcc2:	6833      	ldr	r3, [r6, #0]
 800bcc4:	461c      	mov	r4, r3
 800bcc6:	bb34      	cbnz	r4, 800bd16 <_malloc_r+0x82>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7ff ffc2 	bl	800bc54 <sbrk_aligned>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	d14d      	bne.n	800bd72 <_malloc_r+0xde>
 800bcd6:	6834      	ldr	r4, [r6, #0]
 800bcd8:	4626      	mov	r6, r4
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d140      	bne.n	800bd60 <_malloc_r+0xcc>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	4631      	mov	r1, r6
 800bce2:	4638      	mov	r0, r7
 800bce4:	eb04 0803 	add.w	r8, r4, r3
 800bce8:	f000 f860 	bl	800bdac <_sbrk_r>
 800bcec:	4580      	cmp	r8, r0
 800bcee:	d13a      	bne.n	800bd66 <_malloc_r+0xd2>
 800bcf0:	6821      	ldr	r1, [r4, #0]
 800bcf2:	3503      	adds	r5, #3
 800bcf4:	1a6d      	subs	r5, r5, r1
 800bcf6:	f025 0503 	bic.w	r5, r5, #3
 800bcfa:	3508      	adds	r5, #8
 800bcfc:	2d0c      	cmp	r5, #12
 800bcfe:	bf38      	it	cc
 800bd00:	250c      	movcc	r5, #12
 800bd02:	4629      	mov	r1, r5
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7ff ffa5 	bl	800bc54 <sbrk_aligned>
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d02b      	beq.n	800bd66 <_malloc_r+0xd2>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	442b      	add	r3, r5
 800bd12:	6023      	str	r3, [r4, #0]
 800bd14:	e00e      	b.n	800bd34 <_malloc_r+0xa0>
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	1b52      	subs	r2, r2, r5
 800bd1a:	d41e      	bmi.n	800bd5a <_malloc_r+0xc6>
 800bd1c:	2a0b      	cmp	r2, #11
 800bd1e:	d916      	bls.n	800bd4e <_malloc_r+0xba>
 800bd20:	1961      	adds	r1, r4, r5
 800bd22:	42a3      	cmp	r3, r4
 800bd24:	6025      	str	r5, [r4, #0]
 800bd26:	bf18      	it	ne
 800bd28:	6059      	strne	r1, [r3, #4]
 800bd2a:	6863      	ldr	r3, [r4, #4]
 800bd2c:	bf08      	it	eq
 800bd2e:	6031      	streq	r1, [r6, #0]
 800bd30:	5162      	str	r2, [r4, r5]
 800bd32:	604b      	str	r3, [r1, #4]
 800bd34:	4638      	mov	r0, r7
 800bd36:	f104 060b 	add.w	r6, r4, #11
 800bd3a:	f000 fbbf 	bl	800c4bc <__malloc_unlock>
 800bd3e:	f026 0607 	bic.w	r6, r6, #7
 800bd42:	1d23      	adds	r3, r4, #4
 800bd44:	1af2      	subs	r2, r6, r3
 800bd46:	d0b6      	beq.n	800bcb6 <_malloc_r+0x22>
 800bd48:	1b9b      	subs	r3, r3, r6
 800bd4a:	50a3      	str	r3, [r4, r2]
 800bd4c:	e7b3      	b.n	800bcb6 <_malloc_r+0x22>
 800bd4e:	6862      	ldr	r2, [r4, #4]
 800bd50:	42a3      	cmp	r3, r4
 800bd52:	bf0c      	ite	eq
 800bd54:	6032      	streq	r2, [r6, #0]
 800bd56:	605a      	strne	r2, [r3, #4]
 800bd58:	e7ec      	b.n	800bd34 <_malloc_r+0xa0>
 800bd5a:	4623      	mov	r3, r4
 800bd5c:	6864      	ldr	r4, [r4, #4]
 800bd5e:	e7b2      	b.n	800bcc6 <_malloc_r+0x32>
 800bd60:	4634      	mov	r4, r6
 800bd62:	6876      	ldr	r6, [r6, #4]
 800bd64:	e7b9      	b.n	800bcda <_malloc_r+0x46>
 800bd66:	230c      	movs	r3, #12
 800bd68:	603b      	str	r3, [r7, #0]
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	f000 fba6 	bl	800c4bc <__malloc_unlock>
 800bd70:	e7a1      	b.n	800bcb6 <_malloc_r+0x22>
 800bd72:	6025      	str	r5, [r4, #0]
 800bd74:	e7de      	b.n	800bd34 <_malloc_r+0xa0>
 800bd76:	bf00      	nop
 800bd78:	20000a54 	.word	0x20000a54

0800bd7c <iprintf>:
 800bd7c:	b40f      	push	{r0, r1, r2, r3}
 800bd7e:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <iprintf+0x2c>)
 800bd80:	b513      	push	{r0, r1, r4, lr}
 800bd82:	681c      	ldr	r4, [r3, #0]
 800bd84:	b124      	cbz	r4, 800bd90 <iprintf+0x14>
 800bd86:	69a3      	ldr	r3, [r4, #24]
 800bd88:	b913      	cbnz	r3, 800bd90 <iprintf+0x14>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 fa8a 	bl	800c2a4 <__sinit>
 800bd90:	ab05      	add	r3, sp, #20
 800bd92:	9a04      	ldr	r2, [sp, #16]
 800bd94:	68a1      	ldr	r1, [r4, #8]
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fbbf 	bl	800c51c <_vfiprintf_r>
 800bd9e:	b002      	add	sp, #8
 800bda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bda4:	b004      	add	sp, #16
 800bda6:	4770      	bx	lr
 800bda8:	2000002c 	.word	0x2000002c

0800bdac <_sbrk_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d06      	ldr	r5, [pc, #24]	; (800bdc8 <_sbrk_r+0x1c>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	f7f6 f86c 	bl	8001e94 <_sbrk>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_sbrk_r+0x1a>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_sbrk_r+0x1a>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20000a60 	.word	0x20000a60

0800bdcc <setvbuf>:
 800bdcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdd0:	461d      	mov	r5, r3
 800bdd2:	4b5d      	ldr	r3, [pc, #372]	; (800bf48 <setvbuf+0x17c>)
 800bdd4:	681f      	ldr	r7, [r3, #0]
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	460e      	mov	r6, r1
 800bdda:	4690      	mov	r8, r2
 800bddc:	b127      	cbz	r7, 800bde8 <setvbuf+0x1c>
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	b913      	cbnz	r3, 800bde8 <setvbuf+0x1c>
 800bde2:	4638      	mov	r0, r7
 800bde4:	f000 fa5e 	bl	800c2a4 <__sinit>
 800bde8:	4b58      	ldr	r3, [pc, #352]	; (800bf4c <setvbuf+0x180>)
 800bdea:	429c      	cmp	r4, r3
 800bdec:	d167      	bne.n	800bebe <setvbuf+0xf2>
 800bdee:	687c      	ldr	r4, [r7, #4]
 800bdf0:	f1b8 0f02 	cmp.w	r8, #2
 800bdf4:	d006      	beq.n	800be04 <setvbuf+0x38>
 800bdf6:	f1b8 0f01 	cmp.w	r8, #1
 800bdfa:	f200 809f 	bhi.w	800bf3c <setvbuf+0x170>
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	f2c0 809c 	blt.w	800bf3c <setvbuf+0x170>
 800be04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be06:	07db      	lsls	r3, r3, #31
 800be08:	d405      	bmi.n	800be16 <setvbuf+0x4a>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	0598      	lsls	r0, r3, #22
 800be0e:	d402      	bmi.n	800be16 <setvbuf+0x4a>
 800be10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be12:	f000 fae5 	bl	800c3e0 <__retarget_lock_acquire_recursive>
 800be16:	4621      	mov	r1, r4
 800be18:	4638      	mov	r0, r7
 800be1a:	f000 f9af 	bl	800c17c <_fflush_r>
 800be1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be20:	b141      	cbz	r1, 800be34 <setvbuf+0x68>
 800be22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be26:	4299      	cmp	r1, r3
 800be28:	d002      	beq.n	800be30 <setvbuf+0x64>
 800be2a:	4638      	mov	r0, r7
 800be2c:	f7ff fec6 	bl	800bbbc <_free_r>
 800be30:	2300      	movs	r3, #0
 800be32:	6363      	str	r3, [r4, #52]	; 0x34
 800be34:	2300      	movs	r3, #0
 800be36:	61a3      	str	r3, [r4, #24]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	0619      	lsls	r1, r3, #24
 800be3e:	d503      	bpl.n	800be48 <setvbuf+0x7c>
 800be40:	6921      	ldr	r1, [r4, #16]
 800be42:	4638      	mov	r0, r7
 800be44:	f7ff feba 	bl	800bbbc <_free_r>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	f1b8 0f02 	cmp.w	r8, #2
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	d06c      	beq.n	800bf34 <setvbuf+0x168>
 800be5a:	ab01      	add	r3, sp, #4
 800be5c:	466a      	mov	r2, sp
 800be5e:	4621      	mov	r1, r4
 800be60:	4638      	mov	r0, r7
 800be62:	f000 fabf 	bl	800c3e4 <__swhatbuf_r>
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	4318      	orrs	r0, r3
 800be6a:	81a0      	strh	r0, [r4, #12]
 800be6c:	2d00      	cmp	r5, #0
 800be6e:	d130      	bne.n	800bed2 <setvbuf+0x106>
 800be70:	9d00      	ldr	r5, [sp, #0]
 800be72:	4628      	mov	r0, r5
 800be74:	f7ff fe7c 	bl	800bb70 <malloc>
 800be78:	4606      	mov	r6, r0
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d155      	bne.n	800bf2a <setvbuf+0x15e>
 800be7e:	f8dd 9000 	ldr.w	r9, [sp]
 800be82:	45a9      	cmp	r9, r5
 800be84:	d14a      	bne.n	800bf1c <setvbuf+0x150>
 800be86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be8a:	2200      	movs	r2, #0
 800be8c:	60a2      	str	r2, [r4, #8]
 800be8e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800be92:	6022      	str	r2, [r4, #0]
 800be94:	6122      	str	r2, [r4, #16]
 800be96:	2201      	movs	r2, #1
 800be98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be9c:	6162      	str	r2, [r4, #20]
 800be9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	07d2      	lsls	r2, r2, #31
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	d405      	bmi.n	800beb6 <setvbuf+0xea>
 800beaa:	f413 7f00 	tst.w	r3, #512	; 0x200
 800beae:	d102      	bne.n	800beb6 <setvbuf+0xea>
 800beb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beb2:	f000 fa96 	bl	800c3e2 <__retarget_lock_release_recursive>
 800beb6:	4628      	mov	r0, r5
 800beb8:	b003      	add	sp, #12
 800beba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bebe:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <setvbuf+0x184>)
 800bec0:	429c      	cmp	r4, r3
 800bec2:	d101      	bne.n	800bec8 <setvbuf+0xfc>
 800bec4:	68bc      	ldr	r4, [r7, #8]
 800bec6:	e793      	b.n	800bdf0 <setvbuf+0x24>
 800bec8:	4b22      	ldr	r3, [pc, #136]	; (800bf54 <setvbuf+0x188>)
 800beca:	429c      	cmp	r4, r3
 800becc:	bf08      	it	eq
 800bece:	68fc      	ldreq	r4, [r7, #12]
 800bed0:	e78e      	b.n	800bdf0 <setvbuf+0x24>
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d0cd      	beq.n	800be72 <setvbuf+0xa6>
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	b913      	cbnz	r3, 800bee0 <setvbuf+0x114>
 800beda:	4638      	mov	r0, r7
 800bedc:	f000 f9e2 	bl	800c2a4 <__sinit>
 800bee0:	f1b8 0f01 	cmp.w	r8, #1
 800bee4:	bf08      	it	eq
 800bee6:	89a3      	ldrheq	r3, [r4, #12]
 800bee8:	6026      	str	r6, [r4, #0]
 800beea:	bf04      	itt	eq
 800beec:	f043 0301 	orreq.w	r3, r3, #1
 800bef0:	81a3      	strheq	r3, [r4, #12]
 800bef2:	89a2      	ldrh	r2, [r4, #12]
 800bef4:	f012 0308 	ands.w	r3, r2, #8
 800bef8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800befc:	d01c      	beq.n	800bf38 <setvbuf+0x16c>
 800befe:	07d3      	lsls	r3, r2, #31
 800bf00:	bf41      	itttt	mi
 800bf02:	2300      	movmi	r3, #0
 800bf04:	426d      	negmi	r5, r5
 800bf06:	60a3      	strmi	r3, [r4, #8]
 800bf08:	61a5      	strmi	r5, [r4, #24]
 800bf0a:	bf58      	it	pl
 800bf0c:	60a5      	strpl	r5, [r4, #8]
 800bf0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bf10:	f015 0501 	ands.w	r5, r5, #1
 800bf14:	d115      	bne.n	800bf42 <setvbuf+0x176>
 800bf16:	f412 7f00 	tst.w	r2, #512	; 0x200
 800bf1a:	e7c8      	b.n	800beae <setvbuf+0xe2>
 800bf1c:	4648      	mov	r0, r9
 800bf1e:	f7ff fe27 	bl	800bb70 <malloc>
 800bf22:	4606      	mov	r6, r0
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d0ae      	beq.n	800be86 <setvbuf+0xba>
 800bf28:	464d      	mov	r5, r9
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	e7d0      	b.n	800bed6 <setvbuf+0x10a>
 800bf34:	2500      	movs	r5, #0
 800bf36:	e7a8      	b.n	800be8a <setvbuf+0xbe>
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	e7e8      	b.n	800bf0e <setvbuf+0x142>
 800bf3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bf40:	e7b9      	b.n	800beb6 <setvbuf+0xea>
 800bf42:	2500      	movs	r5, #0
 800bf44:	e7b7      	b.n	800beb6 <setvbuf+0xea>
 800bf46:	bf00      	nop
 800bf48:	2000002c 	.word	0x2000002c
 800bf4c:	0800d27c 	.word	0x0800d27c
 800bf50:	0800d29c 	.word	0x0800d29c
 800bf54:	0800d25c 	.word	0x0800d25c

0800bf58 <_strtol_l.constprop.0>:
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5e:	d001      	beq.n	800bf64 <_strtol_l.constprop.0+0xc>
 800bf60:	2b24      	cmp	r3, #36	; 0x24
 800bf62:	d906      	bls.n	800bf72 <_strtol_l.constprop.0+0x1a>
 800bf64:	f7ff fdda 	bl	800bb1c <__errno>
 800bf68:	2316      	movs	r3, #22
 800bf6a:	6003      	str	r3, [r0, #0]
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c058 <_strtol_l.constprop.0+0x100>
 800bf76:	460d      	mov	r5, r1
 800bf78:	462e      	mov	r6, r5
 800bf7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bf82:	f017 0708 	ands.w	r7, r7, #8
 800bf86:	d1f7      	bne.n	800bf78 <_strtol_l.constprop.0+0x20>
 800bf88:	2c2d      	cmp	r4, #45	; 0x2d
 800bf8a:	d132      	bne.n	800bff2 <_strtol_l.constprop.0+0x9a>
 800bf8c:	782c      	ldrb	r4, [r5, #0]
 800bf8e:	2701      	movs	r7, #1
 800bf90:	1cb5      	adds	r5, r6, #2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d05b      	beq.n	800c04e <_strtol_l.constprop.0+0xf6>
 800bf96:	2b10      	cmp	r3, #16
 800bf98:	d109      	bne.n	800bfae <_strtol_l.constprop.0+0x56>
 800bf9a:	2c30      	cmp	r4, #48	; 0x30
 800bf9c:	d107      	bne.n	800bfae <_strtol_l.constprop.0+0x56>
 800bf9e:	782c      	ldrb	r4, [r5, #0]
 800bfa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bfa4:	2c58      	cmp	r4, #88	; 0x58
 800bfa6:	d14d      	bne.n	800c044 <_strtol_l.constprop.0+0xec>
 800bfa8:	786c      	ldrb	r4, [r5, #1]
 800bfaa:	2310      	movs	r3, #16
 800bfac:	3502      	adds	r5, #2
 800bfae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bfb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bfb6:	f04f 0c00 	mov.w	ip, #0
 800bfba:	fbb8 f9f3 	udiv	r9, r8, r3
 800bfbe:	4666      	mov	r6, ip
 800bfc0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bfc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bfc8:	f1be 0f09 	cmp.w	lr, #9
 800bfcc:	d816      	bhi.n	800bffc <_strtol_l.constprop.0+0xa4>
 800bfce:	4674      	mov	r4, lr
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	dd24      	ble.n	800c01e <_strtol_l.constprop.0+0xc6>
 800bfd4:	f1bc 0f00 	cmp.w	ip, #0
 800bfd8:	db1e      	blt.n	800c018 <_strtol_l.constprop.0+0xc0>
 800bfda:	45b1      	cmp	r9, r6
 800bfdc:	d31c      	bcc.n	800c018 <_strtol_l.constprop.0+0xc0>
 800bfde:	d101      	bne.n	800bfe4 <_strtol_l.constprop.0+0x8c>
 800bfe0:	45a2      	cmp	sl, r4
 800bfe2:	db19      	blt.n	800c018 <_strtol_l.constprop.0+0xc0>
 800bfe4:	fb06 4603 	mla	r6, r6, r3, r4
 800bfe8:	f04f 0c01 	mov.w	ip, #1
 800bfec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bff0:	e7e8      	b.n	800bfc4 <_strtol_l.constprop.0+0x6c>
 800bff2:	2c2b      	cmp	r4, #43	; 0x2b
 800bff4:	bf04      	itt	eq
 800bff6:	782c      	ldrbeq	r4, [r5, #0]
 800bff8:	1cb5      	addeq	r5, r6, #2
 800bffa:	e7ca      	b.n	800bf92 <_strtol_l.constprop.0+0x3a>
 800bffc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c000:	f1be 0f19 	cmp.w	lr, #25
 800c004:	d801      	bhi.n	800c00a <_strtol_l.constprop.0+0xb2>
 800c006:	3c37      	subs	r4, #55	; 0x37
 800c008:	e7e2      	b.n	800bfd0 <_strtol_l.constprop.0+0x78>
 800c00a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c00e:	f1be 0f19 	cmp.w	lr, #25
 800c012:	d804      	bhi.n	800c01e <_strtol_l.constprop.0+0xc6>
 800c014:	3c57      	subs	r4, #87	; 0x57
 800c016:	e7db      	b.n	800bfd0 <_strtol_l.constprop.0+0x78>
 800c018:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c01c:	e7e6      	b.n	800bfec <_strtol_l.constprop.0+0x94>
 800c01e:	f1bc 0f00 	cmp.w	ip, #0
 800c022:	da05      	bge.n	800c030 <_strtol_l.constprop.0+0xd8>
 800c024:	2322      	movs	r3, #34	; 0x22
 800c026:	6003      	str	r3, [r0, #0]
 800c028:	4646      	mov	r6, r8
 800c02a:	b942      	cbnz	r2, 800c03e <_strtol_l.constprop.0+0xe6>
 800c02c:	4630      	mov	r0, r6
 800c02e:	e79e      	b.n	800bf6e <_strtol_l.constprop.0+0x16>
 800c030:	b107      	cbz	r7, 800c034 <_strtol_l.constprop.0+0xdc>
 800c032:	4276      	negs	r6, r6
 800c034:	2a00      	cmp	r2, #0
 800c036:	d0f9      	beq.n	800c02c <_strtol_l.constprop.0+0xd4>
 800c038:	f1bc 0f00 	cmp.w	ip, #0
 800c03c:	d000      	beq.n	800c040 <_strtol_l.constprop.0+0xe8>
 800c03e:	1e69      	subs	r1, r5, #1
 800c040:	6011      	str	r1, [r2, #0]
 800c042:	e7f3      	b.n	800c02c <_strtol_l.constprop.0+0xd4>
 800c044:	2430      	movs	r4, #48	; 0x30
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1b1      	bne.n	800bfae <_strtol_l.constprop.0+0x56>
 800c04a:	2308      	movs	r3, #8
 800c04c:	e7af      	b.n	800bfae <_strtol_l.constprop.0+0x56>
 800c04e:	2c30      	cmp	r4, #48	; 0x30
 800c050:	d0a5      	beq.n	800bf9e <_strtol_l.constprop.0+0x46>
 800c052:	230a      	movs	r3, #10
 800c054:	e7ab      	b.n	800bfae <_strtol_l.constprop.0+0x56>
 800c056:	bf00      	nop
 800c058:	0800d159 	.word	0x0800d159

0800c05c <strtol>:
 800c05c:	4613      	mov	r3, r2
 800c05e:	460a      	mov	r2, r1
 800c060:	4601      	mov	r1, r0
 800c062:	4802      	ldr	r0, [pc, #8]	; (800c06c <strtol+0x10>)
 800c064:	6800      	ldr	r0, [r0, #0]
 800c066:	f7ff bf77 	b.w	800bf58 <_strtol_l.constprop.0>
 800c06a:	bf00      	nop
 800c06c:	2000002c 	.word	0x2000002c

0800c070 <__sflush_r>:
 800c070:	898a      	ldrh	r2, [r1, #12]
 800c072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c076:	4605      	mov	r5, r0
 800c078:	0710      	lsls	r0, r2, #28
 800c07a:	460c      	mov	r4, r1
 800c07c:	d458      	bmi.n	800c130 <__sflush_r+0xc0>
 800c07e:	684b      	ldr	r3, [r1, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	dc05      	bgt.n	800c090 <__sflush_r+0x20>
 800c084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c086:	2b00      	cmp	r3, #0
 800c088:	dc02      	bgt.n	800c090 <__sflush_r+0x20>
 800c08a:	2000      	movs	r0, #0
 800c08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c092:	2e00      	cmp	r6, #0
 800c094:	d0f9      	beq.n	800c08a <__sflush_r+0x1a>
 800c096:	2300      	movs	r3, #0
 800c098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c09c:	682f      	ldr	r7, [r5, #0]
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	d032      	beq.n	800c108 <__sflush_r+0x98>
 800c0a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	075a      	lsls	r2, r3, #29
 800c0a8:	d505      	bpl.n	800c0b6 <__sflush_r+0x46>
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	1ac0      	subs	r0, r0, r3
 800c0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0b0:	b10b      	cbz	r3, 800c0b6 <__sflush_r+0x46>
 800c0b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0b4:	1ac0      	subs	r0, r0, r3
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0bc:	6a21      	ldr	r1, [r4, #32]
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b0      	blx	r6
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	d106      	bne.n	800c0d6 <__sflush_r+0x66>
 800c0c8:	6829      	ldr	r1, [r5, #0]
 800c0ca:	291d      	cmp	r1, #29
 800c0cc:	d82c      	bhi.n	800c128 <__sflush_r+0xb8>
 800c0ce:	4a2a      	ldr	r2, [pc, #168]	; (800c178 <__sflush_r+0x108>)
 800c0d0:	40ca      	lsrs	r2, r1
 800c0d2:	07d6      	lsls	r6, r2, #31
 800c0d4:	d528      	bpl.n	800c128 <__sflush_r+0xb8>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	6062      	str	r2, [r4, #4]
 800c0da:	04d9      	lsls	r1, r3, #19
 800c0dc:	6922      	ldr	r2, [r4, #16]
 800c0de:	6022      	str	r2, [r4, #0]
 800c0e0:	d504      	bpl.n	800c0ec <__sflush_r+0x7c>
 800c0e2:	1c42      	adds	r2, r0, #1
 800c0e4:	d101      	bne.n	800c0ea <__sflush_r+0x7a>
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	b903      	cbnz	r3, 800c0ec <__sflush_r+0x7c>
 800c0ea:	6560      	str	r0, [r4, #84]	; 0x54
 800c0ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ee:	602f      	str	r7, [r5, #0]
 800c0f0:	2900      	cmp	r1, #0
 800c0f2:	d0ca      	beq.n	800c08a <__sflush_r+0x1a>
 800c0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	d002      	beq.n	800c102 <__sflush_r+0x92>
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f7ff fd5d 	bl	800bbbc <_free_r>
 800c102:	2000      	movs	r0, #0
 800c104:	6360      	str	r0, [r4, #52]	; 0x34
 800c106:	e7c1      	b.n	800c08c <__sflush_r+0x1c>
 800c108:	6a21      	ldr	r1, [r4, #32]
 800c10a:	2301      	movs	r3, #1
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b0      	blx	r6
 800c110:	1c41      	adds	r1, r0, #1
 800c112:	d1c7      	bne.n	800c0a4 <__sflush_r+0x34>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0c4      	beq.n	800c0a4 <__sflush_r+0x34>
 800c11a:	2b1d      	cmp	r3, #29
 800c11c:	d001      	beq.n	800c122 <__sflush_r+0xb2>
 800c11e:	2b16      	cmp	r3, #22
 800c120:	d101      	bne.n	800c126 <__sflush_r+0xb6>
 800c122:	602f      	str	r7, [r5, #0]
 800c124:	e7b1      	b.n	800c08a <__sflush_r+0x1a>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	e7ad      	b.n	800c08c <__sflush_r+0x1c>
 800c130:	690f      	ldr	r7, [r1, #16]
 800c132:	2f00      	cmp	r7, #0
 800c134:	d0a9      	beq.n	800c08a <__sflush_r+0x1a>
 800c136:	0793      	lsls	r3, r2, #30
 800c138:	680e      	ldr	r6, [r1, #0]
 800c13a:	bf08      	it	eq
 800c13c:	694b      	ldreq	r3, [r1, #20]
 800c13e:	600f      	str	r7, [r1, #0]
 800c140:	bf18      	it	ne
 800c142:	2300      	movne	r3, #0
 800c144:	eba6 0807 	sub.w	r8, r6, r7
 800c148:	608b      	str	r3, [r1, #8]
 800c14a:	f1b8 0f00 	cmp.w	r8, #0
 800c14e:	dd9c      	ble.n	800c08a <__sflush_r+0x1a>
 800c150:	6a21      	ldr	r1, [r4, #32]
 800c152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c154:	4643      	mov	r3, r8
 800c156:	463a      	mov	r2, r7
 800c158:	4628      	mov	r0, r5
 800c15a:	47b0      	blx	r6
 800c15c:	2800      	cmp	r0, #0
 800c15e:	dc06      	bgt.n	800c16e <__sflush_r+0xfe>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c16c:	e78e      	b.n	800c08c <__sflush_r+0x1c>
 800c16e:	4407      	add	r7, r0
 800c170:	eba8 0800 	sub.w	r8, r8, r0
 800c174:	e7e9      	b.n	800c14a <__sflush_r+0xda>
 800c176:	bf00      	nop
 800c178:	20400001 	.word	0x20400001

0800c17c <_fflush_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	690b      	ldr	r3, [r1, #16]
 800c180:	4605      	mov	r5, r0
 800c182:	460c      	mov	r4, r1
 800c184:	b913      	cbnz	r3, 800c18c <_fflush_r+0x10>
 800c186:	2500      	movs	r5, #0
 800c188:	4628      	mov	r0, r5
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	b118      	cbz	r0, 800c196 <_fflush_r+0x1a>
 800c18e:	6983      	ldr	r3, [r0, #24]
 800c190:	b90b      	cbnz	r3, 800c196 <_fflush_r+0x1a>
 800c192:	f000 f887 	bl	800c2a4 <__sinit>
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <_fflush_r+0x6c>)
 800c198:	429c      	cmp	r4, r3
 800c19a:	d11b      	bne.n	800c1d4 <_fflush_r+0x58>
 800c19c:	686c      	ldr	r4, [r5, #4]
 800c19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0ef      	beq.n	800c186 <_fflush_r+0xa>
 800c1a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1a8:	07d0      	lsls	r0, r2, #31
 800c1aa:	d404      	bmi.n	800c1b6 <_fflush_r+0x3a>
 800c1ac:	0599      	lsls	r1, r3, #22
 800c1ae:	d402      	bmi.n	800c1b6 <_fflush_r+0x3a>
 800c1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1b2:	f000 f915 	bl	800c3e0 <__retarget_lock_acquire_recursive>
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	f7ff ff59 	bl	800c070 <__sflush_r>
 800c1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1c0:	07da      	lsls	r2, r3, #31
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	d4e0      	bmi.n	800c188 <_fflush_r+0xc>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	059b      	lsls	r3, r3, #22
 800c1ca:	d4dd      	bmi.n	800c188 <_fflush_r+0xc>
 800c1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ce:	f000 f908 	bl	800c3e2 <__retarget_lock_release_recursive>
 800c1d2:	e7d9      	b.n	800c188 <_fflush_r+0xc>
 800c1d4:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <_fflush_r+0x70>)
 800c1d6:	429c      	cmp	r4, r3
 800c1d8:	d101      	bne.n	800c1de <_fflush_r+0x62>
 800c1da:	68ac      	ldr	r4, [r5, #8]
 800c1dc:	e7df      	b.n	800c19e <_fflush_r+0x22>
 800c1de:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <_fflush_r+0x74>)
 800c1e0:	429c      	cmp	r4, r3
 800c1e2:	bf08      	it	eq
 800c1e4:	68ec      	ldreq	r4, [r5, #12]
 800c1e6:	e7da      	b.n	800c19e <_fflush_r+0x22>
 800c1e8:	0800d27c 	.word	0x0800d27c
 800c1ec:	0800d29c 	.word	0x0800d29c
 800c1f0:	0800d25c 	.word	0x0800d25c

0800c1f4 <std>:
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	b510      	push	{r4, lr}
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c202:	6083      	str	r3, [r0, #8]
 800c204:	8181      	strh	r1, [r0, #12]
 800c206:	6643      	str	r3, [r0, #100]	; 0x64
 800c208:	81c2      	strh	r2, [r0, #14]
 800c20a:	6183      	str	r3, [r0, #24]
 800c20c:	4619      	mov	r1, r3
 800c20e:	2208      	movs	r2, #8
 800c210:	305c      	adds	r0, #92	; 0x5c
 800c212:	f7ff fccb 	bl	800bbac <memset>
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x38>)
 800c218:	6263      	str	r3, [r4, #36]	; 0x24
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <std+0x3c>)
 800c21c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c21e:	4b05      	ldr	r3, [pc, #20]	; (800c234 <std+0x40>)
 800c220:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c222:	4b05      	ldr	r3, [pc, #20]	; (800c238 <std+0x44>)
 800c224:	6224      	str	r4, [r4, #32]
 800c226:	6323      	str	r3, [r4, #48]	; 0x30
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	bf00      	nop
 800c22c:	0800caa5 	.word	0x0800caa5
 800c230:	0800cac7 	.word	0x0800cac7
 800c234:	0800caff 	.word	0x0800caff
 800c238:	0800cb23 	.word	0x0800cb23

0800c23c <_cleanup_r>:
 800c23c:	4901      	ldr	r1, [pc, #4]	; (800c244 <_cleanup_r+0x8>)
 800c23e:	f000 b8af 	b.w	800c3a0 <_fwalk_reent>
 800c242:	bf00      	nop
 800c244:	0800c17d 	.word	0x0800c17d

0800c248 <__sfmoreglue>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	2268      	movs	r2, #104	; 0x68
 800c24c:	1e4d      	subs	r5, r1, #1
 800c24e:	4355      	muls	r5, r2
 800c250:	460e      	mov	r6, r1
 800c252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c256:	f7ff fd1d 	bl	800bc94 <_malloc_r>
 800c25a:	4604      	mov	r4, r0
 800c25c:	b140      	cbz	r0, 800c270 <__sfmoreglue+0x28>
 800c25e:	2100      	movs	r1, #0
 800c260:	e9c0 1600 	strd	r1, r6, [r0]
 800c264:	300c      	adds	r0, #12
 800c266:	60a0      	str	r0, [r4, #8]
 800c268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c26c:	f7ff fc9e 	bl	800bbac <memset>
 800c270:	4620      	mov	r0, r4
 800c272:	bd70      	pop	{r4, r5, r6, pc}

0800c274 <__sfp_lock_acquire>:
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <__sfp_lock_acquire+0x8>)
 800c276:	f000 b8b3 	b.w	800c3e0 <__retarget_lock_acquire_recursive>
 800c27a:	bf00      	nop
 800c27c:	20000a5d 	.word	0x20000a5d

0800c280 <__sfp_lock_release>:
 800c280:	4801      	ldr	r0, [pc, #4]	; (800c288 <__sfp_lock_release+0x8>)
 800c282:	f000 b8ae 	b.w	800c3e2 <__retarget_lock_release_recursive>
 800c286:	bf00      	nop
 800c288:	20000a5d 	.word	0x20000a5d

0800c28c <__sinit_lock_acquire>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__sinit_lock_acquire+0x8>)
 800c28e:	f000 b8a7 	b.w	800c3e0 <__retarget_lock_acquire_recursive>
 800c292:	bf00      	nop
 800c294:	20000a5e 	.word	0x20000a5e

0800c298 <__sinit_lock_release>:
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <__sinit_lock_release+0x8>)
 800c29a:	f000 b8a2 	b.w	800c3e2 <__retarget_lock_release_recursive>
 800c29e:	bf00      	nop
 800c2a0:	20000a5e 	.word	0x20000a5e

0800c2a4 <__sinit>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	f7ff fff0 	bl	800c28c <__sinit_lock_acquire>
 800c2ac:	69a3      	ldr	r3, [r4, #24]
 800c2ae:	b11b      	cbz	r3, 800c2b8 <__sinit+0x14>
 800c2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b4:	f7ff bff0 	b.w	800c298 <__sinit_lock_release>
 800c2b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2bc:	6523      	str	r3, [r4, #80]	; 0x50
 800c2be:	4b13      	ldr	r3, [pc, #76]	; (800c30c <__sinit+0x68>)
 800c2c0:	4a13      	ldr	r2, [pc, #76]	; (800c310 <__sinit+0x6c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	bf04      	itt	eq
 800c2ca:	2301      	moveq	r3, #1
 800c2cc:	61a3      	streq	r3, [r4, #24]
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 f820 	bl	800c314 <__sfp>
 800c2d4:	6060      	str	r0, [r4, #4]
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 f81c 	bl	800c314 <__sfp>
 800c2dc:	60a0      	str	r0, [r4, #8]
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 f818 	bl	800c314 <__sfp>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	60e0      	str	r0, [r4, #12]
 800c2e8:	2104      	movs	r1, #4
 800c2ea:	6860      	ldr	r0, [r4, #4]
 800c2ec:	f7ff ff82 	bl	800c1f4 <std>
 800c2f0:	68a0      	ldr	r0, [r4, #8]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	2109      	movs	r1, #9
 800c2f6:	f7ff ff7d 	bl	800c1f4 <std>
 800c2fa:	68e0      	ldr	r0, [r4, #12]
 800c2fc:	2202      	movs	r2, #2
 800c2fe:	2112      	movs	r1, #18
 800c300:	f7ff ff78 	bl	800c1f4 <std>
 800c304:	2301      	movs	r3, #1
 800c306:	61a3      	str	r3, [r4, #24]
 800c308:	e7d2      	b.n	800c2b0 <__sinit+0xc>
 800c30a:	bf00      	nop
 800c30c:	0800d154 	.word	0x0800d154
 800c310:	0800c23d 	.word	0x0800c23d

0800c314 <__sfp>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	4607      	mov	r7, r0
 800c318:	f7ff ffac 	bl	800c274 <__sfp_lock_acquire>
 800c31c:	4b1e      	ldr	r3, [pc, #120]	; (800c398 <__sfp+0x84>)
 800c31e:	681e      	ldr	r6, [r3, #0]
 800c320:	69b3      	ldr	r3, [r6, #24]
 800c322:	b913      	cbnz	r3, 800c32a <__sfp+0x16>
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff ffbd 	bl	800c2a4 <__sinit>
 800c32a:	3648      	adds	r6, #72	; 0x48
 800c32c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c330:	3b01      	subs	r3, #1
 800c332:	d503      	bpl.n	800c33c <__sfp+0x28>
 800c334:	6833      	ldr	r3, [r6, #0]
 800c336:	b30b      	cbz	r3, 800c37c <__sfp+0x68>
 800c338:	6836      	ldr	r6, [r6, #0]
 800c33a:	e7f7      	b.n	800c32c <__sfp+0x18>
 800c33c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c340:	b9d5      	cbnz	r5, 800c378 <__sfp+0x64>
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <__sfp+0x88>)
 800c344:	60e3      	str	r3, [r4, #12]
 800c346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c34a:	6665      	str	r5, [r4, #100]	; 0x64
 800c34c:	f000 f847 	bl	800c3de <__retarget_lock_init_recursive>
 800c350:	f7ff ff96 	bl	800c280 <__sfp_lock_release>
 800c354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c35c:	6025      	str	r5, [r4, #0]
 800c35e:	61a5      	str	r5, [r4, #24]
 800c360:	2208      	movs	r2, #8
 800c362:	4629      	mov	r1, r5
 800c364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c368:	f7ff fc20 	bl	800bbac <memset>
 800c36c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c374:	4620      	mov	r0, r4
 800c376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c378:	3468      	adds	r4, #104	; 0x68
 800c37a:	e7d9      	b.n	800c330 <__sfp+0x1c>
 800c37c:	2104      	movs	r1, #4
 800c37e:	4638      	mov	r0, r7
 800c380:	f7ff ff62 	bl	800c248 <__sfmoreglue>
 800c384:	4604      	mov	r4, r0
 800c386:	6030      	str	r0, [r6, #0]
 800c388:	2800      	cmp	r0, #0
 800c38a:	d1d5      	bne.n	800c338 <__sfp+0x24>
 800c38c:	f7ff ff78 	bl	800c280 <__sfp_lock_release>
 800c390:	230c      	movs	r3, #12
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	e7ee      	b.n	800c374 <__sfp+0x60>
 800c396:	bf00      	nop
 800c398:	0800d154 	.word	0x0800d154
 800c39c:	ffff0001 	.word	0xffff0001

0800c3a0 <_fwalk_reent>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	4688      	mov	r8, r1
 800c3a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3ac:	2700      	movs	r7, #0
 800c3ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c3b6:	d505      	bpl.n	800c3c4 <_fwalk_reent+0x24>
 800c3b8:	6824      	ldr	r4, [r4, #0]
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	d1f7      	bne.n	800c3ae <_fwalk_reent+0xe>
 800c3be:	4638      	mov	r0, r7
 800c3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c4:	89ab      	ldrh	r3, [r5, #12]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d907      	bls.n	800c3da <_fwalk_reent+0x3a>
 800c3ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	d003      	beq.n	800c3da <_fwalk_reent+0x3a>
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	47c0      	blx	r8
 800c3d8:	4307      	orrs	r7, r0
 800c3da:	3568      	adds	r5, #104	; 0x68
 800c3dc:	e7e9      	b.n	800c3b2 <_fwalk_reent+0x12>

0800c3de <__retarget_lock_init_recursive>:
 800c3de:	4770      	bx	lr

0800c3e0 <__retarget_lock_acquire_recursive>:
 800c3e0:	4770      	bx	lr

0800c3e2 <__retarget_lock_release_recursive>:
 800c3e2:	4770      	bx	lr

0800c3e4 <__swhatbuf_r>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ec:	2900      	cmp	r1, #0
 800c3ee:	b096      	sub	sp, #88	; 0x58
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	461d      	mov	r5, r3
 800c3f4:	da08      	bge.n	800c408 <__swhatbuf_r+0x24>
 800c3f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	061a      	lsls	r2, r3, #24
 800c400:	d410      	bmi.n	800c424 <__swhatbuf_r+0x40>
 800c402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c406:	e00e      	b.n	800c426 <__swhatbuf_r+0x42>
 800c408:	466a      	mov	r2, sp
 800c40a:	f000 fc71 	bl	800ccf0 <_fstat_r>
 800c40e:	2800      	cmp	r0, #0
 800c410:	dbf1      	blt.n	800c3f6 <__swhatbuf_r+0x12>
 800c412:	9a01      	ldr	r2, [sp, #4]
 800c414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c41c:	425a      	negs	r2, r3
 800c41e:	415a      	adcs	r2, r3
 800c420:	602a      	str	r2, [r5, #0]
 800c422:	e7ee      	b.n	800c402 <__swhatbuf_r+0x1e>
 800c424:	2340      	movs	r3, #64	; 0x40
 800c426:	2000      	movs	r0, #0
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	b016      	add	sp, #88	; 0x58
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c430 <__smakebuf_r>:
 800c430:	898b      	ldrh	r3, [r1, #12]
 800c432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c434:	079d      	lsls	r5, r3, #30
 800c436:	4606      	mov	r6, r0
 800c438:	460c      	mov	r4, r1
 800c43a:	d507      	bpl.n	800c44c <__smakebuf_r+0x1c>
 800c43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	2301      	movs	r3, #1
 800c446:	6163      	str	r3, [r4, #20]
 800c448:	b002      	add	sp, #8
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	ab01      	add	r3, sp, #4
 800c44e:	466a      	mov	r2, sp
 800c450:	f7ff ffc8 	bl	800c3e4 <__swhatbuf_r>
 800c454:	9900      	ldr	r1, [sp, #0]
 800c456:	4605      	mov	r5, r0
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff fc1b 	bl	800bc94 <_malloc_r>
 800c45e:	b948      	cbnz	r0, 800c474 <__smakebuf_r+0x44>
 800c460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c464:	059a      	lsls	r2, r3, #22
 800c466:	d4ef      	bmi.n	800c448 <__smakebuf_r+0x18>
 800c468:	f023 0303 	bic.w	r3, r3, #3
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	e7e3      	b.n	800c43c <__smakebuf_r+0xc>
 800c474:	4b0d      	ldr	r3, [pc, #52]	; (800c4ac <__smakebuf_r+0x7c>)
 800c476:	62b3      	str	r3, [r6, #40]	; 0x28
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	6020      	str	r0, [r4, #0]
 800c47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	9b00      	ldr	r3, [sp, #0]
 800c484:	6163      	str	r3, [r4, #20]
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	6120      	str	r0, [r4, #16]
 800c48a:	b15b      	cbz	r3, 800c4a4 <__smakebuf_r+0x74>
 800c48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c490:	4630      	mov	r0, r6
 800c492:	f000 fc3f 	bl	800cd14 <_isatty_r>
 800c496:	b128      	cbz	r0, 800c4a4 <__smakebuf_r+0x74>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f023 0303 	bic.w	r3, r3, #3
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	89a0      	ldrh	r0, [r4, #12]
 800c4a6:	4305      	orrs	r5, r0
 800c4a8:	81a5      	strh	r5, [r4, #12]
 800c4aa:	e7cd      	b.n	800c448 <__smakebuf_r+0x18>
 800c4ac:	0800c23d 	.word	0x0800c23d

0800c4b0 <__malloc_lock>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__malloc_lock+0x8>)
 800c4b2:	f7ff bf95 	b.w	800c3e0 <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20000a5c 	.word	0x20000a5c

0800c4bc <__malloc_unlock>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__malloc_unlock+0x8>)
 800c4be:	f7ff bf90 	b.w	800c3e2 <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	20000a5c 	.word	0x20000a5c

0800c4c8 <__sfputc_r>:
 800c4c8:	6893      	ldr	r3, [r2, #8]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	b410      	push	{r4}
 800c4d0:	6093      	str	r3, [r2, #8]
 800c4d2:	da08      	bge.n	800c4e6 <__sfputc_r+0x1e>
 800c4d4:	6994      	ldr	r4, [r2, #24]
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	db01      	blt.n	800c4de <__sfputc_r+0x16>
 800c4da:	290a      	cmp	r1, #10
 800c4dc:	d103      	bne.n	800c4e6 <__sfputc_r+0x1e>
 800c4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4e2:	f000 bb23 	b.w	800cb2c <__swbuf_r>
 800c4e6:	6813      	ldr	r3, [r2, #0]
 800c4e8:	1c58      	adds	r0, r3, #1
 800c4ea:	6010      	str	r0, [r2, #0]
 800c4ec:	7019      	strb	r1, [r3, #0]
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <__sfputs_r>:
 800c4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	18d5      	adds	r5, r2, r3
 800c500:	42ac      	cmp	r4, r5
 800c502:	d101      	bne.n	800c508 <__sfputs_r+0x12>
 800c504:	2000      	movs	r0, #0
 800c506:	e007      	b.n	800c518 <__sfputs_r+0x22>
 800c508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50c:	463a      	mov	r2, r7
 800c50e:	4630      	mov	r0, r6
 800c510:	f7ff ffda 	bl	800c4c8 <__sfputc_r>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d1f3      	bne.n	800c500 <__sfputs_r+0xa>
 800c518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c51c <_vfiprintf_r>:
 800c51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c520:	460d      	mov	r5, r1
 800c522:	b09d      	sub	sp, #116	; 0x74
 800c524:	4614      	mov	r4, r2
 800c526:	4698      	mov	r8, r3
 800c528:	4606      	mov	r6, r0
 800c52a:	b118      	cbz	r0, 800c534 <_vfiprintf_r+0x18>
 800c52c:	6983      	ldr	r3, [r0, #24]
 800c52e:	b90b      	cbnz	r3, 800c534 <_vfiprintf_r+0x18>
 800c530:	f7ff feb8 	bl	800c2a4 <__sinit>
 800c534:	4b89      	ldr	r3, [pc, #548]	; (800c75c <_vfiprintf_r+0x240>)
 800c536:	429d      	cmp	r5, r3
 800c538:	d11b      	bne.n	800c572 <_vfiprintf_r+0x56>
 800c53a:	6875      	ldr	r5, [r6, #4]
 800c53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c53e:	07d9      	lsls	r1, r3, #31
 800c540:	d405      	bmi.n	800c54e <_vfiprintf_r+0x32>
 800c542:	89ab      	ldrh	r3, [r5, #12]
 800c544:	059a      	lsls	r2, r3, #22
 800c546:	d402      	bmi.n	800c54e <_vfiprintf_r+0x32>
 800c548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c54a:	f7ff ff49 	bl	800c3e0 <__retarget_lock_acquire_recursive>
 800c54e:	89ab      	ldrh	r3, [r5, #12]
 800c550:	071b      	lsls	r3, r3, #28
 800c552:	d501      	bpl.n	800c558 <_vfiprintf_r+0x3c>
 800c554:	692b      	ldr	r3, [r5, #16]
 800c556:	b9eb      	cbnz	r3, 800c594 <_vfiprintf_r+0x78>
 800c558:	4629      	mov	r1, r5
 800c55a:	4630      	mov	r0, r6
 800c55c:	f000 fb4a 	bl	800cbf4 <__swsetup_r>
 800c560:	b1c0      	cbz	r0, 800c594 <_vfiprintf_r+0x78>
 800c562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c564:	07dc      	lsls	r4, r3, #31
 800c566:	d50e      	bpl.n	800c586 <_vfiprintf_r+0x6a>
 800c568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56c:	b01d      	add	sp, #116	; 0x74
 800c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c572:	4b7b      	ldr	r3, [pc, #492]	; (800c760 <_vfiprintf_r+0x244>)
 800c574:	429d      	cmp	r5, r3
 800c576:	d101      	bne.n	800c57c <_vfiprintf_r+0x60>
 800c578:	68b5      	ldr	r5, [r6, #8]
 800c57a:	e7df      	b.n	800c53c <_vfiprintf_r+0x20>
 800c57c:	4b79      	ldr	r3, [pc, #484]	; (800c764 <_vfiprintf_r+0x248>)
 800c57e:	429d      	cmp	r5, r3
 800c580:	bf08      	it	eq
 800c582:	68f5      	ldreq	r5, [r6, #12]
 800c584:	e7da      	b.n	800c53c <_vfiprintf_r+0x20>
 800c586:	89ab      	ldrh	r3, [r5, #12]
 800c588:	0598      	lsls	r0, r3, #22
 800c58a:	d4ed      	bmi.n	800c568 <_vfiprintf_r+0x4c>
 800c58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c58e:	f7ff ff28 	bl	800c3e2 <__retarget_lock_release_recursive>
 800c592:	e7e9      	b.n	800c568 <_vfiprintf_r+0x4c>
 800c594:	2300      	movs	r3, #0
 800c596:	9309      	str	r3, [sp, #36]	; 0x24
 800c598:	2320      	movs	r3, #32
 800c59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5a2:	2330      	movs	r3, #48	; 0x30
 800c5a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c768 <_vfiprintf_r+0x24c>
 800c5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ac:	f04f 0901 	mov.w	r9, #1
 800c5b0:	4623      	mov	r3, r4
 800c5b2:	469a      	mov	sl, r3
 800c5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5b8:	b10a      	cbz	r2, 800c5be <_vfiprintf_r+0xa2>
 800c5ba:	2a25      	cmp	r2, #37	; 0x25
 800c5bc:	d1f9      	bne.n	800c5b2 <_vfiprintf_r+0x96>
 800c5be:	ebba 0b04 	subs.w	fp, sl, r4
 800c5c2:	d00b      	beq.n	800c5dc <_vfiprintf_r+0xc0>
 800c5c4:	465b      	mov	r3, fp
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f7ff ff93 	bl	800c4f6 <__sfputs_r>
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	f000 80aa 	beq.w	800c72a <_vfiprintf_r+0x20e>
 800c5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5d8:	445a      	add	r2, fp
 800c5da:	9209      	str	r2, [sp, #36]	; 0x24
 800c5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80a2 	beq.w	800c72a <_vfiprintf_r+0x20e>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5f0:	f10a 0a01 	add.w	sl, sl, #1
 800c5f4:	9304      	str	r3, [sp, #16]
 800c5f6:	9307      	str	r3, [sp, #28]
 800c5f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5fe:	4654      	mov	r4, sl
 800c600:	2205      	movs	r2, #5
 800c602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c606:	4858      	ldr	r0, [pc, #352]	; (800c768 <_vfiprintf_r+0x24c>)
 800c608:	f7f3 fdf2 	bl	80001f0 <memchr>
 800c60c:	9a04      	ldr	r2, [sp, #16]
 800c60e:	b9d8      	cbnz	r0, 800c648 <_vfiprintf_r+0x12c>
 800c610:	06d1      	lsls	r1, r2, #27
 800c612:	bf44      	itt	mi
 800c614:	2320      	movmi	r3, #32
 800c616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c61a:	0713      	lsls	r3, r2, #28
 800c61c:	bf44      	itt	mi
 800c61e:	232b      	movmi	r3, #43	; 0x2b
 800c620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c624:	f89a 3000 	ldrb.w	r3, [sl]
 800c628:	2b2a      	cmp	r3, #42	; 0x2a
 800c62a:	d015      	beq.n	800c658 <_vfiprintf_r+0x13c>
 800c62c:	9a07      	ldr	r2, [sp, #28]
 800c62e:	4654      	mov	r4, sl
 800c630:	2000      	movs	r0, #0
 800c632:	f04f 0c0a 	mov.w	ip, #10
 800c636:	4621      	mov	r1, r4
 800c638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c63c:	3b30      	subs	r3, #48	; 0x30
 800c63e:	2b09      	cmp	r3, #9
 800c640:	d94e      	bls.n	800c6e0 <_vfiprintf_r+0x1c4>
 800c642:	b1b0      	cbz	r0, 800c672 <_vfiprintf_r+0x156>
 800c644:	9207      	str	r2, [sp, #28]
 800c646:	e014      	b.n	800c672 <_vfiprintf_r+0x156>
 800c648:	eba0 0308 	sub.w	r3, r0, r8
 800c64c:	fa09 f303 	lsl.w	r3, r9, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	46a2      	mov	sl, r4
 800c656:	e7d2      	b.n	800c5fe <_vfiprintf_r+0xe2>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	1d19      	adds	r1, r3, #4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	9103      	str	r1, [sp, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	bfbb      	ittet	lt
 800c664:	425b      	neglt	r3, r3
 800c666:	f042 0202 	orrlt.w	r2, r2, #2
 800c66a:	9307      	strge	r3, [sp, #28]
 800c66c:	9307      	strlt	r3, [sp, #28]
 800c66e:	bfb8      	it	lt
 800c670:	9204      	strlt	r2, [sp, #16]
 800c672:	7823      	ldrb	r3, [r4, #0]
 800c674:	2b2e      	cmp	r3, #46	; 0x2e
 800c676:	d10c      	bne.n	800c692 <_vfiprintf_r+0x176>
 800c678:	7863      	ldrb	r3, [r4, #1]
 800c67a:	2b2a      	cmp	r3, #42	; 0x2a
 800c67c:	d135      	bne.n	800c6ea <_vfiprintf_r+0x1ce>
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	1d1a      	adds	r2, r3, #4
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	9203      	str	r2, [sp, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	bfb8      	it	lt
 800c68a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c68e:	3402      	adds	r4, #2
 800c690:	9305      	str	r3, [sp, #20]
 800c692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c778 <_vfiprintf_r+0x25c>
 800c696:	7821      	ldrb	r1, [r4, #0]
 800c698:	2203      	movs	r2, #3
 800c69a:	4650      	mov	r0, sl
 800c69c:	f7f3 fda8 	bl	80001f0 <memchr>
 800c6a0:	b140      	cbz	r0, 800c6b4 <_vfiprintf_r+0x198>
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	eba0 000a 	sub.w	r0, r0, sl
 800c6a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	4303      	orrs	r3, r0
 800c6b0:	3401      	adds	r4, #1
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b8:	482c      	ldr	r0, [pc, #176]	; (800c76c <_vfiprintf_r+0x250>)
 800c6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6be:	2206      	movs	r2, #6
 800c6c0:	f7f3 fd96 	bl	80001f0 <memchr>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d03f      	beq.n	800c748 <_vfiprintf_r+0x22c>
 800c6c8:	4b29      	ldr	r3, [pc, #164]	; (800c770 <_vfiprintf_r+0x254>)
 800c6ca:	bb1b      	cbnz	r3, 800c714 <_vfiprintf_r+0x1f8>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	3307      	adds	r3, #7
 800c6d0:	f023 0307 	bic.w	r3, r3, #7
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	9303      	str	r3, [sp, #12]
 800c6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6da:	443b      	add	r3, r7
 800c6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6de:	e767      	b.n	800c5b0 <_vfiprintf_r+0x94>
 800c6e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	e7a5      	b.n	800c636 <_vfiprintf_r+0x11a>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	3401      	adds	r4, #1
 800c6ee:	9305      	str	r3, [sp, #20]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	f04f 0c0a 	mov.w	ip, #10
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6fc:	3a30      	subs	r2, #48	; 0x30
 800c6fe:	2a09      	cmp	r2, #9
 800c700:	d903      	bls.n	800c70a <_vfiprintf_r+0x1ee>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0c5      	beq.n	800c692 <_vfiprintf_r+0x176>
 800c706:	9105      	str	r1, [sp, #20]
 800c708:	e7c3      	b.n	800c692 <_vfiprintf_r+0x176>
 800c70a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c70e:	4604      	mov	r4, r0
 800c710:	2301      	movs	r3, #1
 800c712:	e7f0      	b.n	800c6f6 <_vfiprintf_r+0x1da>
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4b16      	ldr	r3, [pc, #88]	; (800c774 <_vfiprintf_r+0x258>)
 800c71c:	a904      	add	r1, sp, #16
 800c71e:	4630      	mov	r0, r6
 800c720:	f3af 8000 	nop.w
 800c724:	4607      	mov	r7, r0
 800c726:	1c78      	adds	r0, r7, #1
 800c728:	d1d6      	bne.n	800c6d8 <_vfiprintf_r+0x1bc>
 800c72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c72c:	07d9      	lsls	r1, r3, #31
 800c72e:	d405      	bmi.n	800c73c <_vfiprintf_r+0x220>
 800c730:	89ab      	ldrh	r3, [r5, #12]
 800c732:	059a      	lsls	r2, r3, #22
 800c734:	d402      	bmi.n	800c73c <_vfiprintf_r+0x220>
 800c736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c738:	f7ff fe53 	bl	800c3e2 <__retarget_lock_release_recursive>
 800c73c:	89ab      	ldrh	r3, [r5, #12]
 800c73e:	065b      	lsls	r3, r3, #25
 800c740:	f53f af12 	bmi.w	800c568 <_vfiprintf_r+0x4c>
 800c744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c746:	e711      	b.n	800c56c <_vfiprintf_r+0x50>
 800c748:	ab03      	add	r3, sp, #12
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	462a      	mov	r2, r5
 800c74e:	4b09      	ldr	r3, [pc, #36]	; (800c774 <_vfiprintf_r+0x258>)
 800c750:	a904      	add	r1, sp, #16
 800c752:	4630      	mov	r0, r6
 800c754:	f000 f880 	bl	800c858 <_printf_i>
 800c758:	e7e4      	b.n	800c724 <_vfiprintf_r+0x208>
 800c75a:	bf00      	nop
 800c75c:	0800d27c 	.word	0x0800d27c
 800c760:	0800d29c 	.word	0x0800d29c
 800c764:	0800d25c 	.word	0x0800d25c
 800c768:	0800d2bc 	.word	0x0800d2bc
 800c76c:	0800d2c6 	.word	0x0800d2c6
 800c770:	00000000 	.word	0x00000000
 800c774:	0800c4f7 	.word	0x0800c4f7
 800c778:	0800d2c2 	.word	0x0800d2c2

0800c77c <_printf_common>:
 800c77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c780:	4616      	mov	r6, r2
 800c782:	4699      	mov	r9, r3
 800c784:	688a      	ldr	r2, [r1, #8]
 800c786:	690b      	ldr	r3, [r1, #16]
 800c788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c78c:	4293      	cmp	r3, r2
 800c78e:	bfb8      	it	lt
 800c790:	4613      	movlt	r3, r2
 800c792:	6033      	str	r3, [r6, #0]
 800c794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c798:	4607      	mov	r7, r0
 800c79a:	460c      	mov	r4, r1
 800c79c:	b10a      	cbz	r2, 800c7a2 <_printf_common+0x26>
 800c79e:	3301      	adds	r3, #1
 800c7a0:	6033      	str	r3, [r6, #0]
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	0699      	lsls	r1, r3, #26
 800c7a6:	bf42      	ittt	mi
 800c7a8:	6833      	ldrmi	r3, [r6, #0]
 800c7aa:	3302      	addmi	r3, #2
 800c7ac:	6033      	strmi	r3, [r6, #0]
 800c7ae:	6825      	ldr	r5, [r4, #0]
 800c7b0:	f015 0506 	ands.w	r5, r5, #6
 800c7b4:	d106      	bne.n	800c7c4 <_printf_common+0x48>
 800c7b6:	f104 0a19 	add.w	sl, r4, #25
 800c7ba:	68e3      	ldr	r3, [r4, #12]
 800c7bc:	6832      	ldr	r2, [r6, #0]
 800c7be:	1a9b      	subs	r3, r3, r2
 800c7c0:	42ab      	cmp	r3, r5
 800c7c2:	dc26      	bgt.n	800c812 <_printf_common+0x96>
 800c7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7c8:	1e13      	subs	r3, r2, #0
 800c7ca:	6822      	ldr	r2, [r4, #0]
 800c7cc:	bf18      	it	ne
 800c7ce:	2301      	movne	r3, #1
 800c7d0:	0692      	lsls	r2, r2, #26
 800c7d2:	d42b      	bmi.n	800c82c <_printf_common+0xb0>
 800c7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7d8:	4649      	mov	r1, r9
 800c7da:	4638      	mov	r0, r7
 800c7dc:	47c0      	blx	r8
 800c7de:	3001      	adds	r0, #1
 800c7e0:	d01e      	beq.n	800c820 <_printf_common+0xa4>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	68e5      	ldr	r5, [r4, #12]
 800c7e6:	6832      	ldr	r2, [r6, #0]
 800c7e8:	f003 0306 	and.w	r3, r3, #6
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	bf08      	it	eq
 800c7f0:	1aad      	subeq	r5, r5, r2
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	bf0c      	ite	eq
 800c7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7fc:	2500      	movne	r5, #0
 800c7fe:	4293      	cmp	r3, r2
 800c800:	bfc4      	itt	gt
 800c802:	1a9b      	subgt	r3, r3, r2
 800c804:	18ed      	addgt	r5, r5, r3
 800c806:	2600      	movs	r6, #0
 800c808:	341a      	adds	r4, #26
 800c80a:	42b5      	cmp	r5, r6
 800c80c:	d11a      	bne.n	800c844 <_printf_common+0xc8>
 800c80e:	2000      	movs	r0, #0
 800c810:	e008      	b.n	800c824 <_printf_common+0xa8>
 800c812:	2301      	movs	r3, #1
 800c814:	4652      	mov	r2, sl
 800c816:	4649      	mov	r1, r9
 800c818:	4638      	mov	r0, r7
 800c81a:	47c0      	blx	r8
 800c81c:	3001      	adds	r0, #1
 800c81e:	d103      	bne.n	800c828 <_printf_common+0xac>
 800c820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c828:	3501      	adds	r5, #1
 800c82a:	e7c6      	b.n	800c7ba <_printf_common+0x3e>
 800c82c:	18e1      	adds	r1, r4, r3
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	2030      	movs	r0, #48	; 0x30
 800c832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c836:	4422      	add	r2, r4
 800c838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c840:	3302      	adds	r3, #2
 800c842:	e7c7      	b.n	800c7d4 <_printf_common+0x58>
 800c844:	2301      	movs	r3, #1
 800c846:	4622      	mov	r2, r4
 800c848:	4649      	mov	r1, r9
 800c84a:	4638      	mov	r0, r7
 800c84c:	47c0      	blx	r8
 800c84e:	3001      	adds	r0, #1
 800c850:	d0e6      	beq.n	800c820 <_printf_common+0xa4>
 800c852:	3601      	adds	r6, #1
 800c854:	e7d9      	b.n	800c80a <_printf_common+0x8e>
	...

0800c858 <_printf_i>:
 800c858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	7e0f      	ldrb	r7, [r1, #24]
 800c85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c860:	2f78      	cmp	r7, #120	; 0x78
 800c862:	4691      	mov	r9, r2
 800c864:	4680      	mov	r8, r0
 800c866:	460c      	mov	r4, r1
 800c868:	469a      	mov	sl, r3
 800c86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c86e:	d807      	bhi.n	800c880 <_printf_i+0x28>
 800c870:	2f62      	cmp	r7, #98	; 0x62
 800c872:	d80a      	bhi.n	800c88a <_printf_i+0x32>
 800c874:	2f00      	cmp	r7, #0
 800c876:	f000 80d8 	beq.w	800ca2a <_printf_i+0x1d2>
 800c87a:	2f58      	cmp	r7, #88	; 0x58
 800c87c:	f000 80a3 	beq.w	800c9c6 <_printf_i+0x16e>
 800c880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c888:	e03a      	b.n	800c900 <_printf_i+0xa8>
 800c88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c88e:	2b15      	cmp	r3, #21
 800c890:	d8f6      	bhi.n	800c880 <_printf_i+0x28>
 800c892:	a101      	add	r1, pc, #4	; (adr r1, 800c898 <_printf_i+0x40>)
 800c894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c898:	0800c8f1 	.word	0x0800c8f1
 800c89c:	0800c905 	.word	0x0800c905
 800c8a0:	0800c881 	.word	0x0800c881
 800c8a4:	0800c881 	.word	0x0800c881
 800c8a8:	0800c881 	.word	0x0800c881
 800c8ac:	0800c881 	.word	0x0800c881
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c881 	.word	0x0800c881
 800c8b8:	0800c881 	.word	0x0800c881
 800c8bc:	0800c881 	.word	0x0800c881
 800c8c0:	0800c881 	.word	0x0800c881
 800c8c4:	0800ca11 	.word	0x0800ca11
 800c8c8:	0800c935 	.word	0x0800c935
 800c8cc:	0800c9f3 	.word	0x0800c9f3
 800c8d0:	0800c881 	.word	0x0800c881
 800c8d4:	0800c881 	.word	0x0800c881
 800c8d8:	0800ca33 	.word	0x0800ca33
 800c8dc:	0800c881 	.word	0x0800c881
 800c8e0:	0800c935 	.word	0x0800c935
 800c8e4:	0800c881 	.word	0x0800c881
 800c8e8:	0800c881 	.word	0x0800c881
 800c8ec:	0800c9fb 	.word	0x0800c9fb
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	1d1a      	adds	r2, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	602a      	str	r2, [r5, #0]
 800c8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c900:	2301      	movs	r3, #1
 800c902:	e0a3      	b.n	800ca4c <_printf_i+0x1f4>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	6829      	ldr	r1, [r5, #0]
 800c908:	0606      	lsls	r6, r0, #24
 800c90a:	f101 0304 	add.w	r3, r1, #4
 800c90e:	d50a      	bpl.n	800c926 <_printf_i+0xce>
 800c910:	680e      	ldr	r6, [r1, #0]
 800c912:	602b      	str	r3, [r5, #0]
 800c914:	2e00      	cmp	r6, #0
 800c916:	da03      	bge.n	800c920 <_printf_i+0xc8>
 800c918:	232d      	movs	r3, #45	; 0x2d
 800c91a:	4276      	negs	r6, r6
 800c91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c920:	485e      	ldr	r0, [pc, #376]	; (800ca9c <_printf_i+0x244>)
 800c922:	230a      	movs	r3, #10
 800c924:	e019      	b.n	800c95a <_printf_i+0x102>
 800c926:	680e      	ldr	r6, [r1, #0]
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c92e:	bf18      	it	ne
 800c930:	b236      	sxthne	r6, r6
 800c932:	e7ef      	b.n	800c914 <_printf_i+0xbc>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	6820      	ldr	r0, [r4, #0]
 800c938:	1d19      	adds	r1, r3, #4
 800c93a:	6029      	str	r1, [r5, #0]
 800c93c:	0601      	lsls	r1, r0, #24
 800c93e:	d501      	bpl.n	800c944 <_printf_i+0xec>
 800c940:	681e      	ldr	r6, [r3, #0]
 800c942:	e002      	b.n	800c94a <_printf_i+0xf2>
 800c944:	0646      	lsls	r6, r0, #25
 800c946:	d5fb      	bpl.n	800c940 <_printf_i+0xe8>
 800c948:	881e      	ldrh	r6, [r3, #0]
 800c94a:	4854      	ldr	r0, [pc, #336]	; (800ca9c <_printf_i+0x244>)
 800c94c:	2f6f      	cmp	r7, #111	; 0x6f
 800c94e:	bf0c      	ite	eq
 800c950:	2308      	moveq	r3, #8
 800c952:	230a      	movne	r3, #10
 800c954:	2100      	movs	r1, #0
 800c956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c95a:	6865      	ldr	r5, [r4, #4]
 800c95c:	60a5      	str	r5, [r4, #8]
 800c95e:	2d00      	cmp	r5, #0
 800c960:	bfa2      	ittt	ge
 800c962:	6821      	ldrge	r1, [r4, #0]
 800c964:	f021 0104 	bicge.w	r1, r1, #4
 800c968:	6021      	strge	r1, [r4, #0]
 800c96a:	b90e      	cbnz	r6, 800c970 <_printf_i+0x118>
 800c96c:	2d00      	cmp	r5, #0
 800c96e:	d04d      	beq.n	800ca0c <_printf_i+0x1b4>
 800c970:	4615      	mov	r5, r2
 800c972:	fbb6 f1f3 	udiv	r1, r6, r3
 800c976:	fb03 6711 	mls	r7, r3, r1, r6
 800c97a:	5dc7      	ldrb	r7, [r0, r7]
 800c97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c980:	4637      	mov	r7, r6
 800c982:	42bb      	cmp	r3, r7
 800c984:	460e      	mov	r6, r1
 800c986:	d9f4      	bls.n	800c972 <_printf_i+0x11a>
 800c988:	2b08      	cmp	r3, #8
 800c98a:	d10b      	bne.n	800c9a4 <_printf_i+0x14c>
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	07de      	lsls	r6, r3, #31
 800c990:	d508      	bpl.n	800c9a4 <_printf_i+0x14c>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	6861      	ldr	r1, [r4, #4]
 800c996:	4299      	cmp	r1, r3
 800c998:	bfde      	ittt	le
 800c99a:	2330      	movle	r3, #48	; 0x30
 800c99c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c9a4:	1b52      	subs	r2, r2, r5
 800c9a6:	6122      	str	r2, [r4, #16]
 800c9a8:	f8cd a000 	str.w	sl, [sp]
 800c9ac:	464b      	mov	r3, r9
 800c9ae:	aa03      	add	r2, sp, #12
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	f7ff fee2 	bl	800c77c <_printf_common>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d14c      	bne.n	800ca56 <_printf_i+0x1fe>
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9c0:	b004      	add	sp, #16
 800c9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c6:	4835      	ldr	r0, [pc, #212]	; (800ca9c <_printf_i+0x244>)
 800c9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9cc:	6829      	ldr	r1, [r5, #0]
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9d4:	6029      	str	r1, [r5, #0]
 800c9d6:	061d      	lsls	r5, r3, #24
 800c9d8:	d514      	bpl.n	800ca04 <_printf_i+0x1ac>
 800c9da:	07df      	lsls	r7, r3, #31
 800c9dc:	bf44      	itt	mi
 800c9de:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e2:	6023      	strmi	r3, [r4, #0]
 800c9e4:	b91e      	cbnz	r6, 800c9ee <_printf_i+0x196>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	f023 0320 	bic.w	r3, r3, #32
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	2310      	movs	r3, #16
 800c9f0:	e7b0      	b.n	800c954 <_printf_i+0xfc>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	f043 0320 	orr.w	r3, r3, #32
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	2378      	movs	r3, #120	; 0x78
 800c9fc:	4828      	ldr	r0, [pc, #160]	; (800caa0 <_printf_i+0x248>)
 800c9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca02:	e7e3      	b.n	800c9cc <_printf_i+0x174>
 800ca04:	0659      	lsls	r1, r3, #25
 800ca06:	bf48      	it	mi
 800ca08:	b2b6      	uxthmi	r6, r6
 800ca0a:	e7e6      	b.n	800c9da <_printf_i+0x182>
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	e7bb      	b.n	800c988 <_printf_i+0x130>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	6826      	ldr	r6, [r4, #0]
 800ca14:	6961      	ldr	r1, [r4, #20]
 800ca16:	1d18      	adds	r0, r3, #4
 800ca18:	6028      	str	r0, [r5, #0]
 800ca1a:	0635      	lsls	r5, r6, #24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	d501      	bpl.n	800ca24 <_printf_i+0x1cc>
 800ca20:	6019      	str	r1, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <_printf_i+0x1d2>
 800ca24:	0670      	lsls	r0, r6, #25
 800ca26:	d5fb      	bpl.n	800ca20 <_printf_i+0x1c8>
 800ca28:	8019      	strh	r1, [r3, #0]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	4615      	mov	r5, r2
 800ca30:	e7ba      	b.n	800c9a8 <_printf_i+0x150>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	1d1a      	adds	r2, r3, #4
 800ca36:	602a      	str	r2, [r5, #0]
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	6862      	ldr	r2, [r4, #4]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f7f3 fbd6 	bl	80001f0 <memchr>
 800ca44:	b108      	cbz	r0, 800ca4a <_printf_i+0x1f2>
 800ca46:	1b40      	subs	r0, r0, r5
 800ca48:	6060      	str	r0, [r4, #4]
 800ca4a:	6863      	ldr	r3, [r4, #4]
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca54:	e7a8      	b.n	800c9a8 <_printf_i+0x150>
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	47d0      	blx	sl
 800ca60:	3001      	adds	r0, #1
 800ca62:	d0ab      	beq.n	800c9bc <_printf_i+0x164>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	079b      	lsls	r3, r3, #30
 800ca68:	d413      	bmi.n	800ca92 <_printf_i+0x23a>
 800ca6a:	68e0      	ldr	r0, [r4, #12]
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	4298      	cmp	r0, r3
 800ca70:	bfb8      	it	lt
 800ca72:	4618      	movlt	r0, r3
 800ca74:	e7a4      	b.n	800c9c0 <_printf_i+0x168>
 800ca76:	2301      	movs	r3, #1
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	47d0      	blx	sl
 800ca80:	3001      	adds	r0, #1
 800ca82:	d09b      	beq.n	800c9bc <_printf_i+0x164>
 800ca84:	3501      	adds	r5, #1
 800ca86:	68e3      	ldr	r3, [r4, #12]
 800ca88:	9903      	ldr	r1, [sp, #12]
 800ca8a:	1a5b      	subs	r3, r3, r1
 800ca8c:	42ab      	cmp	r3, r5
 800ca8e:	dcf2      	bgt.n	800ca76 <_printf_i+0x21e>
 800ca90:	e7eb      	b.n	800ca6a <_printf_i+0x212>
 800ca92:	2500      	movs	r5, #0
 800ca94:	f104 0619 	add.w	r6, r4, #25
 800ca98:	e7f5      	b.n	800ca86 <_printf_i+0x22e>
 800ca9a:	bf00      	nop
 800ca9c:	0800d2cd 	.word	0x0800d2cd
 800caa0:	0800d2de 	.word	0x0800d2de

0800caa4 <__sread>:
 800caa4:	b510      	push	{r4, lr}
 800caa6:	460c      	mov	r4, r1
 800caa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caac:	f000 f954 	bl	800cd58 <_read_r>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	bfab      	itete	ge
 800cab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cab6:	89a3      	ldrhlt	r3, [r4, #12]
 800cab8:	181b      	addge	r3, r3, r0
 800caba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cabe:	bfac      	ite	ge
 800cac0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cac2:	81a3      	strhlt	r3, [r4, #12]
 800cac4:	bd10      	pop	{r4, pc}

0800cac6 <__swrite>:
 800cac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caca:	461f      	mov	r7, r3
 800cacc:	898b      	ldrh	r3, [r1, #12]
 800cace:	05db      	lsls	r3, r3, #23
 800cad0:	4605      	mov	r5, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	4616      	mov	r6, r2
 800cad6:	d505      	bpl.n	800cae4 <__swrite+0x1e>
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	2302      	movs	r3, #2
 800cade:	2200      	movs	r2, #0
 800cae0:	f000 f928 	bl	800cd34 <_lseek_r>
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	4632      	mov	r2, r6
 800caf2:	463b      	mov	r3, r7
 800caf4:	4628      	mov	r0, r5
 800caf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	f000 b869 	b.w	800cbd0 <_write_r>

0800cafe <__sseek>:
 800cafe:	b510      	push	{r4, lr}
 800cb00:	460c      	mov	r4, r1
 800cb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb06:	f000 f915 	bl	800cd34 <_lseek_r>
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	bf15      	itete	ne
 800cb10:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb1a:	81a3      	strheq	r3, [r4, #12]
 800cb1c:	bf18      	it	ne
 800cb1e:	81a3      	strhne	r3, [r4, #12]
 800cb20:	bd10      	pop	{r4, pc}

0800cb22 <__sclose>:
 800cb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb26:	f000 b8d3 	b.w	800ccd0 <_close_r>
	...

0800cb2c <__swbuf_r>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	460e      	mov	r6, r1
 800cb30:	4614      	mov	r4, r2
 800cb32:	4605      	mov	r5, r0
 800cb34:	b118      	cbz	r0, 800cb3e <__swbuf_r+0x12>
 800cb36:	6983      	ldr	r3, [r0, #24]
 800cb38:	b90b      	cbnz	r3, 800cb3e <__swbuf_r+0x12>
 800cb3a:	f7ff fbb3 	bl	800c2a4 <__sinit>
 800cb3e:	4b21      	ldr	r3, [pc, #132]	; (800cbc4 <__swbuf_r+0x98>)
 800cb40:	429c      	cmp	r4, r3
 800cb42:	d12b      	bne.n	800cb9c <__swbuf_r+0x70>
 800cb44:	686c      	ldr	r4, [r5, #4]
 800cb46:	69a3      	ldr	r3, [r4, #24]
 800cb48:	60a3      	str	r3, [r4, #8]
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	071a      	lsls	r2, r3, #28
 800cb4e:	d52f      	bpl.n	800cbb0 <__swbuf_r+0x84>
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	b36b      	cbz	r3, 800cbb0 <__swbuf_r+0x84>
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	6820      	ldr	r0, [r4, #0]
 800cb58:	1ac0      	subs	r0, r0, r3
 800cb5a:	6963      	ldr	r3, [r4, #20]
 800cb5c:	b2f6      	uxtb	r6, r6
 800cb5e:	4283      	cmp	r3, r0
 800cb60:	4637      	mov	r7, r6
 800cb62:	dc04      	bgt.n	800cb6e <__swbuf_r+0x42>
 800cb64:	4621      	mov	r1, r4
 800cb66:	4628      	mov	r0, r5
 800cb68:	f7ff fb08 	bl	800c17c <_fflush_r>
 800cb6c:	bb30      	cbnz	r0, 800cbbc <__swbuf_r+0x90>
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	60a3      	str	r3, [r4, #8]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	6022      	str	r2, [r4, #0]
 800cb7a:	701e      	strb	r6, [r3, #0]
 800cb7c:	6963      	ldr	r3, [r4, #20]
 800cb7e:	3001      	adds	r0, #1
 800cb80:	4283      	cmp	r3, r0
 800cb82:	d004      	beq.n	800cb8e <__swbuf_r+0x62>
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	07db      	lsls	r3, r3, #31
 800cb88:	d506      	bpl.n	800cb98 <__swbuf_r+0x6c>
 800cb8a:	2e0a      	cmp	r6, #10
 800cb8c:	d104      	bne.n	800cb98 <__swbuf_r+0x6c>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff faf3 	bl	800c17c <_fflush_r>
 800cb96:	b988      	cbnz	r0, 800cbbc <__swbuf_r+0x90>
 800cb98:	4638      	mov	r0, r7
 800cb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb9c:	4b0a      	ldr	r3, [pc, #40]	; (800cbc8 <__swbuf_r+0x9c>)
 800cb9e:	429c      	cmp	r4, r3
 800cba0:	d101      	bne.n	800cba6 <__swbuf_r+0x7a>
 800cba2:	68ac      	ldr	r4, [r5, #8]
 800cba4:	e7cf      	b.n	800cb46 <__swbuf_r+0x1a>
 800cba6:	4b09      	ldr	r3, [pc, #36]	; (800cbcc <__swbuf_r+0xa0>)
 800cba8:	429c      	cmp	r4, r3
 800cbaa:	bf08      	it	eq
 800cbac:	68ec      	ldreq	r4, [r5, #12]
 800cbae:	e7ca      	b.n	800cb46 <__swbuf_r+0x1a>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f000 f81e 	bl	800cbf4 <__swsetup_r>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d0cb      	beq.n	800cb54 <__swbuf_r+0x28>
 800cbbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cbc0:	e7ea      	b.n	800cb98 <__swbuf_r+0x6c>
 800cbc2:	bf00      	nop
 800cbc4:	0800d27c 	.word	0x0800d27c
 800cbc8:	0800d29c 	.word	0x0800d29c
 800cbcc:	0800d25c 	.word	0x0800d25c

0800cbd0 <_write_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d07      	ldr	r5, [pc, #28]	; (800cbf0 <_write_r+0x20>)
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	4611      	mov	r1, r2
 800cbda:	2200      	movs	r2, #0
 800cbdc:	602a      	str	r2, [r5, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	f7f4 fe92 	bl	8001908 <_write>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d102      	bne.n	800cbee <_write_r+0x1e>
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	b103      	cbz	r3, 800cbee <_write_r+0x1e>
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	20000a60 	.word	0x20000a60

0800cbf4 <__swsetup_r>:
 800cbf4:	4b32      	ldr	r3, [pc, #200]	; (800ccc0 <__swsetup_r+0xcc>)
 800cbf6:	b570      	push	{r4, r5, r6, lr}
 800cbf8:	681d      	ldr	r5, [r3, #0]
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	b125      	cbz	r5, 800cc0a <__swsetup_r+0x16>
 800cc00:	69ab      	ldr	r3, [r5, #24]
 800cc02:	b913      	cbnz	r3, 800cc0a <__swsetup_r+0x16>
 800cc04:	4628      	mov	r0, r5
 800cc06:	f7ff fb4d 	bl	800c2a4 <__sinit>
 800cc0a:	4b2e      	ldr	r3, [pc, #184]	; (800ccc4 <__swsetup_r+0xd0>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	d10f      	bne.n	800cc30 <__swsetup_r+0x3c>
 800cc10:	686c      	ldr	r4, [r5, #4]
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc18:	0719      	lsls	r1, r3, #28
 800cc1a:	d42c      	bmi.n	800cc76 <__swsetup_r+0x82>
 800cc1c:	06dd      	lsls	r5, r3, #27
 800cc1e:	d411      	bmi.n	800cc44 <__swsetup_r+0x50>
 800cc20:	2309      	movs	r3, #9
 800cc22:	6033      	str	r3, [r6, #0]
 800cc24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2e:	e03e      	b.n	800ccae <__swsetup_r+0xba>
 800cc30:	4b25      	ldr	r3, [pc, #148]	; (800ccc8 <__swsetup_r+0xd4>)
 800cc32:	429c      	cmp	r4, r3
 800cc34:	d101      	bne.n	800cc3a <__swsetup_r+0x46>
 800cc36:	68ac      	ldr	r4, [r5, #8]
 800cc38:	e7eb      	b.n	800cc12 <__swsetup_r+0x1e>
 800cc3a:	4b24      	ldr	r3, [pc, #144]	; (800cccc <__swsetup_r+0xd8>)
 800cc3c:	429c      	cmp	r4, r3
 800cc3e:	bf08      	it	eq
 800cc40:	68ec      	ldreq	r4, [r5, #12]
 800cc42:	e7e6      	b.n	800cc12 <__swsetup_r+0x1e>
 800cc44:	0758      	lsls	r0, r3, #29
 800cc46:	d512      	bpl.n	800cc6e <__swsetup_r+0x7a>
 800cc48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc4a:	b141      	cbz	r1, 800cc5e <__swsetup_r+0x6a>
 800cc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc50:	4299      	cmp	r1, r3
 800cc52:	d002      	beq.n	800cc5a <__swsetup_r+0x66>
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7fe ffb1 	bl	800bbbc <_free_r>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6363      	str	r3, [r4, #52]	; 0x34
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc64:	81a3      	strh	r3, [r4, #12]
 800cc66:	2300      	movs	r3, #0
 800cc68:	6063      	str	r3, [r4, #4]
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	f043 0308 	orr.w	r3, r3, #8
 800cc74:	81a3      	strh	r3, [r4, #12]
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	b94b      	cbnz	r3, 800cc8e <__swsetup_r+0x9a>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc84:	d003      	beq.n	800cc8e <__swsetup_r+0x9a>
 800cc86:	4621      	mov	r1, r4
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff fbd1 	bl	800c430 <__smakebuf_r>
 800cc8e:	89a0      	ldrh	r0, [r4, #12]
 800cc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc94:	f010 0301 	ands.w	r3, r0, #1
 800cc98:	d00a      	beq.n	800ccb0 <__swsetup_r+0xbc>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60a3      	str	r3, [r4, #8]
 800cc9e:	6963      	ldr	r3, [r4, #20]
 800cca0:	425b      	negs	r3, r3
 800cca2:	61a3      	str	r3, [r4, #24]
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	b943      	cbnz	r3, 800ccba <__swsetup_r+0xc6>
 800cca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccac:	d1ba      	bne.n	800cc24 <__swsetup_r+0x30>
 800ccae:	bd70      	pop	{r4, r5, r6, pc}
 800ccb0:	0781      	lsls	r1, r0, #30
 800ccb2:	bf58      	it	pl
 800ccb4:	6963      	ldrpl	r3, [r4, #20]
 800ccb6:	60a3      	str	r3, [r4, #8]
 800ccb8:	e7f4      	b.n	800cca4 <__swsetup_r+0xb0>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	e7f7      	b.n	800ccae <__swsetup_r+0xba>
 800ccbe:	bf00      	nop
 800ccc0:	2000002c 	.word	0x2000002c
 800ccc4:	0800d27c 	.word	0x0800d27c
 800ccc8:	0800d29c 	.word	0x0800d29c
 800cccc:	0800d25c 	.word	0x0800d25c

0800ccd0 <_close_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4d06      	ldr	r5, [pc, #24]	; (800ccec <_close_r+0x1c>)
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	4608      	mov	r0, r1
 800ccda:	602b      	str	r3, [r5, #0]
 800ccdc:	f7f4 fe40 	bl	8001960 <_close>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_close_r+0x1a>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_close_r+0x1a>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	20000a60 	.word	0x20000a60

0800ccf0 <_fstat_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d07      	ldr	r5, [pc, #28]	; (800cd10 <_fstat_r+0x20>)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	f7f4 fe7f 	bl	8001a00 <_fstat>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d102      	bne.n	800cd0c <_fstat_r+0x1c>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	b103      	cbz	r3, 800cd0c <_fstat_r+0x1c>
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	bd38      	pop	{r3, r4, r5, pc}
 800cd0e:	bf00      	nop
 800cd10:	20000a60 	.word	0x20000a60

0800cd14 <_isatty_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4d06      	ldr	r5, [pc, #24]	; (800cd30 <_isatty_r+0x1c>)
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	602b      	str	r3, [r5, #0]
 800cd20:	f7f4 fddc 	bl	80018dc <_isatty>
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	d102      	bne.n	800cd2e <_isatty_r+0x1a>
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	b103      	cbz	r3, 800cd2e <_isatty_r+0x1a>
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	20000a60 	.word	0x20000a60

0800cd34 <_lseek_r>:
 800cd34:	b538      	push	{r3, r4, r5, lr}
 800cd36:	4d07      	ldr	r5, [pc, #28]	; (800cd54 <_lseek_r+0x20>)
 800cd38:	4604      	mov	r4, r0
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	602a      	str	r2, [r5, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	f7f4 fe23 	bl	800198e <_lseek>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_lseek_r+0x1e>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_lseek_r+0x1e>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20000a60 	.word	0x20000a60

0800cd58 <_read_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d07      	ldr	r5, [pc, #28]	; (800cd78 <_read_r+0x20>)
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	4608      	mov	r0, r1
 800cd60:	4611      	mov	r1, r2
 800cd62:	2200      	movs	r2, #0
 800cd64:	602a      	str	r2, [r5, #0]
 800cd66:	461a      	mov	r2, r3
 800cd68:	f7f4 fe22 	bl	80019b0 <_read>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_read_r+0x1e>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_read_r+0x1e>
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	20000a60 	.word	0x20000a60

0800cd7c <_init>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	bf00      	nop
 800cd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd82:	bc08      	pop	{r3}
 800cd84:	469e      	mov	lr, r3
 800cd86:	4770      	bx	lr

0800cd88 <_fini>:
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8a:	bf00      	nop
 800cd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8e:	bc08      	pop	{r3}
 800cd90:	469e      	mov	lr, r3
 800cd92:	4770      	bx	lr
