
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102bc  080102bc  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080102bc  080102bc  000202bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102c4  080102c4  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102c4  080102c4  000202c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102c8  080102c8  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080102cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00003ab8  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003b4c  20003b4c  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026623  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005818  00000000  00000000  000566e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b58  00000000  00000000  0005bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001928  00000000  00000000  0005da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a30c  00000000  00000000  0005f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c3a  00000000  00000000  0008968c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7674  00000000  00000000  000b12c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019893a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b94  00000000  00000000  0019898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fd30 	.word	0x0800fd30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800fd30 	.word	0x0800fd30

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc3f 	bl	8000f74 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc90 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc8d 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc8a 	bl	800101c <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800fd48 	.word	0x0800fd48
 8000738:	0800fd94 	.word	0x0800fd94
 800073c:	0800fd98 	.word	0x0800fd98
 8000740:	200001b0 	.word	0x200001b0
 8000744:	200000b0 	.word	0x200000b0

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fc1f 	bl	8000fa4 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fbce 	bl	8000f3c <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fc14 	bl	800101c <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fc11 	bl	800101c <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fc0e 	bl	800101c <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc02 	bl	800101c <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fbff 	bl	800101c <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fbdc 	bl	800101c <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fbd9 	bl	800101c <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fbc2 	bl	800101c <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	0800fd9c 	.word	0x0800fd9c
 80008b0:	0800fda4 	.word	0x0800fda4
 80008b4:	0800fd94 	.word	0x0800fd94
 80008b8:	0800fdac 	.word	0x0800fdac
 80008bc:	0800fd98 	.word	0x0800fd98

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00d feb0 	bl	800e72c <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 faa1 	bl	800101c <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa35 	bl	800101c <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2307      	movs	r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f9a8 	bl	800101c <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f9a5 	bl	800101c <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f99a 	bl	800101c <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f997 	bl	800101c <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800fef4 	.word	0x0800fef4
 8000d0c:	0800fde4 	.word	0x0800fde4
 8000d10:	0800fde8 	.word	0x0800fde8

08000d14 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	461a      	mov	r2, r3
 8000d22:	2101      	movs	r1, #1
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdfd 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d116      	bne.n	8000d62 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <ConsoleCommandParamExampleInt16+0x58>)
 8000d36:	f000 f971 	bl	800101c <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff25 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d46:	f000 f969 	bl	800101c <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fe8e 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <ConsoleCommandParamExampleInt16+0x60>)
 8000d58:	f000 f960 	bl	800101c <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <ConsoleCommandParamExampleInt16+0x64>)
 8000d5e:	f000 f95d 	bl	800101c <ConsoleIoSendString>
	}
	return result;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	0800fdec 	.word	0x0800fdec
 8000d70:	0800fdfc 	.word	0x0800fdfc
 8000d74:	0800fe04 	.word	0x0800fe04
 8000d78:	0800fde8 	.word	0x0800fde8

08000d7c <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fe27 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000d92:	4603      	mov	r3, r0
 8000d94:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <ConsoleCommandParamExampleHexUint16+0x40>)
 8000d9e:	f000 f93d 	bl	800101c <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe64 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dac:	f000 f936 	bl	800101c <ConsoleIoSendString>
	}
	return result;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800fe08 	.word	0x0800fe08
 8000dc0:	0800fde8 	.word	0x0800fde8

08000dc4 <ConsoleCommandWeek8Homework>:
static eCommandResult_T ConsoleCommandWeek8Homework(const char buffer[])
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// stack pointer.
	int p;
	uint32_t stack_pointer = &p;
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30

	// the heap pointer
	int *ptr;
	ptr = malloc(15 * sizeof(*ptr));
 8000dd8:	203c      	movs	r0, #60	; 0x3c
 8000dda:	f00d fcd5 	bl	800e788 <malloc>
 8000dde:	4603      	mov	r3, r0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c

	// An unintialise global variable
	uint32_t gVar = &dummyGlobal;
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <ConsoleCommandWeek8Homework+0x11c>)
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28

	// A static variable inside a function
	static int staticInFunc = 0;
	uint32_t staticInFunAddress = &staticInFunc;
 8000de6:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <ConsoleCommandWeek8Homework+0x120>)
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24

	// A variable inside a function.
	int v = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
	uint32_t varInFunc = &v;
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	623b      	str	r3, [r7, #32]

	char textToWrite[ 16 ];
	sprintf( textToWrite, "%x", stack_pointer );
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dfa:	493b      	ldr	r1, [pc, #236]	; (8000ee8 <ConsoleCommandWeek8Homework+0x124>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00d feb7 	bl	800eb70 <siprintf>



	ConsoleIoSendString("----------- Home Work Week 8 -----------\n");
 8000e02:	483a      	ldr	r0, [pc, #232]	; (8000eec <ConsoleCommandWeek8Homework+0x128>)
 8000e04:	f000 f90a 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("Stack Pointer: ");
 8000e08:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <ConsoleCommandWeek8Homework+0x12c>)
 8000e0a:	f000 f907 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(" 0x");
 8000e0e:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <ConsoleCommandWeek8Homework+0x130>)
 8000e10:	f000 f904 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(textToWrite);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f8ff 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("\n");
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <ConsoleCommandWeek8Homework+0x134>)
 8000e20:	f000 f8fc 	bl	800101c <ConsoleIoSendString>


  sprintf( textToWrite, "%x", ptr );
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e2a:	492f      	ldr	r1, [pc, #188]	; (8000ee8 <ConsoleCommandWeek8Homework+0x124>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00d fe9f 	bl	800eb70 <siprintf>

	ConsoleIoSendString("Heap Pointer: ");
 8000e32:	4832      	ldr	r0, [pc, #200]	; (8000efc <ConsoleCommandWeek8Homework+0x138>)
 8000e34:	f000 f8f2 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(" 0x");
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <ConsoleCommandWeek8Homework+0x130>)
 8000e3a:	f000 f8ef 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(textToWrite);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f8ea 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("\n");
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <ConsoleCommandWeek8Homework+0x134>)
 8000e4a:	f000 f8e7 	bl	800101c <ConsoleIoSendString>


	sprintf( textToWrite, "%x", gVar );
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e54:	4924      	ldr	r1, [pc, #144]	; (8000ee8 <ConsoleCommandWeek8Homework+0x124>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00d fe8a 	bl	800eb70 <siprintf>

	ConsoleIoSendString("Unintialised Global Variable: ");
 8000e5c:	4828      	ldr	r0, [pc, #160]	; (8000f00 <ConsoleCommandWeek8Homework+0x13c>)
 8000e5e:	f000 f8dd 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(" 0x");
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <ConsoleCommandWeek8Homework+0x130>)
 8000e64:	f000 f8da 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(textToWrite);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f8d5 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("\n");
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <ConsoleCommandWeek8Homework+0x134>)
 8000e74:	f000 f8d2 	bl	800101c <ConsoleIoSendString>


	sprintf( textToWrite, "%x", staticInFunAddress );
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	491a      	ldr	r1, [pc, #104]	; (8000ee8 <ConsoleCommandWeek8Homework+0x124>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f00d fe75 	bl	800eb70 <siprintf>

	ConsoleIoSendString("Static var in function: ");
 8000e86:	481f      	ldr	r0, [pc, #124]	; (8000f04 <ConsoleCommandWeek8Homework+0x140>)
 8000e88:	f000 f8c8 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(" 0x");
 8000e8c:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <ConsoleCommandWeek8Homework+0x130>)
 8000e8e:	f000 f8c5 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(textToWrite);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f8c0 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("\n");
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <ConsoleCommandWeek8Homework+0x134>)
 8000e9e:	f000 f8bd 	bl	800101c <ConsoleIoSendString>


	sprintf( textToWrite, "%x", varInFunc );
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	490f      	ldr	r1, [pc, #60]	; (8000ee8 <ConsoleCommandWeek8Homework+0x124>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00d fe60 	bl	800eb70 <siprintf>

	ConsoleIoSendString("Var in function: ");
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <ConsoleCommandWeek8Homework+0x144>)
 8000eb2:	f000 f8b3 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(" 0x");
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <ConsoleCommandWeek8Homework+0x130>)
 8000eb8:	f000 f8b0 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(textToWrite);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8ab 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString("\n");
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <ConsoleCommandWeek8Homework+0x134>)
 8000ec8:	f000 f8a8 	bl	800101c <ConsoleIoSendString>

	ConsoleIoSendString("----------------------\n");
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <ConsoleCommandWeek8Homework+0x148>)
 8000ece:	f000 f8a5 	bl	800101c <ConsoleIoSendString>





		return result;
 8000ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001b5 	.word	0x200001b5
 8000ee4:	200001b8 	.word	0x200001b8
 8000ee8:	0800fe18 	.word	0x0800fe18
 8000eec:	0800fe1c 	.word	0x0800fe1c
 8000ef0:	0800fe48 	.word	0x0800fe48
 8000ef4:	0800fe58 	.word	0x0800fe58
 8000ef8:	0800fe5c 	.word	0x0800fe5c
 8000efc:	0800fe60 	.word	0x0800fe60
 8000f00:	0800fe70 	.word	0x0800fe70
 8000f04:	0800fe90 	.word	0x0800fe90
 8000f08:	0800feac 	.word	0x0800feac
 8000f0c:	0800fec0 	.word	0x0800fec0

08000f10 <ConsoleCommandVer>:
static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <ConsoleCommandVer+0x24>)
 8000f1e:	f000 f87d 	bl	800101c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <ConsoleCommandVer+0x28>)
 8000f24:	f000 f87a 	bl	800101c <ConsoleIoSendString>
	return result;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800fed8 	.word	0x0800fed8
 8000f38:	0800fde8 	.word	0x0800fde8

08000f3c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <ConsoleCommandsGetTable+0x10>)
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	0800fef4 	.word	0x0800fef4

08000f50 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	charCount = 0;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <reset+0x1c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <reset+0x20>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200001c4 	.word	0x200001c4
 8000f70:	200001c0 	.word	0x200001c0

08000f74 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <ConsoleIoInit+0x28>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <ConsoleIoInit+0x28>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <ConsoleIoInit+0x2c>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 ff9d 	bl	8008eca <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001bc 	.word	0x200001bc
 8000fa0:	200001d2 	.word	0x200001d2

08000fa4 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <ConsoleIoReceive+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d11f      	bne.n	8000ffc <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000fbc:	e00a      	b.n	8000fd4 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4912      	ldr	r1, [pc, #72]	; (8001010 <ConsoleIoReceive+0x6c>)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	440a      	add	r2, r1
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	701a      	strb	r2, [r3, #0]
			i++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <ConsoleIoReceive+0x70>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	461a      	mov	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d3ed      	bcc.n	8000fbe <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <ConsoleIoReceive+0x70>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000fec:	4908      	ldr	r1, [pc, #32]	; (8001010 <ConsoleIoReceive+0x6c>)
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <ConsoleIoReceive+0x74>)
 8000ff0:	f00d fcd0 	bl	800e994 <iprintf>
		// reset counts
		reset();
 8000ff4:	f7ff ffac 	bl	8000f50 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e003      	b.n	8001004 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001c0 	.word	0x200001c0
 8001010:	200001c8 	.word	0x200001c8
 8001014:	200001c4 	.word	0x200001c4
 8001018:	0800feec 	.word	0x0800feec

0800101c <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <ConsoleIoSendString+0x1c>)
 8001028:	f00d fcb4 	bl	800e994 <iprintf>
	return CONSOLE_SUCCESS;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	0800feec 	.word	0x0800feec

0800103c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_UART_RxCpltCallback+0x44>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_UART_RxCpltCallback+0x48>)
 800104a:	7811      	ldrb	r1, [r2, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_UART_RxCpltCallback+0x4c>)
 800104e:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_UART_RxCpltCallback+0x44>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_UART_RxCpltCallback+0x44>)
 8001058:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_UART_RxCpltCallback+0x48>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d102      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_UART_RxCpltCallback+0x50>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_UART_RxCpltCallback+0x54>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <HAL_UART_RxCpltCallback+0x48>)
 8001070:	4618      	mov	r0, r3
 8001072:	f007 ff2a 	bl	8008eca <HAL_UART_Receive_IT>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001c4 	.word	0x200001c4
 8001084:	200001d2 	.word	0x200001d2
 8001088:	200001c8 	.word	0x200001c8
 800108c:	200001c0 	.word	0x200001c0
 8001090:	200001bc 	.word	0x200001bc

08001094 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	4856      	ldr	r0, [pc, #344]	; (80011f8 <I3G450D_Init+0x164>)
 800109e:	f002 ff4b 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010a2:	2014      	movs	r0, #20
 80010a4:	f002 f8ce 	bl	8003244 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2102      	movs	r1, #2
 80010ac:	4852      	ldr	r0, [pc, #328]	; (80011f8 <I3G450D_Init+0x164>)
 80010ae:	f002 ff43 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010b2:	2014      	movs	r0, #20
 80010b4:	f002 f8c6 	bl	8003244 <HAL_Delay>
	spiTxBuf[0]=0x20;
 80010b8:	4b50      	ldr	r3, [pc, #320]	; (80011fc <I3G450D_Init+0x168>)
 80010ba:	2220      	movs	r2, #32
 80010bc:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <I3G450D_Init+0x168>)
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010c4:	2332      	movs	r3, #50	; 0x32
 80010c6:	2202      	movs	r2, #2
 80010c8:	494c      	ldr	r1, [pc, #304]	; (80011fc <I3G450D_Init+0x168>)
 80010ca:	484d      	ldr	r0, [pc, #308]	; (8001200 <I3G450D_Init+0x16c>)
 80010cc:	f006 f889 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	4848      	ldr	r0, [pc, #288]	; (80011f8 <I3G450D_Init+0x164>)
 80010d6:	f002 ff2f 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010da:	2014      	movs	r0, #20
 80010dc:	f002 f8b2 	bl	8003244 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2102      	movs	r1, #2
 80010e4:	4844      	ldr	r0, [pc, #272]	; (80011f8 <I3G450D_Init+0x164>)
 80010e6:	f002 ff27 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f002 f8aa 	bl	8003244 <HAL_Delay>
	spiTxBuf[0]=0x21;
 80010f0:	4b42      	ldr	r3, [pc, #264]	; (80011fc <I3G450D_Init+0x168>)
 80010f2:	2221      	movs	r2, #33	; 0x21
 80010f4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <I3G450D_Init+0x168>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010fc:	2332      	movs	r3, #50	; 0x32
 80010fe:	2202      	movs	r2, #2
 8001100:	493e      	ldr	r1, [pc, #248]	; (80011fc <I3G450D_Init+0x168>)
 8001102:	483f      	ldr	r0, [pc, #252]	; (8001200 <I3G450D_Init+0x16c>)
 8001104:	f006 f86d 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2102      	movs	r1, #2
 800110c:	483a      	ldr	r0, [pc, #232]	; (80011f8 <I3G450D_Init+0x164>)
 800110e:	f002 ff13 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001112:	2014      	movs	r0, #20
 8001114:	f002 f896 	bl	8003244 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2102      	movs	r1, #2
 800111c:	4836      	ldr	r0, [pc, #216]	; (80011f8 <I3G450D_Init+0x164>)
 800111e:	f002 ff0b 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001122:	2014      	movs	r0, #20
 8001124:	f002 f88e 	bl	8003244 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <I3G450D_Init+0x168>)
 800112a:	2222      	movs	r2, #34	; 0x22
 800112c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <I3G450D_Init+0x168>)
 8001130:	2200      	movs	r2, #0
 8001132:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001134:	2332      	movs	r3, #50	; 0x32
 8001136:	2202      	movs	r2, #2
 8001138:	4930      	ldr	r1, [pc, #192]	; (80011fc <I3G450D_Init+0x168>)
 800113a:	4831      	ldr	r0, [pc, #196]	; (8001200 <I3G450D_Init+0x16c>)
 800113c:	f006 f851 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2102      	movs	r1, #2
 8001144:	482c      	ldr	r0, [pc, #176]	; (80011f8 <I3G450D_Init+0x164>)
 8001146:	f002 fef7 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800114a:	2014      	movs	r0, #20
 800114c:	f002 f87a 	bl	8003244 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	4828      	ldr	r0, [pc, #160]	; (80011f8 <I3G450D_Init+0x164>)
 8001156:	f002 feef 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800115a:	2014      	movs	r0, #20
 800115c:	f002 f872 	bl	8003244 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <I3G450D_Init+0x168>)
 8001162:	2223      	movs	r2, #35	; 0x23
 8001164:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <I3G450D_Init+0x168>)
 8001168:	2220      	movs	r2, #32
 800116a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 800116c:	2332      	movs	r3, #50	; 0x32
 800116e:	2202      	movs	r2, #2
 8001170:	4922      	ldr	r1, [pc, #136]	; (80011fc <I3G450D_Init+0x168>)
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <I3G450D_Init+0x16c>)
 8001174:	f006 f835 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2102      	movs	r1, #2
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <I3G450D_Init+0x164>)
 800117e:	f002 fedb 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001182:	2014      	movs	r0, #20
 8001184:	f002 f85e 	bl	8003244 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	481a      	ldr	r0, [pc, #104]	; (80011f8 <I3G450D_Init+0x164>)
 800118e:	f002 fed3 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001192:	2014      	movs	r0, #20
 8001194:	f002 f856 	bl	8003244 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <I3G450D_Init+0x168>)
 800119a:	2224      	movs	r2, #36	; 0x24
 800119c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <I3G450D_Init+0x168>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80011a4:	2332      	movs	r3, #50	; 0x32
 80011a6:	2202      	movs	r2, #2
 80011a8:	4914      	ldr	r1, [pc, #80]	; (80011fc <I3G450D_Init+0x168>)
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <I3G450D_Init+0x16c>)
 80011ac:	f006 f819 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <I3G450D_Init+0x164>)
 80011b6:	f002 febf 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f002 f842 	bl	8003244 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <I3G450D_Init+0x164>)
 80011c6:	f002 feb7 	bl	8003f38 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <I3G450D_Init+0x168>)
 80011cc:	228f      	movs	r2, #143	; 0x8f
 80011ce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011d0:	2332      	movs	r3, #50	; 0x32
 80011d2:	2201      	movs	r2, #1
 80011d4:	4909      	ldr	r1, [pc, #36]	; (80011fc <I3G450D_Init+0x168>)
 80011d6:	480a      	ldr	r0, [pc, #40]	; (8001200 <I3G450D_Init+0x16c>)
 80011d8:	f006 f803 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	2201      	movs	r2, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <I3G450D_Init+0x170>)
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <I3G450D_Init+0x16c>)
 80011e4:	f006 f939 	bl	800745a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2102      	movs	r1, #2
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <I3G450D_Init+0x164>)
 80011ee:	f002 fea3 	bl	8003f38 <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020800 	.word	0x40020800
 80011fc:	2000310c 	.word	0x2000310c
 8001200:	20003224 	.word	0x20003224
 8001204:	20003111 	.word	0x20003111

08001208 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b098      	sub	sp, #96	; 0x60
 800120c:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800121a:	2300      	movs	r3, #0
 800121c:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <I3G450D_loop+0x1b0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <I3G450D_loop+0x6a>
 800126a:	2b01      	cmp	r3, #1
 800126c:	f000 80ba 	beq.w	80013e4 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001270:	e36d      	b.n	800194e <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <I3G450D_loop+0x1b4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 8368 	bne.w	800194c <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2102      	movs	r1, #2
 8001280:	484f      	ldr	r0, [pc, #316]	; (80013c0 <I3G450D_loop+0x1b8>)
 8001282:	f002 fe59 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 8001286:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <I3G450D_loop+0x1bc>)
 8001288:	22a8      	movs	r2, #168	; 0xa8
 800128a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	2201      	movs	r2, #1
 8001290:	494c      	ldr	r1, [pc, #304]	; (80013c4 <I3G450D_loop+0x1bc>)
 8001292:	484d      	ldr	r0, [pc, #308]	; (80013c8 <I3G450D_loop+0x1c0>)
 8001294:	f005 ffa5 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8001298:	2332      	movs	r3, #50	; 0x32
 800129a:	2201      	movs	r2, #1
 800129c:	494b      	ldr	r1, [pc, #300]	; (80013cc <I3G450D_loop+0x1c4>)
 800129e:	484a      	ldr	r0, [pc, #296]	; (80013c8 <I3G450D_loop+0x1c0>)
 80012a0:	f006 f8db 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	4845      	ldr	r0, [pc, #276]	; (80013c0 <I3G450D_loop+0x1b8>)
 80012aa:	f002 fe45 	bl	8003f38 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2102      	movs	r1, #2
 80012b2:	4843      	ldr	r0, [pc, #268]	; (80013c0 <I3G450D_loop+0x1b8>)
 80012b4:	f002 fe40 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <I3G450D_loop+0x1bc>)
 80012ba:	22a9      	movs	r2, #169	; 0xa9
 80012bc:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80012be:	2332      	movs	r3, #50	; 0x32
 80012c0:	2201      	movs	r2, #1
 80012c2:	4940      	ldr	r1, [pc, #256]	; (80013c4 <I3G450D_loop+0x1bc>)
 80012c4:	4840      	ldr	r0, [pc, #256]	; (80013c8 <I3G450D_loop+0x1c0>)
 80012c6:	f005 ff8c 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80012ca:	2332      	movs	r3, #50	; 0x32
 80012cc:	2201      	movs	r2, #1
 80012ce:	4940      	ldr	r1, [pc, #256]	; (80013d0 <I3G450D_loop+0x1c8>)
 80012d0:	483d      	ldr	r0, [pc, #244]	; (80013c8 <I3G450D_loop+0x1c0>)
 80012d2:	f006 f8c2 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2102      	movs	r1, #2
 80012da:	4839      	ldr	r0, [pc, #228]	; (80013c0 <I3G450D_loop+0x1b8>)
 80012dc:	f002 fe2c 	bl	8003f38 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	4836      	ldr	r0, [pc, #216]	; (80013c0 <I3G450D_loop+0x1b8>)
 80012e6:	f002 fe27 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <I3G450D_loop+0x1bc>)
 80012ec:	22aa      	movs	r2, #170	; 0xaa
 80012ee:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	2201      	movs	r2, #1
 80012f4:	4933      	ldr	r1, [pc, #204]	; (80013c4 <I3G450D_loop+0x1bc>)
 80012f6:	4834      	ldr	r0, [pc, #208]	; (80013c8 <I3G450D_loop+0x1c0>)
 80012f8:	f005 ff73 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 80012fc:	2332      	movs	r3, #50	; 0x32
 80012fe:	2201      	movs	r2, #1
 8001300:	4934      	ldr	r1, [pc, #208]	; (80013d4 <I3G450D_loop+0x1cc>)
 8001302:	4831      	ldr	r0, [pc, #196]	; (80013c8 <I3G450D_loop+0x1c0>)
 8001304:	f006 f8a9 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2102      	movs	r1, #2
 800130c:	482c      	ldr	r0, [pc, #176]	; (80013c0 <I3G450D_loop+0x1b8>)
 800130e:	f002 fe13 	bl	8003f38 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2102      	movs	r1, #2
 8001316:	482a      	ldr	r0, [pc, #168]	; (80013c0 <I3G450D_loop+0x1b8>)
 8001318:	f002 fe0e 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <I3G450D_loop+0x1bc>)
 800131e:	22ab      	movs	r2, #171	; 0xab
 8001320:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001322:	2332      	movs	r3, #50	; 0x32
 8001324:	2201      	movs	r2, #1
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <I3G450D_loop+0x1bc>)
 8001328:	4827      	ldr	r0, [pc, #156]	; (80013c8 <I3G450D_loop+0x1c0>)
 800132a:	f005 ff5a 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 800132e:	2332      	movs	r3, #50	; 0x32
 8001330:	2201      	movs	r2, #1
 8001332:	4929      	ldr	r1, [pc, #164]	; (80013d8 <I3G450D_loop+0x1d0>)
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <I3G450D_loop+0x1c0>)
 8001336:	f006 f890 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	4820      	ldr	r0, [pc, #128]	; (80013c0 <I3G450D_loop+0x1b8>)
 8001340:	f002 fdfa 	bl	8003f38 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	481d      	ldr	r0, [pc, #116]	; (80013c0 <I3G450D_loop+0x1b8>)
 800134a:	f002 fdf5 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <I3G450D_loop+0x1bc>)
 8001350:	22ac      	movs	r2, #172	; 0xac
 8001352:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	2201      	movs	r2, #1
 8001358:	491a      	ldr	r1, [pc, #104]	; (80013c4 <I3G450D_loop+0x1bc>)
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <I3G450D_loop+0x1c0>)
 800135c:	f005 ff41 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001360:	2332      	movs	r3, #50	; 0x32
 8001362:	2201      	movs	r2, #1
 8001364:	491d      	ldr	r1, [pc, #116]	; (80013dc <I3G450D_loop+0x1d4>)
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <I3G450D_loop+0x1c0>)
 8001368:	f006 f877 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <I3G450D_loop+0x1b8>)
 8001372:	f002 fde1 	bl	8003f38 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2102      	movs	r1, #2
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <I3G450D_loop+0x1b8>)
 800137c:	f002 fddc 	bl	8003f38 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <I3G450D_loop+0x1bc>)
 8001382:	22ad      	movs	r2, #173	; 0xad
 8001384:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001386:	2332      	movs	r3, #50	; 0x32
 8001388:	2201      	movs	r2, #1
 800138a:	490e      	ldr	r1, [pc, #56]	; (80013c4 <I3G450D_loop+0x1bc>)
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <I3G450D_loop+0x1c0>)
 800138e:	f005 ff28 	bl	80071e2 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001392:	2332      	movs	r3, #50	; 0x32
 8001394:	2201      	movs	r2, #1
 8001396:	4912      	ldr	r1, [pc, #72]	; (80013e0 <I3G450D_loop+0x1d8>)
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <I3G450D_loop+0x1c0>)
 800139a:	f006 f85e 	bl	800745a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2102      	movs	r1, #2
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <I3G450D_loop+0x1b8>)
 80013a4:	f002 fdc8 	bl	8003f38 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <I3G450D_loop+0x1b0>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <I3G450D_loop+0x1b4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
				break;
 80013b4:	e2ca      	b.n	800194c <I3G450D_loop+0x744>
 80013b6:	bf00      	nop
 80013b8:	200001d4 	.word	0x200001d4
 80013bc:	20000000 	.word	0x20000000
 80013c0:	40020800 	.word	0x40020800
 80013c4:	2000310c 	.word	0x2000310c
 80013c8:	20003224 	.word	0x20003224
 80013cc:	20003111 	.word	0x20003111
 80013d0:	20003112 	.word	0x20003112
 80013d4:	20003113 	.word	0x20003113
 80013d8:	20003114 	.word	0x20003114
 80013dc:	20003115 	.word	0x20003115
 80013e0:	20003116 	.word	0x20003116
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <I3G450D_loop+0x460>)
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <I3G450D_loop+0x460>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80013fa:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <I3G450D_loop+0x460>)
 80013fc:	791b      	ldrb	r3, [r3, #4]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <I3G450D_loop+0x460>)
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001410:	4b95      	ldr	r3, [pc, #596]	; (8001668 <I3G450D_loop+0x460>)
 8001412:	799b      	ldrb	r3, [r3, #6]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b93      	ldr	r3, [pc, #588]	; (8001668 <I3G450D_loop+0x460>)
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001424:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001428:	b21a      	sxth	r2, r3
 800142a:	4b90      	ldr	r3, [pc, #576]	; (800166c <I3G450D_loop+0x464>)
 800142c:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 800142e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b8e      	ldr	r3, [pc, #568]	; (8001670 <I3G450D_loop+0x468>)
 8001436:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8001438:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b8d      	ldr	r3, [pc, #564]	; (8001674 <I3G450D_loop+0x46c>)
 800143e:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001440:	4b8d      	ldr	r3, [pc, #564]	; (8001678 <I3G450D_loop+0x470>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b02      	cmp	r3, #2
 8001446:	f040 80d5 	bne.w	80015f4 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 800144a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800144e:	b21b      	sxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4b8a      	ldr	r3, [pc, #552]	; (800167c <I3G450D_loop+0x474>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001680 <I3G450D_loop+0x478>
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	4b86      	ldr	r3, [pc, #536]	; (8001684 <I3G450D_loop+0x47c>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 800146e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001472:	b21b      	sxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4b84      	ldr	r3, [pc, #528]	; (8001688 <I3G450D_loop+0x480>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001484:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001680 <I3G450D_loop+0x478>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	4b7f      	ldr	r3, [pc, #508]	; (800168c <I3G450D_loop+0x484>)
 800148e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001492:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001494:	b21b      	sxth	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <I3G450D_loop+0x488>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001680 <I3G450D_loop+0x478>
 80014aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ae:	4b79      	ldr	r3, [pc, #484]	; (8001694 <I3G450D_loop+0x48c>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80014b4:	4b78      	ldr	r3, [pc, #480]	; (8001698 <I3G450D_loop+0x490>)
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <I3G450D_loop+0x47c>)
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	4b77      	ldr	r3, [pc, #476]	; (800169c <I3G450D_loop+0x494>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	dc0c      	bgt.n	80014e8 <I3G450D_loop+0x2e0>
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <I3G450D_loop+0x494>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb1 7a67 	vneg.f32	s14, s15
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <I3G450D_loop+0x47c>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd1b      	ble.n	8001520 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80014e8:	4b66      	ldr	r3, [pc, #408]	; (8001684 <I3G450D_loop+0x47c>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <I3G450D_loop+0x498>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <I3G450D_loop+0x49c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <I3G450D_loop+0x49c>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <I3G450D_loop+0x47c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a60      	ldr	r2, [pc, #384]	; (80016a0 <I3G450D_loop+0x498>)
 800151e:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001520:	4b5a      	ldr	r3, [pc, #360]	; (800168c <I3G450D_loop+0x484>)
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <I3G450D_loop+0x4a0>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	dc0c      	bgt.n	8001550 <I3G450D_loop+0x348>
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <I3G450D_loop+0x4a0>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eeb1 7a67 	vneg.f32	s14, s15
 8001540:	4b52      	ldr	r3, [pc, #328]	; (800168c <I3G450D_loop+0x484>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	dd1b      	ble.n	8001588 <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <I3G450D_loop+0x484>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <I3G450D_loop+0x4a4>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001560:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001568:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <I3G450D_loop+0x4a8>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <I3G450D_loop+0x4a8>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001580:	4b42      	ldr	r3, [pc, #264]	; (800168c <I3G450D_loop+0x484>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <I3G450D_loop+0x4a4>)
 8001586:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <I3G450D_loop+0x48c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <I3G450D_loop+0x4ac>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	dc0d      	bgt.n	80015ba <I3G450D_loop+0x3b2>
 800159e:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <I3G450D_loop+0x4ac>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb1 7a67 	vneg.f32	s14, s15
 80015a8:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <I3G450D_loop+0x48c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	f340 81c2 	ble.w	800193e <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <I3G450D_loop+0x48c>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <I3G450D_loop+0x4b0>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <I3G450D_loop+0x4b4>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <I3G450D_loop+0x4b4>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <I3G450D_loop+0x48c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <I3G450D_loop+0x4b0>)
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e1a4      	b.n	800193e <I3G450D_loop+0x736>
				switch(currentcalistate)
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <I3G450D_loop+0x470>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f000 819b 	beq.w	8001934 <I3G450D_loop+0x72c>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	f300 819a 	bgt.w	8001938 <I3G450D_loop+0x730>
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <I3G450D_loop+0x406>
 8001608:	2b01      	cmp	r3, #1
 800160a:	d029      	beq.n	8001660 <I3G450D_loop+0x458>
						break;
 800160c:	e194      	b.n	8001938 <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001616:	b211      	sxth	r1, r2
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <I3G450D_loop+0x4bc>)
 800161a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001626:	b211      	sxth	r1, r2
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <I3G450D_loop+0x4c0>)
 800162a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001634:	b211      	sxth	r1, r2
 8001636:	4a25      	ldr	r2, [pc, #148]	; (80016cc <I3G450D_loop+0x4c4>)
 8001638:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <I3G450D_loop+0x4b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001644:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800164e:	f0c0 8175 	bcc.w	800193c <I3G450D_loop+0x734>
							caliCounter=0;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <I3G450D_loop+0x4b8>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <I3G450D_loop+0x470>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
						break;
 800165e:	e16d      	b.n	800193c <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001664:	e0a5      	b.n	80017b2 <I3G450D_loop+0x5aa>
 8001666:	bf00      	nop
 8001668:	20003110 	.word	0x20003110
 800166c:	20000220 	.word	0x20000220
 8001670:	20000222 	.word	0x20000222
 8001674:	20000224 	.word	0x20000224
 8001678:	200001d3 	.word	0x200001d3
 800167c:	200001e4 	.word	0x200001e4
 8001680:	3d8f5c29 	.word	0x3d8f5c29
 8001684:	200001d8 	.word	0x200001d8
 8001688:	200001e8 	.word	0x200001e8
 800168c:	200001dc 	.word	0x200001dc
 8001690:	200001ec 	.word	0x200001ec
 8001694:	200001e0 	.word	0x200001e0
 8001698:	3b449ba6 	.word	0x3b449ba6
 800169c:	200001f0 	.word	0x200001f0
 80016a0:	20000208 	.word	0x20000208
 80016a4:	200001fc 	.word	0x200001fc
 80016a8:	200001f4 	.word	0x200001f4
 80016ac:	2000020c 	.word	0x2000020c
 80016b0:	20000200 	.word	0x20000200
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	20000210 	.word	0x20000210
 80016bc:	20000204 	.word	0x20000204
 80016c0:	20000228 	.word	0x20000228
 80016c4:	2000022c 	.word	0x2000022c
 80016c8:	200011cc 	.word	0x200011cc
 80016cc:	2000216c 	.word	0x2000216c
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80016d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	3360      	adds	r3, #96	; 0x60
 80016d6:	443b      	add	r3, r7
 80016d8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80016dc:	461a      	mov	r2, r3
 80016de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	499d      	ldr	r1, [pc, #628]	; (8001958 <I3G450D_loop+0x750>)
 80016e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016e6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80016ea:	4413      	add	r3, r2
 80016ec:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80016ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	3360      	adds	r3, #96	; 0x60
 80016f4:	443b      	add	r3, r7
 80016f6:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80016fa:	461a      	mov	r2, r3
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	4996      	ldr	r1, [pc, #600]	; (800195c <I3G450D_loop+0x754>)
 8001702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001704:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001708:	4413      	add	r3, r2
 800170a:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 800170c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	3360      	adds	r3, #96	; 0x60
 8001712:	443b      	add	r3, r7
 8001714:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001718:	461a      	mov	r2, r3
 800171a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	4990      	ldr	r1, [pc, #576]	; (8001960 <I3G450D_loop+0x758>)
 8001720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001722:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001726:	4413      	add	r3, r2
 8001728:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800172a:	4a8b      	ldr	r2, [pc, #556]	; (8001958 <I3G450D_loop+0x750>)
 800172c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3360      	adds	r3, #96	; 0x60
 8001738:	443b      	add	r3, r7
 800173a:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 800173e:	4a87      	ldr	r2, [pc, #540]	; (800195c <I3G450D_loop+0x754>)
 8001740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001742:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	3360      	adds	r3, #96	; 0x60
 800174c:	443b      	add	r3, r7
 800174e:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001752:	4a83      	ldr	r2, [pc, #524]	; (8001960 <I3G450D_loop+0x758>)
 8001754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001756:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800175a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	3360      	adds	r3, #96	; 0x60
 8001760:	443b      	add	r3, r7
 8001762:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8001766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001768:	4a7e      	ldr	r2, [pc, #504]	; (8001964 <I3G450D_loop+0x75c>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	1092      	asrs	r2, r2, #2
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4a7c      	ldr	r2, [pc, #496]	; (8001968 <I3G450D_loop+0x760>)
 8001776:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8001778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177a:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <I3G450D_loop+0x75c>)
 800177c:	fb82 1203 	smull	r1, r2, r2, r3
 8001780:	1092      	asrs	r2, r2, #2
 8001782:	17db      	asrs	r3, r3, #31
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a79      	ldr	r2, [pc, #484]	; (800196c <I3G450D_loop+0x764>)
 8001788:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800178a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800178c:	4a75      	ldr	r2, [pc, #468]	; (8001964 <I3G450D_loop+0x75c>)
 800178e:	fb82 1203 	smull	r1, r2, r2, r3
 8001792:	1092      	asrs	r2, r2, #2
 8001794:	17db      	asrs	r3, r3, #31
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a75      	ldr	r2, [pc, #468]	; (8001970 <I3G450D_loop+0x768>)
 800179a:	6013      	str	r3, [r2, #0]
								windowPosition++;
 800179c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179e:	3301      	adds	r3, #1
 80017a0:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80017a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	d901      	bls.n	80017ac <I3G450D_loop+0x5a4>
									windowPosition=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ae:	3301      	adds	r3, #1
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017b8:	d38a      	bcc.n	80016d0 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80017be:	e089      	b.n	80018d4 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80017c0:	4a65      	ldr	r2, [pc, #404]	; (8001958 <I3G450D_loop+0x750>)
 80017c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <I3G450D_loop+0x760>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad2      	subs	r2, r2, r3
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <I3G450D_loop+0x76c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dd0a      	ble.n	80017ee <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80017d8:	4a5f      	ldr	r2, [pc, #380]	; (8001958 <I3G450D_loop+0x750>)
 80017da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b61      	ldr	r3, [pc, #388]	; (8001968 <I3G450D_loop+0x760>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a62      	ldr	r2, [pc, #392]	; (8001974 <I3G450D_loop+0x76c>)
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e015      	b.n	800181a <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80017ee:	4a5a      	ldr	r2, [pc, #360]	; (8001958 <I3G450D_loop+0x750>)
 80017f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <I3G450D_loop+0x760>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1ad2      	subs	r2, r2, r3
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <I3G450D_loop+0x76c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	425b      	negs	r3, r3
 8001804:	429a      	cmp	r2, r3
 8001806:	da08      	bge.n	800181a <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <I3G450D_loop+0x760>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4952      	ldr	r1, [pc, #328]	; (8001958 <I3G450D_loop+0x750>)
 800180e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001810:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4a57      	ldr	r2, [pc, #348]	; (8001974 <I3G450D_loop+0x76c>)
 8001818:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800181a:	4a50      	ldr	r2, [pc, #320]	; (800195c <I3G450D_loop+0x754>)
 800181c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001822:	461a      	mov	r2, r3
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <I3G450D_loop+0x764>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1ad2      	subs	r2, r2, r3
 800182a:	4b53      	ldr	r3, [pc, #332]	; (8001978 <I3G450D_loop+0x770>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	dd0a      	ble.n	8001848 <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001832:	4a4a      	ldr	r2, [pc, #296]	; (800195c <I3G450D_loop+0x754>)
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800183a:	461a      	mov	r2, r3
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <I3G450D_loop+0x764>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <I3G450D_loop+0x770>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e015      	b.n	8001874 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001848:	4a44      	ldr	r2, [pc, #272]	; (800195c <I3G450D_loop+0x754>)
 800184a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800184c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001850:	461a      	mov	r2, r3
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <I3G450D_loop+0x764>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <I3G450D_loop+0x770>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	425b      	negs	r3, r3
 800185e:	429a      	cmp	r2, r3
 8001860:	da08      	bge.n	8001874 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001862:	4b42      	ldr	r3, [pc, #264]	; (800196c <I3G450D_loop+0x764>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	493d      	ldr	r1, [pc, #244]	; (800195c <I3G450D_loop+0x754>)
 8001868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800186a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	4a41      	ldr	r2, [pc, #260]	; (8001978 <I3G450D_loop+0x770>)
 8001872:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001874:	4a3a      	ldr	r2, [pc, #232]	; (8001960 <I3G450D_loop+0x758>)
 8001876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001878:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800187c:	461a      	mov	r2, r3
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <I3G450D_loop+0x768>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <I3G450D_loop+0x774>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	dd0a      	ble.n	80018a2 <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 800188c:	4a34      	ldr	r2, [pc, #208]	; (8001960 <I3G450D_loop+0x758>)
 800188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001890:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001894:	461a      	mov	r2, r3
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <I3G450D_loop+0x768>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a37      	ldr	r2, [pc, #220]	; (800197c <I3G450D_loop+0x774>)
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e015      	b.n	80018ce <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80018a2:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <I3G450D_loop+0x758>)
 80018a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <I3G450D_loop+0x768>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1ad2      	subs	r2, r2, r3
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <I3G450D_loop+0x774>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	425b      	negs	r3, r3
 80018b8:	429a      	cmp	r2, r3
 80018ba:	da08      	bge.n	80018ce <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <I3G450D_loop+0x768>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4927      	ldr	r1, [pc, #156]	; (8001960 <I3G450D_loop+0x758>)
 80018c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018c4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	4a2c      	ldr	r2, [pc, #176]	; (800197c <I3G450D_loop+0x774>)
 80018cc:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80018ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d0:	3301      	adds	r3, #1
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018da:	f4ff af71 	bcc.w	80017c0 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <I3G450D_loop+0x76c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001980 <I3G450D_loop+0x778>
 80018ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <I3G450D_loop+0x77c>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <I3G450D_loop+0x770>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001904:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001980 <I3G450D_loop+0x778>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <I3G450D_loop+0x780>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <I3G450D_loop+0x774>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001980 <I3G450D_loop+0x778>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <I3G450D_loop+0x784>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <I3G450D_loop+0x788>)
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
							break;
 8001932:	e004      	b.n	800193e <I3G450D_loop+0x736>
						break;
 8001934:	bf00      	nop
 8001936:	e002      	b.n	800193e <I3G450D_loop+0x736>
						break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <I3G450D_loop+0x736>
						break;
 800193c:	bf00      	nop
			currentState=L3GD20_fisrt;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <I3G450D_loop+0x78c>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <I3G450D_loop+0x790>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
			break;
 800194a:	e000      	b.n	800194e <I3G450D_loop+0x746>
				break;
 800194c:	bf00      	nop

		}
}
 800194e:	bf00      	nop
 8001950:	3760      	adds	r7, #96	; 0x60
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000022c 	.word	0x2000022c
 800195c:	200011cc 	.word	0x200011cc
 8001960:	2000216c 	.word	0x2000216c
 8001964:	66666667 	.word	0x66666667
 8001968:	200001e4 	.word	0x200001e4
 800196c:	200001e8 	.word	0x200001e8
 8001970:	200001ec 	.word	0x200001ec
 8001974:	20000214 	.word	0x20000214
 8001978:	20000218 	.word	0x20000218
 800197c:	2000021c 	.word	0x2000021c
 8001980:	3d8f5c29 	.word	0x3d8f5c29
 8001984:	200001f0 	.word	0x200001f0
 8001988:	200001f4 	.word	0x200001f4
 800198c:	200001f8 	.word	0x200001f8
 8001990:	200001d3 	.word	0x200001d3
 8001994:	200001d4 	.word	0x200001d4
 8001998:	20000000 	.word	0x20000000

0800199c <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <Lis3dhInit+0xec>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 80019aa:	238f      	movs	r3, #143	; 0x8f
 80019ac:	753b      	strb	r3, [r7, #20]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <Lis3dhInit+0xec>)
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	2130      	movs	r1, #48	; 0x30
 80019b4:	f107 0214 	add.w	r2, r7, #20
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	f004 f822 	bl	8005a08 <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d158      	bne.n	8001a80 <Lis3dhInit+0xe4>
	        //Handle Error

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <Lis3dhInit+0xec>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	2130      	movs	r1, #48	; 0x30
 80019d4:	f107 0208 	add.w	r2, r7, #8
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	f004 f910 	bl	8005c04 <HAL_I2C_Master_Receive>
 80019e4:	4603      	mov	r3, r0
 80019e6:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d148      	bne.n	8001a80 <Lis3dhInit+0xe4>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
	        	 sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80019ee:	23a0      	movs	r3, #160	; 0xa0
 80019f0:	753b      	strb	r3, [r7, #20]

	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <Lis3dhInit+0xec>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	2130      	movs	r1, #48	; 0x30
 80019f8:	f107 0214 	add.w	r2, r7, #20
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	f004 f800 	bl	8005a08 <HAL_I2C_Master_Transmit>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
	        	  ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <Lis3dhInit+0xec>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	2130      	movs	r1, #48	; 0x30
 8001a12:	f107 0208 	add.w	r2, r7, #8
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f004 f8f1 	bl	8005c04 <HAL_I2C_Master_Receive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	75fb      	strb	r3, [r7, #23]

	        	  sendBuff[0] = LIS3DH_REG_CTRL1;
 8001a26:	2320      	movs	r3, #32
 8001a28:	753b      	strb	r3, [r7, #20]
	        	  sendBuff[1] = 0x57;
 8001a2a:	2357      	movs	r3, #87	; 0x57
 8001a2c:	757b      	strb	r3, [r7, #21]
	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <Lis3dhInit+0xec>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	2130      	movs	r1, #48	; 0x30
 8001a34:	f107 0214 	add.w	r2, r7, #20
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f003 ffe2 	bl	8005a08 <HAL_I2C_Master_Transmit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
					//Read to make sure the write worked.
					sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	753b      	strb	r3, [r7, #20]

					ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <Lis3dhInit+0xec>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	2130      	movs	r1, #48	; 0x30
 8001a52:	f107 0214 	add.w	r2, r7, #20
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f003 ffd3 	bl	8005a08 <HAL_I2C_Master_Transmit>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]
					ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <Lis3dhInit+0xec>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2130      	movs	r1, #48	; 0x30
 8001a6c:	f107 0208 	add.w	r2, r7, #8
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2302      	movs	r3, #2
 8001a78:	f004 f8c4 	bl	8005c04 <HAL_I2C_Master_Receive>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	75fb      	strb	r3, [r7, #23]





}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20003118 	.word	0x20003118

08001a8c <Lis3dhGetAcc>:
int Lis3dhGetAcc(){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af02      	add	r7, sp, #8
	uint8_t  x,y,z;

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 8001a92:	23a7      	movs	r3, #167	; 0xa7
 8001a94:	743b      	strb	r3, [r7, #16]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001a96:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <Lis3dhGetAcc+0xb8>)
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	2130      	movs	r1, #48	; 0x30
 8001a9c:	f107 0210 	add.w	r2, r7, #16
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f003 ffae 	bl	8005a08 <HAL_I2C_Master_Transmit>
 8001aac:	4603      	mov	r3, r0
 8001aae:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <Lis3dhGetAcc+0xb8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	2130      	movs	r1, #48	; 0x30
 8001ab6:	1d3a      	adds	r2, r7, #4
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f004 f8a0 	bl	8005c04 <HAL_I2C_Master_Receive>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 8001ac8:	23a8      	movs	r3, #168	; 0xa8
 8001aca:	743b      	strb	r3, [r7, #16]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <Lis3dhGetAcc+0xb8>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	2130      	movs	r1, #48	; 0x30
 8001ad2:	f107 0210 	add.w	r2, r7, #16
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	f003 ff93 	bl	8005a08 <HAL_I2C_Master_Transmit>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <Lis3dhGetAcc+0xb8>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	2130      	movs	r1, #48	; 0x30
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2306      	movs	r3, #6
 8001af6:	f004 f885 	bl	8005c04 <HAL_I2C_Master_Receive>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]

	  x = reciveBuff[0];
 8001afe:	793b      	ldrb	r3, [r7, #4]
 8001b00:	75bb      	strb	r3, [r7, #22]
	  x |= ((uint16_t)reciveBuff[1]) << 8;
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	75bb      	strb	r3, [r7, #22]
	  y = reciveBuff[2];
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	757b      	strb	r3, [r7, #21]
	  y |= ((uint16_t)reciveBuff[3]) << 8;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	757b      	strb	r3, [r7, #21]
	  z = reciveBuff[4];
 8001b26:	7a3b      	ldrb	r3, [r7, #8]
 8001b28:	753b      	strb	r3, [r7, #20]
	  z |= ((uint16_t)reciveBuff[5]) << 8;
 8001b2a:	7a7b      	ldrb	r3, [r7, #9]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	753b      	strb	r3, [r7, #20]


	//HAL_SPI_Transmit (SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20003118 	.word	0x20003118

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int p;
	uint32_t stack_pointer = &p;
 8001b4e:	463b      	mov	r3, r7
 8001b50:	613b      	str	r3, [r7, #16]

	// the heap pointer
	int *ptr;
	ptr = malloc(15 * sizeof(*ptr));
 8001b52:	203c      	movs	r0, #60	; 0x3c
 8001b54:	f00c fe18 	bl	800e788 <malloc>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5c:	f001 fb00 	bl	8003160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b60:	f000 f85c 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b64:	f000 fb00 	bl	8002168 <MX_GPIO_Init>
  MX_CRC_Init();
 8001b68:	f000 f8c2 	bl	8001cf0 <MX_CRC_Init>
  MX_I2C3_Init();
 8001b6c:	f000 f914 	bl	8001d98 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001b70:	f000 f988 	bl	8001e84 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001b74:	f000 f9bc 	bl	8001ef0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001b78:	f000 fa82 	bl	8002080 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001b7c:	f000 fad4 	bl	8002128 <MX_DMA_Init>
  MX_TIM2_Init();
 8001b80:	f000 fa0a 	bl	8001f98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b84:	f000 faa6 	bl	80020d4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001b88:	f000 f946 	bl	8001e18 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001b8c:	f009 f91c 	bl	800adc8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001b90:	f00c fa8e 	bl	800e0b0 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8001b94:	f000 f8c0 	bl	8001d18 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 8001b98:	f7ff fa7c 	bl	8001094 <I3G450D_Init>
  RetargetInit(&huart1);
 8001b9c:	481d      	ldr	r0, [pc, #116]	; (8001c14 <main+0xcc>)
 8001b9e:	f000 fdb5 	bl	800270c <RetargetInit>
  ConsoleInit(&huart1);
 8001ba2:	481c      	ldr	r0, [pc, #112]	; (8001c14 <main+0xcc>)
 8001ba4:	f7fe fda0 	bl	80006e8 <ConsoleInit>
  Lis3dhInit(&hi2c2);
 8001ba8:	481b      	ldr	r0, [pc, #108]	; (8001c18 <main+0xd0>)
 8001baa:	f7ff fef7 	bl	800199c <Lis3dhInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]
  const uint8_t angle_difference = 11;
 8001bb2:	230b      	movs	r3, #11
 8001bb4:	72fb      	strb	r3, [r7, #11]
uint8_t x,y,z;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001bb6:	f00c faa1 	bl	800e0fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75bb      	strb	r3, [r7, #22]
 8001bbe:	e01b      	b.n	8001bf8 <main+0xb0>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001bc0:	7dba      	ldrb	r2, [r7, #22]
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	fb12 f303 	smulbb	r3, r2, r3
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	227f      	movs	r2, #127	; 0x7f
 8001bd2:	21ff      	movs	r1, #255	; 0xff
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fccd 	bl	8002574 <hsl_to_rgb>
 8001bda:	6078      	str	r0, [r7, #4]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	b2d9      	uxtb	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	7db8      	ldrb	r0, [r7, #22]
 8001bee:	f000 fe67 	bl	80028c0 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001bf2:	7dbb      	ldrb	r3, [r7, #22]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	75bb      	strb	r3, [r7, #22]
 8001bf8:	7dbb      	ldrb	r3, [r7, #22]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d9e0      	bls.n	8001bc0 <main+0x78>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	3301      	adds	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
	  		//led_render();
	  		// Some delay*/


	  		ConsoleProcess();
 8001c04:	f7fe fda0 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 8001c08:	f7ff fafe 	bl	8001208 <I3G450D_loop>
	  		Lis3dhGetAcc();
 8001c0c:	f7ff ff3e 	bl	8001a8c <Lis3dhGetAcc>
    MX_USB_HOST_Process();
 8001c10:	e7d1      	b.n	8001bb6 <main+0x6e>
 8001c12:	bf00      	nop
 8001c14:	2000336c 	.word	0x2000336c
 8001c18:	20003124 	.word	0x20003124

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00c fdca 	bl	800e7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <SystemClock_Config+0xd0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <SystemClock_Config+0xd0>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <SystemClock_Config+0xd0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c94:	2348      	movs	r3, #72	; 0x48
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 fd7b 	bl	80067a0 <HAL_RCC_OscConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cb0:	f000 fd26 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 ffdd 	bl	8006c90 <HAL_RCC_ClockConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cdc:	f000 fd10 	bl	8002700 <Error_Handler>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40007000 	.word	0x40007000

08001cf0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_CRC_Init+0x20>)
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <MX_CRC_Init+0x24>)
 8001cf8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_CRC_Init+0x20>)
 8001cfc:	f001 fbd7 	bl	80034ae <HAL_CRC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001d06:	f000 fcfb 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000311c 	.word	0x2000311c
 8001d14:	40023000 	.word	0x40023000

08001d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <MX_I2C2_Init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <MX_I2C2_Init+0x7c>)
 8001d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d56:	f003 fd13 	bl	8005780 <HAL_I2C_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d60:	f000 fcce 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4809      	ldr	r0, [pc, #36]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d68:	f004 fc9f 	bl	80066aa <HAL_I2CEx_ConfigAnalogFilter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001d72:	f000 fcc5 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d76:	2100      	movs	r1, #0
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_I2C2_Init+0x74>)
 8001d7a:	f004 fcd2 	bl	8006722 <HAL_I2CEx_ConfigDigitalFilter>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001d84:	f000 fcbc 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20003124 	.word	0x20003124
 8001d90:	40005800 	.word	0x40005800
 8001d94:	000186a0 	.word	0x000186a0

08001d98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <MX_I2C3_Init+0x78>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <MX_I2C3_Init+0x7c>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dd6:	f003 fcd3 	bl	8005780 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 fc8e 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001de8:	f004 fc5f 	bl	80066aa <HAL_I2CEx_ConfigAnalogFilter>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001df2:	f000 fc85 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C3_Init+0x74>)
 8001dfa:	f004 fc92 	bl	8006722 <HAL_I2CEx_ConfigDigitalFilter>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 fc7c 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20003178 	.word	0x20003178
 8001e10:	40005c00 	.word	0x40005c00
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_SPI3_Init+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e64:	220a      	movs	r2, #10
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_SPI3_Init+0x64>)
 8001e6a:	f005 f931 	bl	80070d0 <HAL_SPI_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e74:	f000 fc44 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200031cc 	.word	0x200031cc
 8001e80:	40003c00 	.word	0x40003c00

08001e84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI5_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb8:	2218      	movs	r2, #24
 8001eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed6:	f005 f8fb 	bl	80070d0 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fc0e 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20003224 	.word	0x20003224
 8001eec:	40015000 	.word	0x40015000

08001ef0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <MX_TIM1_Init+0xa4>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f38:	4815      	ldr	r0, [pc, #84]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f3a:	f005 fe71 	bl	8007c20 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 fbdc 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f56:	f006 f9a7 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 fbce 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f72:	f006 fd99 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f000 fbc0 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM1_Init+0xa0>)
 8001f82:	f000 fef3 	bl	8002d6c <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000327c 	.word	0x2000327c
 8001f94:	40010000 	.word	0x40010000

08001f98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fde:	223b      	movs	r2, #59	; 0x3b
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <MX_TIM2_Init+0xe4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	4823      	ldr	r0, [pc, #140]	; (800207c <MX_TIM2_Init+0xe4>)
 8001ff0:	f005 fe16 	bl	8007c20 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001ffa:	f000 fb81 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002008:	4619      	mov	r1, r3
 800200a:	481c      	ldr	r0, [pc, #112]	; (800207c <MX_TIM2_Init+0xe4>)
 800200c:	f006 f94c 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002016:	f000 fb73 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <MX_TIM2_Init+0xe4>)
 800201c:	f005 fe4f 	bl	8007cbe <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002026:	f000 fb6b 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MX_TIM2_Init+0xe4>)
 800203a:	f006 fd35 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002044:	f000 fb5c 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	; 0x60
 800204a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM2_Init+0xe4>)
 8002060:	f006 f860 	bl	8008124 <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800206a:	f000 fb49 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM2_Init+0xe4>)
 8002070:	f000 feec 	bl	8002e4c <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200032c4 	.word	0x200032c4

08002080 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <MX_USART1_UART_Init+0x50>)
 8002088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_USART1_UART_Init+0x4c>)
 80020b8:	f006 fd86 	bl	8008bc8 <HAL_UART_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020c2:	f000 fb1d 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000336c 	.word	0x2000336c
 80020d0:	40011000 	.word	0x40011000

080020d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <MX_USART2_UART_Init+0x50>)
 80020dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80020e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_USART2_UART_Init+0x4c>)
 800210c:	f006 fd5c 	bl	8008bc8 <HAL_UART_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002116:	f000 faf3 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200033b0 	.word	0x200033b0
 8002124:	40004400 	.word	0x40004400

08002128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_DMA_Init+0x3c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <MX_DMA_Init+0x3c>)
 8002138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_DMA_Init+0x3c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2010      	movs	r0, #16
 8002150:	f001 f977 	bl	8003442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002154:	2010      	movs	r0, #16
 8002156:	f001 f990 	bl	800347a <HAL_NVIC_EnableIRQ>

}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	4bb2      	ldr	r3, [pc, #712]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4ab1      	ldr	r2, [pc, #708]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4baf      	ldr	r3, [pc, #700]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	4bab      	ldr	r3, [pc, #684]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4aaa      	ldr	r2, [pc, #680]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4ba8      	ldr	r3, [pc, #672]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4ba4      	ldr	r3, [pc, #656]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4aa3      	ldr	r2, [pc, #652]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4ba1      	ldr	r3, [pc, #644]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b9d      	ldr	r3, [pc, #628]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a9c      	ldr	r2, [pc, #624]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b9a      	ldr	r3, [pc, #616]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b96      	ldr	r3, [pc, #600]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a95      	ldr	r2, [pc, #596]	; (800244c <MX_GPIO_Init+0x2e4>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b93      	ldr	r3, [pc, #588]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b8f      	ldr	r3, [pc, #572]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a8e      	ldr	r2, [pc, #568]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <MX_GPIO_Init+0x2e4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b88      	ldr	r3, [pc, #544]	; (800244c <MX_GPIO_Init+0x2e4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a80      	ldr	r2, [pc, #512]	; (800244c <MX_GPIO_Init+0x2e4>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b7e      	ldr	r3, [pc, #504]	; (800244c <MX_GPIO_Init+0x2e4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	2116      	movs	r1, #22
 8002262:	487b      	ldr	r0, [pc, #492]	; (8002450 <MX_GPIO_Init+0x2e8>)
 8002264:	f001 fe68 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	4879      	ldr	r0, [pc, #484]	; (8002454 <MX_GPIO_Init+0x2ec>)
 800226e:	f001 fe63 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f243 0104 	movw	r1, #12292	; 0x3004
 8002278:	4877      	ldr	r0, [pc, #476]	; (8002458 <MX_GPIO_Init+0x2f0>)
 800227a:	f001 fe5d 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002284:	4875      	ldr	r0, [pc, #468]	; (800245c <MX_GPIO_Init+0x2f4>)
 8002286:	f001 fe57 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 800228a:	f64f 0338 	movw	r3, #63544	; 0xf838
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800229c:	230c      	movs	r3, #12
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	486e      	ldr	r0, [pc, #440]	; (8002460 <MX_GPIO_Init+0x2f8>)
 80022a8:	f001 fc9a 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80022ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022be:	230e      	movs	r3, #14
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	4865      	ldr	r0, [pc, #404]	; (8002460 <MX_GPIO_Init+0x2f8>)
 80022ca:	f001 fc89 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022de:	230c      	movs	r3, #12
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4859      	ldr	r0, [pc, #356]	; (8002450 <MX_GPIO_Init+0x2e8>)
 80022ea:	f001 fc79 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80022ee:	2316      	movs	r3, #22
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002302:	4619      	mov	r1, r3
 8002304:	4852      	ldr	r0, [pc, #328]	; (8002450 <MX_GPIO_Init+0x2e8>)
 8002306:	f001 fc6b 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800230a:	2307      	movs	r3, #7
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800230e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4619      	mov	r1, r3
 800231e:	484d      	ldr	r0, [pc, #308]	; (8002454 <MX_GPIO_Init+0x2ec>)
 8002320:	f001 fc5e 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002324:	f641 0358 	movw	r3, #6232	; 0x1858
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002336:	230e      	movs	r3, #14
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	4619      	mov	r1, r3
 8002340:	4844      	ldr	r0, [pc, #272]	; (8002454 <MX_GPIO_Init+0x2ec>)
 8002342:	f001 fc4d 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	483d      	ldr	r0, [pc, #244]	; (8002454 <MX_GPIO_Init+0x2ec>)
 800235e:	f001 fc3f 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002362:	2320      	movs	r3, #32
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002366:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4836      	ldr	r0, [pc, #216]	; (8002450 <MX_GPIO_Init+0x2e8>)
 8002378:	f001 fc32 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800237c:	2303      	movs	r3, #3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800238c:	2309      	movs	r3, #9
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	4833      	ldr	r0, [pc, #204]	; (8002464 <MX_GPIO_Init+0x2fc>)
 8002398:	f001 fc22 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800239c:	2304      	movs	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <MX_GPIO_Init+0x2fc>)
 80023b0:	f001 fc16 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80023b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023c6:	230c      	movs	r3, #12
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4822      	ldr	r0, [pc, #136]	; (800245c <MX_GPIO_Init+0x2f4>)
 80023d2:	f001 fc05 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80023d6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023e8:	230c      	movs	r3, #12
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f0:	4619      	mov	r1, r3
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <MX_GPIO_Init+0x300>)
 80023f4:	f001 fbf4 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80023f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800240a:	230e      	movs	r3, #14
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002412:	4619      	mov	r1, r3
 8002414:	4813      	ldr	r0, [pc, #76]	; (8002464 <MX_GPIO_Init+0x2fc>)
 8002416:	f001 fbe3 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800241a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800242c:	230c      	movs	r3, #12
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <MX_GPIO_Init+0x2f0>)
 8002438:	f001 fbd2 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800243c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	e010      	b.n	800246c <MX_GPIO_Init+0x304>
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40020800 	.word	0x40020800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021800 	.word	0x40021800
 8002460:	40021400 	.word	0x40021400
 8002464:	40020400 	.word	0x40020400
 8002468:	40021000 	.word	0x40021000
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	483b      	ldr	r0, [pc, #236]	; (8002564 <MX_GPIO_Init+0x3fc>)
 8002476:	f001 fbb3 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 800247a:	f243 0304 	movw	r3, #12292	; 0x3004
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4834      	ldr	r0, [pc, #208]	; (8002564 <MX_GPIO_Init+0x3fc>)
 8002494:	f001 fba4 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002498:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024aa:	230e      	movs	r3, #14
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	482c      	ldr	r0, [pc, #176]	; (8002568 <MX_GPIO_Init+0x400>)
 80024b6:	f001 fb93 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ca:	230e      	movs	r3, #14
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4825      	ldr	r0, [pc, #148]	; (800256c <MX_GPIO_Init+0x404>)
 80024d6:	f001 fb83 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 80024da:	2308      	movs	r3, #8
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ea:	230e      	movs	r3, #14
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	481b      	ldr	r0, [pc, #108]	; (8002564 <MX_GPIO_Init+0x3fc>)
 80024f6:	f001 fb73 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800250c:	2309      	movs	r3, #9
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	4619      	mov	r1, r3
 8002516:	4814      	ldr	r0, [pc, #80]	; (8002568 <MX_GPIO_Init+0x400>)
 8002518:	f001 fb62 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800251c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2301      	movs	r3, #1
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <MX_GPIO_Init+0x400>)
 8002536:	f001 fb53 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800253a:	2360      	movs	r3, #96	; 0x60
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800254a:	230c      	movs	r3, #12
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	4619      	mov	r1, r3
 8002554:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_GPIO_Init+0x408>)
 8002556:	f001 fb43 	bl	8003be0 <HAL_GPIO_Init>

}
 800255a:	bf00      	nop
 800255c:	3738      	adds	r7, #56	; 0x38
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021800 	.word	0x40021800
 800256c:	40020800 	.word	0x40020800
 8002570:	40020400 	.word	0x40020400

08002574 <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
 800257e:	460b      	mov	r3, r1
 8002580:	71bb      	strb	r3, [r7, #6]
 8002582:	4613      	mov	r3, r2
 8002584:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <hsl_to_rgb+0x1c>
 800258c:	2300      	movs	r3, #0
 800258e:	e0b1      	b.n	80026f4 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002590:	797b      	ldrb	r3, [r7, #5]
 8002592:	b29b      	uxth	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800259a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db09      	blt.n	80025b6 <hsl_to_rgb+0x42>
 80025a2:	89bb      	ldrh	r3, [r7, #12]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	79ba      	ldrb	r2, [r7, #6]
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	121b      	asrs	r3, r3, #8
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	74fb      	strb	r3, [r7, #19]
 80025b4:	e00a      	b.n	80025cc <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025c0:	79ba      	ldrb	r2, [r7, #6]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	121b      	asrs	r3, r3, #8
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	b29b      	uxth	r3, r3
 80025da:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80025e4:	7d3b      	ldrb	r3, [r7, #20]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <hsl_to_rgb+0x9c>
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	7cfa      	ldrb	r2, [r7, #19]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	121b      	asrs	r3, r3, #8
 800260a:	b2db      	uxtb	r3, r3
 800260c:	74bb      	strb	r3, [r7, #18]
 800260e:	e00a      	b.n	8002626 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002618:	7cfa      	ldrb	r2, [r7, #19]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	121b      	asrs	r3, r3, #8
 8002622:	b2db      	uxtb	r3, r3
 8002624:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	797a      	ldrb	r2, [r7, #5]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b29b      	uxth	r3, r3
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b04      	cmp	r3, #4
 8002640:	d839      	bhi.n	80026b6 <hsl_to_rgb+0x142>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <hsl_to_rgb+0xd4>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800265d 	.word	0x0800265d
 800264c:	0800266f 	.word	0x0800266f
 8002650:	08002681 	.word	0x08002681
 8002654:	08002693 	.word	0x08002693
 8002658:	080026a5 	.word	0x080026a5
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	75fb      	strb	r3, [r7, #23]
 8002662:	7cbb      	ldrb	r3, [r7, #18]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75bb      	strb	r3, [r7, #22]
 8002668:	2300      	movs	r3, #0
 800266a:	757b      	strb	r3, [r7, #21]
 800266c:	e02c      	b.n	80026c8 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 800266e:	7cbb      	ldrb	r3, [r7, #18]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	75fb      	strb	r3, [r7, #23]
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	75bb      	strb	r3, [r7, #22]
 800267a:	2300      	movs	r3, #0
 800267c:	757b      	strb	r3, [r7, #21]
 800267e:	e023      	b.n	80026c8 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	75bb      	strb	r3, [r7, #22]
 800268a:	7cbb      	ldrb	r3, [r7, #18]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	757b      	strb	r3, [r7, #21]
 8002690:	e01a      	b.n	80026c8 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
 8002696:	7cbb      	ldrb	r3, [r7, #18]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	75bb      	strb	r3, [r7, #22]
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	757b      	strb	r3, [r7, #21]
 80026a2:	e011      	b.n	80026c8 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80026a4:	7cbb      	ldrb	r3, [r7, #18]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	75fb      	strb	r3, [r7, #23]
 80026aa:	2300      	movs	r3, #0
 80026ac:	75bb      	strb	r3, [r7, #22]
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	757b      	strb	r3, [r7, #21]
 80026b4:	e008      	b.n	80026c8 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	75fb      	strb	r3, [r7, #23]
 80026bc:	2300      	movs	r3, #0
 80026be:	75bb      	strb	r3, [r7, #22]
 80026c0:	7cbb      	ldrb	r3, [r7, #18]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	757b      	strb	r3, [r7, #21]
 80026c6:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	7c7b      	ldrb	r3, [r7, #17]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	440b      	add	r3, r1
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	431a      	orrs	r2, r3
 80026e6:	7d7b      	ldrb	r3, [r7, #21]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	7c7b      	ldrb	r3, [r7, #17]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	440b      	add	r3, r1
 80026f2:	4313      	orrs	r3, r2
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <RetargetInit+0x28>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <RetargetInit+0x2c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6898      	ldr	r0, [r3, #8]
 8002720:	2300      	movs	r3, #0
 8002722:	2202      	movs	r2, #2
 8002724:	2100      	movs	r1, #0
 8002726:	f00c f95d 	bl	800e9e4 <setvbuf>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200033f4 	.word	0x200033f4
 8002738:	20000030 	.word	0x20000030

0800273c <_isatty>:

int _isatty(int fd) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db04      	blt.n	8002754 <_isatty+0x18>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	dc01      	bgt.n	8002754 <_isatty+0x18>
    return 1;
 8002750:	2301      	movs	r3, #1
 8002752:	e005      	b.n	8002760 <_isatty+0x24>

  errno = EBADF;
 8002754:	f00b ffee 	bl	800e734 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	2209      	movs	r2, #9
 800275c:	601a      	str	r2, [r3, #0]
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_write>:

int _write(int fd, char* ptr, int len) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <_write+0x18>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d111      	bne.n	80027a4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <_write+0x54>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	b29a      	uxth	r2, r3
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	f006 fa68 	bl	8008c62 <HAL_UART_Transmit>
 8002792:	4603      	mov	r3, r0
 8002794:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <_write+0x38>
      return len;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	e008      	b.n	80027b2 <_write+0x4a>
    else
      return EIO;
 80027a0:	2305      	movs	r3, #5
 80027a2:	e006      	b.n	80027b2 <_write+0x4a>
  }
  errno = EBADF;
 80027a4:	f00b ffc6 	bl	800e734 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2209      	movs	r2, #9
 80027ac:	601a      	str	r2, [r3, #0]
  return -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200033f4 	.word	0x200033f4

080027c0 <_close>:

int _close(int fd) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db04      	blt.n	80027d8 <_close+0x18>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	dc01      	bgt.n	80027d8 <_close+0x18>
    return 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e006      	b.n	80027e6 <_close+0x26>

  errno = EBADF;
 80027d8:	f00b ffac 	bl	800e734 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	2209      	movs	r2, #9
 80027e0:	601a      	str	r2, [r3, #0]
  return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80027fa:	f00b ff9b 	bl	800e734 <__errno>
 80027fe:	4603      	mov	r3, r0
 8002800:	2209      	movs	r2, #9
 8002802:	601a      	str	r2, [r3, #0]
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_read>:

int _read(int fd, char* ptr, int len) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d110      	bne.n	8002844 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <_read+0x4c>)
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282a:	2201      	movs	r2, #1
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	f006 faaa 	bl	8008d86 <HAL_UART_Receive>
 8002832:	4603      	mov	r3, r0
 8002834:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <_read+0x30>
      return 1;
 800283c:	2301      	movs	r3, #1
 800283e:	e008      	b.n	8002852 <_read+0x42>
    else
      return EIO;
 8002840:	2305      	movs	r3, #5
 8002842:	e006      	b.n	8002852 <_read+0x42>
  }
  errno = EBADF;
 8002844:	f00b ff76 	bl	800e734 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	2209      	movs	r2, #9
 800284c:	601a      	str	r2, [r3, #0]
  return -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200033f4 	.word	0x200033f4

08002860 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db08      	blt.n	8002882 <_fstat+0x22>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	dc05      	bgt.n	8002882 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800287c:	605a      	str	r2, [r3, #4]
    return 0;
 800287e:	2300      	movs	r3, #0
 8002880:	e005      	b.n	800288e <_fstat+0x2e>
  }

  errno = EBADF;
 8002882:	f00b ff57 	bl	800e734 <__errno>
 8002886:	4603      	mov	r3, r0
 8002888:	2209      	movs	r2, #9
 800288a:	601a      	str	r2, [r3, #0]
  return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	460a      	mov	r2, r1
 80028a0:	71fb      	strb	r3, [r7, #7]
 80028a2:	4613      	mov	r3, r2
 80028a4:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	79ba      	ldrb	r2, [r7, #6]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	121b      	asrs	r3, r3, #8
 80028b0:	b2db      	uxtb	r3, r3
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4604      	mov	r4, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	4603      	mov	r3, r0
 80028d4:	71bb      	strb	r3, [r7, #6]
 80028d6:	460b      	mov	r3, r1
 80028d8:	717b      	strb	r3, [r7, #5]
 80028da:	4613      	mov	r3, r2
 80028dc:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80028de:	79fa      	ldrb	r2, [r7, #7]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	189c      	adds	r4, r3, r2
 80028e6:	797b      	ldrb	r3, [r7, #5]
 80028e8:	21b0      	movs	r1, #176	; 0xb0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ffd3 	bl	8002896 <scale8>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <led_set_RGB+0x6c>)
 80028f6:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	3301      	adds	r3, #1
 8002902:	490a      	ldr	r1, [pc, #40]	; (800292c <led_set_RGB+0x6c>)
 8002904:	79ba      	ldrb	r2, [r7, #6]
 8002906:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	1c9c      	adds	r4, r3, #2
 8002912:	793b      	ldrb	r3, [r7, #4]
 8002914:	21f0      	movs	r1, #240	; 0xf0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffbd 	bl	8002896 <scale8>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <led_set_RGB+0x6c>)
 8002922:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	200033f8 	.word	0x200033f8

08002930 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002938:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d852      	bhi.n	80029e6 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e046      	b.n	80029d4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	dd01      	ble.n	8002968 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002964:	2126      	movs	r1, #38	; 0x26
 8002966:	e000      	b.n	800296a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002968:	2113      	movs	r1, #19
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3318      	adds	r3, #24
 800296e:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002970:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3301      	adds	r3, #1
 800297e:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	dd01      	ble.n	8002996 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002992:	2126      	movs	r1, #38	; 0x26
 8002994:	e000      	b.n	8002998 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002996:	2113      	movs	r1, #19
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3320      	adds	r3, #32
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800299e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3302      	adds	r3, #2
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	461a      	mov	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	dd01      	ble.n	80029c4 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80029c0:	2126      	movs	r1, #38	; 0x26
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80029c4:	2113      	movs	r1, #19
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3328      	adds	r3, #40	; 0x28
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80029cc:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3301      	adds	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d9b5      	bls.n	8002946 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029e2:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80029e4:	e01d      	b.n	8002a22 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	d812      	bhi.n	8002a14 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80029ee:	2318      	movs	r3, #24
 80029f0:	72fb      	strb	r3, [r7, #11]
 80029f2:	e006      	b.n	8002a02 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80029f8:	2100      	movs	r1, #0
 80029fa:	54d1      	strb	r1, [r2, r3]
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	3301      	adds	r3, #1
 8002a00:	72fb      	strb	r3, [r7, #11]
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	2b2f      	cmp	r3, #47	; 0x2f
 8002a06:	d9f5      	bls.n	80029f4 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	e006      	b.n	8002a22 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4806      	ldr	r0, [pc, #24]	; (8002a38 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002a1e:	f005 f9a7 	bl	8007d70 <HAL_TIM_PWM_Stop_DMA>
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000343c 	.word	0x2000343c
 8002a30:	200033f8 	.word	0x200033f8
 8002a34:	2000340c 	.word	0x2000340c
 8002a38:	200032c4 	.word	0x200032c4

08002a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_MspInit+0x68>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2005      	movs	r0, #5
 8002a80:	f000 fcdf 	bl	8003442 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a84:	2005      	movs	r0, #5
 8002a86:	f000 fcf8 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f000 fcd7 	bl	8003442 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a94:	2005      	movs	r0, #5
 8002a96:	f000 fcf0 	bl	800347a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_CRC_MspInit+0x3c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_CRC_MspInit+0x40>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_CRC_MspInit+0x40>)
 8002ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_CRC_MspInit+0x40>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023000 	.word	0x40023000
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_I2C_MspInit+0x128>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12c      	bne.n	8002b68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b18:	f043 0320 	orr.w	r3, r3, #32
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	4835      	ldr	r0, [pc, #212]	; (8002c1c <HAL_I2C_MspInit+0x130>)
 8002b46:	f001 f84b 	bl	8003be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b66:	e050      	b.n	8002c0a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <HAL_I2C_MspInit+0x134>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d14b      	bne.n	8002c0a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4817      	ldr	r0, [pc, #92]	; (8002c24 <HAL_I2C_MspInit+0x138>)
 8002bc8:	f001 f80a 	bl	8003be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd2:	2312      	movs	r3, #18
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bde:	2304      	movs	r3, #4
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	480f      	ldr	r0, [pc, #60]	; (8002c28 <HAL_I2C_MspInit+0x13c>)
 8002bea:	f000 fff9 	bl	8003be0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_I2C_MspInit+0x12c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	3730      	adds	r7, #48	; 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40005800 	.word	0x40005800
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40005c00 	.word	0x40005c00
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a42      	ldr	r2, [pc, #264]	; (8002d54 <HAL_SPI_MspInit+0x128>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d14c      	bne.n	8002ce8 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a39      	ldr	r2, [pc, #228]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a32      	ldr	r2, [pc, #200]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4827      	ldr	r0, [pc, #156]	; (8002d5c <HAL_SPI_MspInit+0x130>)
 8002cc0:	f000 ff8e 	bl	8003be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002cc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	481f      	ldr	r0, [pc, #124]	; (8002d60 <HAL_SPI_MspInit+0x134>)
 8002ce2:	f000 ff7d 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ce6:	e031      	b.n	8002d4c <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_SPI_MspInit+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12c      	bne.n	8002d4c <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d00:	6453      	str	r3, [r2, #68]	; 0x44
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_SPI_MspInit+0x12c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	4619      	mov	r1, r3
 8002d46:	4808      	ldr	r0, [pc, #32]	; (8002d68 <HAL_SPI_MspInit+0x13c>)
 8002d48:	f000 ff4a 	bl	8003be0 <HAL_GPIO_Init>
}
 8002d4c:	bf00      	nop
 8002d4e:	3730      	adds	r7, #48	; 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40003c00 	.word	0x40003c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40015000 	.word	0x40015000
 8002d68:	40021400 	.word	0x40021400

08002d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <HAL_TIM_Base_MspInit+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d9a:	e04a      	b.n	8002e32 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d145      	bne.n	8002e32 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_TIM_Base_MspInit+0xd4>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <HAL_TIM_Base_MspInit+0xdc>)
 8002dc6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dfe:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002e06:	480f      	ldr	r0, [pc, #60]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002e08:	f000 fb6e 	bl	80034e8 <HAL_DMA_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002e12:	f7ff fc75 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e1c:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <HAL_TIM_Base_MspInit+0xd8>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	201c      	movs	r0, #28
 8002e28:	f000 fb0b 	bl	8003442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e2c:	201c      	movs	r0, #28
 8002e2e:	f000 fb24 	bl	800347a <HAL_NVIC_EnableIRQ>
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	2000330c 	.word	0x2000330c
 8002e48:	40026088 	.word	0x40026088

08002e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d11d      	bne.n	8002eaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_TIM_MspPostInit+0x68>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_TIM_MspPostInit+0x68>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <HAL_TIM_MspPostInit+0x6c>)
 8002ea6:	f000 fe9b 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a36      	ldr	r2, [pc, #216]	; (8002fb4 <HAL_UART_MspInit+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d135      	bne.n	8002f4a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002ee8:	f043 0310 	orr.w	r3, r3, #16
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4822      	ldr	r0, [pc, #136]	; (8002fbc <HAL_UART_MspInit+0x100>)
 8002f34:	f000 fe54 	bl	8003be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2025      	movs	r0, #37	; 0x25
 8002f3e:	f000 fa80 	bl	8003442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f42:	2025      	movs	r0, #37	; 0x25
 8002f44:	f000 fa99 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f48:	e030      	b.n	8002fac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_UART_MspInit+0x104>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d12b      	bne.n	8002fac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_UART_MspInit+0xfc>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f8c:	2360      	movs	r3, #96	; 0x60
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <HAL_UART_MspInit+0x108>)
 8002fa8:	f000 fe1a 	bl	8003be0 <HAL_GPIO_Init>
}
 8002fac:	bf00      	nop
 8002fae:	3730      	adds	r7, #48	; 0x30
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40020c00 	.word	0x40020c00

08002fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <NMI_Handler+0x4>

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003014:	f000 f8f6 	bl	8003204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <DMA1_Stream5_IRQHandler+0x10>)
 8003032:	f000 fb99 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000330c 	.word	0x2000330c

08003040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM2_IRQHandler+0x10>)
 8003046:	f004 ff65 	bl	8007f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200032c4 	.word	0x200032c4

08003054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <USART1_IRQHandler+0x10>)
 800305a:	f005 ff67 	bl	8008f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000336c 	.word	0x2000336c

08003068 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <OTG_HS_IRQHandler+0x10>)
 800306e:	f001 f9e7 	bl	8004440 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20003838 	.word	0x20003838

0800307c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003084:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <_sbrk+0x5c>)
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <_sbrk+0x60>)
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <_sbrk+0x64>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <_sbrk+0x64>)
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <_sbrk+0x68>)
 800309c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <_sbrk+0x64>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d207      	bcs.n	80030bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ac:	f00b fb42 	bl	800e734 <__errno>
 80030b0:	4603      	mov	r3, r0
 80030b2:	220c      	movs	r2, #12
 80030b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ba:	e009      	b.n	80030d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <_sbrk+0x64>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <_sbrk+0x64>)
 80030cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20030000 	.word	0x20030000
 80030dc:	00000400 	.word	0x00000400
 80030e0:	20003440 	.word	0x20003440
 80030e4:	20003b50 	.word	0x20003b50

080030e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <SystemInit+0x20>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <SystemInit+0x20>)
 80030f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800310c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003144 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003110:	480d      	ldr	r0, [pc, #52]	; (8003148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003112:	490e      	ldr	r1, [pc, #56]	; (800314c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003114:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003118:	e002      	b.n	8003120 <LoopCopyDataInit>

0800311a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800311a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800311c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311e:	3304      	adds	r3, #4

08003120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003124:	d3f9      	bcc.n	800311a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003128:	4c0b      	ldr	r4, [pc, #44]	; (8003158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800312c:	e001      	b.n	8003132 <LoopFillZerobss>

0800312e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003130:	3204      	adds	r2, #4

08003132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003134:	d3fb      	bcc.n	800312e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003136:	f7ff ffd7 	bl	80030e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800313a:	f00b fb01 	bl	800e740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800313e:	f7fe fd03 	bl	8001b48 <main>
  bx  lr    
 8003142:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003144:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800314c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003150:	080102cc 	.word	0x080102cc
  ldr r2, =_sbss
 8003154:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8003158:	20003b4c 	.word	0x20003b4c

0800315c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800315c:	e7fe      	b.n	800315c <ADC_IRQHandler>
	...

08003160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_Init+0x40>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_Init+0x40>)
 800316a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_Init+0x40>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_Init+0x40>)
 8003176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800317a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_Init+0x40>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003188:	2003      	movs	r0, #3
 800318a:	f000 f94f 	bl	800342c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318e:	200f      	movs	r0, #15
 8003190:	f000 f808 	bl	80031a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003194:	f7ff fc52 	bl	8002a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_InitTick+0x54>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_InitTick+0x58>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f967 	bl	8003496 <HAL_SYSTICK_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00e      	b.n	80031f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d80a      	bhi.n	80031ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d8:	2200      	movs	r2, #0
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e0:	f000 f92f 	bl	8003442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <HAL_InitTick+0x5c>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000004 	.word	0x20000004
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	20000008 	.word	0x20000008

08003204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_IncTick+0x20>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x24>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4413      	add	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_IncTick+0x24>)
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	2000000c 	.word	0x2000000c
 8003228:	20003444 	.word	0x20003444

0800322c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return uwTick;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_GetTick+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20003444 	.word	0x20003444

08003244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff ffee 	bl	800322c <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800325c:	d005      	beq.n	800326a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_Delay+0x44>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326a:	bf00      	nop
 800326c:	f7ff ffde 	bl	800322c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d8f7      	bhi.n	800326c <HAL_Delay+0x28>
  {
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000000c 	.word	0x2000000c

0800328c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a8:	4013      	ands	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60d3      	str	r3, [r2, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <__NVIC_GetPriorityGrouping+0x18>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0307 	and.w	r3, r3, #7
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db0b      	blt.n	800331a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	4907      	ldr	r1, [pc, #28]	; (8003328 <__NVIC_EnableIRQ+0x38>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2001      	movs	r0, #1
 8003312:	fa00 f202 	lsl.w	r2, r0, r2
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	; (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	; (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f8:	d301      	bcc.n	80033fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00f      	b.n	800341e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <SysTick_Config+0x40>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003406:	210f      	movs	r1, #15
 8003408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800340c:	f7ff ff8e 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <SysTick_Config+0x40>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <SysTick_Config+0x40>)
 8003418:	2207      	movs	r2, #7
 800341a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	e000e010 	.word	0xe000e010

0800342c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff29 	bl	800328c <__NVIC_SetPriorityGrouping>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003454:	f7ff ff3e 	bl	80032d4 <__NVIC_GetPriorityGrouping>
 8003458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f7ff ff8e 	bl	8003380 <NVIC_EncodePriority>
 8003464:	4602      	mov	r2, r0
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff31 	bl	80032f0 <__NVIC_EnableIRQ>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffa2 	bl	80033e8 <SysTick_Config>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e00e      	b.n	80034de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	795b      	ldrb	r3, [r3, #5]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fae9 	bl	8002aa8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff fe9a 	bl	800322c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e099      	b.n	8003638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003524:	e00f      	b.n	8003546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003526:	f7ff fe81 	bl	800322c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b05      	cmp	r3, #5
 8003532:	d908      	bls.n	8003546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e078      	b.n	8003638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e8      	bne.n	8003526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4b38      	ldr	r3, [pc, #224]	; (8003640 <HAL_DMA_Init+0x158>)
 8003560:	4013      	ands	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b04      	cmp	r3, #4
 800359e:	d107      	bne.n	80035b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4313      	orrs	r3, r2
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d117      	bne.n	800360a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa7b 	bl	8003ae8 <DMA_CheckFifoParam>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003606:	2301      	movs	r3, #1
 8003608:	e016      	b.n	8003638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa32 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 8003618:	4603      	mov	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	223f      	movs	r2, #63	; 0x3f
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	f010803f 	.word	0xf010803f

08003644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003652:	f7ff fdeb 	bl	800322c <HAL_GetTick>
 8003656:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d008      	beq.n	8003676 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e052      	b.n	800371c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0216 	bic.w	r2, r2, #22
 8003684:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003694:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <HAL_DMA_Abort+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0208 	bic.w	r2, r2, #8
 80036b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c6:	e013      	b.n	80036f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c8:	f7ff fdb0 	bl	800322c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d90c      	bls.n	80036f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e015      	b.n	800371c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e4      	bne.n	80036c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	223f      	movs	r2, #63	; 0x3f
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00c      	b.n	800375c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2205      	movs	r2, #5
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003774:	4b8e      	ldr	r3, [pc, #568]	; (80039b0 <HAL_DMA_IRQHandler+0x248>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a8e      	ldr	r2, [pc, #568]	; (80039b4 <HAL_DMA_IRQHandler+0x24c>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2208      	movs	r2, #8
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0204 	bic.w	r2, r2, #4
 80037ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2208      	movs	r2, #8
 80037c2:	409a      	lsls	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2204      	movs	r2, #4
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d012      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2204      	movs	r2, #4
 800382e:	409a      	lsls	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	2210      	movs	r2, #16
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d043      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2210      	movs	r2, #16
 8003864:	409a      	lsls	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d018      	beq.n	80038aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d024      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e01f      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e016      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0208 	bic.w	r2, r2, #8
 80038c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2220      	movs	r2, #32
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 808f 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8087 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2220      	movs	r2, #32
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b05      	cmp	r3, #5
 8003910:	d136      	bne.n	8003980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0216 	bic.w	r2, r2, #22
 8003920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_DMA_IRQHandler+0x1da>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0208 	bic.w	r2, r2, #8
 8003950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	223f      	movs	r2, #63	; 0x3f
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d07e      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
        }
        return;
 800397e:	e079      	b.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01d      	beq.n	80039ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d031      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e02c      	b.n	8003a08 <HAL_DMA_IRQHandler+0x2a0>
 80039ae:	bf00      	nop
 80039b0:	20000004 	.word	0x20000004
 80039b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d023      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
 80039c8:	e01e      	b.n	8003a08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10f      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0210 	bic.w	r2, r2, #16
 80039e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d032      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2205      	movs	r2, #5
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d307      	bcc.n	8003a50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f2      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x2cc>
 8003a4e:	e000      	b.n	8003a52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a74:	bf00      	nop
    }
  }
}
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b10      	subs	r3, #16
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d909      	bls.n	8003abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	e007      	b.n	8003ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	aaaaaaab 	.word	0xaaaaaaab
 8003ae4:	08010104 	.word	0x08010104

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d856      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xce>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x28>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003bb7 	.word	0x08003bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d046      	beq.n	8003bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e043      	b.n	8003bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3a:	d140      	bne.n	8003bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e03d      	b.n	8003bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	d121      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d837      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xda>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e030      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e022      	b.n	8003bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b88:	d11f      	bne.n	8003bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8e:	e01c      	b.n	8003bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d903      	bls.n	8003b9e <DMA_CheckFifoParam+0xb6>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d003      	beq.n	8003ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b9c:	e018      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba2:	e015      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e00b      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e00a      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e008      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e006      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	e177      	b.n	8003eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f040 8166 	bne.w	8003ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d005      	beq.n	8003c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d130      	bne.n	8003c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c68:	2201      	movs	r2, #1
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 0201 	and.w	r2, r3, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d017      	beq.n	8003cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d123      	bne.n	8003d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3208      	adds	r2, #8
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	08da      	lsrs	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3208      	adds	r2, #8
 8003d1e:	69b9      	ldr	r1, [r7, #24]
 8003d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0203 	and.w	r2, r3, #3
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80c0 	beq.w	8003ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_GPIO_Init+0x324>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_GPIO_Init+0x324>)
 8003d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_GPIO_Init+0x324>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d82:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <HAL_GPIO_Init+0x328>)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_GPIO_Init+0x32c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d037      	beq.n	8003e1e <HAL_GPIO_Init+0x23e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a57      	ldr	r2, [pc, #348]	; (8003f10 <HAL_GPIO_Init+0x330>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_GPIO_Init+0x23a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a56      	ldr	r2, [pc, #344]	; (8003f14 <HAL_GPIO_Init+0x334>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02b      	beq.n	8003e16 <HAL_GPIO_Init+0x236>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a55      	ldr	r2, [pc, #340]	; (8003f18 <HAL_GPIO_Init+0x338>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d025      	beq.n	8003e12 <HAL_GPIO_Init+0x232>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a54      	ldr	r2, [pc, #336]	; (8003f1c <HAL_GPIO_Init+0x33c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01f      	beq.n	8003e0e <HAL_GPIO_Init+0x22e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a53      	ldr	r2, [pc, #332]	; (8003f20 <HAL_GPIO_Init+0x340>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d019      	beq.n	8003e0a <HAL_GPIO_Init+0x22a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_GPIO_Init+0x344>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_GPIO_Init+0x226>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a51      	ldr	r2, [pc, #324]	; (8003f28 <HAL_GPIO_Init+0x348>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00d      	beq.n	8003e02 <HAL_GPIO_Init+0x222>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a50      	ldr	r2, [pc, #320]	; (8003f2c <HAL_GPIO_Init+0x34c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <HAL_GPIO_Init+0x21e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4f      	ldr	r2, [pc, #316]	; (8003f30 <HAL_GPIO_Init+0x350>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_GPIO_Init+0x21a>
 8003df6:	2309      	movs	r3, #9
 8003df8:	e012      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	e010      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	e00e      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e02:	2307      	movs	r3, #7
 8003e04:	e00c      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e06:	2306      	movs	r3, #6
 8003e08:	e00a      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e0a:	2305      	movs	r3, #5
 8003e0c:	e008      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e004      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_GPIO_Init+0x240>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f002 0203 	and.w	r2, r2, #3
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	4093      	lsls	r3, r2
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e30:	4935      	ldr	r1, [pc, #212]	; (8003f08 <HAL_GPIO_Init+0x328>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e62:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <HAL_GPIO_Init+0x354>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	f67f ae84 	bls.w	8003bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400
 8003f14:	40020800 	.word	0x40020800
 8003f18:	40020c00 	.word	0x40020c00
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40021400 	.word	0x40021400
 8003f24:	40021800 	.word	0x40021800
 8003f28:	40021c00 	.word	0x40021c00
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40022400 	.word	0x40022400
 8003f34:	40013c00 	.word	0x40013c00

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
 8003f44:	4613      	mov	r3, r2
 8003f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f48:	787b      	ldrb	r3, [r7, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f54:	e003      	b.n	8003f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	041a      	lsls	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	619a      	str	r2, [r3, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6c:	b08f      	sub	sp, #60	; 0x3c
 8003f6e:	af0a      	add	r7, sp, #40	; 0x28
 8003f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e054      	b.n	8004026 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f00a f8e8 	bl	800e16c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f005 ff90 	bl	8009ee0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	687e      	ldr	r6, [r7, #4]
 8003fc8:	466d      	mov	r5, sp
 8003fca:	f106 0410 	add.w	r4, r6, #16
 8003fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fde:	1d33      	adds	r3, r6, #4
 8003fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fe2:	6838      	ldr	r0, [r7, #0]
 8003fe4:	f005 ff0a 	bl	8009dfc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f005 ff87 	bl	8009f02 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	687e      	ldr	r6, [r7, #4]
 8003ffc:	466d      	mov	r5, sp
 8003ffe:	f106 0410 	add.w	r4, r6, #16
 8004002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004012:	1d33      	adds	r3, r6, #4
 8004014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f006 f910 	bl	800a23c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800402e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800402e:	b590      	push	{r4, r7, lr}
 8004030:	b089      	sub	sp, #36	; 0x24
 8004032:	af04      	add	r7, sp, #16
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	461a      	mov	r2, r3
 800403c:	4603      	mov	r3, r0
 800403e:	70fb      	strb	r3, [r7, #3]
 8004040:	460b      	mov	r3, r1
 8004042:	70bb      	strb	r3, [r7, #2]
 8004044:	4613      	mov	r3, r2
 8004046:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_HCD_HC_Init+0x28>
 8004052:	2302      	movs	r3, #2
 8004054:	e076      	b.n	8004144 <HAL_HCD_HC_Init+0x116>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	333d      	adds	r3, #61	; 0x3d
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3338      	adds	r3, #56	; 0x38
 800407e:	787a      	ldrb	r2, [r7, #1]
 8004080:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3340      	adds	r3, #64	; 0x40
 8004090:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004092:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3339      	adds	r3, #57	; 0x39
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	333f      	adds	r3, #63	; 0x3f
 80040b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	78ba      	ldrb	r2, [r7, #2]
 80040be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c2:	b2d0      	uxtb	r0, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	333a      	adds	r3, #58	; 0x3a
 80040d0:	4602      	mov	r2, r0
 80040d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80040d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da09      	bge.n	80040f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	333b      	adds	r3, #59	; 0x3b
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e008      	b.n	8004102 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	333b      	adds	r3, #59	; 0x3b
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	333c      	adds	r3, #60	; 0x3c
 8004110:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004114:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	787c      	ldrb	r4, [r7, #1]
 800411c:	78ba      	ldrb	r2, [r7, #2]
 800411e:	78f9      	ldrb	r1, [r7, #3]
 8004120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4623      	mov	r3, r4
 8004132:	f006 fa09 	bl	800a548 <USB_HC_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bd90      	pop	{r4, r7, pc}

0800414c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_HCD_HC_Halt+0x1e>
 8004166:	2302      	movs	r3, #2
 8004168:	e00f      	b.n	800418a <HAL_HCD_HC_Halt+0x3e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f006 fc59 	bl	800aa32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	4608      	mov	r0, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	461a      	mov	r2, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	70fb      	strb	r3, [r7, #3]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70bb      	strb	r3, [r7, #2]
 80041aa:	4613      	mov	r3, r2
 80041ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	333b      	adds	r3, #59	; 0x3b
 80041bc:	78ba      	ldrb	r2, [r7, #2]
 80041be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	333f      	adds	r3, #63	; 0x3f
 80041ce:	787a      	ldrb	r2, [r7, #1]
 80041d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80041d2:	7c3b      	ldrb	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d112      	bne.n	80041fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	212c      	movs	r1, #44	; 0x2c
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	3342      	adds	r3, #66	; 0x42
 80041e6:	2203      	movs	r2, #3
 80041e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	212c      	movs	r1, #44	; 0x2c
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	333d      	adds	r3, #61	; 0x3d
 80041f8:	7f3a      	ldrb	r2, [r7, #28]
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e008      	b.n	8004210 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3342      	adds	r3, #66	; 0x42
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	2b03      	cmp	r3, #3
 8004214:	f200 80c6 	bhi.w	80043a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004391 	.word	0x08004391
 8004228:	08004295 	.word	0x08004295
 800422c:	08004313 	.word	0x08004313
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004230:	7c3b      	ldrb	r3, [r7, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	f040 80b8 	bne.w	80043a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004238:	78bb      	ldrb	r3, [r7, #2]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 80b4 	bne.w	80043a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004240:	8b3b      	ldrh	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3355      	adds	r3, #85	; 0x55
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3355      	adds	r3, #85	; 0x55
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3342      	adds	r3, #66	; 0x42
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800427e:	e093      	b.n	80043a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3342      	adds	r3, #66	; 0x42
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	e089      	b.n	80043a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11d      	bne.n	80042d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3355      	adds	r3, #85	; 0x55
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3342      	adds	r3, #66	; 0x42
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80042c0:	e073      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3342      	adds	r3, #66	; 0x42
 80042d0:	2202      	movs	r2, #2
 80042d2:	701a      	strb	r2, [r3, #0]
      break;
 80042d4:	e069      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3354      	adds	r3, #84	; 0x54
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3342      	adds	r3, #66	; 0x42
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
      break;
 80042fc:	e055      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3342      	adds	r3, #66	; 0x42
 800430c:	2202      	movs	r2, #2
 800430e:	701a      	strb	r2, [r3, #0]
      break;
 8004310:	e04b      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004312:	78bb      	ldrb	r3, [r7, #2]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	3355      	adds	r3, #85	; 0x55
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3342      	adds	r3, #66	; 0x42
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800433e:	e034      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3342      	adds	r3, #66	; 0x42
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
      break;
 8004352:	e02a      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3354      	adds	r3, #84	; 0x54
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3342      	adds	r3, #66	; 0x42
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
      break;
 800437a:	e016      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3342      	adds	r3, #66	; 0x42
 800438a:	2202      	movs	r2, #2
 800438c:	701a      	strb	r2, [r3, #0]
      break;
 800438e:	e00c      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3342      	adds	r3, #66	; 0x42
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
      break;
 80043a2:	e002      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80043a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3344      	adds	r3, #68	; 0x44
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	8b3a      	ldrh	r2, [r7, #24]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	202c      	movs	r0, #44	; 0x2c
 80043c4:	fb00 f303 	mul.w	r3, r0, r3
 80043c8:	440b      	add	r3, r1
 80043ca:	334c      	adds	r3, #76	; 0x4c
 80043cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3360      	adds	r3, #96	; 0x60
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3350      	adds	r3, #80	; 0x50
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3339      	adds	r3, #57	; 0x39
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3361      	adds	r3, #97	; 0x61
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	222c      	movs	r2, #44	; 0x2c
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	3338      	adds	r3, #56	; 0x38
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	18d1      	adds	r1, r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	f006 f9ac 	bl	800a78c <USB_HC_StartXfer>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop

08004440 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f005 fead 	bl	800a1b6 <USB_GetMode>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 80f6 	bne.w	8004650 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fe91 	bl	800a190 <USB_ReadInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80ec 	beq.w	800464e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f005 fe88 	bl	800a190 <USB_ReadInterrupts>
 8004480:	4603      	mov	r3, r0
 8004482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448a:	d104      	bne.n	8004496 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004494:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f005 fe78 	bl	800a190 <USB_ReadInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044aa:	d104      	bne.n	80044b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f005 fe68 	bl	800a190 <USB_ReadInterrupts>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ca:	d104      	bne.n	80044d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fe58 	bl	800a190 <USB_ReadInterrupts>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d103      	bne.n	80044f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2202      	movs	r2, #2
 80044f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 fe4a 	bl	800a190 <USB_ReadInterrupts>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004506:	d11c      	bne.n	8004542 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004510:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004522:	2110      	movs	r1, #16
 8004524:	6938      	ldr	r0, [r7, #16]
 8004526:	f005 fd39 	bl	8009f9c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800452a:	6938      	ldr	r0, [r7, #16]
 800452c:	f005 fd6a 	bl	800a004 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f005 ff40 	bl	800a3bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f009 fe8f 	bl	800e260 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f005 fe22 	bl	800a190 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004556:	d102      	bne.n	800455e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 f89e 	bl	800569a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f005 fe14 	bl	800a190 <USB_ReadInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b08      	cmp	r3, #8
 8004570:	d106      	bne.n	8004580 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f009 fe58 	bl	800e228 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2208      	movs	r2, #8
 800457e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f005 fe03 	bl	800a190 <USB_ReadInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b10      	cmp	r3, #16
 8004592:	d101      	bne.n	8004598 <HAL_HCD_IRQHandler+0x158>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_HCD_IRQHandler+0x15a>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0210 	bic.w	r2, r2, #16
 80045ac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 ffa1 	bl	80054f6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0210 	orr.w	r2, r2, #16
 80045c2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 fde1 	bl	800a190 <USB_ReadInterrupts>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d8:	d13a      	bne.n	8004650 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f006 fa16 	bl	800aa10 <USB_HC_ReadInterrupt>
 80045e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e025      	b.n	8004638 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d018      	beq.n	8004632 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d106      	bne.n	8004626 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8ab 	bl	800477a <HCD_HC_IN_IRQHandler>
 8004624:	e005      	b.n	8004632 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fbf9 	bl	8004e24 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	3301      	adds	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3d4      	bcc.n	80045ec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464a:	615a      	str	r2, [r3, #20]
 800464c:	e000      	b.n	8004650 <HAL_HCD_IRQHandler+0x210>
      return;
 800464e:	bf00      	nop
    }
  }
}
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_HCD_Start+0x16>
 8004668:	2302      	movs	r3, #2
 800466a:	e013      	b.n	8004694 <HAL_HCD_Start+0x3e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	4618      	mov	r0, r3
 800467c:	f005 ff02 	bl	800a484 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f005 fc1a 	bl	8009ebe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_HCD_Stop+0x16>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e00d      	b.n	80046ce <HAL_HCD_Stop+0x32>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f006 faf0 	bl	800aca4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f005 fea4 	bl	800a430 <USB_ResetPort>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3360      	adds	r3, #96	; 0x60
 800470c:	781b      	ldrb	r3, [r3, #0]
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3350      	adds	r3, #80	; 0x50
 8004734:	681b      	ldr	r3, [r3, #0]
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f005 fee8 	bl	800a524 <USB_GetCurrentFrame>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f005 fec3 	bl	800a4f6 <USB_GetHostSpeed>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d11a      	bne.n	80047e0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	461a      	mov	r2, r3
 80047b8:	2304      	movs	r3, #4
 80047ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3361      	adds	r3, #97	; 0x61
 80047ca:	2206      	movs	r2, #6
 80047cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f006 f92a 	bl	800aa32 <USB_HC_Halt>
 80047de:	e0af      	b.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d11b      	bne.n	8004830 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	461a      	mov	r2, r3
 8004806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3361      	adds	r3, #97	; 0x61
 800481a:	2207      	movs	r2, #7
 800481c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f006 f902 	bl	800aa32 <USB_HC_Halt>
 800482e:	e087      	b.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b20      	cmp	r3, #32
 8004844:	d109      	bne.n	800485a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	2320      	movs	r3, #32
 8004856:	6093      	str	r3, [r2, #8]
 8004858:	e072      	b.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d11a      	bne.n	80048a6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	461a      	mov	r2, r3
 800487e:	2308      	movs	r3, #8
 8004880:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	212c      	movs	r1, #44	; 0x2c
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	4413      	add	r3, r2
 800488e:	3361      	adds	r3, #97	; 0x61
 8004890:	2205      	movs	r2, #5
 8004892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f006 f8c7 	bl	800aa32 <USB_HC_Halt>
 80048a4:	e04c      	b.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d11b      	bne.n	80048f6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	461a      	mov	r2, r3
 80048cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	212c      	movs	r1, #44	; 0x2c
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	3361      	adds	r3, #97	; 0x61
 80048e0:	2208      	movs	r2, #8
 80048e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f006 f89f 	bl	800aa32 <USB_HC_Halt>
 80048f4:	e024      	b.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d119      	bne.n	8004940 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	461a      	mov	r2, r3
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3361      	adds	r3, #97	; 0x61
 800492c:	2206      	movs	r2, #6
 800492e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f006 f879 	bl	800aa32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d112      	bne.n	800497e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f006 f865 	bl	800aa32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	461a      	mov	r2, r3
 8004976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800497c:	e24e      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 80df 	bne.w	8004b54 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d019      	beq.n	80049d2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3348      	adds	r3, #72	; 0x48
 80049ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0159      	lsls	r1, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049c0:	1ad2      	subs	r2, r2, r3
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	202c      	movs	r0, #44	; 0x2c
 80049c8:	fb00 f303 	mul.w	r3, r0, r3
 80049cc:	440b      	add	r3, r1
 80049ce:	3350      	adds	r3, #80	; 0x50
 80049d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	3361      	adds	r3, #97	; 0x61
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	335c      	adds	r3, #92	; 0x5c
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a02:	461a      	mov	r2, r3
 8004a04:	2301      	movs	r3, #1
 8004a06:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	333f      	adds	r3, #63	; 0x3f
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	212c      	movs	r1, #44	; 0x2c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	333f      	adds	r3, #63	; 0x3f
 8004a2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d111      	bne.n	8004a54 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f005 fff9 	bl	800aa32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2310      	movs	r3, #16
 8004a50:	6093      	str	r3, [r2, #8]
 8004a52:	e03a      	b.n	8004aca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	333f      	adds	r3, #63	; 0x3f
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d009      	beq.n	8004a7c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	333f      	adds	r3, #63	; 0x3f
 8004a76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d126      	bne.n	8004aca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3360      	adds	r3, #96	; 0x60
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	b2d9      	uxtb	r1, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	202c      	movs	r0, #44	; 0x2c
 8004ab8:	fb00 f303 	mul.w	r3, r0, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3360      	adds	r3, #96	; 0x60
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f009 fbd9 	bl	800e27c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12b      	bne.n	8004b2a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	212c      	movs	r1, #44	; 0x2c
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	202c      	movs	r0, #44	; 0x2c
 8004ae8:	fb00 f202 	mul.w	r2, r0, r2
 8004aec:	440a      	add	r2, r1
 8004aee:	3240      	adds	r2, #64	; 0x40
 8004af0:	8812      	ldrh	r2, [r2, #0]
 8004af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 818e 	beq.w	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3354      	adds	r3, #84	; 0x54
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f083 0301 	eor.w	r3, r3, #1
 8004b14:	b2d8      	uxtb	r0, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	3354      	adds	r3, #84	; 0x54
 8004b24:	4602      	mov	r2, r0
 8004b26:	701a      	strb	r2, [r3, #0]
}
 8004b28:	e178      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	3354      	adds	r3, #84	; 0x54
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f083 0301 	eor.w	r3, r3, #1
 8004b3e:	b2d8      	uxtb	r0, r3
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	212c      	movs	r1, #44	; 0x2c
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3354      	adds	r3, #84	; 0x54
 8004b4e:	4602      	mov	r2, r0
 8004b50:	701a      	strb	r2, [r3, #0]
}
 8004b52:	e163      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	f040 80f6 	bne.w	8004d58 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3361      	adds	r3, #97	; 0x61
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d109      	bne.n	8004b94 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3360      	adds	r3, #96	; 0x60
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e0c9      	b.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3361      	adds	r3, #97	; 0x61
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d109      	bne.n	8004bbc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	212c      	movs	r1, #44	; 0x2c
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3360      	adds	r3, #96	; 0x60
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e0b5      	b.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	212c      	movs	r1, #44	; 0x2c
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3361      	adds	r3, #97	; 0x61
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d009      	beq.n	8004be4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3361      	adds	r3, #97	; 0x61
 8004bde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d150      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	212c      	movs	r1, #44	; 0x2c
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	335c      	adds	r3, #92	; 0x5c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	202c      	movs	r0, #44	; 0x2c
 8004bfc:	fb00 f303 	mul.w	r3, r0, r3
 8004c00:	440b      	add	r3, r1
 8004c02:	335c      	adds	r3, #92	; 0x5c
 8004c04:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	335c      	adds	r3, #92	; 0x5c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d912      	bls.n	8004c40 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	335c      	adds	r3, #92	; 0x5c
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3360      	adds	r3, #96	; 0x60
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c3e:	e073      	b.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3360      	adds	r3, #96	; 0x60
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c68:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c70:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c84:	e050      	b.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3361      	adds	r3, #97	; 0x61
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d122      	bne.n	8004ce0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3360      	adds	r3, #96	; 0x60
 8004ca8:	2202      	movs	r2, #2
 8004caa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e023      	b.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3361      	adds	r3, #97	; 0x61
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	d119      	bne.n	8004d28 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	335c      	adds	r3, #92	; 0x5c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	202c      	movs	r0, #44	; 0x2c
 8004d0c:	fb00 f303 	mul.w	r3, r0, r3
 8004d10:	440b      	add	r3, r1
 8004d12:	335c      	adds	r3, #92	; 0x5c
 8004d14:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3360      	adds	r3, #96	; 0x60
 8004d24:	2204      	movs	r2, #4
 8004d26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	461a      	mov	r2, r3
 8004d36:	2302      	movs	r3, #2
 8004d38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	b2d9      	uxtb	r1, r3
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	202c      	movs	r0, #44	; 0x2c
 8004d44:	fb00 f303 	mul.w	r3, r0, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3360      	adds	r3, #96	; 0x60
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f009 fa93 	bl	800e27c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d56:	e061      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d156      	bne.n	8004e1c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	333f      	adds	r3, #63	; 0x3f
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d111      	bne.n	8004da6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	335c      	adds	r3, #92	; 0x5c
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f005 fe47 	bl	800aa32 <USB_HC_Halt>
 8004da4:	e031      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	333f      	adds	r3, #63	; 0x3f
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	333f      	adds	r3, #63	; 0x3f
 8004dc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d11d      	bne.n	8004e0a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	335c      	adds	r3, #92	; 0x5c
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	212c      	movs	r1, #44	; 0x2c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	3361      	adds	r3, #97	; 0x61
 8004df6:	2203      	movs	r2, #3
 8004df8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f005 fe14 	bl	800aa32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	2310      	movs	r3, #16
 8004e1a:	6093      	str	r3, [r2, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d11a      	bne.n	8004e8a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e60:	461a      	mov	r2, r3
 8004e62:	2304      	movs	r3, #4
 8004e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3361      	adds	r3, #97	; 0x61
 8004e74:	2206      	movs	r2, #6
 8004e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	4611      	mov	r1, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f005 fdd5 	bl	800aa32 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004e88:	e331      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d12e      	bne.n	8004efe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	461a      	mov	r2, r3
 8004eae:	2320      	movs	r3, #32
 8004eb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	212c      	movs	r1, #44	; 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	333d      	adds	r3, #61	; 0x3d
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	f040 8313 	bne.w	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	333d      	adds	r3, #61	; 0x3d
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3360      	adds	r3, #96	; 0x60
 8004ee8:	2202      	movs	r2, #2
 8004eea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f005 fd9b 	bl	800aa32 <USB_HC_Halt>
}
 8004efc:	e2f7      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d112      	bne.n	8004f3c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	461a      	mov	r2, r3
 8004f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f28:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f005 fd7c 	bl	800aa32 <USB_HC_Halt>
}
 8004f3a:	e2d8      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d140      	bne.n	8004fd4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	212c      	movs	r1, #44	; 0x2c
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	335c      	adds	r3, #92	; 0x5c
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d111      	bne.n	8004f9e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	333d      	adds	r3, #61	; 0x3d
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	2301      	movs	r3, #1
 8004fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f005 fd30 	bl	800aa32 <USB_HC_Halt>
}
 8004fd2:	e28c      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d12c      	bne.n	8005044 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	212c      	movs	r1, #44	; 0x2c
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3361      	adds	r3, #97	; 0x61
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	212c      	movs	r1, #44	; 0x2c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	333d      	adds	r3, #61	; 0x3d
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	212c      	movs	r1, #44	; 0x2c
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	335c      	adds	r3, #92	; 0x5c
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f005 fd01 	bl	800aa32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	6093      	str	r3, [r2, #8]
}
 8005042:	e254      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11a      	bne.n	8005090 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	461a      	mov	r2, r3
 8005068:	2308      	movs	r3, #8
 800506a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	212c      	movs	r1, #44	; 0x2c
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	3361      	adds	r3, #97	; 0x61
 800507a:	2205      	movs	r2, #5
 800507c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fcd2 	bl	800aa32 <USB_HC_Halt>
}
 800508e:	e22e      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d140      	bne.n	8005128 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	212c      	movs	r1, #44	; 0x2c
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	335c      	adds	r3, #92	; 0x5c
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	212c      	movs	r1, #44	; 0x2c
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	3361      	adds	r3, #97	; 0x61
 80050c6:	2203      	movs	r2, #3
 80050c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	212c      	movs	r1, #44	; 0x2c
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	333d      	adds	r3, #61	; 0x3d
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d112      	bne.n	8005104 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	212c      	movs	r1, #44	; 0x2c
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	333c      	adds	r3, #60	; 0x3c
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	333d      	adds	r3, #61	; 0x3d
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	4611      	mov	r1, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f005 fc8f 	bl	800aa32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	461a      	mov	r2, r3
 8005122:	2310      	movs	r3, #16
 8005124:	6093      	str	r3, [r2, #8]
}
 8005126:	e1e2      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d164      	bne.n	8005208 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d111      	bne.n	800516a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	3361      	adds	r3, #97	; 0x61
 8005154:	2206      	movs	r2, #6
 8005156:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f005 fc65 	bl	800aa32 <USB_HC_Halt>
 8005168:	e044      	b.n	80051f4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	335c      	adds	r3, #92	; 0x5c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	202c      	movs	r0, #44	; 0x2c
 8005182:	fb00 f303 	mul.w	r3, r0, r3
 8005186:	440b      	add	r3, r1
 8005188:	335c      	adds	r3, #92	; 0x5c
 800518a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	335c      	adds	r3, #92	; 0x5c
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d920      	bls.n	80051e2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	335c      	adds	r3, #92	; 0x5c
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	3360      	adds	r3, #96	; 0x60
 80051c0:	2204      	movs	r2, #4
 80051c2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	b2d9      	uxtb	r1, r3
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	202c      	movs	r0, #44	; 0x2c
 80051ce:	fb00 f303 	mul.w	r3, r0, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3360      	adds	r3, #96	; 0x60
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f009 f84e 	bl	800e27c <HAL_HCD_HC_NotifyURBChange_Callback>
 80051e0:	e008      	b.n	80051f4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	212c      	movs	r1, #44	; 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	3360      	adds	r3, #96	; 0x60
 80051f0:	2202      	movs	r2, #2
 80051f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	461a      	mov	r2, r3
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	6093      	str	r3, [r2, #8]
}
 8005206:	e172      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d11b      	bne.n	8005258 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3361      	adds	r3, #97	; 0x61
 800522e:	2208      	movs	r2, #8
 8005230:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f005 fbf8 	bl	800aa32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	461a      	mov	r2, r3
 8005250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005254:	6093      	str	r3, [r2, #8]
}
 8005256:	e14a      	b.n	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	f040 813f 	bne.w	80054ee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3361      	adds	r3, #97	; 0x61
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d17d      	bne.n	8005380 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3360      	adds	r3, #96	; 0x60
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	212c      	movs	r1, #44	; 0x2c
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	333f      	adds	r3, #63	; 0x3f
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d00a      	beq.n	80052c0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	212c      	movs	r1, #44	; 0x2c
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	333f      	adds	r3, #63	; 0x3f
 80052b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	f040 8100 	bne.w	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d113      	bne.n	80052f0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3355      	adds	r3, #85	; 0x55
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f083 0301 	eor.w	r3, r3, #1
 80052dc:	b2d8      	uxtb	r0, r3
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	212c      	movs	r1, #44	; 0x2c
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	3355      	adds	r3, #85	; 0x55
 80052ec:	4602      	mov	r2, r0
 80052ee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 80e3 	bne.w	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	212c      	movs	r1, #44	; 0x2c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	334c      	adds	r3, #76	; 0x4c
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80d8 	beq.w	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	212c      	movs	r1, #44	; 0x2c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	334c      	adds	r3, #76	; 0x4c
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	202c      	movs	r0, #44	; 0x2c
 8005326:	fb00 f202 	mul.w	r2, r0, r2
 800532a:	440a      	add	r2, r1
 800532c:	3240      	adds	r2, #64	; 0x40
 800532e:	8812      	ldrh	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	3b01      	subs	r3, #1
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	202c      	movs	r0, #44	; 0x2c
 800533a:	fb00 f202 	mul.w	r2, r0, r2
 800533e:	440a      	add	r2, r1
 8005340:	3240      	adds	r2, #64	; 0x40
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	fbb3 f3f2 	udiv	r3, r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80b5 	beq.w	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	212c      	movs	r1, #44	; 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3355      	adds	r3, #85	; 0x55
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f083 0301 	eor.w	r3, r3, #1
 800536a:	b2d8      	uxtb	r0, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3355      	adds	r3, #85	; 0x55
 800537a:	4602      	mov	r2, r0
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e09f      	b.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3361      	adds	r3, #97	; 0x61
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d109      	bne.n	80053a8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3360      	adds	r3, #96	; 0x60
 80053a2:	2202      	movs	r2, #2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e08b      	b.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	212c      	movs	r1, #44	; 0x2c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	3361      	adds	r3, #97	; 0x61
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d109      	bne.n	80053d0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	212c      	movs	r1, #44	; 0x2c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	3360      	adds	r3, #96	; 0x60
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e077      	b.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	212c      	movs	r1, #44	; 0x2c
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	3361      	adds	r3, #97	; 0x61
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d109      	bne.n	80053f8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3360      	adds	r3, #96	; 0x60
 80053f2:	2205      	movs	r2, #5
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	e063      	b.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	3361      	adds	r3, #97	; 0x61
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b06      	cmp	r3, #6
 800540a:	d009      	beq.n	8005420 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	212c      	movs	r1, #44	; 0x2c
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	3361      	adds	r3, #97	; 0x61
 800541a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800541c:	2b08      	cmp	r3, #8
 800541e:	d14f      	bne.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	212c      	movs	r1, #44	; 0x2c
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	4413      	add	r3, r2
 800542c:	335c      	adds	r3, #92	; 0x5c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	202c      	movs	r0, #44	; 0x2c
 8005438:	fb00 f303 	mul.w	r3, r0, r3
 800543c:	440b      	add	r3, r1
 800543e:	335c      	adds	r3, #92	; 0x5c
 8005440:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	212c      	movs	r1, #44	; 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	335c      	adds	r3, #92	; 0x5c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d912      	bls.n	800547c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	212c      	movs	r1, #44	; 0x2c
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	335c      	adds	r3, #92	; 0x5c
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	212c      	movs	r1, #44	; 0x2c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	3360      	adds	r3, #96	; 0x60
 8005476:	2204      	movs	r2, #4
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e021      	b.n	80054c0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3360      	adds	r3, #96	; 0x60
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	461a      	mov	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	461a      	mov	r2, r3
 80054ce:	2302      	movs	r3, #2
 80054d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	b2d9      	uxtb	r1, r3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	202c      	movs	r0, #44	; 0x2c
 80054dc:	fb00 f303 	mul.w	r3, r0, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	3360      	adds	r3, #96	; 0x60
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f008 fec7 	bl	800e27c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054ee:	bf00      	nop
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b08a      	sub	sp, #40	; 0x28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	0c5b      	lsrs	r3, r3, #17
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800552a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d004      	beq.n	800553c <HCD_RXQLVL_IRQHandler+0x46>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b05      	cmp	r3, #5
 8005536:	f000 80a9 	beq.w	800568c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800553a:	e0aa      	b.n	8005692 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a6 	beq.w	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	212c      	movs	r1, #44	; 0x2c
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	4413      	add	r3, r2
 8005550:	3344      	adds	r3, #68	; 0x44
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 809b 	beq.w	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	212c      	movs	r1, #44	; 0x2c
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	3350      	adds	r3, #80	; 0x50
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	441a      	add	r2, r3
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	202c      	movs	r0, #44	; 0x2c
 8005574:	fb00 f303 	mul.w	r3, r0, r3
 8005578:	440b      	add	r3, r1
 800557a:	334c      	adds	r3, #76	; 0x4c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d87a      	bhi.n	8005678 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	3344      	adds	r3, #68	; 0x44
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	b292      	uxth	r2, r2
 800559a:	4619      	mov	r1, r3
 800559c:	f004 fda0 	bl	800a0e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	3344      	adds	r3, #68	; 0x44
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	441a      	add	r2, r3
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	202c      	movs	r0, #44	; 0x2c
 80055ba:	fb00 f303 	mul.w	r3, r0, r3
 80055be:	440b      	add	r3, r1
 80055c0:	3344      	adds	r3, #68	; 0x44
 80055c2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	3350      	adds	r3, #80	; 0x50
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	441a      	add	r2, r3
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	202c      	movs	r0, #44	; 0x2c
 80055de:	fb00 f303 	mul.w	r3, r0, r3
 80055e2:	440b      	add	r3, r1
 80055e4:	3350      	adds	r3, #80	; 0x50
 80055e6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	0cdb      	lsrs	r3, r3, #19
 80055f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3340      	adds	r3, #64	; 0x40
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4293      	cmp	r3, r2
 8005614:	d13c      	bne.n	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d039      	beq.n	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	4413      	add	r3, r2
 8005624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005632:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800563a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	461a      	mov	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3354      	adds	r3, #84	; 0x54
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2d8      	uxtb	r0, r3
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	212c      	movs	r1, #44	; 0x2c
 800566a:	fb01 f303 	mul.w	r3, r1, r3
 800566e:	4413      	add	r3, r2
 8005670:	3354      	adds	r3, #84	; 0x54
 8005672:	4602      	mov	r2, r0
 8005674:	701a      	strb	r2, [r3, #0]
      break;
 8005676:	e00b      	b.n	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3360      	adds	r3, #96	; 0x60
 8005686:	2204      	movs	r2, #4
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	e001      	b.n	8005690 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005690:	bf00      	nop
  }
}
 8005692:	bf00      	nop
 8005694:	3728      	adds	r7, #40	; 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056c6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d10b      	bne.n	80056ea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d102      	bne.n	80056e2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f008 fdb1 	bl	800e244 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f043 0302 	orr.w	r3, r3, #2
 80056e8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d132      	bne.n	800575a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f043 0308 	orr.w	r3, r3, #8
 80056fa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d126      	bne.n	8005754 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d113      	bne.n	8005736 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005718:	d106      	bne.n	8005728 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2102      	movs	r1, #2
 8005720:	4618      	mov	r0, r3
 8005722:	f004 fe4b 	bl	800a3bc <USB_InitFSLSPClkSel>
 8005726:	e011      	b.n	800574c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2101      	movs	r1, #1
 800572e:	4618      	mov	r0, r3
 8005730:	f004 fe44 	bl	800a3bc <USB_InitFSLSPClkSel>
 8005734:	e00a      	b.n	800574c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d106      	bne.n	800574c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005744:	461a      	mov	r2, r3
 8005746:	f64e 2360 	movw	r3, #60000	; 0xea60
 800574a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f008 fda3 	bl	800e298 <HAL_HCD_PortEnabled_Callback>
 8005752:	e002      	b.n	800575a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f008 fdad 	bl	800e2b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b20      	cmp	r3, #32
 8005762:	d103      	bne.n	800576c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f043 0320 	orr.w	r3, r3, #32
 800576a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	6013      	str	r3, [r2, #0]
}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e12b      	b.n	80059ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd f9a0 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057e4:	f001 fc4c 	bl	8007080 <HAL_RCC_GetPCLK1Freq>
 80057e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4a81      	ldr	r2, [pc, #516]	; (80059f4 <HAL_I2C_Init+0x274>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d807      	bhi.n	8005804 <HAL_I2C_Init+0x84>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a80      	ldr	r2, [pc, #512]	; (80059f8 <HAL_I2C_Init+0x278>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bf94      	ite	ls
 80057fc:	2301      	movls	r3, #1
 80057fe:	2300      	movhi	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e006      	b.n	8005812 <HAL_I2C_Init+0x92>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a7d      	ldr	r2, [pc, #500]	; (80059fc <HAL_I2C_Init+0x27c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	bf94      	ite	ls
 800580c:	2301      	movls	r3, #1
 800580e:	2300      	movhi	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0e7      	b.n	80059ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a78      	ldr	r2, [pc, #480]	; (8005a00 <HAL_I2C_Init+0x280>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	0c9b      	lsrs	r3, r3, #18
 8005824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4a6a      	ldr	r2, [pc, #424]	; (80059f4 <HAL_I2C_Init+0x274>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d802      	bhi.n	8005854 <HAL_I2C_Init+0xd4>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3301      	adds	r3, #1
 8005852:	e009      	b.n	8005868 <HAL_I2C_Init+0xe8>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	4a69      	ldr	r2, [pc, #420]	; (8005a04 <HAL_I2C_Init+0x284>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	099b      	lsrs	r3, r3, #6
 8005866:	3301      	adds	r3, #1
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	430b      	orrs	r3, r1
 800586e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800587a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	495c      	ldr	r1, [pc, #368]	; (80059f4 <HAL_I2C_Init+0x274>)
 8005884:	428b      	cmp	r3, r1
 8005886:	d819      	bhi.n	80058bc <HAL_I2C_Init+0x13c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1e59      	subs	r1, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	fbb1 f3f3 	udiv	r3, r1, r3
 8005896:	1c59      	adds	r1, r3, #1
 8005898:	f640 73fc 	movw	r3, #4092	; 0xffc
 800589c:	400b      	ands	r3, r1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_I2C_Init+0x138>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1e59      	subs	r1, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b0:	3301      	adds	r3, #1
 80058b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b6:	e051      	b.n	800595c <HAL_I2C_Init+0x1dc>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e04f      	b.n	800595c <HAL_I2C_Init+0x1dc>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d111      	bne.n	80058e8 <HAL_I2C_Init+0x168>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1e58      	subs	r0, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	440b      	add	r3, r1
 80058d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058d6:	3301      	adds	r3, #1
 80058d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e012      	b.n	800590e <HAL_I2C_Init+0x18e>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1e58      	subs	r0, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	0099      	lsls	r1, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fe:	3301      	adds	r3, #1
 8005900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_I2C_Init+0x196>
 8005912:	2301      	movs	r3, #1
 8005914:	e022      	b.n	800595c <HAL_I2C_Init+0x1dc>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10e      	bne.n	800593c <HAL_I2C_Init+0x1bc>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1e58      	subs	r0, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	440b      	add	r3, r1
 800592c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005930:	3301      	adds	r3, #1
 8005932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593a:	e00f      	b.n	800595c <HAL_I2C_Init+0x1dc>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1e58      	subs	r0, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	0099      	lsls	r1, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005952:	3301      	adds	r3, #1
 8005954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	6809      	ldr	r1, [r1, #0]
 8005960:	4313      	orrs	r3, r2
 8005962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800598a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6911      	ldr	r1, [r2, #16]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68d2      	ldr	r2, [r2, #12]
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	430b      	orrs	r3, r1
 800599e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	000186a0 	.word	0x000186a0
 80059f8:	001e847f 	.word	0x001e847f
 80059fc:	003d08ff 	.word	0x003d08ff
 8005a00:	431bde83 	.word	0x431bde83
 8005a04:	10624dd3 	.word	0x10624dd3

08005a08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	461a      	mov	r2, r3
 8005a14:	460b      	mov	r3, r1
 8005a16:	817b      	strh	r3, [r7, #10]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7fd fc06 	bl	800322c <HAL_GetTick>
 8005a20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	f040 80e0 	bne.w	8005bf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2319      	movs	r3, #25
 8005a36:	2201      	movs	r2, #1
 8005a38:	4970      	ldr	r1, [pc, #448]	; (8005bfc <HAL_I2C_Master_Transmit+0x1f4>)
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fc58 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	e0d3      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_I2C_Master_Transmit+0x50>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e0cc      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d007      	beq.n	8005a7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2221      	movs	r2, #33	; 0x21
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	893a      	ldrh	r2, [r7, #8]
 8005aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a50      	ldr	r2, [pc, #320]	; (8005c00 <HAL_I2C_Master_Transmit+0x1f8>)
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fac2 	bl	8006050 <I2C_MasterRequestWrite>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e08d      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005aec:	e066      	b.n	8005bbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fcd2 	bl	800649c <I2C_WaitOnTXEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d107      	bne.n	8005b16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e06b      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d11b      	bne.n	8005b90 <HAL_I2C_Master_Transmit+0x188>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d017      	beq.n	8005b90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	6a39      	ldr	r1, [r7, #32]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fcc2 	bl	800651e <I2C_WaitOnBTFFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00d      	beq.n	8005bbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d107      	bne.n	8005bb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e01a      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d194      	bne.n	8005aee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	00100002 	.word	0x00100002
 8005c00:	ffff0000 	.word	0xffff0000

08005c04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	; 0x30
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	460b      	mov	r3, r1
 8005c12:	817b      	strh	r3, [r7, #10]
 8005c14:	4613      	mov	r3, r2
 8005c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c18:	f7fd fb08 	bl	800322c <HAL_GetTick>
 8005c1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	f040 820b 	bne.w	8006042 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2319      	movs	r3, #25
 8005c32:	2201      	movs	r2, #1
 8005c34:	497c      	ldr	r1, [pc, #496]	; (8005e28 <HAL_I2C_Master_Receive+0x224>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fb5a 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e1fe      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2C_Master_Receive+0x50>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e1f7      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d007      	beq.n	8005c7a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2222      	movs	r2, #34	; 0x22
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2210      	movs	r2, #16
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	893a      	ldrh	r2, [r7, #8]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a5c      	ldr	r2, [pc, #368]	; (8005e2c <HAL_I2C_Master_Receive+0x228>)
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fa46 	bl	8006154 <I2C_MasterRequestRead>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e1b8      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d113      	bne.n	8005d02 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	623b      	str	r3, [r7, #32]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e18c      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d11b      	bne.n	8005d42 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e16c      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d11b      	bne.n	8005d82 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	e14c      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005da8:	e138      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	f200 80f1 	bhi.w	8005f96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d123      	bne.n	8005e04 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fbed 	bl	80065a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e139      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e02:	e10b      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d14e      	bne.n	8005eaa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2200      	movs	r2, #0
 8005e14:	4906      	ldr	r1, [pc, #24]	; (8005e30 <HAL_I2C_Master_Receive+0x22c>)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa6a 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e10e      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
 8005e26:	bf00      	nop
 8005e28:	00100002 	.word	0x00100002
 8005e2c:	ffff0000 	.word	0xffff0000
 8005e30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ea8:	e0b8      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4966      	ldr	r1, [pc, #408]	; (800604c <HAL_I2C_Master_Receive+0x448>)
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fa1b 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0bf      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	494f      	ldr	r1, [pc, #316]	; (800604c <HAL_I2C_Master_Receive+0x448>)
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f9ed 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e091      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f94:	e042      	b.n	800601c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fb00 	bl	80065a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e04c      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d118      	bne.n	800601c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	f47f aec2 	bne.w	8005daa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e000      	b.n	8006044 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
  }
}
 8006044:	4618      	mov	r0, r3
 8006046:	3728      	adds	r7, #40	; 0x28
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	00010004 	.word	0x00010004

08006050 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	460b      	mov	r3, r1
 800605e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d006      	beq.n	800607a <I2C_MasterRequestWrite+0x2a>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d003      	beq.n	800607a <I2C_MasterRequestWrite+0x2a>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006078:	d108      	bne.n	800608c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e00b      	b.n	80060a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b12      	cmp	r3, #18
 8006092:	d107      	bne.n	80060a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f91d 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ca:	d103      	bne.n	80060d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e035      	b.n	8006144 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e0:	d108      	bne.n	80060f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	e01b      	b.n	800612c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060f4:	897b      	ldrh	r3, [r7, #10]
 80060f6:	11db      	asrs	r3, r3, #7
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0306 	and.w	r3, r3, #6
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f063 030f 	orn	r3, r3, #15
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	490e      	ldr	r1, [pc, #56]	; (800614c <I2C_MasterRequestWrite+0xfc>)
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f943 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e010      	b.n	8006144 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006122:	897b      	ldrh	r3, [r7, #10]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4907      	ldr	r1, [pc, #28]	; (8006150 <I2C_MasterRequestWrite+0x100>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f933 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	00010008 	.word	0x00010008
 8006150:	00010002 	.word	0x00010002

08006154 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	460b      	mov	r3, r1
 8006162:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006178:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d006      	beq.n	800618e <I2C_MasterRequestRead+0x3a>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d003      	beq.n	800618e <I2C_MasterRequestRead+0x3a>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800618c:	d108      	bne.n	80061a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e00b      	b.n	80061b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b11      	cmp	r3, #17
 80061a6:	d107      	bne.n	80061b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f893 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061de:	d103      	bne.n	80061e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e079      	b.n	80062e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f4:	d108      	bne.n	8006208 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e05f      	b.n	80062c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	11db      	asrs	r3, r3, #7
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0306 	and.w	r3, r3, #6
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f063 030f 	orn	r3, r3, #15
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4930      	ldr	r1, [pc, #192]	; (80062e8 <I2C_MasterRequestRead+0x194>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f8b9 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e054      	b.n	80062e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4929      	ldr	r1, [pc, #164]	; (80062ec <I2C_MasterRequestRead+0x198>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8a9 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e044      	b.n	80062e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f831 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	d103      	bne.n	80062ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e017      	b.n	80062e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80062b0:	897b      	ldrh	r3, [r7, #10]
 80062b2:	11db      	asrs	r3, r3, #7
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0306 	and.w	r3, r3, #6
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f063 030e 	orn	r3, r3, #14
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4907      	ldr	r1, [pc, #28]	; (80062ec <I2C_MasterRequestRead+0x198>)
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f865 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	00010008 	.word	0x00010008
 80062ec:	00010002 	.word	0x00010002

080062f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006300:	e025      	b.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006308:	d021      	beq.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fc ff8f 	bl	800322c <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e023      	b.n	8006396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10d      	bne.n	8006374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	43da      	mvns	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	e00c      	b.n	800638e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	429a      	cmp	r2, r3
 8006392:	d0b6      	beq.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ac:	e051      	b.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063bc:	d123      	bne.n	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e046      	b.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640c:	d021      	beq.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fc ff0d 	bl	800322c <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d116      	bne.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e020      	b.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10c      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	43da      	mvns	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e00b      	b.n	800648e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	43da      	mvns	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d18d      	bne.n	80063ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a8:	e02d      	b.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f8ce 	bl	800664c <I2C_IsAcknowledgeFailed>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e02d      	b.n	8006516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c0:	d021      	beq.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fc feb3 	bl	800322c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d116      	bne.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e007      	b.n	8006516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d1ca      	bne.n	80064aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800652a:	e02d      	b.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f88d 	bl	800664c <I2C_IsAcknowledgeFailed>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e02d      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006542:	d021      	beq.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006544:	f7fc fe72 	bl	800322c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	429a      	cmp	r2, r3
 8006552:	d302      	bcc.n	800655a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d116      	bne.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e007      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b04      	cmp	r3, #4
 8006594:	d1ca      	bne.n	800652c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065ac:	e042      	b.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d119      	bne.n	80065f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0210 	mvn.w	r2, #16
 80065c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e029      	b.n	8006644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f0:	f7fc fe1c 	bl	800322c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d116      	bne.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e007      	b.n	8006644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	d1b5      	bne.n	80065ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006662:	d11b      	bne.n	800669c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800666c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d129      	bne.n	8006714 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	; 0x24
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0210 	bic.w	r2, r2, #16
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e000      	b.n	8006716 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006714:	2302      	movs	r3, #2
  }
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b20      	cmp	r3, #32
 800673a:	d12a      	bne.n	8006792 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	f023 030f 	bic.w	r3, r3, #15
 8006762:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b29a      	uxth	r2, r3
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	4313      	orrs	r3, r2
 800676c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	89fa      	ldrh	r2, [r7, #14]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0201 	orr.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e267      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d075      	beq.n	80068aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067be:	4b88      	ldr	r3, [pc, #544]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d00c      	beq.n	80067e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ca:	4b85      	ldr	r3, [pc, #532]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d112      	bne.n	80067fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d6:	4b82      	ldr	r3, [pc, #520]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e2:	d10b      	bne.n	80067fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	4b7e      	ldr	r3, [pc, #504]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05b      	beq.n	80068a8 <HAL_RCC_OscConfig+0x108>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d157      	bne.n	80068a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e242      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d106      	bne.n	8006814 <HAL_RCC_OscConfig+0x74>
 8006806:	4b76      	ldr	r3, [pc, #472]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a75      	ldr	r2, [pc, #468]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800680c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e01d      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0x98>
 800681e:	4b70      	ldr	r3, [pc, #448]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a6f      	ldr	r2, [pc, #444]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4b6d      	ldr	r3, [pc, #436]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6c      	ldr	r2, [pc, #432]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e00b      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006838:	4b69      	ldr	r3, [pc, #420]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800683e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b66      	ldr	r3, [pc, #408]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a65      	ldr	r2, [pc, #404]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800684a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006858:	f7fc fce8 	bl	800322c <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006860:	f7fc fce4 	bl	800322c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e207      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	4b5b      	ldr	r3, [pc, #364]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0xc0>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fc fcd4 	bl	800322c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006888:	f7fc fcd0 	bl	800322c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	; 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1f3      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689a:	4b51      	ldr	r3, [pc, #324]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0xe8>
 80068a6:	e000      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d063      	beq.n	800697e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068b6:	4b4a      	ldr	r3, [pc, #296]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068c2:	4b47      	ldr	r3, [pc, #284]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d11c      	bne.n	8006908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ce:	4b44      	ldr	r3, [pc, #272]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d116      	bne.n	8006908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_RCC_OscConfig+0x152>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d001      	beq.n	80068f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e1c7      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	4b3b      	ldr	r3, [pc, #236]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4937      	ldr	r1, [pc, #220]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006906:	e03a      	b.n	800697e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_RCC_OscConfig+0x244>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006916:	f7fc fc89 	bl	800322c <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800691e:	f7fc fc85 	bl	800322c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1a8      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006930:	4b2b      	ldr	r3, [pc, #172]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693c:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4925      	ldr	r1, [pc, #148]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	e015      	b.n	800697e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_RCC_OscConfig+0x244>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fc fc68 	bl	800322c <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006960:	f7fc fc64 	bl	800322c <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e187      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d036      	beq.n	80069f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_RCC_OscConfig+0x248>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fc fc48 	bl	800322c <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069a0:	f7fc fc44 	bl	800322c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e167      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCC_OscConfig+0x240>)
 80069b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x200>
 80069be:	e01b      	b.n	80069f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <HAL_RCC_OscConfig+0x248>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c6:	f7fc fc31 	bl	800322c <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069cc:	e00e      	b.n	80069ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ce:	f7fc fc2d 	bl	800322c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d907      	bls.n	80069ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e150      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
 80069e0:	40023800 	.word	0x40023800
 80069e4:	42470000 	.word	0x42470000
 80069e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ec:	4b88      	ldr	r3, [pc, #544]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ea      	bne.n	80069ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8097 	beq.w	8006b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b81      	ldr	r3, [pc, #516]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a7c      	ldr	r2, [pc, #496]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b77      	ldr	r3, [pc, #476]	; (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d118      	bne.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a42:	4b74      	ldr	r3, [pc, #464]	; (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a73      	ldr	r2, [pc, #460]	; (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fc fbed 	bl	800322c <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a56:	f7fc fbe9 	bl	800322c <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e10c      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x2ea>
 8006a7c:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	4a63      	ldr	r2, [pc, #396]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6713      	str	r3, [r2, #112]	; 0x70
 8006a88:	e01c      	b.n	8006ac4 <HAL_RCC_OscConfig+0x324>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0x30c>
 8006a92:	4b5f      	ldr	r3, [pc, #380]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a96:	4a5e      	ldr	r2, [pc, #376]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a5b      	ldr	r2, [pc, #364]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCC_OscConfig+0x324>
 8006aac:	4b58      	ldr	r3, [pc, #352]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	4a57      	ldr	r2, [pc, #348]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab8:	4b55      	ldr	r3, [pc, #340]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	4a54      	ldr	r2, [pc, #336]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006abe:	f023 0304 	bic.w	r3, r3, #4
 8006ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006acc:	f7fc fbae 	bl	800322c <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad4:	f7fc fbaa 	bl	800322c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0cb      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aea:	4b49      	ldr	r3, [pc, #292]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ee      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x334>
 8006af6:	e014      	b.n	8006b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af8:	f7fc fb98 	bl	800322c <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fc fb94 	bl	800322c <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e0b5      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ee      	bne.n	8006b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	4a38      	ldr	r2, [pc, #224]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80a1 	beq.w	8006c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b3e:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d05c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d141      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b52:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fc fb68 	bl	800322c <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fc fb64 	bl	800322c <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e087      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b72:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	019b      	lsls	r3, r3, #6
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	3b01      	subs	r3, #1
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	491b      	ldr	r1, [pc, #108]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bae:	f7fc fb3d 	bl	800322c <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb6:	f7fc fb39 	bl	800322c <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e05c      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x416>
 8006bd4:	e054      	b.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fc fb26 	bl	800322c <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fc fb22 	bl	800322c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e045      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x444>
 8006c02:	e03d      	b.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d107      	bne.n	8006c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e038      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40007000 	.word	0x40007000
 8006c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCC_OscConfig+0x4ec>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d028      	beq.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d121      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d11a      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d111      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	3b01      	subs	r3, #1
 8006c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800

08006c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0cc      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b68      	ldr	r3, [pc, #416]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d90c      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b65      	ldr	r3, [pc, #404]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b63      	ldr	r3, [pc, #396]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0b8      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce4:	4b59      	ldr	r3, [pc, #356]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4a58      	ldr	r2, [pc, #352]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cfc:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a52      	ldr	r2, [pc, #328]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	494d      	ldr	r1, [pc, #308]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d044      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d119      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e07f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d003      	beq.n	8006d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e06f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5e:	4b3b      	ldr	r3, [pc, #236]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e067      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6e:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 0203 	bic.w	r2, r3, #3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4934      	ldr	r1, [pc, #208]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d80:	f7fc fa54 	bl	800322c <HAL_GetTick>
 8006d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d88:	f7fc fa50 	bl	800322c <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e04f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 020c 	and.w	r2, r3, #12
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d1eb      	bne.n	8006d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20c      	bcs.n	8006dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dbe:	4b22      	ldr	r3, [pc, #136]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e032      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4916      	ldr	r1, [pc, #88]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	490e      	ldr	r1, [pc, #56]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e16:	f000 f821 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	490a      	ldr	r1, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x1c0>)
 8006e28:	5ccb      	ldrb	r3, [r1, r3]
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc f9b4 	bl	80031a4 <HAL_InitTick>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40023c00 	.word	0x40023c00
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	080100ec 	.word	0x080100ec
 8006e54:	20000004 	.word	0x20000004
 8006e58:	20000008 	.word	0x20000008

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e60:	b094      	sub	sp, #80	; 0x50
 8006e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44
 8006e68:	2300      	movs	r3, #0
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e74:	4b79      	ldr	r3, [pc, #484]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d00d      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x40>
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	f200 80e1 	bhi.w	8007048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0x34>
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e8e:	e0db      	b.n	8007048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b73      	ldr	r3, [pc, #460]	; (8007060 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e94:	e0db      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e96:	4b73      	ldr	r3, [pc, #460]	; (8007064 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e9a:	e0d8      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e9c:	4b6f      	ldr	r3, [pc, #444]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ea6:	4b6d      	ldr	r3, [pc, #436]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d063      	beq.n	8006f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	2200      	movs	r2, #0
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	0159      	lsls	r1, r3, #5
 8006edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ee0:	0150      	lsls	r0, r2, #5
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	1a51      	subs	r1, r2, r1
 8006eea:	6139      	str	r1, [r7, #16]
 8006eec:	4629      	mov	r1, r5
 8006eee:	eb63 0301 	sbc.w	r3, r3, r1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f00:	4659      	mov	r1, fp
 8006f02:	018b      	lsls	r3, r1, #6
 8006f04:	4651      	mov	r1, sl
 8006f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	018a      	lsls	r2, r1, #6
 8006f0e:	4651      	mov	r1, sl
 8006f10:	ebb2 0801 	subs.w	r8, r2, r1
 8006f14:	4659      	mov	r1, fp
 8006f16:	eb63 0901 	sbc.w	r9, r3, r1
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f2e:	4690      	mov	r8, r2
 8006f30:	4699      	mov	r9, r3
 8006f32:	4623      	mov	r3, r4
 8006f34:	eb18 0303 	adds.w	r3, r8, r3
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	eb49 0303 	adc.w	r3, r9, r3
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f4e:	4629      	mov	r1, r5
 8006f50:	024b      	lsls	r3, r1, #9
 8006f52:	4621      	mov	r1, r4
 8006f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f58:	4621      	mov	r1, r4
 8006f5a:	024a      	lsls	r2, r1, #9
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f62:	2200      	movs	r2, #0
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f6c:	f7f9 f990 	bl	8000290 <__aeabi_uldivmod>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4613      	mov	r3, r2
 8006f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f78:	e058      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	099b      	lsrs	r3, r3, #6
 8006f80:	2200      	movs	r2, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	4611      	mov	r1, r2
 8006f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	f04f 0000 	mov.w	r0, #0
 8006f9c:	f04f 0100 	mov.w	r1, #0
 8006fa0:	0159      	lsls	r1, r3, #5
 8006fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fa6:	0150      	lsls	r0, r2, #5
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4641      	mov	r1, r8
 8006fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8006fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	00eb      	lsls	r3, r5, #3
 8006fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fe2:	00e2      	lsls	r2, r4, #3
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	4643      	mov	r3, r8
 8006fea:	18e3      	adds	r3, r4, r3
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	464b      	mov	r3, r9
 8006ff0:	eb45 0303 	adc.w	r3, r5, r3
 8006ff4:	607b      	str	r3, [r7, #4]
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007002:	4629      	mov	r1, r5
 8007004:	028b      	lsls	r3, r1, #10
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800700c:	4621      	mov	r1, r4
 800700e:	028a      	lsls	r2, r1, #10
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007016:	2200      	movs	r2, #0
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	61fa      	str	r2, [r7, #28]
 800701c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007020:	f7f9 f936 	bl	8000290 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4613      	mov	r3, r2
 800702a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_RCC_GetSysClockFreq+0x200>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	0c1b      	lsrs	r3, r3, #16
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	3301      	adds	r3, #1
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800703c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800703e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007046:	e002      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <HAL_RCC_GetSysClockFreq+0x204>)
 800704a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800704c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800704e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007050:	4618      	mov	r0, r3
 8007052:	3750      	adds	r7, #80	; 0x50
 8007054:	46bd      	mov	sp, r7
 8007056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	00f42400 	.word	0x00f42400
 8007064:	007a1200 	.word	0x007a1200

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <HAL_RCC_GetHCLKFreq+0x14>)
 800706e:	681b      	ldr	r3, [r3, #0]
}
 8007070:	4618      	mov	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000004 	.word	0x20000004

08007080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007084:	f7ff fff0 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 8007088:	4602      	mov	r2, r0
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	0a9b      	lsrs	r3, r3, #10
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	4903      	ldr	r1, [pc, #12]	; (80070a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007096:	5ccb      	ldrb	r3, [r1, r3]
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40023800 	.word	0x40023800
 80070a4:	080100fc 	.word	0x080100fc

080070a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070ac:	f7ff ffdc 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0b5b      	lsrs	r3, r3, #13
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	4903      	ldr	r1, [pc, #12]	; (80070cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	080100fc 	.word	0x080100fc

080070d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e07b      	b.n	80071da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d108      	bne.n	80070fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f2:	d009      	beq.n	8007108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	61da      	str	r2, [r3, #28]
 80070fa:	e005      	b.n	8007108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fb fd82 	bl	8002c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718c:	ea42 0103 	orr.w	r1, r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	f003 0104 	and.w	r1, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0210 	and.w	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_SPI_Transmit+0x22>
 8007200:	2302      	movs	r3, #2
 8007202:	e126      	b.n	8007452 <HAL_SPI_Transmit+0x270>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800720c:	f7fc f80e 	bl	800322c <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d002      	beq.n	8007228 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007226:	e10b      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x52>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007238:	e102      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007280:	d10f      	bne.n	80072a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d007      	beq.n	80072c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c8:	d14b      	bne.n	8007362 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_SPI_Transmit+0xf6>
 80072d2:	8afb      	ldrh	r3, [r7, #22]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d13e      	bne.n	8007356 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072fc:	e02b      	b.n	8007356 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d112      	bne.n	8007332 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007330:	e011      	b.n	8007356 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007332:	f7fb ff7b 	bl	800322c <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d803      	bhi.n	800734a <HAL_SPI_Transmit+0x168>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007348:	d102      	bne.n	8007350 <HAL_SPI_Transmit+0x16e>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007354:	e074      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ce      	bne.n	80072fe <HAL_SPI_Transmit+0x11c>
 8007360:	e04c      	b.n	80073fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_SPI_Transmit+0x18e>
 800736a:	8afb      	ldrh	r3, [r7, #22]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d140      	bne.n	80073f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007396:	e02c      	b.n	80073f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d113      	bne.n	80073ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80073cc:	e011      	b.n	80073f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ce:	f7fb ff2d 	bl	800322c <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d803      	bhi.n	80073e6 <HAL_SPI_Transmit+0x204>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e4:	d102      	bne.n	80073ec <HAL_SPI_Transmit+0x20a>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073f0:	e026      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1cd      	bne.n	8007398 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fbcb 	bl	8007b9c <SPI_EndRxTxTransaction>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	e000      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

error:
 800743e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007450:	7ffb      	ldrb	r3, [r7, #31]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b088      	sub	sp, #32
 800745e:	af02      	add	r7, sp, #8
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	603b      	str	r3, [r7, #0]
 8007466:	4613      	mov	r3, r2
 8007468:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007476:	d112      	bne.n	800749e <HAL_SPI_Receive+0x44>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10e      	bne.n	800749e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2204      	movs	r2, #4
 8007484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f8f1 	bl	800767c <HAL_SPI_TransmitReceive>
 800749a:	4603      	mov	r3, r0
 800749c:	e0ea      	b.n	8007674 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_SPI_Receive+0x52>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e0e3      	b.n	8007674 <HAL_SPI_Receive+0x21a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b4:	f7fb feba 	bl	800322c <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d002      	beq.n	80074cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
 80074c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ca:	e0ca      	b.n	8007662 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_SPI_Receive+0x7e>
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074dc:	e0c1      	b.n	8007662 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2204      	movs	r2, #4
 80074e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007524:	d10f      	bne.n	8007546 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007544:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d007      	beq.n	8007564 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d162      	bne.n	8007632 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800756c:	e02e      	b.n	80075cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	d115      	bne.n	80075a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f103 020c 	add.w	r2, r3, #12
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075a6:	e011      	b.n	80075cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a8:	f7fb fe40 	bl	800322c <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d803      	bhi.n	80075c0 <HAL_SPI_Receive+0x166>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075be:	d102      	bne.n	80075c6 <HAL_SPI_Receive+0x16c>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075ca:	e04a      	b.n	8007662 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1cb      	bne.n	800756e <HAL_SPI_Receive+0x114>
 80075d6:	e031      	b.n	800763c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d113      	bne.n	800760e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	b292      	uxth	r2, r2
 80075f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	1c9a      	adds	r2, r3, #2
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760c:	e011      	b.n	8007632 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760e:	f7fb fe0d 	bl	800322c <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d803      	bhi.n	8007626 <HAL_SPI_Receive+0x1cc>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007624:	d102      	bne.n	800762c <HAL_SPI_Receive+0x1d2>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007630:	e017      	b.n	8007662 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1cd      	bne.n	80075d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fa45 	bl	8007ad0 <SPI_EndRxTransaction>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]
 800765e:	e000      	b.n	8007662 <HAL_SPI_Receive+0x208>
  }

error :
 8007660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800768a:	2301      	movs	r3, #1
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x26>
 800769e:	2302      	movs	r3, #2
 80076a0:	e18a      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x33c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076aa:	f7fb fdbf 	bl	800322c <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d00f      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x70>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d2:	d107      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x68>
 80076dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d003      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ea:	e15b      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x82>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x82>
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007704:	e14e      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b04      	cmp	r3, #4
 8007710:	d003      	beq.n	800771a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2205      	movs	r2, #5
 8007716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	887a      	ldrh	r2, [r7, #2]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	887a      	ldrh	r2, [r7, #2]
 8007730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	887a      	ldrh	r2, [r7, #2]
 800773c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	887a      	ldrh	r2, [r7, #2]
 8007742:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d007      	beq.n	800776e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d178      	bne.n	800786a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_SPI_TransmitReceive+0x10a>
 8007780:	8b7b      	ldrh	r3, [r7, #26]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d166      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	881a      	ldrh	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	1c9a      	adds	r2, r3, #2
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077aa:	e053      	b.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d11b      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d016      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d113      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	881a      	ldrh	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d119      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x1b8>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	b292      	uxth	r2, r2
 8007816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007830:	2301      	movs	r3, #1
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007834:	f7fb fcfa 	bl	800322c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	429a      	cmp	r2, r3
 8007842:	d807      	bhi.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800784a:	d003      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007852:	e0a7      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1a6      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x130>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1a1      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x130>
 8007868:	e07c      	b.n	8007964 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x1fc>
 8007872:	8b7b      	ldrh	r3, [r7, #26]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d16b      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789e:	e057      	b.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d11c      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d114      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d119      	bne.n	800792a <HAL_SPI_TransmitReceive+0x2ae>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d014      	beq.n	800792a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007926:	2301      	movs	r3, #1
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800792a:	f7fb fc7f 	bl	800322c <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007936:	429a      	cmp	r2, r3
 8007938:	d803      	bhi.n	8007942 <HAL_SPI_TransmitReceive+0x2c6>
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007940:	d102      	bne.n	8007948 <HAL_SPI_TransmitReceive+0x2cc>
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794e:	e029      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1a2      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x224>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d19d      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f917 	bl	8007b9c <SPI_EndRxTxTransaction>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007980:	e010      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	e000      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3730      	adds	r7, #48	; 0x30
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d0:	f7fb fc2c 	bl	800322c <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e0:	f7fb fc24 	bl	800322c <HAL_GetTick>
 80079e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	e054      	b.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fe:	d050      	beq.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a00:	f7fb fc14 	bl	800322c <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d902      	bls.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2e:	d111      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a38:	d004      	beq.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d107      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d10f      	bne.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e017      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d19b      	bne.n	80079f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000004 	.word	0x20000004

08007ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae4:	d111      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aee:	d004      	beq.n	8007afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d107      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b12:	d12a      	bne.n	8007b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d012      	beq.n	8007b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff49 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02d      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e026      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ff36 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01a      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e013      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2101      	movs	r1, #1
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff ff23 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e000      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <SPI_EndRxTxTransaction+0x7c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <SPI_EndRxTxTransaction+0x80>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	0d5b      	lsrs	r3, r3, #21
 8007bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc6:	d112      	bne.n	8007bee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fef4 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e00f      	b.n	8007c0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c04:	2b80      	cmp	r3, #128	; 0x80
 8007c06:	d0f2      	beq.n	8007bee <SPI_EndRxTxTransaction+0x52>
 8007c08:	e000      	b.n	8007c0c <SPI_EndRxTxTransaction+0x70>
        break;
 8007c0a:	bf00      	nop
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	165e9f81 	.word	0x165e9f81

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e041      	b.n	8007cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fb f890 	bl	8002d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fc12 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e041      	b.n	8007d54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f839 	bl	8007d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f000 fbc3 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d855      	bhi.n	8007e30 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007d84:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007dc1 	.word	0x08007dc1
 8007d90:	08007e31 	.word	0x08007e31
 8007d94:	08007e31 	.word	0x08007e31
 8007d98:	08007e31 	.word	0x08007e31
 8007d9c:	08007ddd 	.word	0x08007ddd
 8007da0:	08007e31 	.word	0x08007e31
 8007da4:	08007e31 	.word	0x08007e31
 8007da8:	08007e31 	.word	0x08007e31
 8007dac:	08007df9 	.word	0x08007df9
 8007db0:	08007e31 	.word	0x08007e31
 8007db4:	08007e31 	.word	0x08007e31
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e15 	.word	0x08007e15
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007dce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fb fca5 	bl	8003724 <HAL_DMA_Abort_IT>
      break;
 8007dda:	e02c      	b.n	8007e36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fb fc97 	bl	8003724 <HAL_DMA_Abort_IT>
      break;
 8007df6:	e01e      	b.n	8007e36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fb fc89 	bl	8003724 <HAL_DMA_Abort_IT>
      break;
 8007e12:	e010      	b.n	8007e36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fb fc7b 	bl	8003724 <HAL_DMA_Abort_IT>
      break;
 8007e2e:	e002      	b.n	8007e36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	73fb      	strb	r3, [r7, #15]
      break;
 8007e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d161      	bne.n	8007f00 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2200      	movs	r2, #0
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fe09 	bl	8008a5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_PWM_Stop_DMA+0xee>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a2d      	ldr	r2, [pc, #180]	; (8007f10 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d101      	bne.n	8007e62 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007e62:	2300      	movs	r3, #0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d017      	beq.n	8007e98 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10f      	bne.n	8007e98 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	f240 4344 	movw	r3, #1092	; 0x444
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	f240 4344 	movw	r3, #1092	; 0x444
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <HAL_TIM_PWM_Stop_DMA+0x168>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed6:	e013      	b.n	8007f00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d104      	bne.n	8007ee8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee6:	e00b      	b.n	8007f00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d104      	bne.n	8007ef8 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef6:	e003      	b.n	8007f00 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40010400 	.word	0x40010400

08007f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d122      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d11b      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0202 	mvn.w	r2, #2
 8007f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa81 	bl	800845e <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa73 	bl	800844a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fa fce3 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d122      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0204 	mvn.w	r2, #4
 8007f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa57 	bl	800845e <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa49 	bl	800844a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fa fcb9 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d122      	bne.n	8008018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d11b      	bne.n	8008018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0208 	mvn.w	r2, #8
 8007fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa2d 	bl	800845e <HAL_TIM_IC_CaptureCallback>
 8008004:	e005      	b.n	8008012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa1f 	bl	800844a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fa fc8f 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b10      	cmp	r3, #16
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0210 	mvn.w	r2, #16
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2208      	movs	r2, #8
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa03 	bl	800845e <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9f5 	bl	800844a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fa fc65 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10e      	bne.n	8008098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b01      	cmp	r3, #1
 8008086:	d107      	bne.n	8008098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0201 	mvn.w	r2, #1
 8008090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9cf 	bl	8008436 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a2:	2b80      	cmp	r3, #128	; 0x80
 80080a4:	d10e      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b80      	cmp	r3, #128	; 0x80
 80080b2:	d107      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fd78 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d10e      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d107      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9c1 	bl	8008472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d10e      	bne.n	800811c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b20      	cmp	r3, #32
 800810a:	d107      	bne.n	800811c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0220 	mvn.w	r2, #32
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fd42 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800813e:	2302      	movs	r3, #2
 8008140:	e0ae      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b0c      	cmp	r3, #12
 800814e:	f200 809f 	bhi.w	8008290 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	0800818d 	.word	0x0800818d
 800815c:	08008291 	.word	0x08008291
 8008160:	08008291 	.word	0x08008291
 8008164:	08008291 	.word	0x08008291
 8008168:	080081cd 	.word	0x080081cd
 800816c:	08008291 	.word	0x08008291
 8008170:	08008291 	.word	0x08008291
 8008174:	08008291 	.word	0x08008291
 8008178:	0800820f 	.word	0x0800820f
 800817c:	08008291 	.word	0x08008291
 8008180:	08008291 	.word	0x08008291
 8008184:	08008291 	.word	0x08008291
 8008188:	0800824f 	.word	0x0800824f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa18 	bl	80085c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0208 	orr.w	r2, r2, #8
 80081a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0204 	bic.w	r2, r2, #4
 80081b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	619a      	str	r2, [r3, #24]
      break;
 80081ca:	e064      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa68 	bl	80086a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	619a      	str	r2, [r3, #24]
      break;
 800820c:	e043      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fabd 	bl	8008794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0208 	orr.w	r2, r2, #8
 8008228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0204 	bic.w	r2, r2, #4
 8008238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69d9      	ldr	r1, [r3, #28]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	61da      	str	r2, [r3, #28]
      break;
 800824c:	e023      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fb11 	bl	800887c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	021a      	lsls	r2, r3, #8
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	61da      	str	r2, [r3, #28]
      break;
 800828e:	e002      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
      break;
 8008294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIM_ConfigClockSource+0x1c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0b4      	b.n	800842e <HAL_TIM_ConfigClockSource+0x186>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fc:	d03e      	beq.n	800837c <HAL_TIM_ConfigClockSource+0xd4>
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	f200 8087 	bhi.w	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	f000 8086 	beq.w	800841a <HAL_TIM_ConfigClockSource+0x172>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	d87f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b70      	cmp	r3, #112	; 0x70
 8008316:	d01a      	beq.n	800834e <HAL_TIM_ConfigClockSource+0xa6>
 8008318:	2b70      	cmp	r3, #112	; 0x70
 800831a:	d87b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b60      	cmp	r3, #96	; 0x60
 800831e:	d050      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008320:	2b60      	cmp	r3, #96	; 0x60
 8008322:	d877      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b50      	cmp	r3, #80	; 0x50
 8008326:	d03c      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008328:	2b50      	cmp	r3, #80	; 0x50
 800832a:	d873      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d058      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d86f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d064      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008338:	2b30      	cmp	r3, #48	; 0x30
 800833a:	d86b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b20      	cmp	r3, #32
 800833e:	d060      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	2b20      	cmp	r3, #32
 8008342:	d867      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d05c      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008348:	2b10      	cmp	r3, #16
 800834a:	d05a      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 800834c:	e062      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6899      	ldr	r1, [r3, #8]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f000 fb5d 	bl	8008a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	609a      	str	r2, [r3, #8]
      break;
 800837a:	e04f      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	6899      	ldr	r1, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f000 fb46 	bl	8008a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800839e:	609a      	str	r2, [r3, #8]
      break;
 80083a0:	e03c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f000 faba 	bl	8008928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2150      	movs	r1, #80	; 0x50
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fb13 	bl	80089e6 <TIM_ITRx_SetConfig>
      break;
 80083c0:	e02c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6859      	ldr	r1, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f000 fad9 	bl	8008986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2160      	movs	r1, #96	; 0x60
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb03 	bl	80089e6 <TIM_ITRx_SetConfig>
      break;
 80083e0:	e01c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f000 fa9a 	bl	8008928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 faf3 	bl	80089e6 <TIM_ITRx_SetConfig>
      break;
 8008400:	e00c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f000 faea 	bl	80089e6 <TIM_ITRx_SetConfig>
      break;
 8008412:	e003      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
      break;
 8008418:	e000      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800841a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a40      	ldr	r2, [pc, #256]	; (800859c <TIM_Base_SetConfig+0x114>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a6:	d00f      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a3d      	ldr	r2, [pc, #244]	; (80085a0 <TIM_Base_SetConfig+0x118>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00b      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <TIM_Base_SetConfig+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a3b      	ldr	r2, [pc, #236]	; (80085a8 <TIM_Base_SetConfig+0x120>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a3a      	ldr	r2, [pc, #232]	; (80085ac <TIM_Base_SetConfig+0x124>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d108      	bne.n	80084da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a2f      	ldr	r2, [pc, #188]	; (800859c <TIM_Base_SetConfig+0x114>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d02b      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e8:	d027      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a2c      	ldr	r2, [pc, #176]	; (80085a0 <TIM_Base_SetConfig+0x118>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d023      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2b      	ldr	r2, [pc, #172]	; (80085a4 <TIM_Base_SetConfig+0x11c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01f      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2a      	ldr	r2, [pc, #168]	; (80085a8 <TIM_Base_SetConfig+0x120>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01b      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a29      	ldr	r2, [pc, #164]	; (80085ac <TIM_Base_SetConfig+0x124>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d017      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a28      	ldr	r2, [pc, #160]	; (80085b0 <TIM_Base_SetConfig+0x128>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <TIM_Base_SetConfig+0x12c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a26      	ldr	r2, [pc, #152]	; (80085b8 <TIM_Base_SetConfig+0x130>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a25      	ldr	r2, [pc, #148]	; (80085bc <TIM_Base_SetConfig+0x134>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a24      	ldr	r2, [pc, #144]	; (80085c0 <TIM_Base_SetConfig+0x138>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_Base_SetConfig+0xb2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a23      	ldr	r2, [pc, #140]	; (80085c4 <TIM_Base_SetConfig+0x13c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d108      	bne.n	800854c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a0a      	ldr	r2, [pc, #40]	; (800859c <TIM_Base_SetConfig+0x114>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_Base_SetConfig+0xf8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <TIM_Base_SetConfig+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d103      	bne.n	8008588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	615a      	str	r2, [r3, #20]
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40010000 	.word	0x40010000
 80085a0:	40000400 	.word	0x40000400
 80085a4:	40000800 	.word	0x40000800
 80085a8:	40000c00 	.word	0x40000c00
 80085ac:	40010400 	.word	0x40010400
 80085b0:	40014000 	.word	0x40014000
 80085b4:	40014400 	.word	0x40014400
 80085b8:	40014800 	.word	0x40014800
 80085bc:	40001800 	.word	0x40001800
 80085c0:	40001c00 	.word	0x40001c00
 80085c4:	40002000 	.word	0x40002000

080085c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0201 	bic.w	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0303 	bic.w	r3, r3, #3
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f023 0302 	bic.w	r3, r3, #2
 8008610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <TIM_OC1_SetConfig+0xd8>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_OC1_SetConfig+0x64>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a1f      	ldr	r2, [pc, #124]	; (80086a4 <TIM_OC1_SetConfig+0xdc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d10c      	bne.n	8008646 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0308 	bic.w	r3, r3, #8
 8008632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 0304 	bic.w	r3, r3, #4
 8008644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <TIM_OC1_SetConfig+0xd8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_OC1_SetConfig+0x8e>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <TIM_OC1_SetConfig+0xdc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d111      	bne.n	800867a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800865c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	621a      	str	r2, [r3, #32]
}
 8008694:	bf00      	nop
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400

080086a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f023 0210 	bic.w	r2, r3, #16
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a22      	ldr	r2, [pc, #136]	; (800878c <TIM_OC2_SetConfig+0xe4>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC2_SetConfig+0x68>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a21      	ldr	r2, [pc, #132]	; (8008790 <TIM_OC2_SetConfig+0xe8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10d      	bne.n	800872c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800872a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a17      	ldr	r2, [pc, #92]	; (800878c <TIM_OC2_SetConfig+0xe4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <TIM_OC2_SetConfig+0x94>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a16      	ldr	r2, [pc, #88]	; (8008790 <TIM_OC2_SetConfig+0xe8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d113      	bne.n	8008764 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800874a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	621a      	str	r2, [r3, #32]
}
 800877e:	bf00      	nop
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400

08008794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0303 	bic.w	r3, r3, #3
 80087ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a21      	ldr	r2, [pc, #132]	; (8008874 <TIM_OC3_SetConfig+0xe0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_OC3_SetConfig+0x66>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a20      	ldr	r2, [pc, #128]	; (8008878 <TIM_OC3_SetConfig+0xe4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d10d      	bne.n	8008816 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a16      	ldr	r2, [pc, #88]	; (8008874 <TIM_OC3_SetConfig+0xe0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_OC3_SetConfig+0x92>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a15      	ldr	r2, [pc, #84]	; (8008878 <TIM_OC3_SetConfig+0xe4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d113      	bne.n	800884e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	621a      	str	r2, [r3, #32]
}
 8008868:	bf00      	nop
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	40010000 	.word	0x40010000
 8008878:	40010400 	.word	0x40010400

0800887c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	031b      	lsls	r3, r3, #12
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a12      	ldr	r2, [pc, #72]	; (8008920 <TIM_OC4_SetConfig+0xa4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC4_SetConfig+0x68>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a11      	ldr	r2, [pc, #68]	; (8008924 <TIM_OC4_SetConfig+0xa8>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d109      	bne.n	80088f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	019b      	lsls	r3, r3, #6
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40010000 	.word	0x40010000
 8008924:	40010400 	.word	0x40010400

08008928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f023 0201 	bic.w	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f023 030a 	bic.w	r3, r3, #10
 8008964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	621a      	str	r2, [r3, #32]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f023 0210 	bic.w	r2, r3, #16
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	031b      	lsls	r3, r3, #12
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	621a      	str	r2, [r3, #32]
}
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f043 0307 	orr.w	r3, r3, #7
 8008a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	609a      	str	r2, [r3, #8]
}
 8008a10:	bf00      	nop
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	021a      	lsls	r2, r3, #8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	609a      	str	r2, [r3, #8]
}
 8008a50:	bf00      	nop
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f003 031f 	and.w	r3, r3, #31
 8008a6e:	2201      	movs	r2, #1
 8008a70:	fa02 f303 	lsl.w	r3, r2, r3
 8008a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a1a      	ldr	r2, [r3, #32]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	401a      	ands	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a1a      	ldr	r2, [r3, #32]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 031f 	and.w	r3, r3, #31
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	fa01 f303 	lsl.w	r3, r1, r3
 8008a94:	431a      	orrs	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e05a      	b.n	8008b76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a21      	ldr	r2, [pc, #132]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d022      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0c:	d01d      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1d      	ldr	r2, [pc, #116]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1a      	ldr	r2, [pc, #104]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00e      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10c      	bne.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40010400 	.word	0x40010400
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40001800 	.word	0x40001800

08008ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e03f      	b.n	8008c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fa f964 	bl	8002ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2224      	movs	r2, #36	; 0x24
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fe81 	bl	8009914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b08a      	sub	sp, #40	; 0x28
 8008c66:	af02      	add	r7, sp, #8
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d17c      	bne.n	8008d7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <HAL_UART_Transmit+0x2c>
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e075      	b.n	8008d7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_UART_Transmit+0x3e>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e06e      	b.n	8008d7e <HAL_UART_Transmit+0x11c>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2221      	movs	r2, #33	; 0x21
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cb6:	f7fa fab9 	bl	800322c <HAL_GetTick>
 8008cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	88fa      	ldrh	r2, [r7, #6]
 8008cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	88fa      	ldrh	r2, [r7, #6]
 8008cc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd0:	d108      	bne.n	8008ce4 <HAL_UART_Transmit+0x82>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	e003      	b.n	8008cec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cf4:	e02a      	b.n	8008d4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2180      	movs	r1, #128	; 0x80
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fbc1 	bl	8009488 <UART_WaitOnFlagUntilTimeout>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e036      	b.n	8008d7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	3302      	adds	r3, #2
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	e007      	b.n	8008d3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	3b01      	subs	r3, #1
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1cf      	bne.n	8008cf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2140      	movs	r1, #64	; 0x40
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fb91 	bl	8009488 <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e006      	b.n	8008d7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e000      	b.n	8008d7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d7c:	2302      	movs	r3, #2
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b08a      	sub	sp, #40	; 0x28
 8008d8a:	af02      	add	r7, sp, #8
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	f040 808c 	bne.w	8008ec0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_UART_Receive+0x2e>
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e084      	b.n	8008ec2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Receive+0x40>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e07d      	b.n	8008ec2 <HAL_UART_Receive+0x13c>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2222      	movs	r2, #34	; 0x22
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008de2:	f7fa fa23 	bl	800322c <HAL_GetTick>
 8008de6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfc:	d108      	bne.n	8008e10 <HAL_UART_Receive+0x8a>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	e003      	b.n	8008e18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008e20:	e043      	b.n	8008eaa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2120      	movs	r1, #32
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fb2b 	bl	8009488 <UART_WaitOnFlagUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e042      	b.n	8008ec2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10c      	bne.n	8008e5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	3302      	adds	r3, #2
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	e01f      	b.n	8008e9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e64:	d007      	beq.n	8008e76 <HAL_UART_Receive+0xf0>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <HAL_UART_Receive+0xfe>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e008      	b.n	8008e96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1b6      	bne.n	8008e22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e000      	b.n	8008ec2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008ec0:	2302      	movs	r3, #2
  }
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d11d      	bne.n	8008f20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <HAL_UART_Receive_IT+0x26>
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e016      	b.n	8008f22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_UART_Receive_IT+0x38>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e00f      	b.n	8008f22 <HAL_UART_Receive_IT+0x58>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fb24 	bl	8009564 <UART_Start_Receive_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	e000      	b.n	8008f22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ba      	sub	sp, #232	; 0xe8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10f      	bne.n	8008f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_UART_IRQHandler+0x66>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fc07 	bl	800979e <UART_Receive_IT>
      return;
 8008f90:	e256      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80de 	beq.w	8009158 <HAL_UART_IRQHandler+0x22c>
 8008f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80d1 	beq.w	8009158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <HAL_UART_IRQHandler+0xae>
 8008fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f043 0201 	orr.w	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <HAL_UART_IRQHandler+0xd2>
 8008fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	f043 0202 	orr.w	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <HAL_UART_IRQHandler+0xf6>
 800900a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d011      	beq.n	8009052 <HAL_UART_IRQHandler+0x126>
 800902e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800903a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 81ed 	beq.w	8009436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800905c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009060:	f003 0320 	and.w	r3, r3, #32
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <HAL_UART_IRQHandler+0x14e>
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fb92 	bl	800979e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d103      	bne.n	80090a6 <HAL_UART_IRQHandler+0x17a>
 800909e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d04f      	beq.n	8009146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa9a 	bl	80095e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d141      	bne.n	800913e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3314      	adds	r3, #20
 80090c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3314      	adds	r3, #20
 80090e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1d9      	bne.n	80090ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d013      	beq.n	8009136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	4a7d      	ldr	r2, [pc, #500]	; (8009308 <HAL_UART_IRQHandler+0x3dc>)
 8009114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	4618      	mov	r0, r3
 800911c:	f7fa fb02 	bl	8003724 <HAL_DMA_Abort_IT>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d016      	beq.n	8009154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	e00e      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f990 	bl	800945c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800913c:	e00a      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f98c 	bl	800945c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	e006      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f988 	bl	800945c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009152:	e170      	b.n	8009436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	bf00      	nop
    return;
 8009156:	e16e      	b.n	8009436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915c:	2b01      	cmp	r3, #1
 800915e:	f040 814a 	bne.w	80093f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 8143 	beq.w	80093f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 813c 	beq.w	80093f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	60bb      	str	r3, [r7, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919e:	2b40      	cmp	r3, #64	; 0x40
 80091a0:	f040 80b4 	bne.w	800930c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8140 	beq.w	800943a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091c2:	429a      	cmp	r2, r3
 80091c4:	f080 8139 	bcs.w	800943a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091da:	f000 8088 	beq.w	80092ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	330c      	adds	r3, #12
 8009206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800920a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800920e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1d9      	bne.n	80091de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3314      	adds	r3, #20
 8009230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800923a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800923c:	f023 0301 	bic.w	r3, r3, #1
 8009240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3314      	adds	r3, #20
 800924a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800924e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e1      	bne.n	800922a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3314      	adds	r3, #20
 800926c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800927c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3314      	adds	r3, #20
 8009286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800928a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800928c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092be:	f023 0310 	bic.w	r3, r3, #16
 80092c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80092d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e3      	bne.n	80092ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fa f9ab 	bl	8003644 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f8b6 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009304:	e099      	b.n	800943a <HAL_UART_IRQHandler+0x50e>
 8009306:	bf00      	nop
 8009308:	080096a7 	.word	0x080096a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009314:	b29b      	uxth	r3, r3
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 808b 	beq.w	800943e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8086 	beq.w	800943e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	330c      	adds	r3, #12
 8009338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	330c      	adds	r3, #12
 8009352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009356:	647a      	str	r2, [r7, #68]	; 0x44
 8009358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800935c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e3      	bne.n	8009332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3314      	adds	r3, #20
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	623b      	str	r3, [r7, #32]
   return(result);
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3314      	adds	r3, #20
 800938a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800938e:	633a      	str	r2, [r7, #48]	; 0x30
 8009390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e3      	bne.n	800936a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	330c      	adds	r3, #12
 80093b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0310 	bic.w	r3, r3, #16
 80093c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	330c      	adds	r3, #12
 80093d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093d4:	61fa      	str	r2, [r7, #28]
 80093d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	69b9      	ldr	r1, [r7, #24]
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	617b      	str	r3, [r7, #20]
   return(result);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e3      	bne.n	80093b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f83e 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093f4:	e023      	b.n	800943e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <HAL_UART_IRQHandler+0x4ea>
 8009402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f95d 	bl	80096ce <UART_Transmit_IT>
    return;
 8009414:	e014      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <HAL_UART_IRQHandler+0x514>
 8009422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f99d 	bl	800976e <UART_EndTransmit_IT>
    return;
 8009434:	e004      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
    return;
 8009436:	bf00      	nop
 8009438:	e002      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
      return;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
      return;
 800943e:	bf00      	nop
  }
}
 8009440:	37e8      	adds	r7, #232	; 0xe8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b090      	sub	sp, #64	; 0x40
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009498:	e050      	b.n	800953c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800949a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a0:	d04c      	beq.n	800953c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094a8:	f7f9 fec0 	bl	800322c <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d241      	bcs.n	800953c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	330c      	adds	r3, #12
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094d8:	637a      	str	r2, [r7, #52]	; 0x34
 80094da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e5      	bne.n	80094b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3314      	adds	r3, #20
 80094f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	613b      	str	r3, [r7, #16]
   return(result);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	63bb      	str	r3, [r7, #56]	; 0x38
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3314      	adds	r3, #20
 800950a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800950c:	623a      	str	r2, [r7, #32]
 800950e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	69f9      	ldr	r1, [r7, #28]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	61bb      	str	r3, [r7, #24]
   return(result);
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e00f      	b.n	800955c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	bf0c      	ite	eq
 800954c:	2301      	moveq	r3, #1
 800954e:	2300      	movne	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	461a      	mov	r2, r3
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	429a      	cmp	r2, r3
 8009558:	d09f      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3740      	adds	r7, #64	; 0x40
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2222      	movs	r2, #34	; 0x22
 800958e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d007      	beq.n	80095b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	695a      	ldr	r2, [r3, #20]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0201 	orr.w	r2, r2, #1
 80095c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0220 	orr.w	r2, r2, #32
 80095d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b095      	sub	sp, #84	; 0x54
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	330c      	adds	r3, #12
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009608:	643a      	str	r2, [r7, #64]	; 0x40
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800960e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	61fb      	str	r3, [r7, #28]
   return(result);
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	64bb      	str	r3, [r7, #72]	; 0x48
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3314      	adds	r3, #20
 800963a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800963c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e5      	bne.n	800961c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	2b01      	cmp	r3, #1
 8009656:	d119      	bne.n	800968c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	330c      	adds	r3, #12
 800965e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	60bb      	str	r3, [r7, #8]
   return(result);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f023 0310 	bic.w	r3, r3, #16
 800966e:	647b      	str	r3, [r7, #68]	; 0x44
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009678:	61ba      	str	r2, [r7, #24]
 800967a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6979      	ldr	r1, [r7, #20]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	613b      	str	r3, [r7, #16]
   return(result);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	631a      	str	r2, [r3, #48]	; 0x30
}
 800969a:	bf00      	nop
 800969c:	3754      	adds	r7, #84	; 0x54
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f7ff fecb 	bl	800945c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b21      	cmp	r3, #33	; 0x21
 80096e0:	d13e      	bne.n	8009760 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ea:	d114      	bne.n	8009716 <UART_Transmit_IT+0x48>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d110      	bne.n	8009716 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009708:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	1c9a      	adds	r2, r3, #2
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	621a      	str	r2, [r3, #32]
 8009714:	e008      	b.n	8009728 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	1c59      	adds	r1, r3, #1
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6211      	str	r1, [r2, #32]
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29b      	uxth	r3, r3
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4619      	mov	r1, r3
 8009736:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10f      	bne.n	800975c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800974a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800975a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2220      	movs	r2, #32
 800978a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fe5a 	bl	8009448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b08c      	sub	sp, #48	; 0x30
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b22      	cmp	r3, #34	; 0x22
 80097b0:	f040 80ab 	bne.w	800990a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097bc:	d117      	bne.n	80097ee <UART_Receive_IT+0x50>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d113      	bne.n	80097ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	b29a      	uxth	r2, r3
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	1c9a      	adds	r2, r3, #2
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	629a      	str	r2, [r3, #40]	; 0x28
 80097ec:	e026      	b.n	800983c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009800:	d007      	beq.n	8009812 <UART_Receive_IT+0x74>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <UART_Receive_IT+0x82>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d106      	bne.n	8009820 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	b2da      	uxtb	r2, r3
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e008      	b.n	8009832 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982c:	b2da      	uxtb	r2, r3
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	b29b      	uxth	r3, r3
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4619      	mov	r1, r3
 800984a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800984c:	2b00      	cmp	r3, #0
 800984e:	d15a      	bne.n	8009906 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0220 	bic.w	r2, r2, #32
 800985e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800986e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695a      	ldr	r2, [r3, #20]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	2b01      	cmp	r3, #1
 800988e:	d135      	bne.n	80098fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	613b      	str	r3, [r7, #16]
   return(result);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f023 0310 	bic.w	r3, r3, #16
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	330c      	adds	r3, #12
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	623a      	str	r2, [r7, #32]
 80098b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	69f9      	ldr	r1, [r7, #28]
 80098bc:	6a3a      	ldr	r2, [r7, #32]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e5      	bne.n	8009896 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b10      	cmp	r3, #16
 80098d6:	d10a      	bne.n	80098ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fdbb 	bl	8009470 <HAL_UARTEx_RxEventCallback>
 80098fa:	e002      	b.n	8009902 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7f7 fb9d 	bl	800103c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	e002      	b.n	800990c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e000      	b.n	800990c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800990a:	2302      	movs	r3, #2
  }
}
 800990c:	4618      	mov	r0, r3
 800990e:	3730      	adds	r7, #48	; 0x30
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009918:	b0c0      	sub	sp, #256	; 0x100
 800991a:	af00      	add	r7, sp, #0
 800991c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009930:	68d9      	ldr	r1, [r3, #12]
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	ea40 0301 	orr.w	r3, r0, r1
 800993c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	431a      	orrs	r2, r3
 800994c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	431a      	orrs	r2, r3
 8009954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	4313      	orrs	r3, r2
 800995c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800996c:	f021 010c 	bic.w	r1, r1, #12
 8009970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800997a:	430b      	orrs	r3, r1
 800997c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800997e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800998a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998e:	6999      	ldr	r1, [r3, #24]
 8009990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	ea40 0301 	orr.w	r3, r0, r1
 800999a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800999c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b8f      	ldr	r3, [pc, #572]	; (8009be0 <UART_SetConfig+0x2cc>)
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d005      	beq.n	80099b4 <UART_SetConfig+0xa0>
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b8d      	ldr	r3, [pc, #564]	; (8009be4 <UART_SetConfig+0x2d0>)
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d104      	bne.n	80099be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099b4:	f7fd fb78 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 80099b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80099bc:	e003      	b.n	80099c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099be:	f7fd fb5f 	bl	8007080 <HAL_RCC_GetPCLK1Freq>
 80099c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d0:	f040 810c 	bne.w	8009bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d8:	2200      	movs	r2, #0
 80099da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	1891      	adds	r1, r2, r2
 80099ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80099ee:	415b      	adcs	r3, r3
 80099f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099f6:	4621      	mov	r1, r4
 80099f8:	eb12 0801 	adds.w	r8, r2, r1
 80099fc:	4629      	mov	r1, r5
 80099fe:	eb43 0901 	adc.w	r9, r3, r1
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	f04f 0300 	mov.w	r3, #0
 8009a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a16:	4690      	mov	r8, r2
 8009a18:	4699      	mov	r9, r3
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	eb18 0303 	adds.w	r3, r8, r3
 8009a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a24:	462b      	mov	r3, r5
 8009a26:	eb49 0303 	adc.w	r3, r9, r3
 8009a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a42:	460b      	mov	r3, r1
 8009a44:	18db      	adds	r3, r3, r3
 8009a46:	653b      	str	r3, [r7, #80]	; 0x50
 8009a48:	4613      	mov	r3, r2
 8009a4a:	eb42 0303 	adc.w	r3, r2, r3
 8009a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a58:	f7f6 fc1a 	bl	8000290 <__aeabi_uldivmod>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4b61      	ldr	r3, [pc, #388]	; (8009be8 <UART_SetConfig+0x2d4>)
 8009a62:	fba3 2302 	umull	r2, r3, r3, r2
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	011c      	lsls	r4, r3, #4
 8009a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	464b      	mov	r3, r9
 8009a80:	1891      	adds	r1, r2, r2
 8009a82:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a84:	415b      	adcs	r3, r3
 8009a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8009a92:	4649      	mov	r1, r9
 8009a94:	eb43 0b01 	adc.w	fp, r3, r1
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009aac:	4692      	mov	sl, r2
 8009aae:	469b      	mov	fp, r3
 8009ab0:	4643      	mov	r3, r8
 8009ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009aba:	464b      	mov	r3, r9
 8009abc:	eb4b 0303 	adc.w	r3, fp, r3
 8009ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	18db      	adds	r3, r3, r3
 8009adc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ade:	4613      	mov	r3, r2
 8009ae0:	eb42 0303 	adc.w	r3, r2, r3
 8009ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009aee:	f7f6 fbcf 	bl	8000290 <__aeabi_uldivmod>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4611      	mov	r1, r2
 8009af8:	4b3b      	ldr	r3, [pc, #236]	; (8009be8 <UART_SetConfig+0x2d4>)
 8009afa:	fba3 2301 	umull	r2, r3, r3, r1
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	2264      	movs	r2, #100	; 0x64
 8009b02:	fb02 f303 	mul.w	r3, r2, r3
 8009b06:	1acb      	subs	r3, r1, r3
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b0e:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <UART_SetConfig+0x2d4>)
 8009b10:	fba3 2302 	umull	r2, r3, r3, r2
 8009b14:	095b      	lsrs	r3, r3, #5
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b1c:	441c      	add	r4, r3
 8009b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	1891      	adds	r1, r2, r2
 8009b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b38:	415b      	adcs	r3, r3
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b40:	4641      	mov	r1, r8
 8009b42:	1851      	adds	r1, r2, r1
 8009b44:	6339      	str	r1, [r7, #48]	; 0x30
 8009b46:	4649      	mov	r1, r9
 8009b48:	414b      	adcs	r3, r1
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b58:	4659      	mov	r1, fp
 8009b5a:	00cb      	lsls	r3, r1, #3
 8009b5c:	4651      	mov	r1, sl
 8009b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b62:	4651      	mov	r1, sl
 8009b64:	00ca      	lsls	r2, r1, #3
 8009b66:	4610      	mov	r0, r2
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4642      	mov	r2, r8
 8009b6e:	189b      	adds	r3, r3, r2
 8009b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b74:	464b      	mov	r3, r9
 8009b76:	460a      	mov	r2, r1
 8009b78:	eb42 0303 	adc.w	r3, r2, r3
 8009b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b94:	460b      	mov	r3, r1
 8009b96:	18db      	adds	r3, r3, r3
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009baa:	f7f6 fb71 	bl	8000290 <__aeabi_uldivmod>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <UART_SetConfig+0x2d4>)
 8009bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb8:	095b      	lsrs	r3, r3, #5
 8009bba:	2164      	movs	r1, #100	; 0x64
 8009bbc:	fb01 f303 	mul.w	r3, r1, r3
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	3332      	adds	r3, #50	; 0x32
 8009bc6:	4a08      	ldr	r2, [pc, #32]	; (8009be8 <UART_SetConfig+0x2d4>)
 8009bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	f003 0207 	and.w	r2, r3, #7
 8009bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4422      	add	r2, r4
 8009bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bdc:	e105      	b.n	8009dea <UART_SetConfig+0x4d6>
 8009bde:	bf00      	nop
 8009be0:	40011000 	.word	0x40011000
 8009be4:	40011400 	.word	0x40011400
 8009be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009bfe:	4642      	mov	r2, r8
 8009c00:	464b      	mov	r3, r9
 8009c02:	1891      	adds	r1, r2, r2
 8009c04:	6239      	str	r1, [r7, #32]
 8009c06:	415b      	adcs	r3, r3
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c0e:	4641      	mov	r1, r8
 8009c10:	1854      	adds	r4, r2, r1
 8009c12:	4649      	mov	r1, r9
 8009c14:	eb43 0501 	adc.w	r5, r3, r1
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	00eb      	lsls	r3, r5, #3
 8009c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c26:	00e2      	lsls	r2, r4, #3
 8009c28:	4614      	mov	r4, r2
 8009c2a:	461d      	mov	r5, r3
 8009c2c:	4643      	mov	r3, r8
 8009c2e:	18e3      	adds	r3, r4, r3
 8009c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c34:	464b      	mov	r3, r9
 8009c36:	eb45 0303 	adc.w	r3, r5, r3
 8009c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	008b      	lsls	r3, r1, #2
 8009c5e:	4621      	mov	r1, r4
 8009c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c64:	4621      	mov	r1, r4
 8009c66:	008a      	lsls	r2, r1, #2
 8009c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c6c:	f7f6 fb10 	bl	8000290 <__aeabi_uldivmod>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4b60      	ldr	r3, [pc, #384]	; (8009df8 <UART_SetConfig+0x4e4>)
 8009c76:	fba3 2302 	umull	r2, r3, r3, r2
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	011c      	lsls	r4, r3, #4
 8009c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c90:	4642      	mov	r2, r8
 8009c92:	464b      	mov	r3, r9
 8009c94:	1891      	adds	r1, r2, r2
 8009c96:	61b9      	str	r1, [r7, #24]
 8009c98:	415b      	adcs	r3, r3
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	1851      	adds	r1, r2, r1
 8009ca4:	6139      	str	r1, [r7, #16]
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	414b      	adcs	r3, r1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	f04f 0200 	mov.w	r2, #0
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009cb8:	4659      	mov	r1, fp
 8009cba:	00cb      	lsls	r3, r1, #3
 8009cbc:	4651      	mov	r1, sl
 8009cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cc2:	4651      	mov	r1, sl
 8009cc4:	00ca      	lsls	r2, r1, #3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	4642      	mov	r2, r8
 8009cce:	189b      	adds	r3, r3, r2
 8009cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	460a      	mov	r2, r1
 8009cd8:	eb42 0303 	adc.w	r3, r2, r3
 8009cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009cea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009cec:	f04f 0200 	mov.w	r2, #0
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	008b      	lsls	r3, r1, #2
 8009cfc:	4641      	mov	r1, r8
 8009cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d02:	4641      	mov	r1, r8
 8009d04:	008a      	lsls	r2, r1, #2
 8009d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d0a:	f7f6 fac1 	bl	8000290 <__aeabi_uldivmod>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4b39      	ldr	r3, [pc, #228]	; (8009df8 <UART_SetConfig+0x4e4>)
 8009d14:	fba3 1302 	umull	r1, r3, r3, r2
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	2164      	movs	r1, #100	; 0x64
 8009d1c:	fb01 f303 	mul.w	r3, r1, r3
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	3332      	adds	r3, #50	; 0x32
 8009d26:	4a34      	ldr	r2, [pc, #208]	; (8009df8 <UART_SetConfig+0x4e4>)
 8009d28:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2c:	095b      	lsrs	r3, r3, #5
 8009d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d32:	441c      	add	r4, r3
 8009d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d38:	2200      	movs	r2, #0
 8009d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8009d3c:	677a      	str	r2, [r7, #116]	; 0x74
 8009d3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d42:	4642      	mov	r2, r8
 8009d44:	464b      	mov	r3, r9
 8009d46:	1891      	adds	r1, r2, r2
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	415b      	adcs	r3, r3
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d52:	4641      	mov	r1, r8
 8009d54:	1851      	adds	r1, r2, r1
 8009d56:	6039      	str	r1, [r7, #0]
 8009d58:	4649      	mov	r1, r9
 8009d5a:	414b      	adcs	r3, r1
 8009d5c:	607b      	str	r3, [r7, #4]
 8009d5e:	f04f 0200 	mov.w	r2, #0
 8009d62:	f04f 0300 	mov.w	r3, #0
 8009d66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d6a:	4659      	mov	r1, fp
 8009d6c:	00cb      	lsls	r3, r1, #3
 8009d6e:	4651      	mov	r1, sl
 8009d70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d74:	4651      	mov	r1, sl
 8009d76:	00ca      	lsls	r2, r1, #3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	4642      	mov	r2, r8
 8009d80:	189b      	adds	r3, r3, r2
 8009d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d84:	464b      	mov	r3, r9
 8009d86:	460a      	mov	r2, r1
 8009d88:	eb42 0303 	adc.w	r3, r2, r3
 8009d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	663b      	str	r3, [r7, #96]	; 0x60
 8009d98:	667a      	str	r2, [r7, #100]	; 0x64
 8009d9a:	f04f 0200 	mov.w	r2, #0
 8009d9e:	f04f 0300 	mov.w	r3, #0
 8009da2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009da6:	4649      	mov	r1, r9
 8009da8:	008b      	lsls	r3, r1, #2
 8009daa:	4641      	mov	r1, r8
 8009dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009db0:	4641      	mov	r1, r8
 8009db2:	008a      	lsls	r2, r1, #2
 8009db4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009db8:	f7f6 fa6a 	bl	8000290 <__aeabi_uldivmod>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <UART_SetConfig+0x4e4>)
 8009dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8009dc6:	095b      	lsrs	r3, r3, #5
 8009dc8:	2164      	movs	r1, #100	; 0x64
 8009dca:	fb01 f303 	mul.w	r3, r1, r3
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	3332      	adds	r3, #50	; 0x32
 8009dd4:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <UART_SetConfig+0x4e4>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	f003 020f 	and.w	r2, r3, #15
 8009de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4422      	add	r2, r4
 8009de8:	609a      	str	r2, [r3, #8]
}
 8009dea:	bf00      	nop
 8009dec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009df0:	46bd      	mov	sp, r7
 8009df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009df6:	bf00      	nop
 8009df8:	51eb851f 	.word	0x51eb851f

08009dfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	f107 001c 	add.w	r0, r7, #28
 8009e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d122      	bne.n	8009e5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d105      	bne.n	8009e4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f9c0 	bl	800a1d4 <USB_CoreReset>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	e01a      	b.n	8009e90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9b4 	bl	800a1d4 <USB_CoreReset>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	639a      	str	r2, [r3, #56]	; 0x38
 8009e82:	e005      	b.n	8009e90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d10b      	bne.n	8009eae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f043 0206 	orr.w	r2, r3, #6
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f043 0220 	orr.w	r2, r3, #32
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009eba:	b004      	add	sp, #16
 8009ebc:	4770      	bx	lr

08009ebe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f043 0201 	orr.w	r2, r3, #1
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f023 0201 	bic.w	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d115      	bne.n	8009f50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f30:	2001      	movs	r0, #1
 8009f32:	f7f9 f987 	bl	8003244 <HAL_Delay>
      ms++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f93a 	bl	800a1b6 <USB_GetMode>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d01e      	beq.n	8009f86 <USB_SetCurrentMode+0x84>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b31      	cmp	r3, #49	; 0x31
 8009f4c:	d9f0      	bls.n	8009f30 <USB_SetCurrentMode+0x2e>
 8009f4e:	e01a      	b.n	8009f86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d115      	bne.n	8009f82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f62:	2001      	movs	r0, #1
 8009f64:	f7f9 f96e 	bl	8003244 <HAL_Delay>
      ms++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f921 	bl	800a1b6 <USB_GetMode>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <USB_SetCurrentMode+0x84>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b31      	cmp	r3, #49	; 0x31
 8009f7e:	d9f0      	bls.n	8009f62 <USB_SetCurrentMode+0x60>
 8009f80:	e001      	b.n	8009f86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e005      	b.n	8009f92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b32      	cmp	r3, #50	; 0x32
 8009f8a:	d101      	bne.n	8009f90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4a13      	ldr	r2, [pc, #76]	; (800a000 <USB_FlushTxFifo+0x64>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d901      	bls.n	8009fbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e01b      	b.n	8009ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	daf2      	bge.n	8009faa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	019b      	lsls	r3, r3, #6
 8009fcc:	f043 0220 	orr.w	r2, r3, #32
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4a08      	ldr	r2, [pc, #32]	; (800a000 <USB_FlushTxFifo+0x64>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d901      	bls.n	8009fe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e006      	b.n	8009ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d0f0      	beq.n	8009fd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	00030d40 	.word	0x00030d40

0800a004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3301      	adds	r3, #1
 800a014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	4a11      	ldr	r2, [pc, #68]	; (800a060 <USB_FlushRxFifo+0x5c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d901      	bls.n	800a022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e018      	b.n	800a054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	daf2      	bge.n	800a010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2210      	movs	r2, #16
 800a032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3301      	adds	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4a08      	ldr	r2, [pc, #32]	; (800a060 <USB_FlushRxFifo+0x5c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d901      	bls.n	800a046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e006      	b.n	800a054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d0f0      	beq.n	800a034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	00030d40 	.word	0x00030d40

0800a064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a064:	b480      	push	{r7}
 800a066:	b089      	sub	sp, #36	; 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4611      	mov	r1, r2
 800a070:	461a      	mov	r2, r3
 800a072:	460b      	mov	r3, r1
 800a074:	71fb      	strb	r3, [r7, #7]
 800a076:	4613      	mov	r3, r2
 800a078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d123      	bne.n	800a0d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a08a:	88bb      	ldrh	r3, [r7, #4]
 800a08c:	3303      	adds	r3, #3
 800a08e:	089b      	lsrs	r3, r3, #2
 800a090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	e018      	b.n	800a0ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	031a      	lsls	r2, r3, #12
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3e2      	bcc.n	800a098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3724      	adds	r7, #36	; 0x24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b08b      	sub	sp, #44	; 0x2c
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a106:	2300      	movs	r3, #0
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	e014      	b.n	800a136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	601a      	str	r2, [r3, #0]
    pDest++;
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	3301      	adds	r3, #1
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	3301      	adds	r3, #1
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	3301      	adds	r3, #1
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	3301      	adds	r3, #1
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	3301      	adds	r3, #1
 800a134:	623b      	str	r3, [r7, #32]
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3e6      	bcc.n	800a10c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01e      	beq.n	800a182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14e:	461a      	mov	r2, r3
 800a150:	f107 0310 	add.w	r3, r7, #16
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	b2da      	uxtb	r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	701a      	strb	r2, [r3, #0]
      i++;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	3301      	adds	r3, #1
 800a16e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	3301      	adds	r3, #1
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a176:	8bfb      	ldrh	r3, [r7, #30]
 800a178:	3b01      	subs	r3, #1
 800a17a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a17c:	8bfb      	ldrh	r3, [r7, #30]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1ea      	bne.n	800a158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a184:	4618      	mov	r0, r3
 800a186:	372c      	adds	r7, #44	; 0x2c
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a13      	ldr	r2, [pc, #76]	; (800a238 <USB_CoreReset+0x64>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d901      	bls.n	800a1f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e01b      	b.n	800a22a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	daf2      	bge.n	800a1e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f043 0201 	orr.w	r2, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4a09      	ldr	r2, [pc, #36]	; (800a238 <USB_CoreReset+0x64>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d901      	bls.n	800a21c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e006      	b.n	800a22a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b01      	cmp	r3, #1
 800a226:	d0f0      	beq.n	800a20a <USB_CoreReset+0x36>

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	00030d40 	.word	0x00030d40

0800a23c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a23c:	b084      	sub	sp, #16
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a24a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a25c:	461a      	mov	r2, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d018      	beq.n	800a2c4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d10a      	bne.n	800a2ae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2a6:	f043 0304 	orr.w	r3, r3, #4
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	e014      	b.n	800a2d8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2bc:	f023 0304 	bic.w	r3, r3, #4
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	e009      	b.n	800a2d8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2d2:	f023 0304 	bic.w	r3, r3, #4
 800a2d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2d8:	2110      	movs	r1, #16
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fe5e 	bl	8009f9c <USB_FlushTxFifo>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fe8a 	bl	800a004 <USB_FlushRxFifo>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	613b      	str	r3, [r7, #16]
 800a2fe:	e015      	b.n	800a32c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a30c:	461a      	mov	r2, r3
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a312:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a320:	461a      	mov	r2, r3
 800a322:	2300      	movs	r3, #0
 800a324:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	429a      	cmp	r2, r3
 800a332:	d3e5      	bcc.n	800a300 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a340:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a354:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a13      	ldr	r2, [pc, #76]	; (800a3a8 <USB_HostInit+0x16c>)
 800a35a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a13      	ldr	r2, [pc, #76]	; (800a3ac <USB_HostInit+0x170>)
 800a360:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a364:	e009      	b.n	800a37a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2280      	movs	r2, #128	; 0x80
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a10      	ldr	r2, [pc, #64]	; (800a3b0 <USB_HostInit+0x174>)
 800a370:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a0f      	ldr	r2, [pc, #60]	; (800a3b4 <USB_HostInit+0x178>)
 800a376:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f043 0210 	orr.w	r2, r3, #16
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699a      	ldr	r2, [r3, #24]
 800a390:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <USB_HostInit+0x17c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a398:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3a4:	b004      	add	sp, #16
 800a3a6:	4770      	bx	lr
 800a3a8:	01000200 	.word	0x01000200
 800a3ac:	00e00300 	.word	0x00e00300
 800a3b0:	00600080 	.word	0x00600080
 800a3b4:	004000e0 	.word	0x004000e0
 800a3b8:	a3200008 	.word	0xa3200008

0800a3bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d107      	bne.n	800a40e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a404:	461a      	mov	r2, r3
 800a406:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a40a:	6053      	str	r3, [r2, #4]
 800a40c:	e009      	b.n	800a422 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d106      	bne.n	800a422 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a41a:	461a      	mov	r2, r3
 800a41c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a420:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a450:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a460:	2064      	movs	r0, #100	; 0x64
 800a462:	f7f8 feef 	bl	8003244 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a472:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a474:	200a      	movs	r0, #10
 800a476:	f7f8 fee5 	bl	8003244 <HAL_Delay>

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a4a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <USB_DriveVbus+0x44>
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d106      	bne.n	800a4c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a4c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d2:	d109      	bne.n	800a4e8 <USB_DriveVbus+0x64>
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	0c5b      	lsrs	r3, r3, #17
 800a514:	f003 0303 	and.w	r3, r3, #3
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	b29b      	uxth	r3, r3
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	461a      	mov	r2, r3
 800a556:	4603      	mov	r3, r0
 800a558:	70fb      	strb	r3, [r7, #3]
 800a55a:	460b      	mov	r3, r1
 800a55c:	70bb      	strb	r3, [r7, #2]
 800a55e:	4613      	mov	r3, r2
 800a560:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	4413      	add	r3, r2
 800a572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a576:	461a      	mov	r2, r3
 800a578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a57c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a57e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a582:	2b03      	cmp	r3, #3
 800a584:	d87e      	bhi.n	800a684 <USB_HC_Init+0x13c>
 800a586:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <USB_HC_Init+0x44>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a59d 	.word	0x0800a59d
 800a590:	0800a647 	.word	0x0800a647
 800a594:	0800a59d 	.word	0x0800a59d
 800a598:	0800a609 	.word	0x0800a609
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f240 439d 	movw	r3, #1181	; 0x49d
 800a5ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a5b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da10      	bge.n	800a5da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	78fa      	ldrb	r2, [r7, #3]
 800a5c8:	0151      	lsls	r1, r2, #5
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a5d8:	e057      	b.n	800a68a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d051      	beq.n	800a68a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	0151      	lsls	r1, r2, #5
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	440a      	add	r2, r1
 800a5fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a600:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a604:	60d3      	str	r3, [r2, #12]
      break;
 800a606:	e040      	b.n	800a68a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a614:	461a      	mov	r2, r3
 800a616:	f240 639d 	movw	r3, #1693	; 0x69d
 800a61a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a61c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	da34      	bge.n	800a68e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	0151      	lsls	r1, r2, #5
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	440a      	add	r2, r1
 800a63a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a63e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a642:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a644:	e023      	b.n	800a68e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a652:	461a      	mov	r2, r3
 800a654:	f240 2325 	movw	r3, #549	; 0x225
 800a658:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a65a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da17      	bge.n	800a692 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	440a      	add	r2, r1
 800a678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a67c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a680:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a682:	e006      	b.n	800a692 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	77fb      	strb	r3, [r7, #31]
      break;
 800a688:	e004      	b.n	800a694 <USB_HC_Init+0x14c>
      break;
 800a68a:	bf00      	nop
 800a68c:	e002      	b.n	800a694 <USB_HC_Init+0x14c>
      break;
 800a68e:	bf00      	nop
 800a690:	e000      	b.n	800a694 <USB_HC_Init+0x14c>
      break;
 800a692:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6ae:	f043 0302 	orr.w	r3, r3, #2
 800a6b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ba:	699a      	ldr	r2, [r3, #24]
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c8:	6939      	ldr	r1, [r7, #16]
 800a6ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a6de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da03      	bge.n	800a6ee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a6e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ea:	61bb      	str	r3, [r7, #24]
 800a6ec:	e001      	b.n	800a6f2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff feff 	bl	800a4f6 <USB_GetHostSpeed>
 800a6f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a6fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d106      	bne.n	800a710 <USB_HC_Init+0x1c8>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b02      	cmp	r3, #2
 800a706:	d003      	beq.n	800a710 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	e001      	b.n	800a714 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a714:	787b      	ldrb	r3, [r7, #1]
 800a716:	059b      	lsls	r3, r3, #22
 800a718:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a71c:	78bb      	ldrb	r3, [r7, #2]
 800a71e:	02db      	lsls	r3, r3, #11
 800a720:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a724:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a726:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a72a:	049b      	lsls	r3, r3, #18
 800a72c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a730:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a732:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a734:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a738:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	0159      	lsls	r1, r3, #5
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	440b      	add	r3, r1
 800a746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a750:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a756:	2b03      	cmp	r3, #3
 800a758:	d003      	beq.n	800a762 <USB_HC_Init+0x21a>
 800a75a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d10f      	bne.n	800a782 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	78fa      	ldrb	r2, [r7, #3]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	440a      	add	r2, r1
 800a778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a77c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a780:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a782:	7ffb      	ldrb	r3, [r7, #31]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08c      	sub	sp, #48	; 0x30
 800a790:	af02      	add	r7, sp, #8
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	4613      	mov	r3, r2
 800a798:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a7a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d02d      	beq.n	800a812 <USB_HC_StartXfer+0x86>
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	791b      	ldrb	r3, [r3, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d129      	bne.n	800a812 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d117      	bne.n	800a7f4 <USB_HC_StartXfer+0x68>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	79db      	ldrb	r3, [r3, #7]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <USB_HC_StartXfer+0x48>
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	79db      	ldrb	r3, [r3, #7]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d10f      	bne.n	800a7f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10b      	bne.n	800a812 <USB_HC_StartXfer+0x86>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	795b      	ldrb	r3, [r3, #5]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d107      	bne.n	800a812 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	4619      	mov	r1, r3
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 fa0f 	bl	800ac2c <USB_DoPing>
      return HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	e0f8      	b.n	800aa04 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d018      	beq.n	800a84c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	8912      	ldrh	r2, [r2, #8]
 800a822:	4413      	add	r3, r2
 800a824:	3b01      	subs	r3, #1
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	8912      	ldrh	r2, [r2, #8]
 800a82a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a82e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a830:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a832:	8b7b      	ldrh	r3, [r7, #26]
 800a834:	429a      	cmp	r2, r3
 800a836:	d90b      	bls.n	800a850 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a838:	8b7b      	ldrh	r3, [r7, #26]
 800a83a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a83c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	8912      	ldrh	r2, [r2, #8]
 800a842:	fb03 f202 	mul.w	r2, r3, r2
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	611a      	str	r2, [r3, #16]
 800a84a:	e001      	b.n	800a850 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a84c:	2301      	movs	r3, #1
 800a84e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	78db      	ldrb	r3, [r3, #3]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	8912      	ldrh	r2, [r2, #8]
 800a85e:	fb03 f202 	mul.w	r2, r3, r2
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	611a      	str	r2, [r3, #16]
 800a866:	e003      	b.n	800a870 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	695a      	ldr	r2, [r3, #20]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a87a:	04d9      	lsls	r1, r3, #19
 800a87c:	4b63      	ldr	r3, [pc, #396]	; (800aa0c <USB_HC_StartXfer+0x280>)
 800a87e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a880:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	7a9b      	ldrb	r3, [r3, #10]
 800a886:	075b      	lsls	r3, r3, #29
 800a888:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a88c:	69f9      	ldr	r1, [r7, #28]
 800a88e:	0148      	lsls	r0, r1, #5
 800a890:	6a39      	ldr	r1, [r7, #32]
 800a892:	4401      	add	r1, r0
 800a894:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a898:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a89a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	68d9      	ldr	r1, [r3, #12]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b2:	460a      	mov	r2, r1
 800a8b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	bf0c      	ite	eq
 800a8c6:	2301      	moveq	r3, #1
 800a8c8:	2300      	movne	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69fa      	ldr	r2, [r7, #28]
 800a8de:	0151      	lsls	r1, r2, #5
 800a8e0:	6a3a      	ldr	r2, [r7, #32]
 800a8e2:	440a      	add	r2, r1
 800a8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	7e7b      	ldrb	r3, [r7, #25]
 800a8fe:	075b      	lsls	r3, r3, #29
 800a900:	69f9      	ldr	r1, [r7, #28]
 800a902:	0148      	lsls	r0, r1, #5
 800a904:	6a39      	ldr	r1, [r7, #32]
 800a906:	4401      	add	r1, r0
 800a908:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a90c:	4313      	orrs	r3, r2
 800a90e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	4413      	add	r3, r2
 800a918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a926:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	78db      	ldrb	r3, [r3, #3]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	e003      	b.n	800a942 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a940:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a948:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	4413      	add	r3, r2
 800a952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a956:	461a      	mov	r2, r3
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	e04e      	b.n	800aa04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	78db      	ldrb	r3, [r3, #3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d149      	bne.n	800aa02 <USB_HC_StartXfer+0x276>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d045      	beq.n	800aa02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	79db      	ldrb	r3, [r3, #7]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d830      	bhi.n	800a9e0 <USB_HC_StartXfer+0x254>
 800a97e:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <USB_HC_StartXfer+0x1f8>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a995 	.word	0x0800a995
 800a988:	0800a9b9 	.word	0x0800a9b9
 800a98c:	0800a995 	.word	0x0800a995
 800a990:	0800a9b9 	.word	0x0800a9b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	3303      	adds	r3, #3
 800a99a:	089b      	lsrs	r3, r3, #2
 800a99c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a99e:	8afa      	ldrh	r2, [r7, #22]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d91c      	bls.n	800a9e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	f043 0220 	orr.w	r2, r3, #32
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a9b6:	e015      	b.n	800a9e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	3303      	adds	r3, #3
 800a9be:	089b      	lsrs	r3, r3, #2
 800a9c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a9c2:	8afa      	ldrh	r2, [r7, #22]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d90a      	bls.n	800a9e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a9de:	e003      	b.n	800a9e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a9e0:	bf00      	nop
 800a9e2:	e002      	b.n	800a9ea <USB_HC_StartXfer+0x25e>
        break;
 800a9e4:	bf00      	nop
 800a9e6:	e000      	b.n	800a9ea <USB_HC_StartXfer+0x25e>
        break;
 800a9e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	68d9      	ldr	r1, [r3, #12]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	785a      	ldrb	r2, [r3, #1]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	9000      	str	r0, [sp, #0]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fb31 	bl	800a064 <USB_WritePacket>
  }

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3728      	adds	r7, #40	; 0x28
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	1ff80000 	.word	0x1ff80000

0800aa10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	b29b      	uxth	r3, r3
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b089      	sub	sp, #36	; 0x24
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	0c9b      	lsrs	r3, r3, #18
 800aa5a:	f003 0303 	and.w	r3, r3, #3
 800aa5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	0fdb      	lsrs	r3, r3, #31
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	d104      	bne.n	800aa8c <USB_HC_Halt+0x5a>
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e0c8      	b.n	800ac1e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <USB_HC_Halt+0x66>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d163      	bne.n	800ab60 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aab6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f003 0320 	and.w	r3, r3, #32
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80ab 	bne.w	800ac1c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d133      	bne.n	800ab3a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	0151      	lsls	r1, r2, #5
 800aae4:	69fa      	ldr	r2, [r7, #28]
 800aae6:	440a      	add	r2, r1
 800aae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaf0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab10:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab1e:	d81d      	bhi.n	800ab5c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab36:	d0ec      	beq.n	800ab12 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab38:	e070      	b.n	800ac1c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab5a:	e05f      	b.n	800ac1c <USB_HC_Halt+0x1ea>
            break;
 800ab5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab5e:	e05d      	b.n	800ac1c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d133      	bne.n	800abf8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	0151      	lsls	r1, r2, #5
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	440a      	add	r2, r1
 800aba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	0151      	lsls	r1, r2, #5
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	440a      	add	r2, r1
 800abc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abdc:	d81d      	bhi.n	800ac1a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abf4:	d0ec      	beq.n	800abd0 <USB_HC_Halt+0x19e>
 800abf6:	e011      	b.n	800ac1c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	e000      	b.n	800ac1c <USB_HC_Halt+0x1ea>
          break;
 800ac1a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3724      	adds	r7, #36	; 0x24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ac40:	2301      	movs	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	04da      	lsls	r2, r3, #19
 800ac48:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <USB_DoPing+0x74>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	0151      	lsls	r1, r2, #5
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	440a      	add	r2, r1
 800ac54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	1ff80000 	.word	0x1ff80000

0800aca4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff f911 	bl	8009ee0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800acbe:	2110      	movs	r1, #16
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff f96b 	bl	8009f9c <USB_FlushTxFifo>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff f997 	bl	800a004 <USB_FlushRxFifo>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ace0:	2300      	movs	r3, #0
 800ace2:	61bb      	str	r3, [r7, #24]
 800ace4:	e01f      	b.n	800ad26 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	4413      	add	r3, r2
 800acee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acfc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b0f      	cmp	r3, #15
 800ad2a:	d9dc      	bls.n	800ace6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	61bb      	str	r3, [r7, #24]
 800ad30:	e034      	b.n	800ad9c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	015a      	lsls	r2, r3, #5
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	4413      	add	r3, r2
 800ad62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad66:	461a      	mov	r2, r3
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad78:	d80c      	bhi.n	800ad94 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad90:	d0ec      	beq.n	800ad6c <USB_StopHost+0xc8>
 800ad92:	e000      	b.n	800ad96 <USB_StopHost+0xf2>
        break;
 800ad94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	61bb      	str	r3, [r7, #24]
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	2b0f      	cmp	r3, #15
 800ada0:	d9c7      	bls.n	800ad32 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ada8:	461a      	mov	r2, r3
 800adaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff f880 	bl	8009ebe <USB_EnableGlobalInt>

  return ret;
 800adbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800adcc:	4904      	ldr	r1, [pc, #16]	; (800ade0 <MX_FATFS_Init+0x18>)
 800adce:	4805      	ldr	r0, [pc, #20]	; (800ade4 <MX_FATFS_Init+0x1c>)
 800add0:	f003 f95e 	bl	800e090 <FATFS_LinkDriver>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	4b03      	ldr	r3, [pc, #12]	; (800ade8 <MX_FATFS_Init+0x20>)
 800adda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800addc:	bf00      	nop
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	2000344c 	.word	0x2000344c
 800ade4:	0801010c 	.word	0x0801010c
 800ade8:	20003448 	.word	0x20003448

0800adec <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	4619      	mov	r1, r3
 800ae16:	4808      	ldr	r0, [pc, #32]	; (800ae38 <USBH_status+0x34>)
 800ae18:	f000 fe32 	bl	800ba80 <USBH_MSC_UnitIsReady>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <USBH_status+0x24>
  {
    res = RES_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]
 800ae26:	e001      	b.n	800ae2c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	2000345c 	.word	0x2000345c

0800ae3c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b094      	sub	sp, #80	; 0x50
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ae52:	7bf9      	ldrb	r1, [r7, #15]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	4813      	ldr	r0, [pc, #76]	; (800aeac <USBH_read+0x70>)
 800ae5e:	f000 fe59 	bl	800bb14 <USBH_MSC_Read>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <USBH_read+0x34>
  {
    res = RES_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae6e:	e017      	b.n	800aea0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ae70:	f107 0210 	add.w	r2, r7, #16
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	4619      	mov	r1, r3
 800ae78:	480c      	ldr	r0, [pc, #48]	; (800aeac <USBH_read+0x70>)
 800ae7a:	f000 fe27 	bl	800bacc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800ae7e:	7f7b      	ldrb	r3, [r7, #29]
 800ae80:	2b3a      	cmp	r3, #58	; 0x3a
 800ae82:	d005      	beq.n	800ae90 <USBH_read+0x54>
 800ae84:	2b3a      	cmp	r3, #58	; 0x3a
 800ae86:	dc07      	bgt.n	800ae98 <USBH_read+0x5c>
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d001      	beq.n	800ae90 <USBH_read+0x54>
 800ae8c:	2b28      	cmp	r3, #40	; 0x28
 800ae8e:	d103      	bne.n	800ae98 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ae90:	2303      	movs	r3, #3
 800ae92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ae96:	e003      	b.n	800aea0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ae9e:	bf00      	nop
    }
  }

  return res;
 800aea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3748      	adds	r7, #72	; 0x48
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	2000345c 	.word	0x2000345c

0800aeb0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b094      	sub	sp, #80	; 0x50
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800aec6:	7bf9      	ldrb	r1, [r7, #15]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	4817      	ldr	r0, [pc, #92]	; (800af30 <USBH_write+0x80>)
 800aed2:	f000 fe88 	bl	800bbe6 <USBH_MSC_Write>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <USBH_write+0x34>
  {
    res = RES_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aee2:	e01f      	b.n	800af24 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800aee4:	f107 0210 	add.w	r2, r7, #16
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	4619      	mov	r1, r3
 800aeec:	4810      	ldr	r0, [pc, #64]	; (800af30 <USBH_write+0x80>)
 800aeee:	f000 fded 	bl	800bacc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800aef2:	7f7b      	ldrb	r3, [r7, #29]
 800aef4:	2b3a      	cmp	r3, #58	; 0x3a
 800aef6:	d00d      	beq.n	800af14 <USBH_write+0x64>
 800aef8:	2b3a      	cmp	r3, #58	; 0x3a
 800aefa:	dc0f      	bgt.n	800af1c <USBH_write+0x6c>
 800aefc:	2b28      	cmp	r3, #40	; 0x28
 800aefe:	d009      	beq.n	800af14 <USBH_write+0x64>
 800af00:	2b28      	cmp	r3, #40	; 0x28
 800af02:	dc0b      	bgt.n	800af1c <USBH_write+0x6c>
 800af04:	2b04      	cmp	r3, #4
 800af06:	d005      	beq.n	800af14 <USBH_write+0x64>
 800af08:	2b27      	cmp	r3, #39	; 0x27
 800af0a:	d107      	bne.n	800af1c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800af0c:	2302      	movs	r3, #2
 800af0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800af12:	e007      	b.n	800af24 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800af14:	2303      	movs	r3, #3
 800af16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800af1a:	e003      	b.n	800af24 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800af22:	bf00      	nop
    }
  }

  return res;
 800af24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3748      	adds	r7, #72	; 0x48
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	2000345c 	.word	0x2000345c

0800af34 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b090      	sub	sp, #64	; 0x40
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	603a      	str	r2, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
 800af40:	460b      	mov	r3, r1
 800af42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800af4a:	79bb      	ldrb	r3, [r7, #6]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d852      	bhi.n	800aff6 <USBH_ioctl+0xc2>
 800af50:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <USBH_ioctl+0x24>)
 800af52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af56:	bf00      	nop
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af71 	.word	0x0800af71
 800af60:	0800af9b 	.word	0x0800af9b
 800af64:	0800afc7 	.word	0x0800afc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800af6e:	e045      	b.n	800affc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800af70:	f107 0208 	add.w	r2, r7, #8
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	4619      	mov	r1, r3
 800af78:	4823      	ldr	r0, [pc, #140]	; (800b008 <USBH_ioctl+0xd4>)
 800af7a:	f000 fda7 	bl	800bacc <USBH_MSC_GetLUNInfo>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800af90:	e034      	b.n	800affc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800af98:	e030      	b.n	800affc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800af9a:	f107 0208 	add.w	r2, r7, #8
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	4619      	mov	r1, r3
 800afa2:	4819      	ldr	r0, [pc, #100]	; (800b008 <USBH_ioctl+0xd4>)
 800afa4:	f000 fd92 	bl	800bacc <USBH_MSC_GetLUNInfo>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d107      	bne.n	800afbe <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800afae:	8a3b      	ldrh	r3, [r7, #16]
 800afb0:	461a      	mov	r2, r3
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800afbc:	e01e      	b.n	800affc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800afc4:	e01a      	b.n	800affc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800afc6:	f107 0208 	add.w	r2, r7, #8
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	4619      	mov	r1, r3
 800afce:	480e      	ldr	r0, [pc, #56]	; (800b008 <USBH_ioctl+0xd4>)
 800afd0:	f000 fd7c 	bl	800bacc <USBH_MSC_GetLUNInfo>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d109      	bne.n	800afee <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800afda:	8a3b      	ldrh	r3, [r7, #16]
 800afdc:	0a5b      	lsrs	r3, r3, #9
 800afde:	b29b      	uxth	r3, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800afec:	e006      	b.n	800affc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aff4:	e002      	b.n	800affc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aff6:	2304      	movs	r3, #4
 800aff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800affc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b000:	4618      	mov	r0, r3
 800b002:	3740      	adds	r7, #64	; 0x40
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	2000345c 	.word	0x2000345c

0800b00c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b089      	sub	sp, #36	; 0x24
 800b010:	af04      	add	r7, sp, #16
 800b012:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b01a:	7919      	ldrb	r1, [r3, #4]
 800b01c:	2350      	movs	r3, #80	; 0x50
 800b01e:	2206      	movs	r2, #6
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 fc6b 	bl	800c8fc <USBH_FindInterface>
 800b026:	4603      	mov	r3, r0
 800b028:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2bff      	cmp	r3, #255	; 0xff
 800b02e:	d002      	beq.n	800b036 <USBH_MSC_InterfaceInit+0x2a>
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d901      	bls.n	800b03a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b036:	2302      	movs	r3, #2
 800b038:	e106      	b.n	800b248 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fc40 	bl	800c8c4 <USBH_SelectInterface>
 800b044:	4603      	mov	r3, r0
 800b046:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b04e:	2302      	movs	r3, #2
 800b050:	e0fa      	b.n	800b248 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b058:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b05c:	f003 fb94 	bl	800e788 <malloc>
 800b060:	4603      	mov	r3, r0
 800b062:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b074:	2302      	movs	r3, #2
 800b076:	e0e7      	b.n	800b248 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b07c:	2100      	movs	r1, #0
 800b07e:	68b8      	ldr	r0, [r7, #8]
 800b080:	f003 fba0 	bl	800e7c4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	211a      	movs	r1, #26
 800b08a:	fb01 f303 	mul.w	r3, r1, r3
 800b08e:	4413      	add	r3, r2
 800b090:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	b25b      	sxtb	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da16      	bge.n	800b0ca <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	211a      	movs	r1, #26
 800b0a2:	fb01 f303 	mul.w	r3, r1, r3
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	211a      	movs	r1, #26
 800b0b8:	fb01 f303 	mul.w	r3, r1, r3
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b0c2:	881a      	ldrh	r2, [r3, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	815a      	strh	r2, [r3, #10]
 800b0c8:	e015      	b.n	800b0f6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	211a      	movs	r1, #26
 800b0d0:	fb01 f303 	mul.w	r3, r1, r3
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0da:	781a      	ldrb	r2, [r3, #0]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	211a      	movs	r1, #26
 800b0e6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b0f0:	881a      	ldrh	r2, [r3, #0]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	211a      	movs	r1, #26
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b25b      	sxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	da16      	bge.n	800b13c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	211a      	movs	r1, #26
 800b114:	fb01 f303 	mul.w	r3, r1, r3
 800b118:	4413      	add	r3, r2
 800b11a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b11e:	781a      	ldrb	r2, [r3, #0]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	211a      	movs	r1, #26
 800b12a:	fb01 f303 	mul.w	r3, r1, r3
 800b12e:	4413      	add	r3, r2
 800b130:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b134:	881a      	ldrh	r2, [r3, #0]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	815a      	strh	r2, [r3, #10]
 800b13a:	e015      	b.n	800b168 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	211a      	movs	r1, #26
 800b142:	fb01 f303 	mul.w	r3, r1, r3
 800b146:	4413      	add	r3, r2
 800b148:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	211a      	movs	r1, #26
 800b158:	fb01 f303 	mul.w	r3, r1, r3
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2200      	movs	r2, #0
 800b16c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2200      	movs	r2, #0
 800b172:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	799b      	ldrb	r3, [r3, #6]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fed6 	bl	800df32 <USBH_AllocPipe>
 800b186:	4603      	mov	r3, r0
 800b188:	461a      	mov	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	79db      	ldrb	r3, [r3, #7]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f002 fecc 	bl	800df32 <USBH_AllocPipe>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fdc4 	bl	800bd30 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	799b      	ldrb	r3, [r3, #6]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01e      	beq.n	800b1ee <USBH_MSC_InterfaceInit+0x1e2>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	891b      	ldrh	r3, [r3, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d01a      	beq.n	800b1ee <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	7959      	ldrb	r1, [r3, #5]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	7998      	ldrb	r0, [r3, #6]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	8912      	ldrh	r2, [r2, #8]
 800b1d0:	9202      	str	r2, [sp, #8]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	9201      	str	r2, [sp, #4]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	4623      	mov	r3, r4
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f002 fe79 	bl	800ded4 <USBH_OpenPipe>
 800b1e2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	79db      	ldrb	r3, [r3, #7]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02c      	beq.n	800b246 <USBH_MSC_InterfaceInit+0x23a>
 800b1ec:	e001      	b.n	800b1f2 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e02a      	b.n	800b248 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	895b      	ldrh	r3, [r3, #10]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d025      	beq.n	800b246 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	7919      	ldrb	r1, [r3, #4]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	79d8      	ldrb	r0, [r3, #7]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	8952      	ldrh	r2, [r2, #10]
 800b212:	9202      	str	r2, [sp, #8]
 800b214:	2202      	movs	r2, #2
 800b216:	9201      	str	r2, [sp, #4]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4623      	mov	r3, r4
 800b21c:	4602      	mov	r2, r0
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f002 fe58 	bl	800ded4 <USBH_OpenPipe>
 800b224:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	791b      	ldrb	r3, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f003 f9c8 	bl	800e5c4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	795b      	ldrb	r3, [r3, #5]
 800b238:	2200      	movs	r2, #0
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f003 f9c1 	bl	800e5c4 <USBH_LL_SetToggle>

  return USBH_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	e000      	b.n	800b248 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b246:	2303      	movs	r3, #3
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}

0800b250 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	795b      	ldrb	r3, [r3, #5]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00e      	beq.n	800b288 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	795b      	ldrb	r3, [r3, #5]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f002 fe4e 	bl	800df12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	795b      	ldrb	r3, [r3, #5]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f002 fe79 	bl	800df74 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	791b      	ldrb	r3, [r3, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00e      	beq.n	800b2ae <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	791b      	ldrb	r3, [r3, #4]
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fe3b 	bl	800df12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	791b      	ldrb	r3, [r3, #4]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f002 fe66 	bl	800df74 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f003 fa68 	bl	800e798 <free>
    phost->pActiveClass->pData = 0U;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	7b9b      	ldrb	r3, [r3, #14]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d041      	beq.n	800b37e <USBH_MSC_ClassRequest+0xa2>
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	dc4b      	bgt.n	800b396 <USBH_MSC_ClassRequest+0xba>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <USBH_MSC_ClassRequest+0x2a>
 800b302:	2b02      	cmp	r3, #2
 800b304:	d147      	bne.n	800b396 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fcf1 	bl	800bcf2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	2b03      	cmp	r3, #3
 800b318:	d104      	bne.n	800b324 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2200      	movs	r2, #0
 800b31e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d137      	bne.n	800b39a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d804      	bhi.n	800b33c <USBH_MSC_ClassRequest+0x60>
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	e000      	b.n	800b33e <USBH_MSC_ClassRequest+0x62>
 800b33c:	2202      	movs	r2, #2
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b342:	2300      	movs	r3, #0
 800b344:	73bb      	strb	r3, [r7, #14]
 800b346:	e014      	b.n	800b372 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	2134      	movs	r1, #52	; 0x34
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	4413      	add	r3, r2
 800b354:	3392      	adds	r3, #146	; 0x92
 800b356:	2202      	movs	r2, #2
 800b358:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	2134      	movs	r1, #52	; 0x34
 800b360:	fb01 f303 	mul.w	r3, r1, r3
 800b364:	4413      	add	r3, r2
 800b366:	33c1      	adds	r3, #193	; 0xc1
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	3301      	adds	r3, #1
 800b370:	73bb      	strb	r3, [r7, #14]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	7bba      	ldrb	r2, [r7, #14]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d3e5      	bcc.n	800b348 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b37c:	e00d      	b.n	800b39a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f002 f888 	bl	800d496 <USBH_ClrFeature>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	7bda      	ldrb	r2, [r3, #15]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b394:	e003      	b.n	800b39e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b396:	bf00      	nop
 800b398:	e002      	b.n	800b3a0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b39a:	bf00      	nop
 800b39c:	e000      	b.n	800b3a0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b39e:	bf00      	nop
  }

  return status;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	7b1b      	ldrb	r3, [r3, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <USBH_MSC_Process+0x2e>
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	f000 8271 	beq.w	800b8ba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b3d8:	e272      	b.n	800b8c0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	f080 824f 	bcs.w	800b88a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	2334      	movs	r3, #52	; 0x34
 800b3f8:	fb01 f303 	mul.w	r3, r1, r3
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3391      	adds	r3, #145	; 0x91
 800b400:	2201      	movs	r2, #1
 800b402:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b40a:	4619      	mov	r1, r3
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	2334      	movs	r3, #52	; 0x34
 800b410:	fb01 f303 	mul.w	r3, r1, r3
 800b414:	4413      	add	r3, r2
 800b416:	3390      	adds	r3, #144	; 0x90
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b08      	cmp	r3, #8
 800b41c:	f200 8243 	bhi.w	800b8a6 <USBH_MSC_Process+0x4fa>
 800b420:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <USBH_MSC_Process+0x7c>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b44d 	.word	0x0800b44d
 800b42c:	0800b8a7 	.word	0x0800b8a7
 800b430:	0800b515 	.word	0x0800b515
 800b434:	0800b699 	.word	0x0800b699
 800b438:	0800b473 	.word	0x0800b473
 800b43c:	0800b765 	.word	0x0800b765
 800b440:	0800b8a7 	.word	0x0800b8a7
 800b444:	0800b8a7 	.word	0x0800b8a7
 800b448:	0800b879 	.word	0x0800b879
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b452:	4619      	mov	r1, r3
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	2334      	movs	r3, #52	; 0x34
 800b458:	fb01 f303 	mul.w	r3, r1, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	3390      	adds	r3, #144	; 0x90
 800b460:	2204      	movs	r2, #4
 800b462:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b470:	e222      	b.n	800b8b8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b478:	b2d9      	uxtb	r1, r3
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b480:	461a      	mov	r2, r3
 800b482:	2334      	movs	r3, #52	; 0x34
 800b484:	fb02 f303 	mul.w	r3, r2, r3
 800b488:	3398      	adds	r3, #152	; 0x98
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4413      	add	r3, r2
 800b48e:	3307      	adds	r3, #7
 800b490:	461a      	mov	r2, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 ff6a 	bl	800c36c <USBH_MSC_SCSI_Inquiry>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10b      	bne.n	800b4ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	2334      	movs	r3, #52	; 0x34
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	4413      	add	r3, r2
 800b4b4:	3390      	adds	r3, #144	; 0x90
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d10c      	bne.n	800b4da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	2334      	movs	r3, #52	; 0x34
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	3390      	adds	r3, #144	; 0x90
 800b4d4:	2205      	movs	r2, #5
 800b4d6:	701a      	strb	r2, [r3, #0]
            break;
 800b4d8:	e1e7      	b.n	800b8aa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	f040 81e4 	bne.w	800b8aa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	2334      	movs	r3, #52	; 0x34
 800b4ee:	fb01 f303 	mul.w	r3, r1, r3
 800b4f2:	4413      	add	r3, r2
 800b4f4:	3390      	adds	r3, #144	; 0x90
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b500:	4619      	mov	r1, r3
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	2334      	movs	r3, #52	; 0x34
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	4413      	add	r3, r2
 800b50c:	3391      	adds	r3, #145	; 0x91
 800b50e:	2202      	movs	r2, #2
 800b510:	701a      	strb	r2, [r3, #0]
            break;
 800b512:	e1ca      	b.n	800b8aa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fe66 	bl	800c1f0 <USBH_MSC_SCSI_TestUnitReady>
 800b524:	4603      	mov	r3, r0
 800b526:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d149      	bne.n	800b5c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b534:	4619      	mov	r1, r3
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	2334      	movs	r3, #52	; 0x34
 800b53a:	fb01 f303 	mul.w	r3, r1, r3
 800b53e:	4413      	add	r3, r2
 800b540:	3392      	adds	r3, #146	; 0x92
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00c      	beq.n	800b562 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b54e:	4619      	mov	r1, r3
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	2334      	movs	r3, #52	; 0x34
 800b554:	fb01 f303 	mul.w	r3, r1, r3
 800b558:	4413      	add	r3, r2
 800b55a:	33c1      	adds	r3, #193	; 0xc1
 800b55c:	2201      	movs	r2, #1
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e00b      	b.n	800b57a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b568:	4619      	mov	r1, r3
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	2334      	movs	r3, #52	; 0x34
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	33c1      	adds	r3, #193	; 0xc1
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b580:	4619      	mov	r1, r3
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	2334      	movs	r3, #52	; 0x34
 800b586:	fb01 f303 	mul.w	r3, r1, r3
 800b58a:	4413      	add	r3, r2
 800b58c:	3390      	adds	r3, #144	; 0x90
 800b58e:	2203      	movs	r2, #3
 800b590:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b598:	4619      	mov	r1, r3
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	2334      	movs	r3, #52	; 0x34
 800b59e:	fb01 f303 	mul.w	r3, r1, r3
 800b5a2:	4413      	add	r3, r2
 800b5a4:	3391      	adds	r3, #145	; 0x91
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	2334      	movs	r3, #52	; 0x34
 800b5b6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3392      	adds	r3, #146	; 0x92
 800b5be:	2200      	movs	r2, #0
 800b5c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d14a      	bne.n	800b65e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	2334      	movs	r3, #52	; 0x34
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	4413      	add	r3, r2
 800b5da:	3392      	adds	r3, #146	; 0x92
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d00c      	beq.n	800b5fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	2334      	movs	r3, #52	; 0x34
 800b5ee:	fb01 f303 	mul.w	r3, r1, r3
 800b5f2:	4413      	add	r3, r2
 800b5f4:	33c1      	adds	r3, #193	; 0xc1
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	e00b      	b.n	800b614 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b602:	4619      	mov	r1, r3
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	2334      	movs	r3, #52	; 0x34
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	33c1      	adds	r3, #193	; 0xc1
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b61a:	4619      	mov	r1, r3
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	2334      	movs	r3, #52	; 0x34
 800b620:	fb01 f303 	mul.w	r3, r1, r3
 800b624:	4413      	add	r3, r2
 800b626:	3390      	adds	r3, #144	; 0x90
 800b628:	2205      	movs	r2, #5
 800b62a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b632:	4619      	mov	r1, r3
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	2334      	movs	r3, #52	; 0x34
 800b638:	fb01 f303 	mul.w	r3, r1, r3
 800b63c:	4413      	add	r3, r2
 800b63e:	3391      	adds	r3, #145	; 0x91
 800b640:	2201      	movs	r2, #1
 800b642:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b64a:	4619      	mov	r1, r3
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	2334      	movs	r3, #52	; 0x34
 800b650:	fb01 f303 	mul.w	r3, r1, r3
 800b654:	4413      	add	r3, r2
 800b656:	3392      	adds	r3, #146	; 0x92
 800b658:	2202      	movs	r2, #2
 800b65a:	701a      	strb	r2, [r3, #0]
            break;
 800b65c:	e127      	b.n	800b8ae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b65e:	7bbb      	ldrb	r3, [r7, #14]
 800b660:	2b04      	cmp	r3, #4
 800b662:	f040 8124 	bne.w	800b8ae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b66c:	4619      	mov	r1, r3
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	2334      	movs	r3, #52	; 0x34
 800b672:	fb01 f303 	mul.w	r3, r1, r3
 800b676:	4413      	add	r3, r2
 800b678:	3390      	adds	r3, #144	; 0x90
 800b67a:	2201      	movs	r2, #1
 800b67c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b684:	4619      	mov	r1, r3
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	2334      	movs	r3, #52	; 0x34
 800b68a:	fb01 f303 	mul.w	r3, r1, r3
 800b68e:	4413      	add	r3, r2
 800b690:	3391      	adds	r3, #145	; 0x91
 800b692:	2202      	movs	r2, #2
 800b694:	701a      	strb	r2, [r3, #0]
            break;
 800b696:	e10a      	b.n	800b8ae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b69e:	b2d9      	uxtb	r1, r3
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	2334      	movs	r3, #52	; 0x34
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
 800b6ae:	3390      	adds	r3, #144	; 0x90
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fddc 	bl	800c276 <USBH_MSC_SCSI_ReadCapacity>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d120      	bne.n	800b70a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	2334      	movs	r3, #52	; 0x34
 800b6d4:	fb01 f303 	mul.w	r3, r1, r3
 800b6d8:	4413      	add	r3, r2
 800b6da:	3390      	adds	r3, #144	; 0x90
 800b6dc:	2201      	movs	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	2334      	movs	r3, #52	; 0x34
 800b6ec:	fb01 f303 	mul.w	r3, r1, r3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3391      	adds	r3, #145	; 0x91
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6fe:	3301      	adds	r3, #1
 800b700:	b29a      	uxth	r2, r3
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b708:	e0d3      	b.n	800b8b2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d10c      	bne.n	800b72a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b716:	4619      	mov	r1, r3
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	2334      	movs	r3, #52	; 0x34
 800b71c:	fb01 f303 	mul.w	r3, r1, r3
 800b720:	4413      	add	r3, r2
 800b722:	3390      	adds	r3, #144	; 0x90
 800b724:	2205      	movs	r2, #5
 800b726:	701a      	strb	r2, [r3, #0]
            break;
 800b728:	e0c3      	b.n	800b8b2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	f040 80c0 	bne.w	800b8b2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b738:	4619      	mov	r1, r3
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	2334      	movs	r3, #52	; 0x34
 800b73e:	fb01 f303 	mul.w	r3, r1, r3
 800b742:	4413      	add	r3, r2
 800b744:	3390      	adds	r3, #144	; 0x90
 800b746:	2201      	movs	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b750:	4619      	mov	r1, r3
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	2334      	movs	r3, #52	; 0x34
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	4413      	add	r3, r2
 800b75c:	3391      	adds	r3, #145	; 0x91
 800b75e:	2202      	movs	r2, #2
 800b760:	701a      	strb	r2, [r3, #0]
            break;
 800b762:	e0a6      	b.n	800b8b2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b76a:	b2d9      	uxtb	r1, r3
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b772:	461a      	mov	r2, r3
 800b774:	2334      	movs	r3, #52	; 0x34
 800b776:	fb02 f303 	mul.w	r3, r2, r3
 800b77a:	3398      	adds	r3, #152	; 0x98
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4413      	add	r3, r2
 800b780:	3304      	adds	r3, #4
 800b782:	461a      	mov	r2, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fe96 	bl	800c4b6 <USBH_MSC_SCSI_RequestSense>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d145      	bne.n	800b820 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b79a:	4619      	mov	r1, r3
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	2334      	movs	r3, #52	; 0x34
 800b7a0:	fb01 f303 	mul.w	r3, r1, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	339c      	adds	r3, #156	; 0x9c
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	2b06      	cmp	r3, #6
 800b7ac:	d00c      	beq.n	800b7c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	2334      	movs	r3, #52	; 0x34
 800b7ba:	fb01 f303 	mul.w	r3, r1, r3
 800b7be:	4413      	add	r3, r2
 800b7c0:	339c      	adds	r3, #156	; 0x9c
 800b7c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d117      	bne.n	800b7f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	f242 720f 	movw	r2, #9999	; 0x270f
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d80c      	bhi.n	800b7f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	693a      	ldr	r2, [r7, #16]
 800b7e8:	2334      	movs	r3, #52	; 0x34
 800b7ea:	fb01 f303 	mul.w	r3, r1, r3
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3390      	adds	r3, #144	; 0x90
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	701a      	strb	r2, [r3, #0]
                  break;
 800b7f6:	e05f      	b.n	800b8b8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7fe:	4619      	mov	r1, r3
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	2334      	movs	r3, #52	; 0x34
 800b804:	fb01 f303 	mul.w	r3, r1, r3
 800b808:	4413      	add	r3, r2
 800b80a:	3390      	adds	r3, #144	; 0x90
 800b80c:	2201      	movs	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b816:	3301      	adds	r3, #1
 800b818:	b29a      	uxth	r2, r3
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d10c      	bne.n	800b840 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b82c:	4619      	mov	r1, r3
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	2334      	movs	r3, #52	; 0x34
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	4413      	add	r3, r2
 800b838:	3390      	adds	r3, #144	; 0x90
 800b83a:	2208      	movs	r2, #8
 800b83c:	701a      	strb	r2, [r3, #0]
            break;
 800b83e:	e03a      	b.n	800b8b6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b04      	cmp	r3, #4
 800b844:	d137      	bne.n	800b8b6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b84c:	4619      	mov	r1, r3
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	2334      	movs	r3, #52	; 0x34
 800b852:	fb01 f303 	mul.w	r3, r1, r3
 800b856:	4413      	add	r3, r2
 800b858:	3390      	adds	r3, #144	; 0x90
 800b85a:	2201      	movs	r2, #1
 800b85c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b864:	4619      	mov	r1, r3
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	2334      	movs	r3, #52	; 0x34
 800b86a:	fb01 f303 	mul.w	r3, r1, r3
 800b86e:	4413      	add	r3, r2
 800b870:	3391      	adds	r3, #145	; 0x91
 800b872:	2202      	movs	r2, #2
 800b874:	701a      	strb	r2, [r3, #0]
            break;
 800b876:	e01e      	b.n	800b8b6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b87e:	3301      	adds	r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b888:	e016      	b.n	800b8b8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	2201      	movs	r2, #1
 800b896:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b89e:	2102      	movs	r1, #2
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	4798      	blx	r3
      break;
 800b8a4:	e00c      	b.n	800b8c0 <USBH_MSC_Process+0x514>
            break;
 800b8a6:	bf00      	nop
 800b8a8:	e00a      	b.n	800b8c0 <USBH_MSC_Process+0x514>
            break;
 800b8aa:	bf00      	nop
 800b8ac:	e008      	b.n	800b8c0 <USBH_MSC_Process+0x514>
            break;
 800b8ae:	bf00      	nop
 800b8b0:	e006      	b.n	800b8c0 <USBH_MSC_Process+0x514>
            break;
 800b8b2:	bf00      	nop
 800b8b4:	e004      	b.n	800b8c0 <USBH_MSC_Process+0x514>
            break;
 800b8b6:	bf00      	nop
      break;
 800b8b8:	e002      	b.n	800b8c0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b8be:	bf00      	nop
  }
  return error;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop

0800b8cc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af02      	add	r7, sp, #8
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	2134      	movs	r1, #52	; 0x34
 800b906:	fb01 f303 	mul.w	r3, r1, r3
 800b90a:	4413      	add	r3, r2
 800b90c:	3390      	adds	r3, #144	; 0x90
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b07      	cmp	r3, #7
 800b912:	d03c      	beq.n	800b98e <USBH_MSC_RdWrProcess+0xac>
 800b914:	2b07      	cmp	r3, #7
 800b916:	f300 80a7 	bgt.w	800ba68 <USBH_MSC_RdWrProcess+0x186>
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d06c      	beq.n	800b9f8 <USBH_MSC_RdWrProcess+0x116>
 800b91e:	2b06      	cmp	r3, #6
 800b920:	f040 80a2 	bne.w	800ba68 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b924:	78f9      	ldrb	r1, [r7, #3]
 800b926:	2300      	movs	r3, #0
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	2300      	movs	r3, #0
 800b92c:	2200      	movs	r2, #0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fea5 	bl	800c67e <USBH_MSC_SCSI_Read>
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10b      	bne.n	800b956 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	2134      	movs	r1, #52	; 0x34
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	4413      	add	r3, r2
 800b94a:	3390      	adds	r3, #144	; 0x90
 800b94c:	2201      	movs	r2, #1
 800b94e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b954:	e08a      	b.n	800ba6c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d109      	bne.n	800b970 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b95c:	78fb      	ldrb	r3, [r7, #3]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	2134      	movs	r1, #52	; 0x34
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	4413      	add	r3, r2
 800b968:	3390      	adds	r3, #144	; 0x90
 800b96a:	2205      	movs	r2, #5
 800b96c:	701a      	strb	r2, [r3, #0]
      break;
 800b96e:	e07d      	b.n	800ba6c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	2b04      	cmp	r3, #4
 800b974:	d17a      	bne.n	800ba6c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b976:	78fb      	ldrb	r3, [r7, #3]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	2134      	movs	r1, #52	; 0x34
 800b97c:	fb01 f303 	mul.w	r3, r1, r3
 800b980:	4413      	add	r3, r2
 800b982:	3390      	adds	r3, #144	; 0x90
 800b984:	2208      	movs	r2, #8
 800b986:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b988:	2302      	movs	r3, #2
 800b98a:	75fb      	strb	r3, [r7, #23]
      break;
 800b98c:	e06e      	b.n	800ba6c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b98e:	78f9      	ldrb	r1, [r7, #3]
 800b990:	2300      	movs	r3, #0
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	2300      	movs	r3, #0
 800b996:	2200      	movs	r2, #0
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fe05 	bl	800c5a8 <USBH_MSC_SCSI_Write>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10b      	bne.n	800b9c0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b9a8:	78fb      	ldrb	r3, [r7, #3]
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	2134      	movs	r1, #52	; 0x34
 800b9ae:	fb01 f303 	mul.w	r3, r1, r3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3390      	adds	r3, #144	; 0x90
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9be:	e057      	b.n	800ba70 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d109      	bne.n	800b9da <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b9c6:	78fb      	ldrb	r3, [r7, #3]
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	2134      	movs	r1, #52	; 0x34
 800b9cc:	fb01 f303 	mul.w	r3, r1, r3
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3390      	adds	r3, #144	; 0x90
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	701a      	strb	r2, [r3, #0]
      break;
 800b9d8:	e04a      	b.n	800ba70 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d147      	bne.n	800ba70 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	2134      	movs	r1, #52	; 0x34
 800b9e6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3390      	adds	r3, #144	; 0x90
 800b9ee:	2208      	movs	r2, #8
 800b9f0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	e03b      	b.n	800ba70 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	2234      	movs	r2, #52	; 0x34
 800b9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ba00:	3398      	adds	r3, #152	; 0x98
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4413      	add	r3, r2
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fd52 	bl	800c4b6 <USBH_MSC_SCSI_RequestSense>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d113      	bne.n	800ba44 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	2134      	movs	r1, #52	; 0x34
 800ba22:	fb01 f303 	mul.w	r3, r1, r3
 800ba26:	4413      	add	r3, r2
 800ba28:	3390      	adds	r3, #144	; 0x90
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800ba2e:	78fb      	ldrb	r3, [r7, #3]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	2134      	movs	r1, #52	; 0x34
 800ba34:	fb01 f303 	mul.w	r3, r1, r3
 800ba38:	4413      	add	r3, r2
 800ba3a:	3391      	adds	r3, #145	; 0x91
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800ba40:	2302      	movs	r3, #2
 800ba42:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d014      	beq.n	800ba74 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d111      	bne.n	800ba74 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	2134      	movs	r1, #52	; 0x34
 800ba56:	fb01 f303 	mul.w	r3, r1, r3
 800ba5a:	4413      	add	r3, r2
 800ba5c:	3390      	adds	r3, #144	; 0x90
 800ba5e:	2208      	movs	r2, #8
 800ba60:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ba62:	2302      	movs	r3, #2
 800ba64:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba66:	e005      	b.n	800ba74 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800ba68:	bf00      	nop
 800ba6a:	e004      	b.n	800ba76 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ba6c:	bf00      	nop
 800ba6e:	e002      	b.n	800ba76 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ba70:	bf00      	nop
 800ba72:	e000      	b.n	800ba76 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ba74:	bf00      	nop

  }
  return error;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b0b      	cmp	r3, #11
 800ba9e:	d10c      	bne.n	800baba <USBH_MSC_UnitIsReady+0x3a>
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	2134      	movs	r1, #52	; 0x34
 800baa6:	fb01 f303 	mul.w	r3, r1, r3
 800baaa:	4413      	add	r3, r2
 800baac:	3391      	adds	r3, #145	; 0x91
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
 800bab8:	e001      	b.n	800babe <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800baba:	2300      	movs	r3, #0
 800babc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800babe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	460b      	mov	r3, r1
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b0b      	cmp	r3, #11
 800baec:	d10d      	bne.n	800bb0a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	2234      	movs	r2, #52	; 0x34
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	3390      	adds	r3, #144	; 0x90
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4413      	add	r3, r2
 800bafc:	2234      	movs	r2, #52	; 0x34
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f002 fe51 	bl	800e7a8 <memcpy>
    return USBH_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	607a      	str	r2, [r7, #4]
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	460b      	mov	r3, r1
 800bb22:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00e      	beq.n	800bb58 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bb40:	2b0b      	cmp	r3, #11
 800bb42:	d109      	bne.n	800bb58 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bb44:	7afb      	ldrb	r3, [r7, #11]
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	2134      	movs	r1, #52	; 0x34
 800bb4a:	fb01 f303 	mul.w	r3, r1, r3
 800bb4e:	4413      	add	r3, r2
 800bb50:	3390      	adds	r3, #144	; 0x90
 800bb52:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d001      	beq.n	800bb5c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	e040      	b.n	800bbde <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2206      	movs	r2, #6
 800bb60:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	2134      	movs	r1, #52	; 0x34
 800bb68:	fb01 f303 	mul.w	r3, r1, r3
 800bb6c:	4413      	add	r3, r2
 800bb6e:	3390      	adds	r3, #144	; 0x90
 800bb70:	2206      	movs	r2, #6
 800bb72:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bb7e:	7af9      	ldrb	r1, [r7, #11]
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 fd78 	bl	800c67e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb94:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb96:	e016      	b.n	800bbc6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	1ad2      	subs	r2, r2, r3
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	f242 7110 	movw	r1, #10000	; 0x2710
 800bba8:	fb01 f303 	mul.w	r3, r1, r3
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d805      	bhi.n	800bbbc <USBH_MSC_Read+0xa8>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d104      	bne.n	800bbc6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	e00b      	b.n	800bbde <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff fe89 	bl	800b8e2 <USBH_MSC_RdWrProcess>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d0e0      	beq.n	800bb98 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b088      	sub	sp, #32
 800bbea:	af02      	add	r7, sp, #8
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	603b      	str	r3, [r7, #0]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bc12:	2b0b      	cmp	r3, #11
 800bc14:	d109      	bne.n	800bc2a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	2134      	movs	r1, #52	; 0x34
 800bc1c:	fb01 f303 	mul.w	r3, r1, r3
 800bc20:	4413      	add	r3, r2
 800bc22:	3390      	adds	r3, #144	; 0x90
 800bc24:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d001      	beq.n	800bc2e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e040      	b.n	800bcb0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2207      	movs	r2, #7
 800bc32:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	2134      	movs	r1, #52	; 0x34
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	4413      	add	r3, r2
 800bc40:	3390      	adds	r3, #144	; 0x90
 800bc42:	2207      	movs	r2, #7
 800bc44:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bc50:	7af9      	ldrb	r1, [r7, #11]
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f000 fca4 	bl	800c5a8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc66:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc68:	e016      	b.n	800bc98 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	f242 7110 	movw	r1, #10000	; 0x2710
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d805      	bhi.n	800bc8e <USBH_MSC_Write+0xa8>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d104      	bne.n	800bc98 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2201      	movs	r2, #1
 800bc92:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bc94:	2302      	movs	r3, #2
 800bc96:	e00b      	b.n	800bcb0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff fe20 	bl	800b8e2 <USBH_MSC_RdWrProcess>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d0e0      	beq.n	800bc6a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2221      	movs	r2, #33	; 0x21
 800bcc4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	22ff      	movs	r2, #255	; 0xff
 800bcca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bcde:	2200      	movs	r2, #0
 800bce0:	2100      	movs	r1, #0
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 fea4 	bl	800da30 <USBH_CtlReq>
 800bce8:	4603      	mov	r3, r0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	22a1      	movs	r2, #161	; 0xa1
 800bd00:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	22fe      	movs	r2, #254	; 0xfe
 800bd06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f001 fe86 	bl	800da30 <USBH_CtlReq>
 800bd24:	4603      	mov	r3, r0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4a09      	ldr	r2, [pc, #36]	; (800bd6c <USBH_MSC_BOT_Init+0x3c>)
 800bd46:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <USBH_MSC_BOT_Init+0x40>)
 800bd4c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	43425355 	.word	0x43425355
 800bd70:	20304050 	.word	0x20304050

0800bd74 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bd80:	2301      	movs	r3, #1
 800bd82:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd96:	69db      	ldr	r3, [r3, #28]
 800bd98:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bda4:	3b01      	subs	r3, #1
 800bda6:	2b0a      	cmp	r3, #10
 800bda8:	f200 819e 	bhi.w	800c0e8 <USBH_MSC_BOT_Process+0x374>
 800bdac:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <USBH_MSC_BOT_Process+0x40>)
 800bdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb2:	bf00      	nop
 800bdb4:	0800bde1 	.word	0x0800bde1
 800bdb8:	0800be09 	.word	0x0800be09
 800bdbc:	0800be73 	.word	0x0800be73
 800bdc0:	0800be91 	.word	0x0800be91
 800bdc4:	0800bf15 	.word	0x0800bf15
 800bdc8:	0800bf37 	.word	0x0800bf37
 800bdcc:	0800bfcf 	.word	0x0800bfcf
 800bdd0:	0800bfeb 	.word	0x0800bfeb
 800bdd4:	0800c03d 	.word	0x0800c03d
 800bdd8:	0800c06d 	.word	0x0800c06d
 800bddc:	0800c0cf 	.word	0x0800c0cf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2202      	movs	r2, #2
 800bdec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	795b      	ldrb	r3, [r3, #5]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	9200      	str	r2, [sp, #0]
 800bdfe:	221f      	movs	r2, #31
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f002 f824 	bl	800de4e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800be06:	e17e      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	795b      	ldrb	r3, [r3, #5]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f002 fbae 	bl	800e570 <USBH_LL_GetURBState>
 800be14:	4603      	mov	r3, r0
 800be16:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800be18:	7d3b      	ldrb	r3, [r7, #20]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d118      	bne.n	800be50 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00f      	beq.n	800be46 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800be2c:	b25b      	sxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da04      	bge.n	800be3c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2203      	movs	r2, #3
 800be36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be3a:	e157      	b.n	800c0ec <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	2205      	movs	r2, #5
 800be40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be44:	e152      	b.n	800c0ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2207      	movs	r2, #7
 800be4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be4e:	e14d      	b.n	800c0ec <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be50:	7d3b      	ldrb	r3, [r7, #20]
 800be52:	2b02      	cmp	r3, #2
 800be54:	d104      	bne.n	800be60 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be5e:	e145      	b.n	800c0ec <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800be60:	7d3b      	ldrb	r3, [r7, #20]
 800be62:	2b05      	cmp	r3, #5
 800be64:	f040 8142 	bne.w	800c0ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	220a      	movs	r2, #10
 800be6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be70:	e13c      	b.n	800c0ec <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	895a      	ldrh	r2, [r3, #10]
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	791b      	ldrb	r3, [r3, #4]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f002 f809 	bl	800de98 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2204      	movs	r2, #4
 800be8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800be8e:	e13a      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	791b      	ldrb	r3, [r3, #4]
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f002 fb6a 	bl	800e570 <USBH_LL_GetURBState>
 800be9c:	4603      	mov	r3, r0
 800be9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bea0:	7d3b      	ldrb	r3, [r7, #20]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d12d      	bne.n	800bf02 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	8952      	ldrh	r2, [r2, #10]
 800beae:	4293      	cmp	r3, r2
 800beb0:	d910      	bls.n	800bed4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	8952      	ldrh	r2, [r2, #10]
 800bebc:	441a      	add	r2, r3
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	8952      	ldrh	r2, [r2, #10]
 800becc:	1a9a      	subs	r2, r3, r2
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	65da      	str	r2, [r3, #92]	; 0x5c
 800bed2:	e002      	b.n	800beda <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2200      	movs	r2, #0
 800bed8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00a      	beq.n	800bef8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	895a      	ldrh	r2, [r3, #10]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	791b      	ldrb	r3, [r3, #4]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 ffd1 	bl	800de98 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bef6:	e0fb      	b.n	800c0f0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2207      	movs	r2, #7
 800befc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf00:	e0f6      	b.n	800c0f0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800bf02:	7d3b      	ldrb	r3, [r7, #20]
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	f040 80f3 	bne.w	800c0f0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2209      	movs	r2, #9
 800bf0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf12:	e0ed      	b.n	800c0f0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	891a      	ldrh	r2, [r3, #8]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	795b      	ldrb	r3, [r3, #5]
 800bf22:	2001      	movs	r0, #1
 800bf24:	9000      	str	r0, [sp, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 ff91 	bl	800de4e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	2206      	movs	r2, #6
 800bf30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf34:	e0e7      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	795b      	ldrb	r3, [r3, #5]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f002 fb17 	bl	800e570 <USBH_LL_GetURBState>
 800bf42:	4603      	mov	r3, r0
 800bf44:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf46:	7d3b      	ldrb	r3, [r7, #20]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d12f      	bne.n	800bfac <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	8912      	ldrh	r2, [r2, #8]
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d910      	bls.n	800bf7a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	8912      	ldrh	r2, [r2, #8]
 800bf62:	441a      	add	r2, r3
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	8912      	ldrh	r2, [r2, #8]
 800bf72:	1a9a      	subs	r2, r3, r2
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf78:	e002      	b.n	800bf80 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00c      	beq.n	800bfa2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	891a      	ldrh	r2, [r3, #8]
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	795b      	ldrb	r3, [r3, #5]
 800bf96:	2001      	movs	r0, #1
 800bf98:	9000      	str	r0, [sp, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 ff57 	bl	800de4e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bfa0:	e0a8      	b.n	800c0f4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfaa:	e0a3      	b.n	800c0f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bfac:	7d3b      	ldrb	r3, [r7, #20]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d104      	bne.n	800bfbc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2205      	movs	r2, #5
 800bfb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfba:	e09b      	b.n	800c0f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800bfbc:	7d3b      	ldrb	r3, [r7, #20]
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	f040 8098 	bne.w	800c0f4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	220a      	movs	r2, #10
 800bfc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfcc:	e092      	b.n	800c0f4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	791b      	ldrb	r3, [r3, #4]
 800bfd8:	220d      	movs	r2, #13
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 ff5c 	bl	800de98 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	2208      	movs	r2, #8
 800bfe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfe8:	e08d      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f002 fabd 	bl	800e570 <USBH_LL_GetURBState>
 800bff6:	4603      	mov	r3, r0
 800bff8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bffa:	7d3b      	ldrb	r3, [r7, #20]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d115      	bne.n	800c02c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8a9 	bl	800c168 <USBH_MSC_DecodeCSW>
 800c016:	4603      	mov	r3, r0
 800c018:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c01a:	7d7b      	ldrb	r3, [r7, #21]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d102      	bne.n	800c026 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c024:	e068      	b.n	800c0f8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c026:	2302      	movs	r3, #2
 800c028:	75fb      	strb	r3, [r7, #23]
      break;
 800c02a:	e065      	b.n	800c0f8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c02c:	7d3b      	ldrb	r3, [r7, #20]
 800c02e:	2b05      	cmp	r3, #5
 800c030:	d162      	bne.n	800c0f8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2209      	movs	r2, #9
 800c036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c03a:	e05d      	b.n	800c0f8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	2200      	movs	r2, #0
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f864 	bl	800c110 <USBH_MSC_BOT_Abort>
 800c048:	4603      	mov	r3, r0
 800c04a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c04c:	7dbb      	ldrb	r3, [r7, #22]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d104      	bne.n	800c05c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2207      	movs	r2, #7
 800c056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c05a:	e04f      	b.n	800c0fc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c05c:	7dbb      	ldrb	r3, [r7, #22]
 800c05e:	2b04      	cmp	r3, #4
 800c060:	d14c      	bne.n	800c0fc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	220b      	movs	r2, #11
 800c066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c06a:	e047      	b.n	800c0fc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c06c:	78fb      	ldrb	r3, [r7, #3]
 800c06e:	2201      	movs	r2, #1
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f84c 	bl	800c110 <USBH_MSC_BOT_Abort>
 800c078:	4603      	mov	r3, r0
 800c07a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d11d      	bne.n	800c0be <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	795b      	ldrb	r3, [r3, #5]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f002 facb 	bl	800e624 <USBH_LL_GetToggle>
 800c08e:	4603      	mov	r3, r0
 800c090:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	7959      	ldrb	r1, [r3, #5]
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	f1c3 0301 	rsb	r3, r3, #1
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	461a      	mov	r2, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f002 fa8f 	bl	800e5c4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	791b      	ldrb	r3, [r3, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f002 fa88 	bl	800e5c4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2209      	movs	r2, #9
 800c0b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c0bc:	e020      	b.n	800c100 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d11d      	bne.n	800c100 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	220b      	movs	r2, #11
 800c0c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0cc:	e018      	b.n	800c100 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff fdf2 	bl	800bcb8 <USBH_MSC_BOT_REQ_Reset>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d112      	bne.n	800c104 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c0e6:	e00d      	b.n	800c104 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c0e8:	bf00      	nop
 800c0ea:	e00c      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c0ec:	bf00      	nop
 800c0ee:	e00a      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e008      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c0f4:	bf00      	nop
 800c0f6:	e006      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e004      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c0fc:	bf00      	nop
 800c0fe:	e002      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c100:	bf00      	nop
 800c102:	e000      	b.n	800c106 <USBH_MSC_BOT_Process+0x392>
      break;
 800c104:	bf00      	nop
  }
  return status;
 800c106:	7dfb      	ldrb	r3, [r7, #23]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
 800c11c:	4613      	mov	r3, r2
 800c11e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c120:	2302      	movs	r3, #2
 800c122:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c12a:	69db      	ldr	r3, [r3, #28]
 800c12c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c12e:	78bb      	ldrb	r3, [r7, #2]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <USBH_MSC_BOT_Abort+0x2a>
 800c134:	2b01      	cmp	r3, #1
 800c136:	d009      	beq.n	800c14c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c138:	e011      	b.n	800c15e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	79db      	ldrb	r3, [r3, #7]
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f9a8 	bl	800d496 <USBH_ClrFeature>
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
      break;
 800c14a:	e008      	b.n	800c15e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	799b      	ldrb	r3, [r3, #6]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f99f 	bl	800d496 <USBH_ClrFeature>
 800c158:	4603      	mov	r3, r0
 800c15a:	73fb      	strb	r3, [r7, #15]
      break;
 800c15c:	bf00      	nop
  }
  return status;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c17a:	2301      	movs	r3, #1
 800c17c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	791b      	ldrb	r3, [r3, #4]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f002 f961 	bl	800e44c <USBH_LL_GetLastXferSize>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b0d      	cmp	r3, #13
 800c18e:	d002      	beq.n	800c196 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c190:	2302      	movs	r3, #2
 800c192:	73fb      	strb	r3, [r7, #15]
 800c194:	e024      	b.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c19a:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <USBH_MSC_DecodeCSW+0x84>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d11d      	bne.n	800c1dc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d119      	bne.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
 800c1ba:	e011      	b.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d102      	bne.n	800c1cc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	73fb      	strb	r3, [r7, #15]
 800c1ca:	e009      	b.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d104      	bne.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	73fb      	strb	r3, [r7, #15]
 800c1da:	e001      	b.n	800c1e0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c1dc:	2302      	movs	r3, #2
 800c1de:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	53425355 	.word	0x53425355

0800c1f0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c210:	2b01      	cmp	r3, #1
 800c212:	d002      	beq.n	800c21a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c214:	2b02      	cmp	r3, #2
 800c216:	d021      	beq.n	800c25c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c218:	e028      	b.n	800c26c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2200      	movs	r2, #0
 800c21e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	220a      	movs	r2, #10
 800c22c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	3363      	adds	r3, #99	; 0x63
 800c234:	2210      	movs	r2, #16
 800c236:	2100      	movs	r1, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f002 fac3 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2202      	movs	r2, #2
 800c252:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c256:	2301      	movs	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
      break;
 800c25a:	e007      	b.n	800c26c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff fd87 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c266:	4603      	mov	r3, r0
 800c268:	73fb      	strb	r3, [r7, #15]
      break;
 800c26a:	bf00      	nop
  }

  return error;
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b086      	sub	sp, #24
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	460b      	mov	r3, r1
 800c280:	607a      	str	r2, [r7, #4]
 800c282:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c284:	2301      	movs	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c28e:	69db      	ldr	r3, [r3, #28]
 800c290:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d002      	beq.n	800c2a2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d027      	beq.n	800c2f0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c2a0:	e05f      	b.n	800c362 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2208      	movs	r2, #8
 800c2a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	2280      	movs	r2, #128	; 0x80
 800c2ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	220a      	movs	r2, #10
 800c2b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	3363      	adds	r3, #99	; 0x63
 800c2bc:	2210      	movs	r2, #16
 800c2be:	2100      	movs	r1, #0
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f002 fa7f 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	2225      	movs	r2, #37	; 0x25
 800c2ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f103 0210 	add.w	r2, r3, #16
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ee:	e038      	b.n	800c362 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fd3d 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d12d      	bne.n	800c360 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30a:	3303      	adds	r3, #3
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c316:	3302      	adds	r3, #2
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c324:	3301      	adds	r3, #1
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c32a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c342:	3307      	adds	r3, #7
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	b29a      	uxth	r2, r3
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34e:	3306      	adds	r3, #6
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	021b      	lsls	r3, r3, #8
 800c356:	b29b      	uxth	r3, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	809a      	strh	r2, [r3, #4]
      break;
 800c360:	bf00      	nop
  }

  return error;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	460b      	mov	r3, r1
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c37a:	2302      	movs	r3, #2
 800c37c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d002      	beq.n	800c398 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c392:	2b02      	cmp	r3, #2
 800c394:	d03d      	beq.n	800c412 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c396:	e089      	b.n	800c4ac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2224      	movs	r2, #36	; 0x24
 800c39c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2280      	movs	r2, #128	; 0x80
 800c3a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	220a      	movs	r2, #10
 800c3aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	3363      	adds	r3, #99	; 0x63
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f002 fa04 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2212      	movs	r2, #18
 800c3c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	015b      	lsls	r3, r3, #5
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	2224      	movs	r2, #36	; 0x24
 800c3e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f103 0210 	add.w	r2, r3, #16
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c40c:	2301      	movs	r3, #1
 800c40e:	75fb      	strb	r3, [r7, #23]
      break;
 800c410:	e04c      	b.n	800c4ac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	4619      	mov	r1, r3
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff fcac 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c41c:	4603      	mov	r3, r0
 800c41e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c420:	7dfb      	ldrb	r3, [r7, #23]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d141      	bne.n	800c4aa <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c426:	2222      	movs	r2, #34	; 0x22
 800c428:	2100      	movs	r1, #0
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f002 f9ca 	bl	800e7c4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 031f 	and.w	r3, r3, #31
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	095b      	lsrs	r3, r3, #5
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c458:	3301      	adds	r3, #1
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b25b      	sxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	da03      	bge.n	800c46a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	709a      	strb	r2, [r3, #2]
 800c468:	e002      	b.n	800c470 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	1cd8      	adds	r0, r3, #3
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c47a:	3308      	adds	r3, #8
 800c47c:	2208      	movs	r2, #8
 800c47e:	4619      	mov	r1, r3
 800c480:	f002 f992 	bl	800e7a8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f103 000c 	add.w	r0, r3, #12
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c490:	3310      	adds	r3, #16
 800c492:	2210      	movs	r2, #16
 800c494:	4619      	mov	r1, r3
 800c496:	f002 f987 	bl	800e7a8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	331d      	adds	r3, #29
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c4a4:	3220      	adds	r2, #32
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	601a      	str	r2, [r3, #0]
      break;
 800c4aa:	bf00      	nop
  }

  return error;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	607a      	str	r2, [r7, #4]
 800c4c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d002      	beq.n	800c4e2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d03d      	beq.n	800c55c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c4e0:	e05d      	b.n	800c59e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	220e      	movs	r2, #14
 800c4e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	2280      	movs	r2, #128	; 0x80
 800c4ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	220a      	movs	r2, #10
 800c4f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	3363      	adds	r3, #99	; 0x63
 800c4fc:	2210      	movs	r2, #16
 800c4fe:	2100      	movs	r1, #0
 800c500:	4618      	mov	r0, r3
 800c502:	f002 f95f 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	015b      	lsls	r3, r3, #5
 800c512:	b2da      	uxtb	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	220e      	movs	r2, #14
 800c52e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2202      	movs	r2, #2
 800c546:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f103 0210 	add.w	r2, r3, #16
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c556:	2301      	movs	r3, #1
 800c558:	75fb      	strb	r3, [r7, #23]
      break;
 800c55a:	e020      	b.n	800c59e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c55c:	7afb      	ldrb	r3, [r7, #11]
 800c55e:	4619      	mov	r1, r3
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fc07 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c566:	4603      	mov	r3, r0
 800c568:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d115      	bne.n	800c59c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	3302      	adds	r3, #2
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c58a:	7b1a      	ldrb	r2, [r3, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c596:	7b5a      	ldrb	r2, [r3, #13]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	709a      	strb	r2, [r3, #2]
      break;
 800c59c:	bf00      	nop
  }

  return error;
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	607a      	str	r2, [r7, #4]
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d002      	beq.n	800c5d6 <USBH_MSC_SCSI_Write+0x2e>
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d047      	beq.n	800c664 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c5d4:	e04e      	b.n	800c674 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	fb03 f202 	mul.w	r2, r3, r2
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	220a      	movs	r2, #10
 800c5f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3363      	adds	r3, #99	; 0x63
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f002 f8df 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	222a      	movs	r2, #42	; 0x2a
 800c60a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c60e:	79fa      	ldrb	r2, [r7, #7]
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c616:	79ba      	ldrb	r2, [r7, #6]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c61e:	797a      	ldrb	r2, [r7, #5]
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c626:	1d3b      	adds	r3, r7, #4
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c630:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c63a:	f107 0320 	add.w	r3, r7, #32
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2202      	movs	r2, #2
 800c652:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c65e:	2301      	movs	r3, #1
 800c660:	75fb      	strb	r3, [r7, #23]
      break;
 800c662:	e007      	b.n	800c674 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c664:	7afb      	ldrb	r3, [r7, #11]
 800c666:	4619      	mov	r1, r3
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fb83 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]
      break;
 800c672:	bf00      	nop
  }

  return error;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	603b      	str	r3, [r7, #0]
 800c68a:	460b      	mov	r3, r1
 800c68c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c68e:	2302      	movs	r3, #2
 800c690:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d002      	beq.n	800c6ac <USBH_MSC_SCSI_Read+0x2e>
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d047      	beq.n	800c73a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c6aa:	e04e      	b.n	800c74a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	fb03 f202 	mul.w	r2, r3, r2
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2280      	movs	r2, #128	; 0x80
 800c6c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	220a      	movs	r2, #10
 800c6ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	3363      	adds	r3, #99	; 0x63
 800c6d2:	2210      	movs	r2, #16
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f002 f874 	bl	800e7c4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	2228      	movs	r2, #40	; 0x28
 800c6e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c6e4:	79fa      	ldrb	r2, [r7, #7]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c6ec:	79ba      	ldrb	r2, [r7, #6]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c6f4:	797a      	ldrb	r2, [r7, #5]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c6fc:	1d3b      	adds	r3, r7, #4
 800c6fe:	781a      	ldrb	r2, [r3, #0]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c706:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c710:	f107 0320 	add.w	r3, r7, #32
 800c714:	781a      	ldrb	r2, [r3, #0]
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2202      	movs	r2, #2
 800c728:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c734:	2301      	movs	r3, #1
 800c736:	75fb      	strb	r3, [r7, #23]
      break;
 800c738:	e007      	b.n	800c74a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	4619      	mov	r1, r3
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff fb18 	bl	800bd74 <USBH_MSC_BOT_Process>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]
      break;
 800c748:	bf00      	nop
  }

  return error;
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d101      	bne.n	800c76c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c768:	2302      	movs	r3, #2
 800c76a:	e029      	b.n	800c7c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	79fa      	ldrb	r2, [r7, #7]
 800c770:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f81f 	bl	800c7c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f001 fd89 	bl	800e2d0 <USBH_LL_Init>

  return USBH_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	e009      	b.n	800c7ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	33e0      	adds	r3, #224	; 0xe0
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b0f      	cmp	r3, #15
 800c7f2:	d9f2      	bls.n	800c7da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	e009      	b.n	800c80e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c804:	2200      	movs	r2, #0
 800c806:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c814:	d3f1      	bcc.n	800c7fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2240      	movs	r2, #64	; 0x40
 800c83a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d016      	beq.n	800c8b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10e      	bne.n	800c8ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c894:	1c59      	adds	r1, r3, #1
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	33de      	adds	r3, #222	; 0xde
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	73fb      	strb	r3, [r7, #15]
 800c8aa:	e004      	b.n	800c8b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	73fb      	strb	r3, [r7, #15]
 800c8b0:	e001      	b.n	800c8b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d204      	bcs.n	800c8ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c8e8:	e001      	b.n	800c8ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3714      	adds	r7, #20
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	461a      	mov	r2, r3
 800c90a:	4603      	mov	r3, r0
 800c90c:	70fb      	strb	r3, [r7, #3]
 800c90e:	460b      	mov	r3, r1
 800c910:	70bb      	strb	r3, [r7, #2]
 800c912:	4613      	mov	r3, r2
 800c914:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c924:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c926:	e025      	b.n	800c974 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	221a      	movs	r2, #26
 800c92c:	fb02 f303 	mul.w	r3, r2, r3
 800c930:	3308      	adds	r3, #8
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	3302      	adds	r3, #2
 800c938:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	795b      	ldrb	r3, [r3, #5]
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	429a      	cmp	r2, r3
 800c942:	d002      	beq.n	800c94a <USBH_FindInterface+0x4e>
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	2bff      	cmp	r3, #255	; 0xff
 800c948:	d111      	bne.n	800c96e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c94e:	78ba      	ldrb	r2, [r7, #2]
 800c950:	429a      	cmp	r2, r3
 800c952:	d002      	beq.n	800c95a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c954:	78bb      	ldrb	r3, [r7, #2]
 800c956:	2bff      	cmp	r3, #255	; 0xff
 800c958:	d109      	bne.n	800c96e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c95e:	787a      	ldrb	r2, [r7, #1]
 800c960:	429a      	cmp	r2, r3
 800c962:	d002      	beq.n	800c96a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c964:	787b      	ldrb	r3, [r7, #1]
 800c966:	2bff      	cmp	r3, #255	; 0xff
 800c968:	d101      	bne.n	800c96e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	e006      	b.n	800c97c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	3301      	adds	r3, #1
 800c972:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d9d6      	bls.n	800c928 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c97a:	23ff      	movs	r3, #255	; 0xff
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 fce3 	bl	800e35c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c996:	2101      	movs	r1, #1
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 fdfc 	bl	800e596 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af04      	add	r7, sp, #16
 800c9ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d102      	bne.n	800c9ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2203      	movs	r2, #3
 800c9c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b0b      	cmp	r3, #11
 800c9d2:	f200 81be 	bhi.w	800cd52 <USBH_Process+0x3aa>
 800c9d6:	a201      	add	r2, pc, #4	; (adr r2, 800c9dc <USBH_Process+0x34>)
 800c9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9dc:	0800ca0d 	.word	0x0800ca0d
 800c9e0:	0800ca3f 	.word	0x0800ca3f
 800c9e4:	0800caa7 	.word	0x0800caa7
 800c9e8:	0800cced 	.word	0x0800cced
 800c9ec:	0800cd53 	.word	0x0800cd53
 800c9f0:	0800cb4b 	.word	0x0800cb4b
 800c9f4:	0800cc93 	.word	0x0800cc93
 800c9f8:	0800cb81 	.word	0x0800cb81
 800c9fc:	0800cba1 	.word	0x0800cba1
 800ca00:	0800cbc1 	.word	0x0800cbc1
 800ca04:	0800cc05 	.word	0x0800cc05
 800ca08:	0800ccd5 	.word	0x0800ccd5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 819e 	beq.w	800cd56 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ca20:	20c8      	movs	r0, #200	; 0xc8
 800ca22:	f001 fe2f 	bl	800e684 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f001 fcf5 	bl	800e416 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca3c:	e18b      	b.n	800cd56 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d107      	bne.n	800ca58 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2202      	movs	r2, #2
 800ca54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca56:	e18d      	b.n	800cd74 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca62:	d914      	bls.n	800ca8e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d903      	bls.n	800ca86 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	220d      	movs	r2, #13
 800ca82:	701a      	strb	r2, [r3, #0]
      break;
 800ca84:	e176      	b.n	800cd74 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
      break;
 800ca8c:	e172      	b.n	800cd74 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca94:	f103 020a 	add.w	r2, r3, #10
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ca9e:	200a      	movs	r0, #10
 800caa0:	f001 fdf0 	bl	800e684 <USBH_Delay>
      break;
 800caa4:	e166      	b.n	800cd74 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d005      	beq.n	800cabc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cab6:	2104      	movs	r1, #4
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cabc:	2064      	movs	r0, #100	; 0x64
 800cabe:	f001 fde1 	bl	800e684 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fc80 	bl	800e3c8 <USBH_LL_GetSpeed>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2205      	movs	r2, #5
 800cad6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cad8:	2100      	movs	r1, #0
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 fa29 	bl	800df32 <USBH_AllocPipe>
 800cae0:	4603      	mov	r3, r0
 800cae2:	461a      	mov	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cae8:	2180      	movs	r1, #128	; 0x80
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 fa21 	bl	800df32 <USBH_AllocPipe>
 800caf0:	4603      	mov	r3, r0
 800caf2:	461a      	mov	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7919      	ldrb	r1, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cb0c:	b292      	uxth	r2, r2
 800cb0e:	9202      	str	r2, [sp, #8]
 800cb10:	2200      	movs	r2, #0
 800cb12:	9201      	str	r2, [sp, #4]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4603      	mov	r3, r0
 800cb18:	2280      	movs	r2, #128	; 0x80
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f001 f9da 	bl	800ded4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7959      	ldrb	r1, [r3, #5]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cb34:	b292      	uxth	r2, r2
 800cb36:	9202      	str	r2, [sp, #8]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	9201      	str	r2, [sp, #4]
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2200      	movs	r2, #0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f001 f9c6 	bl	800ded4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb48:	e114      	b.n	800cd74 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f918 	bl	800cd80 <USBH_HandleEnum>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f040 80fe 	bne.w	800cd5a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d103      	bne.n	800cb78 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2208      	movs	r2, #8
 800cb74:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb76:	e0f0      	b.n	800cd5a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2207      	movs	r2, #7
 800cb7c:	701a      	strb	r2, [r3, #0]
      break;
 800cb7e:	e0ec      	b.n	800cd5a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 80e9 	beq.w	800cd5e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb92:	2101      	movs	r1, #1
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2208      	movs	r2, #8
 800cb9c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cb9e:	e0de      	b.n	800cd5e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fc2c 	bl	800d408 <USBH_SetCfg>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f040 80d5 	bne.w	800cd62 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2209      	movs	r2, #9
 800cbbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbbe:	e0d0      	b.n	800cd62 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cbc6:	f003 0320 	and.w	r3, r3, #32
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d016      	beq.n	800cbfc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cbce:	2101      	movs	r1, #1
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fc3c 	bl	800d44e <USBH_SetFeature>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d103      	bne.n	800cbea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbe8:	e0bd      	b.n	800cd66 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800cbea:	7bbb      	ldrb	r3, [r7, #14]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	f040 80b9 	bne.w	800cd66 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	701a      	strb	r2, [r3, #0]
      break;
 800cbfa:	e0b4      	b.n	800cd66 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	220a      	movs	r2, #10
 800cc00:	701a      	strb	r2, [r3, #0]
      break;
 800cc02:	e0b0      	b.n	800cd66 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80ad 	beq.w	800cd6a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]
 800cc1c:	e016      	b.n	800cc4c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cc1e:	7bfa      	ldrb	r2, [r7, #15]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	32de      	adds	r2, #222	; 0xde
 800cc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc28:	791a      	ldrb	r2, [r3, #4]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d108      	bne.n	800cc46 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cc34:	7bfa      	ldrb	r2, [r7, #15]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	32de      	adds	r2, #222	; 0xde
 800cc3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cc44:	e005      	b.n	800cc52 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d0e5      	beq.n	800cc1e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d016      	beq.n	800cc8a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	4798      	blx	r3
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d109      	bne.n	800cc82 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2206      	movs	r2, #6
 800cc72:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc7a:	2103      	movs	r1, #3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc80:	e073      	b.n	800cd6a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	220d      	movs	r2, #13
 800cc86:	701a      	strb	r2, [r3, #0]
      break;
 800cc88:	e06f      	b.n	800cd6a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	220d      	movs	r2, #13
 800cc8e:	701a      	strb	r2, [r3, #0]
      break;
 800cc90:	e06b      	b.n	800cd6a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d017      	beq.n	800cccc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	4798      	blx	r3
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	220b      	movs	r2, #11
 800ccb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccba:	e058      	b.n	800cd6e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ccbc:	7bbb      	ldrb	r3, [r7, #14]
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d154      	bne.n	800cd6e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	220d      	movs	r2, #13
 800ccc8:	701a      	strb	r2, [r3, #0]
      break;
 800ccca:	e050      	b.n	800cd6e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	220d      	movs	r2, #13
 800ccd0:	701a      	strb	r2, [r3, #0]
      break;
 800ccd2:	e04c      	b.n	800cd6e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d049      	beq.n	800cd72 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	4798      	blx	r3
      }
      break;
 800ccea:	e042      	b.n	800cd72 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff fd67 	bl	800c7c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d009      	beq.n	800cd18 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d005      	beq.n	800cd2e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd28:	2105      	movs	r1, #5
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d107      	bne.n	800cd4a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff fe20 	bl	800c988 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd48:	e014      	b.n	800cd74 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f001 fb06 	bl	800e35c <USBH_LL_Start>
      break;
 800cd50:	e010      	b.n	800cd74 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd52:	bf00      	nop
 800cd54:	e00e      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd56:	bf00      	nop
 800cd58:	e00c      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd5a:	bf00      	nop
 800cd5c:	e00a      	b.n	800cd74 <USBH_Process+0x3cc>
    break;
 800cd5e:	bf00      	nop
 800cd60:	e008      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd62:	bf00      	nop
 800cd64:	e006      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd66:	bf00      	nop
 800cd68:	e004      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd6a:	bf00      	nop
 800cd6c:	e002      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd6e:	bf00      	nop
 800cd70:	e000      	b.n	800cd74 <USBH_Process+0x3cc>
      break;
 800cd72:	bf00      	nop
  }
  return USBH_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop

0800cd80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af04      	add	r7, sp, #16
 800cd86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	785b      	ldrb	r3, [r3, #1]
 800cd94:	2b07      	cmp	r3, #7
 800cd96:	f200 81c1 	bhi.w	800d11c <USBH_HandleEnum+0x39c>
 800cd9a:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <USBH_HandleEnum+0x20>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800cdc1 	.word	0x0800cdc1
 800cda4:	0800ce7f 	.word	0x0800ce7f
 800cda8:	0800cee9 	.word	0x0800cee9
 800cdac:	0800cf77 	.word	0x0800cf77
 800cdb0:	0800cfe1 	.word	0x0800cfe1
 800cdb4:	0800d051 	.word	0x0800d051
 800cdb8:	0800d097 	.word	0x0800d097
 800cdbc:	0800d0dd 	.word	0x0800d0dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cdc0:	2108      	movs	r1, #8
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fa50 	bl	800d268 <USBH_Get_DevDesc>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d130      	bne.n	800ce34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	7919      	ldrb	r1, [r3, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cdf6:	b292      	uxth	r2, r2
 800cdf8:	9202      	str	r2, [sp, #8]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	9201      	str	r2, [sp, #4]
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	4603      	mov	r3, r0
 800ce02:	2280      	movs	r2, #128	; 0x80
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f001 f865 	bl	800ded4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7959      	ldrb	r1, [r3, #5]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce1e:	b292      	uxth	r2, r2
 800ce20:	9202      	str	r2, [sp, #8]
 800ce22:	2200      	movs	r2, #0
 800ce24:	9201      	str	r2, [sp, #4]
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f001 f851 	bl	800ded4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce32:	e175      	b.n	800d120 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	f040 8172 	bne.w	800d120 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce42:	3301      	adds	r3, #1
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d903      	bls.n	800ce5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	220d      	movs	r2, #13
 800ce5a:	701a      	strb	r2, [r3, #0]
      break;
 800ce5c:	e160      	b.n	800d120 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 f885 	bl	800df74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	791b      	ldrb	r3, [r3, #4]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f001 f87f 	bl	800df74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
      break;
 800ce7c:	e150      	b.n	800d120 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ce7e:	2112      	movs	r1, #18
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f9f1 	bl	800d268 <USBH_Get_DevDesc>
 800ce86:	4603      	mov	r3, r0
 800ce88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d103      	bne.n	800ce98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce96:	e145      	b.n	800d124 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	f040 8142 	bne.w	800d124 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d903      	bls.n	800cec2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	220d      	movs	r2, #13
 800cebe:	701a      	strb	r2, [r3, #0]
      break;
 800cec0:	e130      	b.n	800d124 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	795b      	ldrb	r3, [r3, #5]
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 f853 	bl	800df74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	791b      	ldrb	r3, [r3, #4]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 f84d 	bl	800df74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
      break;
 800cee6:	e11d      	b.n	800d124 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cee8:	2101      	movs	r1, #1
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fa68 	bl	800d3c0 <USBH_SetAddress>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d132      	bne.n	800cf60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cefa:	2002      	movs	r0, #2
 800cefc:	f001 fbc2 	bl	800e684 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2203      	movs	r2, #3
 800cf0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7919      	ldrb	r1, [r3, #4]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf22:	b292      	uxth	r2, r2
 800cf24:	9202      	str	r2, [sp, #8]
 800cf26:	2200      	movs	r2, #0
 800cf28:	9201      	str	r2, [sp, #4]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2280      	movs	r2, #128	; 0x80
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 ffcf 	bl	800ded4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7959      	ldrb	r1, [r3, #5]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf4a:	b292      	uxth	r2, r2
 800cf4c:	9202      	str	r2, [sp, #8]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	9201      	str	r2, [sp, #4]
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4603      	mov	r3, r0
 800cf56:	2200      	movs	r2, #0
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 ffbb 	bl	800ded4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf5e:	e0e3      	b.n	800d128 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	f040 80e0 	bne.w	800d128 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	220d      	movs	r2, #13
 800cf6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	705a      	strb	r2, [r3, #1]
      break;
 800cf74:	e0d8      	b.n	800d128 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf76:	2109      	movs	r1, #9
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f99d 	bl	800d2b8 <USBH_Get_CfgDesc>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d103      	bne.n	800cf90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2204      	movs	r2, #4
 800cf8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf8e:	e0cd      	b.n	800d12c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	f040 80ca 	bne.w	800d12c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d903      	bls.n	800cfba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	220d      	movs	r2, #13
 800cfb6:	701a      	strb	r2, [r3, #0]
      break;
 800cfb8:	e0b8      	b.n	800d12c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	795b      	ldrb	r3, [r3, #5]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 ffd7 	bl	800df74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 ffd1 	bl	800df74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
      break;
 800cfde:	e0a5      	b.n	800d12c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f965 	bl	800d2b8 <USBH_Get_CfgDesc>
 800cfee:	4603      	mov	r3, r0
 800cff0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cff2:	7bbb      	ldrb	r3, [r7, #14]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d103      	bne.n	800d000 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2205      	movs	r2, #5
 800cffc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cffe:	e097      	b.n	800d130 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b03      	cmp	r3, #3
 800d004:	f040 8094 	bne.w	800d130 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d00e:	3301      	adds	r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d903      	bls.n	800d02a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	220d      	movs	r2, #13
 800d026:	701a      	strb	r2, [r3, #0]
      break;
 800d028:	e082      	b.n	800d130 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	795b      	ldrb	r3, [r3, #5]
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 ff9f 	bl	800df74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	791b      	ldrb	r3, [r3, #4]
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 ff99 	bl	800df74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	701a      	strb	r2, [r3, #0]
      break;
 800d04e:	e06f      	b.n	800d130 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d056:	2b00      	cmp	r3, #0
 800d058:	d019      	beq.n	800d08e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d066:	23ff      	movs	r3, #255	; 0xff
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f949 	bl	800d300 <USBH_Get_StringDesc>
 800d06e:	4603      	mov	r3, r0
 800d070:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2206      	movs	r2, #6
 800d07c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d07e:	e059      	b.n	800d134 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d080:	7bbb      	ldrb	r3, [r7, #14]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d156      	bne.n	800d134 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2206      	movs	r2, #6
 800d08a:	705a      	strb	r2, [r3, #1]
      break;
 800d08c:	e052      	b.n	800d134 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2206      	movs	r2, #6
 800d092:	705a      	strb	r2, [r3, #1]
      break;
 800d094:	e04e      	b.n	800d134 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d019      	beq.n	800d0d4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d0ac:	23ff      	movs	r3, #255	; 0xff
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f926 	bl	800d300 <USBH_Get_StringDesc>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d103      	bne.n	800d0c6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d0c4:	e038      	b.n	800d138 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	d135      	bne.n	800d138 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2207      	movs	r2, #7
 800d0d0:	705a      	strb	r2, [r3, #1]
      break;
 800d0d2:	e031      	b.n	800d138 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2207      	movs	r2, #7
 800d0d8:	705a      	strb	r2, [r3, #1]
      break;
 800d0da:	e02d      	b.n	800d138 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d017      	beq.n	800d116 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0f2:	23ff      	movs	r3, #255	; 0xff
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f903 	bl	800d300 <USBH_Get_StringDesc>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0fe:	7bbb      	ldrb	r3, [r7, #14]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d108:	e018      	b.n	800d13c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	2b03      	cmp	r3, #3
 800d10e:	d115      	bne.n	800d13c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]
      break;
 800d114:	e012      	b.n	800d13c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]
      break;
 800d11a:	e00f      	b.n	800d13c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d11c:	bf00      	nop
 800d11e:	e00e      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d120:	bf00      	nop
 800d122:	e00c      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d124:	bf00      	nop
 800d126:	e00a      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d128:	bf00      	nop
 800d12a:	e008      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d12c:	bf00      	nop
 800d12e:	e006      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d130:	bf00      	nop
 800d132:	e004      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <USBH_HandleEnum+0x3be>
      break;
 800d13c:	bf00      	nop
  }
  return Status;
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f804 	bl	800d18a <USBH_HandleSof>
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b0b      	cmp	r3, #11
 800d19a:	d10a      	bne.n	800d1b2 <USBH_HandleSof+0x28>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d005      	beq.n	800d1b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	4798      	blx	r3
  }
}
 800d1b2:	bf00      	nop
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d1ca:	bf00      	nop
}
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d1e6:	bf00      	nop
}
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	b083      	sub	sp, #12
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f001 f8a6 	bl	800e392 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	791b      	ldrb	r3, [r3, #4]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fe91 	bl	800df74 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	795b      	ldrb	r3, [r3, #5]
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fe8b 	bl	800df74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	4613      	mov	r3, r2
 800d282:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d286:	2100      	movs	r1, #0
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f864 	bl	800d356 <USBH_GetDescriptor>
 800d28e:	4603      	mov	r3, r0
 800d290:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d292:	7bfb      	ldrb	r3, [r7, #15]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10a      	bne.n	800d2ae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2a4:	78fa      	ldrb	r2, [r7, #3]
 800d2a6:	b292      	uxth	r2, r2
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	f000 f918 	bl	800d4de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	331c      	adds	r3, #28
 800d2c8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d2ca:	887b      	ldrh	r3, [r7, #2]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f83d 	bl	800d356 <USBH_GetDescriptor>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d107      	bne.n	800d2f6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d2e6:	887b      	ldrh	r3, [r7, #2]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f987 	bl	800d600 <USBH_ParseCfgDesc>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af02      	add	r7, sp, #8
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	607a      	str	r2, [r7, #4]
 800d30a:	461a      	mov	r2, r3
 800d30c:	460b      	mov	r3, r1
 800d30e:	72fb      	strb	r3, [r7, #11]
 800d310:	4613      	mov	r3, r2
 800d312:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800d314:	7afb      	ldrb	r3, [r7, #11]
 800d316:	b29b      	uxth	r3, r3
 800d318:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d31c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d324:	893b      	ldrh	r3, [r7, #8]
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	460b      	mov	r3, r1
 800d32a:	2100      	movs	r1, #0
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f000 f812 	bl	800d356 <USBH_GetDescriptor>
 800d332:	4603      	mov	r3, r0
 800d334:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d342:	893a      	ldrh	r2, [r7, #8]
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fb24 	bl	800d994 <USBH_ParseStringDesc>
  }

  return status;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	607b      	str	r3, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	72fb      	strb	r3, [r7, #11]
 800d364:	4613      	mov	r3, r2
 800d366:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	789b      	ldrb	r3, [r3, #2]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d11c      	bne.n	800d3aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d376:	b2da      	uxtb	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2206      	movs	r2, #6
 800d380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	893a      	ldrh	r2, [r7, #8]
 800d386:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d388:	893b      	ldrh	r3, [r7, #8]
 800d38a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d392:	d104      	bne.n	800d39e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f240 4209 	movw	r2, #1033	; 0x409
 800d39a:	829a      	strh	r2, [r3, #20]
 800d39c:	e002      	b.n	800d3a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	8b3a      	ldrh	r2, [r7, #24]
 800d3a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d3aa:	8b3b      	ldrh	r3, [r7, #24]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 fb3d 	bl	800da30 <USBH_CtlReq>
 800d3b6:	4603      	mov	r3, r0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	789b      	ldrb	r3, [r3, #2]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d10f      	bne.n	800d3f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2205      	movs	r2, #5
 800d3de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d3e0:	78fb      	ldrb	r3, [r7, #3]
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fb19 	bl	800da30 <USBH_CtlReq>
 800d3fe:	4603      	mov	r3, r0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	789b      	ldrb	r3, [r3, #2]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d10e      	bne.n	800d43a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2209      	movs	r2, #9
 800d426:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	887a      	ldrh	r2, [r7, #2]
 800d42c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d43a:	2200      	movs	r2, #0
 800d43c:	2100      	movs	r1, #0
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 faf6 	bl	800da30 <USBH_CtlReq>
 800d444:	4603      	mov	r3, r0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	789b      	ldrb	r3, [r3, #2]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d10f      	bne.n	800d482 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2203      	movs	r2, #3
 800d46c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d482:	2200      	movs	r2, #0
 800d484:	2100      	movs	r1, #0
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fad2 	bl	800da30 <USBH_CtlReq>
 800d48c:	4603      	mov	r3, r0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	789b      	ldrb	r3, [r3, #2]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d10f      	bne.n	800d4ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 faae 	bl	800da30 <USBH_CtlReq>
 800d4d4:	4603      	mov	r3, r0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b085      	sub	sp, #20
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	781a      	ldrb	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	785a      	ldrb	r2, [r3, #1]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	3302      	adds	r3, #2
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	b29a      	uxth	r2, r3
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	3303      	adds	r3, #3
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	021b      	lsls	r3, r3, #8
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4313      	orrs	r3, r2
 800d512:	b29a      	uxth	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	791a      	ldrb	r2, [r3, #4]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	795a      	ldrb	r2, [r3, #5]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	799a      	ldrb	r2, [r3, #6]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	79da      	ldrb	r2, [r3, #7]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	79db      	ldrb	r3, [r3, #7]
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	dc11      	bgt.n	800d564 <USBH_ParseDevDesc+0x86>
 800d540:	2b08      	cmp	r3, #8
 800d542:	db16      	blt.n	800d572 <USBH_ParseDevDesc+0x94>
 800d544:	3b08      	subs	r3, #8
 800d546:	2201      	movs	r2, #1
 800d548:	fa02 f303 	lsl.w	r3, r2, r3
 800d54c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d554:	2b00      	cmp	r3, #0
 800d556:	bf14      	ite	ne
 800d558:	2301      	movne	r3, #1
 800d55a:	2300      	moveq	r3, #0
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d102      	bne.n	800d568 <USBH_ParseDevDesc+0x8a>
 800d562:	e006      	b.n	800d572 <USBH_ParseDevDesc+0x94>
 800d564:	2b40      	cmp	r3, #64	; 0x40
 800d566:	d104      	bne.n	800d572 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	79da      	ldrb	r2, [r3, #7]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	71da      	strb	r2, [r3, #7]
      break;
 800d570:	e003      	b.n	800d57a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2240      	movs	r2, #64	; 0x40
 800d576:	71da      	strb	r2, [r3, #7]
      break;
 800d578:	bf00      	nop
  }

  if (length > 8U)
 800d57a:	88fb      	ldrh	r3, [r7, #6]
 800d57c:	2b08      	cmp	r3, #8
 800d57e:	d939      	bls.n	800d5f4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	3308      	adds	r3, #8
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	b29a      	uxth	r2, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	3309      	adds	r3, #9
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	021b      	lsls	r3, r3, #8
 800d592:	b29b      	uxth	r3, r3
 800d594:	4313      	orrs	r3, r2
 800d596:	b29a      	uxth	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	330a      	adds	r3, #10
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	330b      	adds	r3, #11
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	330c      	adds	r3, #12
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	330d      	adds	r3, #13
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	021b      	lsls	r3, r3, #8
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	7b9a      	ldrb	r2, [r3, #14]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	7bda      	ldrb	r2, [r3, #15]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	7c1a      	ldrb	r2, [r3, #16]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	7c5a      	ldrb	r2, [r3, #17]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	745a      	strb	r2, [r3, #17]
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08c      	sub	sp, #48	; 0x30
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	4613      	mov	r3, r2
 800d60c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d614:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d620:	2300      	movs	r3, #0
 800d622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	781a      	ldrb	r2, [r3, #0]
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	785a      	ldrb	r2, [r3, #1]
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	3302      	adds	r3, #2
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b29a      	uxth	r2, r3
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	3303      	adds	r3, #3
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	b29b      	uxth	r3, r3
 800d650:	021b      	lsls	r3, r3, #8
 800d652:	b29b      	uxth	r3, r3
 800d654:	4313      	orrs	r3, r2
 800d656:	b29b      	uxth	r3, r3
 800d658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d65c:	bf28      	it	cs
 800d65e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d662:	b29a      	uxth	r2, r3
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	791a      	ldrb	r2, [r3, #4]
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	795a      	ldrb	r2, [r3, #5]
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	799a      	ldrb	r2, [r3, #6]
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	79da      	ldrb	r2, [r3, #7]
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	7a1a      	ldrb	r2, [r3, #8]
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b09      	cmp	r3, #9
 800d696:	d002      	beq.n	800d69e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	2209      	movs	r2, #9
 800d69c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	2b09      	cmp	r3, #9
 800d6a2:	f240 809d 	bls.w	800d7e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d6a6:	2309      	movs	r3, #9
 800d6a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6ae:	e081      	b.n	800d7b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d6b0:	f107 0316 	add.w	r3, r7, #22
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b8:	f000 f99f 	bl	800d9fa <USBH_GetNextDesc>
 800d6bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d176      	bne.n	800d7b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b09      	cmp	r3, #9
 800d6cc:	d002      	beq.n	800d6d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	2209      	movs	r2, #9
 800d6d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6d8:	221a      	movs	r2, #26
 800d6da:	fb02 f303 	mul.w	r3, r2, r3
 800d6de:	3308      	adds	r3, #8
 800d6e0:	6a3a      	ldr	r2, [r7, #32]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3302      	adds	r3, #2
 800d6e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6ea:	69f8      	ldr	r0, [r7, #28]
 800d6ec:	f000 f87e 	bl	800d7ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d6fa:	e043      	b.n	800d784 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d6fc:	f107 0316 	add.w	r3, r7, #22
 800d700:	4619      	mov	r1, r3
 800d702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d704:	f000 f979 	bl	800d9fa <USBH_GetNextDesc>
 800d708:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70c:	785b      	ldrb	r3, [r3, #1]
 800d70e:	2b05      	cmp	r3, #5
 800d710:	d138      	bne.n	800d784 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	795b      	ldrb	r3, [r3, #5]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d10f      	bne.n	800d73a <USBH_ParseCfgDesc+0x13a>
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	799b      	ldrb	r3, [r3, #6]
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d10b      	bne.n	800d73a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	79db      	ldrb	r3, [r3, #7]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10f      	bne.n	800d74a <USBH_ParseCfgDesc+0x14a>
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b09      	cmp	r3, #9
 800d730:	d00b      	beq.n	800d74a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	2209      	movs	r2, #9
 800d736:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d738:	e007      	b.n	800d74a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b07      	cmp	r3, #7
 800d740:	d004      	beq.n	800d74c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	2207      	movs	r2, #7
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	e000      	b.n	800d74c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d74a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d750:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d754:	3201      	adds	r2, #1
 800d756:	00d2      	lsls	r2, r2, #3
 800d758:	211a      	movs	r1, #26
 800d75a:	fb01 f303 	mul.w	r3, r1, r3
 800d75e:	4413      	add	r3, r2
 800d760:	3308      	adds	r3, #8
 800d762:	6a3a      	ldr	r2, [r7, #32]
 800d764:	4413      	add	r3, r2
 800d766:	3304      	adds	r3, #4
 800d768:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d76c:	69b9      	ldr	r1, [r7, #24]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f000 f86b 	bl	800d84a <USBH_ParseEPDesc>
 800d774:	4603      	mov	r3, r0
 800d776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d77a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d77e:	3301      	adds	r3, #1
 800d780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	791b      	ldrb	r3, [r3, #4]
 800d788:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d204      	bcs.n	800d79a <USBH_ParseCfgDesc+0x19a>
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	885a      	ldrh	r2, [r3, #2]
 800d794:	8afb      	ldrh	r3, [r7, #22]
 800d796:	429a      	cmp	r2, r3
 800d798:	d8b0      	bhi.n	800d6fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	791b      	ldrb	r3, [r3, #4]
 800d79e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d201      	bcs.n	800d7aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e01c      	b.n	800d7e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d805      	bhi.n	800d7c8 <USBH_ParseCfgDesc+0x1c8>
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	885a      	ldrh	r2, [r3, #2]
 800d7c0:	8afb      	ldrh	r3, [r7, #22]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	f63f af74 	bhi.w	800d6b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	791b      	ldrb	r3, [r3, #4]
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	bf28      	it	cs
 800d7d0:	2302      	movcs	r3, #2
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d201      	bcs.n	800d7e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e001      	b.n	800d7e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3730      	adds	r7, #48	; 0x30
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	781a      	ldrb	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	785a      	ldrb	r2, [r3, #1]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	789a      	ldrb	r2, [r3, #2]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	78da      	ldrb	r2, [r3, #3]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	791a      	ldrb	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	795a      	ldrb	r2, [r3, #5]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	799a      	ldrb	r2, [r3, #6]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	79da      	ldrb	r2, [r3, #7]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	7a1a      	ldrb	r2, [r3, #8]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	721a      	strb	r2, [r3, #8]
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b087      	sub	sp, #28
 800d84e:	af00      	add	r7, sp, #0
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	60b9      	str	r1, [r7, #8]
 800d854:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	781a      	ldrb	r2, [r3, #0]
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	785a      	ldrb	r2, [r3, #1]
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	789a      	ldrb	r2, [r3, #2]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	78da      	ldrb	r2, [r3, #3]
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	3304      	adds	r3, #4
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	b29a      	uxth	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3305      	adds	r3, #5
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	021b      	lsls	r3, r3, #8
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	b29a      	uxth	r2, r3
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	799a      	ldrb	r2, [r3, #6]
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	889b      	ldrh	r3, [r3, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	75fb      	strb	r3, [r7, #23]
 800d8aa:	e033      	b.n	800d914 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	889b      	ldrh	r3, [r3, #4]
 800d8b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d8b4:	f023 0307 	bic.w	r3, r3, #7
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	889b      	ldrh	r3, [r3, #4]
 800d8c2:	b21a      	sxth	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	b299      	uxth	r1, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3305      	adds	r3, #5
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	430b      	orrs	r3, r1
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d110      	bne.n	800d906 <USBH_ParseEPDesc+0xbc>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	b299      	uxth	r1, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3305      	adds	r3, #5
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	430b      	orrs	r3, r1
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	b21b      	sxth	r3, r3
 800d8fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d902:	b21b      	sxth	r3, r3
 800d904:	e001      	b.n	800d90a <USBH_ParseEPDesc+0xc0>
 800d906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d90a:	4313      	orrs	r3, r2
 800d90c:	b21b      	sxth	r3, r3
 800d90e:	b29a      	uxth	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d116      	bne.n	800d94c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	78db      	ldrb	r3, [r3, #3]
 800d922:	f003 0303 	and.w	r3, r3, #3
 800d926:	2b01      	cmp	r3, #1
 800d928:	d005      	beq.n	800d936 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	78db      	ldrb	r3, [r3, #3]
 800d92e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d932:	2b03      	cmp	r3, #3
 800d934:	d127      	bne.n	800d986 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	799b      	ldrb	r3, [r3, #6]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <USBH_ParseEPDesc+0xfc>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	799b      	ldrb	r3, [r3, #6]
 800d942:	2b10      	cmp	r3, #16
 800d944:	d91f      	bls.n	800d986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d946:	2303      	movs	r3, #3
 800d948:	75fb      	strb	r3, [r7, #23]
 800d94a:	e01c      	b.n	800d986 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	78db      	ldrb	r3, [r3, #3]
 800d950:	f003 0303 	and.w	r3, r3, #3
 800d954:	2b01      	cmp	r3, #1
 800d956:	d10a      	bne.n	800d96e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	799b      	ldrb	r3, [r3, #6]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <USBH_ParseEPDesc+0x11e>
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	799b      	ldrb	r3, [r3, #6]
 800d964:	2b10      	cmp	r3, #16
 800d966:	d90e      	bls.n	800d986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d968:	2303      	movs	r3, #3
 800d96a:	75fb      	strb	r3, [r7, #23]
 800d96c:	e00b      	b.n	800d986 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	78db      	ldrb	r3, [r3, #3]
 800d972:	f003 0303 	and.w	r3, r3, #3
 800d976:	2b03      	cmp	r3, #3
 800d978:	d105      	bne.n	800d986 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	799b      	ldrb	r3, [r3, #6]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d982:	2303      	movs	r3, #3
 800d984:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d986:	7dfb      	ldrb	r3, [r7, #23]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	371c      	adds	r7, #28
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d994:	b480      	push	{r7}
 800d996:	b087      	sub	sp, #28
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d120      	bne.n	800d9ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	1e9a      	subs	r2, r3, #2
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	bf28      	it	cs
 800d9b8:	4613      	movcs	r3, r2
 800d9ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	3302      	adds	r3, #2
 800d9c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	82fb      	strh	r3, [r7, #22]
 800d9c6:	e00b      	b.n	800d9e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d9c8:	8afb      	ldrh	r3, [r7, #22]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	781a      	ldrb	r2, [r3, #0]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d9da:	8afb      	ldrh	r3, [r7, #22]
 800d9dc:	3302      	adds	r3, #2
 800d9de:	82fb      	strh	r3, [r7, #22]
 800d9e0:	8afa      	ldrh	r2, [r7, #22]
 800d9e2:	8abb      	ldrh	r3, [r7, #20]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d3ef      	bcc.n	800d9c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
  }
}
 800d9ee:	bf00      	nop
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b085      	sub	sp, #20
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	881a      	ldrh	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	4413      	add	r3, r2
 800da10:	b29a      	uxth	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4413      	add	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da22:	68fb      	ldr	r3, [r7, #12]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	4613      	mov	r3, r2
 800da3c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800da3e:	2301      	movs	r3, #1
 800da40:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	789b      	ldrb	r3, [r3, #2]
 800da46:	2b01      	cmp	r3, #1
 800da48:	d002      	beq.n	800da50 <USBH_CtlReq+0x20>
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d00f      	beq.n	800da6e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800da4e:	e027      	b.n	800daa0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	88fa      	ldrh	r2, [r7, #6]
 800da5a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2201      	movs	r2, #1
 800da60:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2202      	movs	r2, #2
 800da66:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800da68:	2301      	movs	r3, #1
 800da6a:	75fb      	strb	r3, [r7, #23]
      break;
 800da6c:	e018      	b.n	800daa0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f000 f81c 	bl	800daac <USBH_HandleControl>
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800da78:	7dfb      	ldrb	r3, [r7, #23]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d002      	beq.n	800da84 <USBH_CtlReq+0x54>
 800da7e:	7dfb      	ldrb	r3, [r7, #23]
 800da80:	2b03      	cmp	r3, #3
 800da82:	d106      	bne.n	800da92 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2201      	movs	r2, #1
 800da88:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	761a      	strb	r2, [r3, #24]
      break;
 800da90:	e005      	b.n	800da9e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800da92:	7dfb      	ldrb	r3, [r7, #23]
 800da94:	2b02      	cmp	r3, #2
 800da96:	d102      	bne.n	800da9e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2201      	movs	r2, #1
 800da9c:	709a      	strb	r2, [r3, #2]
      break;
 800da9e:	bf00      	nop
  }
  return status;
 800daa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af02      	add	r7, sp, #8
 800dab2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dab4:	2301      	movs	r3, #1
 800dab6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dab8:	2300      	movs	r3, #0
 800daba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	7e1b      	ldrb	r3, [r3, #24]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	2b0a      	cmp	r3, #10
 800dac4:	f200 8156 	bhi.w	800dd74 <USBH_HandleControl+0x2c8>
 800dac8:	a201      	add	r2, pc, #4	; (adr r2, 800dad0 <USBH_HandleControl+0x24>)
 800daca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dace:	bf00      	nop
 800dad0:	0800dafd 	.word	0x0800dafd
 800dad4:	0800db17 	.word	0x0800db17
 800dad8:	0800db81 	.word	0x0800db81
 800dadc:	0800dba7 	.word	0x0800dba7
 800dae0:	0800dbdf 	.word	0x0800dbdf
 800dae4:	0800dc09 	.word	0x0800dc09
 800dae8:	0800dc5b 	.word	0x0800dc5b
 800daec:	0800dc7d 	.word	0x0800dc7d
 800daf0:	0800dcb9 	.word	0x0800dcb9
 800daf4:	0800dcdf 	.word	0x0800dcdf
 800daf8:	0800dd1d 	.word	0x0800dd1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f103 0110 	add.w	r1, r3, #16
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	795b      	ldrb	r3, [r3, #5]
 800db06:	461a      	mov	r2, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f943 	bl	800dd94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2202      	movs	r2, #2
 800db12:	761a      	strb	r2, [r3, #24]
      break;
 800db14:	e139      	b.n	800dd8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	795b      	ldrb	r3, [r3, #5]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fd27 	bl	800e570 <USBH_LL_GetURBState>
 800db22:	4603      	mov	r3, r0
 800db24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800db26:	7bbb      	ldrb	r3, [r7, #14]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d11e      	bne.n	800db6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7c1b      	ldrb	r3, [r3, #16]
 800db30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	8adb      	ldrh	r3, [r3, #22]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800db3e:	7b7b      	ldrb	r3, [r7, #13]
 800db40:	2b80      	cmp	r3, #128	; 0x80
 800db42:	d103      	bne.n	800db4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2203      	movs	r2, #3
 800db48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db4a:	e115      	b.n	800dd78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2205      	movs	r2, #5
 800db50:	761a      	strb	r2, [r3, #24]
      break;
 800db52:	e111      	b.n	800dd78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800db54:	7b7b      	ldrb	r3, [r7, #13]
 800db56:	2b80      	cmp	r3, #128	; 0x80
 800db58:	d103      	bne.n	800db62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2209      	movs	r2, #9
 800db5e:	761a      	strb	r2, [r3, #24]
      break;
 800db60:	e10a      	b.n	800dd78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2207      	movs	r2, #7
 800db66:	761a      	strb	r2, [r3, #24]
      break;
 800db68:	e106      	b.n	800dd78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db6a:	7bbb      	ldrb	r3, [r7, #14]
 800db6c:	2b04      	cmp	r3, #4
 800db6e:	d003      	beq.n	800db78 <USBH_HandleControl+0xcc>
 800db70:	7bbb      	ldrb	r3, [r7, #14]
 800db72:	2b02      	cmp	r3, #2
 800db74:	f040 8100 	bne.w	800dd78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	220b      	movs	r2, #11
 800db7c:	761a      	strb	r2, [r3, #24]
      break;
 800db7e:	e0fb      	b.n	800dd78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db86:	b29a      	uxth	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6899      	ldr	r1, [r3, #8]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	899a      	ldrh	r2, [r3, #12]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	791b      	ldrb	r3, [r3, #4]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f93a 	bl	800de12 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2204      	movs	r2, #4
 800dba2:	761a      	strb	r2, [r3, #24]
      break;
 800dba4:	e0f1      	b.n	800dd8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	791b      	ldrb	r3, [r3, #4]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fcdf 	bl	800e570 <USBH_LL_GetURBState>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d102      	bne.n	800dbc2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2209      	movs	r2, #9
 800dbc0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	2b05      	cmp	r3, #5
 800dbc6:	d102      	bne.n	800dbce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dbcc:	e0d6      	b.n	800dd7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
 800dbd0:	2b04      	cmp	r3, #4
 800dbd2:	f040 80d3 	bne.w	800dd7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	220b      	movs	r2, #11
 800dbda:	761a      	strb	r2, [r3, #24]
      break;
 800dbdc:	e0ce      	b.n	800dd7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6899      	ldr	r1, [r3, #8]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	899a      	ldrh	r2, [r3, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	795b      	ldrb	r3, [r3, #5]
 800dbea:	2001      	movs	r0, #1
 800dbec:	9000      	str	r0, [sp, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f8ea 	bl	800ddc8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2206      	movs	r2, #6
 800dc04:	761a      	strb	r2, [r3, #24]
      break;
 800dc06:	e0c0      	b.n	800dd8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	795b      	ldrb	r3, [r3, #5]
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fcae 	bl	800e570 <USBH_LL_GetURBState>
 800dc14:	4603      	mov	r3, r0
 800dc16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc18:	7bbb      	ldrb	r3, [r7, #14]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d103      	bne.n	800dc26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2207      	movs	r2, #7
 800dc22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc24:	e0ac      	b.n	800dd80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800dc26:	7bbb      	ldrb	r3, [r7, #14]
 800dc28:	2b05      	cmp	r3, #5
 800dc2a:	d105      	bne.n	800dc38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	220c      	movs	r2, #12
 800dc30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dc32:	2303      	movs	r3, #3
 800dc34:	73fb      	strb	r3, [r7, #15]
      break;
 800dc36:	e0a3      	b.n	800dd80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d103      	bne.n	800dc46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2205      	movs	r2, #5
 800dc42:	761a      	strb	r2, [r3, #24]
      break;
 800dc44:	e09c      	b.n	800dd80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dc46:	7bbb      	ldrb	r3, [r7, #14]
 800dc48:	2b04      	cmp	r3, #4
 800dc4a:	f040 8099 	bne.w	800dd80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	220b      	movs	r2, #11
 800dc52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dc54:	2302      	movs	r3, #2
 800dc56:	73fb      	strb	r3, [r7, #15]
      break;
 800dc58:	e092      	b.n	800dd80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	791b      	ldrb	r3, [r3, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2100      	movs	r1, #0
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f8d5 	bl	800de12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2208      	movs	r2, #8
 800dc78:	761a      	strb	r2, [r3, #24]

      break;
 800dc7a:	e086      	b.n	800dd8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	791b      	ldrb	r3, [r3, #4]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fc74 	bl	800e570 <USBH_LL_GetURBState>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d105      	bne.n	800dc9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	220d      	movs	r2, #13
 800dc96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc9c:	e072      	b.n	800dd84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dc9e:	7bbb      	ldrb	r3, [r7, #14]
 800dca0:	2b04      	cmp	r3, #4
 800dca2:	d103      	bne.n	800dcac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	220b      	movs	r2, #11
 800dca8:	761a      	strb	r2, [r3, #24]
      break;
 800dcaa:	e06b      	b.n	800dd84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dcac:	7bbb      	ldrb	r3, [r7, #14]
 800dcae:	2b05      	cmp	r3, #5
 800dcb0:	d168      	bne.n	800dd84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800dcb6:	e065      	b.n	800dd84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	795b      	ldrb	r3, [r3, #5]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	9200      	str	r2, [sp, #0]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f87f 	bl	800ddc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	220a      	movs	r2, #10
 800dcda:	761a      	strb	r2, [r3, #24]
      break;
 800dcdc:	e055      	b.n	800dd8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	795b      	ldrb	r3, [r3, #5]
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fc43 	bl	800e570 <USBH_LL_GetURBState>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dcee:	7bbb      	ldrb	r3, [r7, #14]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d105      	bne.n	800dd00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	220d      	movs	r2, #13
 800dcfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dcfe:	e043      	b.n	800dd88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d103      	bne.n	800dd0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2209      	movs	r2, #9
 800dd0a:	761a      	strb	r2, [r3, #24]
      break;
 800dd0c:	e03c      	b.n	800dd88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d139      	bne.n	800dd88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	220b      	movs	r2, #11
 800dd18:	761a      	strb	r2, [r3, #24]
      break;
 800dd1a:	e035      	b.n	800dd88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	7e5b      	ldrb	r3, [r3, #25]
 800dd20:	3301      	adds	r3, #1
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	765a      	strb	r2, [r3, #25]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	7e5b      	ldrb	r3, [r3, #25]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d806      	bhi.n	800dd3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2201      	movs	r2, #1
 800dd34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dd3c:	e025      	b.n	800dd8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd44:	2106      	movs	r1, #6
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	795b      	ldrb	r3, [r3, #5]
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f90c 	bl	800df74 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	791b      	ldrb	r3, [r3, #4]
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f906 	bl	800df74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	73fb      	strb	r3, [r7, #15]
      break;
 800dd72:	e00a      	b.n	800dd8a <USBH_HandleControl+0x2de>

    default:
      break;
 800dd74:	bf00      	nop
 800dd76:	e008      	b.n	800dd8a <USBH_HandleControl+0x2de>
      break;
 800dd78:	bf00      	nop
 800dd7a:	e006      	b.n	800dd8a <USBH_HandleControl+0x2de>
      break;
 800dd7c:	bf00      	nop
 800dd7e:	e004      	b.n	800dd8a <USBH_HandleControl+0x2de>
      break;
 800dd80:	bf00      	nop
 800dd82:	e002      	b.n	800dd8a <USBH_HandleControl+0x2de>
      break;
 800dd84:	bf00      	nop
 800dd86:	e000      	b.n	800dd8a <USBH_HandleControl+0x2de>
      break;
 800dd88:	bf00      	nop
  }

  return status;
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af04      	add	r7, sp, #16
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dda2:	79f9      	ldrb	r1, [r7, #7]
 800dda4:	2300      	movs	r3, #0
 800dda6:	9303      	str	r3, [sp, #12]
 800dda8:	2308      	movs	r3, #8
 800ddaa:	9302      	str	r3, [sp, #8]
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 fba8 	bl	800e50e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af04      	add	r7, sp, #16
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	80fb      	strh	r3, [r7, #6]
 800ddda:	4613      	mov	r3, r2
 800dddc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dde8:	2300      	movs	r3, #0
 800ddea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ddec:	7979      	ldrb	r1, [r7, #5]
 800ddee:	7e3b      	ldrb	r3, [r7, #24]
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	88fb      	ldrh	r3, [r7, #6]
 800ddf4:	9302      	str	r3, [sp, #8]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2300      	movs	r3, #0
 800de00:	2200      	movs	r2, #0
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f000 fb83 	bl	800e50e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b088      	sub	sp, #32
 800de16:	af04      	add	r7, sp, #16
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	4611      	mov	r1, r2
 800de1e:	461a      	mov	r2, r3
 800de20:	460b      	mov	r3, r1
 800de22:	80fb      	strh	r3, [r7, #6]
 800de24:	4613      	mov	r3, r2
 800de26:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de28:	7979      	ldrb	r1, [r7, #5]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	2301      	movs	r3, #1
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	2300      	movs	r3, #0
 800de3c:	2201      	movs	r2, #1
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 fb65 	bl	800e50e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800de44:	2300      	movs	r3, #0

}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b088      	sub	sp, #32
 800de52:	af04      	add	r7, sp, #16
 800de54:	60f8      	str	r0, [r7, #12]
 800de56:	60b9      	str	r1, [r7, #8]
 800de58:	4611      	mov	r1, r2
 800de5a:	461a      	mov	r2, r3
 800de5c:	460b      	mov	r3, r1
 800de5e:	80fb      	strh	r3, [r7, #6]
 800de60:	4613      	mov	r3, r2
 800de62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800de6e:	2300      	movs	r3, #0
 800de70:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de72:	7979      	ldrb	r1, [r7, #5]
 800de74:	7e3b      	ldrb	r3, [r7, #24]
 800de76:	9303      	str	r3, [sp, #12]
 800de78:	88fb      	ldrh	r3, [r7, #6]
 800de7a:	9302      	str	r3, [sp, #8]
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	2301      	movs	r3, #1
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	2302      	movs	r3, #2
 800de86:	2200      	movs	r2, #0
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f000 fb40 	bl	800e50e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af04      	add	r7, sp, #16
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	4611      	mov	r1, r2
 800dea4:	461a      	mov	r2, r3
 800dea6:	460b      	mov	r3, r1
 800dea8:	80fb      	strh	r3, [r7, #6]
 800deaa:	4613      	mov	r3, r2
 800deac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800deae:	7979      	ldrb	r1, [r7, #5]
 800deb0:	2300      	movs	r3, #0
 800deb2:	9303      	str	r3, [sp, #12]
 800deb4:	88fb      	ldrh	r3, [r7, #6]
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	2301      	movs	r3, #1
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	2302      	movs	r3, #2
 800dec2:	2201      	movs	r2, #1
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 fb22 	bl	800e50e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af04      	add	r7, sp, #16
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4603      	mov	r3, r0
 800dee4:	70fb      	strb	r3, [r7, #3]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70bb      	strb	r3, [r7, #2]
 800deea:	4613      	mov	r3, r2
 800deec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800deee:	7878      	ldrb	r0, [r7, #1]
 800def0:	78ba      	ldrb	r2, [r7, #2]
 800def2:	78f9      	ldrb	r1, [r7, #3]
 800def4:	8b3b      	ldrh	r3, [r7, #24]
 800def6:	9302      	str	r3, [sp, #8]
 800def8:	7d3b      	ldrb	r3, [r7, #20]
 800defa:	9301      	str	r3, [sp, #4]
 800defc:	7c3b      	ldrb	r3, [r7, #16]
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	4603      	mov	r3, r0
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fab5 	bl	800e472 <USBH_LL_OpenPipe>

  return USBH_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800df1e:	78fb      	ldrb	r3, [r7, #3]
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fad4 	bl	800e4d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b084      	sub	sp, #16
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	460b      	mov	r3, r1
 800df3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f836 	bl	800dfb0 <USBH_GetFreePipe>
 800df44:	4603      	mov	r3, r0
 800df46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800df48:	89fb      	ldrh	r3, [r7, #14]
 800df4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4e:	4293      	cmp	r3, r2
 800df50:	d00a      	beq.n	800df68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800df52:	78fa      	ldrb	r2, [r7, #3]
 800df54:	89fb      	ldrh	r3, [r7, #14]
 800df56:	f003 030f 	and.w	r3, r3, #15
 800df5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	33e0      	adds	r3, #224	; 0xe0
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	440b      	add	r3, r1
 800df66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800df68:	89fb      	ldrh	r3, [r7, #14]
 800df6a:	b2db      	uxtb	r3, r3
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800df80:	78fb      	ldrb	r3, [r7, #3]
 800df82:	2b0f      	cmp	r3, #15
 800df84:	d80d      	bhi.n	800dfa2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800df86:	78fb      	ldrb	r3, [r7, #3]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	33e0      	adds	r3, #224	; 0xe0
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	78fb      	ldrb	r3, [r7, #3]
 800df94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	33e0      	adds	r3, #224	; 0xe0
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	440b      	add	r3, r1
 800dfa0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
 800dfc0:	e00f      	b.n	800dfe2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	33e0      	adds	r3, #224	; 0xe0
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4413      	add	r3, r2
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d102      	bne.n	800dfdc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	e007      	b.n	800dfec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	73fb      	strb	r3, [r7, #15]
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	2b0f      	cmp	r3, #15
 800dfe6:	d9ec      	bls.n	800dfc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b087      	sub	sp, #28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4613      	mov	r3, r2
 800e004:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e006:	2301      	movs	r3, #1
 800e008:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e00e:	4b1f      	ldr	r3, [pc, #124]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e010:	7a5b      	ldrb	r3, [r3, #9]
 800e012:	b2db      	uxtb	r3, r3
 800e014:	2b00      	cmp	r3, #0
 800e016:	d131      	bne.n	800e07c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e018:	4b1c      	ldr	r3, [pc, #112]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e01a:	7a5b      	ldrb	r3, [r3, #9]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	461a      	mov	r2, r3
 800e020:	4b1a      	ldr	r3, [pc, #104]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e022:	2100      	movs	r1, #0
 800e024:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e026:	4b19      	ldr	r3, [pc, #100]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e028:	7a5b      	ldrb	r3, [r3, #9]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	4a17      	ldr	r2, [pc, #92]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e036:	4b15      	ldr	r3, [pc, #84]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e038:	7a5b      	ldrb	r3, [r3, #9]
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	461a      	mov	r2, r3
 800e03e:	4b13      	ldr	r3, [pc, #76]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e040:	4413      	add	r3, r2
 800e042:	79fa      	ldrb	r2, [r7, #7]
 800e044:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e046:	4b11      	ldr	r3, [pc, #68]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e048:	7a5b      	ldrb	r3, [r3, #9]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	b2d1      	uxtb	r1, r2
 800e050:	4a0e      	ldr	r2, [pc, #56]	; (800e08c <FATFS_LinkDriverEx+0x94>)
 800e052:	7251      	strb	r1, [r2, #9]
 800e054:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e056:	7dbb      	ldrb	r3, [r7, #22]
 800e058:	3330      	adds	r3, #48	; 0x30
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	3301      	adds	r3, #1
 800e064:	223a      	movs	r2, #58	; 0x3a
 800e066:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	3302      	adds	r3, #2
 800e06c:	222f      	movs	r2, #47	; 0x2f
 800e06e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	3303      	adds	r3, #3
 800e074:	2200      	movs	r2, #0
 800e076:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	371c      	adds	r7, #28
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20003450 	.word	0x20003450

0800e090 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e09a:	2200      	movs	r2, #0
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff ffaa 	bl	800dff8 <FATFS_LinkDriverEx>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	490e      	ldr	r1, [pc, #56]	; (800e0f0 <MX_USB_HOST_Init+0x40>)
 800e0b8:	480e      	ldr	r0, [pc, #56]	; (800e0f4 <MX_USB_HOST_Init+0x44>)
 800e0ba:	f7fe fb4b 	bl	800c754 <USBH_Init>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e0c4:	f7f4 fb1c 	bl	8002700 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800e0c8:	490b      	ldr	r1, [pc, #44]	; (800e0f8 <MX_USB_HOST_Init+0x48>)
 800e0ca:	480a      	ldr	r0, [pc, #40]	; (800e0f4 <MX_USB_HOST_Init+0x44>)
 800e0cc:	f7fe fbd0 	bl	800c870 <USBH_RegisterClass>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e0d6:	f7f4 fb13 	bl	8002700 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e0da:	4806      	ldr	r0, [pc, #24]	; (800e0f4 <MX_USB_HOST_Init+0x44>)
 800e0dc:	f7fe fc54 	bl	800c988 <USBH_Start>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e0e6:	f7f4 fb0b 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e0ea:	bf00      	nop
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0800e111 	.word	0x0800e111
 800e0f4:	2000345c 	.word	0x2000345c
 800e0f8:	20000010 	.word	0x20000010

0800e0fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800e100:	4802      	ldr	r0, [pc, #8]	; (800e10c <MX_USB_HOST_Process+0x10>)
 800e102:	f7fe fc51 	bl	800c9a8 <USBH_Process>
}
 800e106:	bf00      	nop
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	2000345c 	.word	0x2000345c

0800e110 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	460b      	mov	r3, r1
 800e11a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e11c:	78fb      	ldrb	r3, [r7, #3]
 800e11e:	3b01      	subs	r3, #1
 800e120:	2b04      	cmp	r3, #4
 800e122:	d819      	bhi.n	800e158 <USBH_UserProcess+0x48>
 800e124:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <USBH_UserProcess+0x1c>)
 800e126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12a:	bf00      	nop
 800e12c:	0800e159 	.word	0x0800e159
 800e130:	0800e149 	.word	0x0800e149
 800e134:	0800e159 	.word	0x0800e159
 800e138:	0800e151 	.word	0x0800e151
 800e13c:	0800e141 	.word	0x0800e141
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e140:	4b09      	ldr	r3, [pc, #36]	; (800e168 <USBH_UserProcess+0x58>)
 800e142:	2203      	movs	r2, #3
 800e144:	701a      	strb	r2, [r3, #0]
  break;
 800e146:	e008      	b.n	800e15a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e148:	4b07      	ldr	r3, [pc, #28]	; (800e168 <USBH_UserProcess+0x58>)
 800e14a:	2202      	movs	r2, #2
 800e14c:	701a      	strb	r2, [r3, #0]
  break;
 800e14e:	e004      	b.n	800e15a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <USBH_UserProcess+0x58>)
 800e152:	2201      	movs	r2, #1
 800e154:	701a      	strb	r2, [r3, #0]
  break;
 800e156:	e000      	b.n	800e15a <USBH_UserProcess+0x4a>

  default:
  break;
 800e158:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e15a:	bf00      	nop
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	20003834 	.word	0x20003834

0800e16c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	; 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e174:	f107 0314 	add.w	r3, r7, #20
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	605a      	str	r2, [r3, #4]
 800e17e:	609a      	str	r2, [r3, #8]
 800e180:	60da      	str	r2, [r3, #12]
 800e182:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a24      	ldr	r2, [pc, #144]	; (800e21c <HAL_HCD_MspInit+0xb0>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d141      	bne.n	800e212 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e18e:	2300      	movs	r3, #0
 800e190:	613b      	str	r3, [r7, #16]
 800e192:	4b23      	ldr	r3, [pc, #140]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e196:	4a22      	ldr	r2, [pc, #136]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e198:	f043 0302 	orr.w	r3, r3, #2
 800e19c:	6313      	str	r3, [r2, #48]	; 0x30
 800e19e:	4b20      	ldr	r3, [pc, #128]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	613b      	str	r3, [r7, #16]
 800e1a8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e1aa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e1ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e1bc:	230c      	movs	r3, #12
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1c0:	f107 0314 	add.w	r3, r7, #20
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4817      	ldr	r0, [pc, #92]	; (800e224 <HAL_HCD_MspInit+0xb8>)
 800e1c8:	f7f5 fd0a 	bl	8003be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e1cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e1da:	f107 0314 	add.w	r3, r7, #20
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4810      	ldr	r0, [pc, #64]	; (800e224 <HAL_HCD_MspInit+0xb8>)
 800e1e2:	f7f5 fcfd 	bl	8003be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ee:	4a0c      	ldr	r2, [pc, #48]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e1f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1f6:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <HAL_HCD_MspInit+0xb4>)
 800e1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e202:	2200      	movs	r2, #0
 800e204:	2100      	movs	r1, #0
 800e206:	204d      	movs	r0, #77	; 0x4d
 800e208:	f7f5 f91b 	bl	8003442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e20c:	204d      	movs	r0, #77	; 0x4d
 800e20e:	f7f5 f934 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e212:	bf00      	nop
 800e214:	3728      	adds	r7, #40	; 0x28
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	40040000 	.word	0x40040000
 800e220:	40023800 	.word	0x40023800
 800e224:	40020400 	.word	0x40020400

0800e228 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe ff95 	bl	800d166 <USBH_LL_IncTimer>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe ffcd 	bl	800d1f2 <USBH_LL_Connect>
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe ffd6 	bl	800d220 <USBH_LL_Disconnect>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
 800e288:	4613      	mov	r3, r2
 800e28a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe ff87 	bl	800d1ba <USBH_LL_PortEnabled>
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe ff87 	bl	800d1d6 <USBH_LL_PortDisabled>
}
 800e2c8:	bf00      	nop
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d132      	bne.n	800e348 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e2e2:	4a1c      	ldr	r2, [pc, #112]	; (800e354 <USBH_LL_Init+0x84>)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a19      	ldr	r2, [pc, #100]	; (800e354 <USBH_LL_Init+0x84>)
 800e2ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e2f2:	4b18      	ldr	r3, [pc, #96]	; (800e354 <USBH_LL_Init+0x84>)
 800e2f4:	4a18      	ldr	r2, [pc, #96]	; (800e358 <USBH_LL_Init+0x88>)
 800e2f6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e2f8:	4b16      	ldr	r3, [pc, #88]	; (800e354 <USBH_LL_Init+0x84>)
 800e2fa:	220c      	movs	r2, #12
 800e2fc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e2fe:	4b15      	ldr	r3, [pc, #84]	; (800e354 <USBH_LL_Init+0x84>)
 800e300:	2201      	movs	r2, #1
 800e302:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e304:	4b13      	ldr	r3, [pc, #76]	; (800e354 <USBH_LL_Init+0x84>)
 800e306:	2200      	movs	r2, #0
 800e308:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e30a:	4b12      	ldr	r3, [pc, #72]	; (800e354 <USBH_LL_Init+0x84>)
 800e30c:	2202      	movs	r2, #2
 800e30e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e310:	4b10      	ldr	r3, [pc, #64]	; (800e354 <USBH_LL_Init+0x84>)
 800e312:	2200      	movs	r2, #0
 800e314:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e316:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <USBH_LL_Init+0x84>)
 800e318:	2200      	movs	r2, #0
 800e31a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <USBH_LL_Init+0x84>)
 800e31e:	2200      	movs	r2, #0
 800e320:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e322:	4b0c      	ldr	r3, [pc, #48]	; (800e354 <USBH_LL_Init+0x84>)
 800e324:	2200      	movs	r2, #0
 800e326:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e328:	480a      	ldr	r0, [pc, #40]	; (800e354 <USBH_LL_Init+0x84>)
 800e32a:	f7f5 fe1e 	bl	8003f6a <HAL_HCD_Init>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e334:	f7f4 f9e4 	bl	8002700 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e338:	4806      	ldr	r0, [pc, #24]	; (800e354 <USBH_LL_Init+0x84>)
 800e33a:	f7f6 fa02 	bl	8004742 <HAL_HCD_GetCurrentFrame>
 800e33e:	4603      	mov	r3, r0
 800e340:	4619      	mov	r1, r3
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7fe ff00 	bl	800d148 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	20003838 	.word	0x20003838
 800e358:	40040000 	.word	0x40040000

0800e35c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e372:	4618      	mov	r0, r3
 800e374:	f7f6 f96f 	bl	8004656 <HAL_HCD_Start>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	4618      	mov	r0, r3
 800e380:	f000 f98c 	bl	800e69c <USBH_Get_USB_Status>
 800e384:	4603      	mov	r3, r0
 800e386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e388:	7bbb      	ldrb	r3, [r7, #14]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f6 f977 	bl	800469c <HAL_HCD_Stop>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f971 	bl	800e69c <USBH_Get_USB_Status>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7f6 f9bf 	bl	800475e <HAL_HCD_GetCurrentSpeed>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d00c      	beq.n	800e400 <USBH_LL_GetSpeed+0x38>
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d80d      	bhi.n	800e406 <USBH_LL_GetSpeed+0x3e>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <USBH_LL_GetSpeed+0x2c>
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d003      	beq.n	800e3fa <USBH_LL_GetSpeed+0x32>
 800e3f2:	e008      	b.n	800e406 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f8:	e008      	b.n	800e40c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e3fe:	e005      	b.n	800e40c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e400:	2302      	movs	r3, #2
 800e402:	73fb      	strb	r3, [r7, #15]
    break;
 800e404:	e002      	b.n	800e40c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e406:	2301      	movs	r3, #1
 800e408:	73fb      	strb	r3, [r7, #15]
    break;
 800e40a:	bf00      	nop
  }
  return  speed;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e422:	2300      	movs	r3, #0
 800e424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f6 f952 	bl	80046d6 <HAL_HCD_ResetPort>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	4618      	mov	r0, r3
 800e43a:	f000 f92f 	bl	800e69c <USBH_Get_USB_Status>
 800e43e:	4603      	mov	r3, r0
 800e440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e442:	7bbb      	ldrb	r3, [r7, #14]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	460b      	mov	r3, r1
 800e456:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e45e:	78fa      	ldrb	r2, [r7, #3]
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f7f6 f959 	bl	800471a <HAL_HCD_HC_GetXferCount>
 800e468:	4603      	mov	r3, r0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e472:	b590      	push	{r4, r7, lr}
 800e474:	b089      	sub	sp, #36	; 0x24
 800e476:	af04      	add	r7, sp, #16
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	4608      	mov	r0, r1
 800e47c:	4611      	mov	r1, r2
 800e47e:	461a      	mov	r2, r3
 800e480:	4603      	mov	r3, r0
 800e482:	70fb      	strb	r3, [r7, #3]
 800e484:	460b      	mov	r3, r1
 800e486:	70bb      	strb	r3, [r7, #2]
 800e488:	4613      	mov	r3, r2
 800e48a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e49a:	787c      	ldrb	r4, [r7, #1]
 800e49c:	78ba      	ldrb	r2, [r7, #2]
 800e49e:	78f9      	ldrb	r1, [r7, #3]
 800e4a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4a2:	9302      	str	r3, [sp, #8]
 800e4a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	4623      	mov	r3, r4
 800e4b2:	f7f5 fdbc 	bl	800402e <HAL_HCD_HC_Init>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4ba:	7bfb      	ldrb	r3, [r7, #15]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f8ed 	bl	800e69c <USBH_Get_USB_Status>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}

0800e4d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4ea:	78fa      	ldrb	r2, [r7, #3]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7f5 fe2c 	bl	800414c <HAL_HCD_HC_Halt>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 f8ce 	bl	800e69c <USBH_Get_USB_Status>
 800e500:	4603      	mov	r3, r0
 800e502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e504:	7bbb      	ldrb	r3, [r7, #14]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e50e:	b590      	push	{r4, r7, lr}
 800e510:	b089      	sub	sp, #36	; 0x24
 800e512:	af04      	add	r7, sp, #16
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	4608      	mov	r0, r1
 800e518:	4611      	mov	r1, r2
 800e51a:	461a      	mov	r2, r3
 800e51c:	4603      	mov	r3, r0
 800e51e:	70fb      	strb	r3, [r7, #3]
 800e520:	460b      	mov	r3, r1
 800e522:	70bb      	strb	r3, [r7, #2]
 800e524:	4613      	mov	r3, r2
 800e526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e528:	2300      	movs	r3, #0
 800e52a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e536:	787c      	ldrb	r4, [r7, #1]
 800e538:	78ba      	ldrb	r2, [r7, #2]
 800e53a:	78f9      	ldrb	r1, [r7, #3]
 800e53c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e540:	9303      	str	r3, [sp, #12]
 800e542:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e544:	9302      	str	r3, [sp, #8]
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	4623      	mov	r3, r4
 800e552:	f7f5 fe1f 	bl	8004194 <HAL_HCD_HC_SubmitRequest>
 800e556:	4603      	mov	r3, r0
 800e558:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 f89d 	bl	800e69c <USBH_Get_USB_Status>
 800e562:	4603      	mov	r3, r0
 800e564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e566:	7bbb      	ldrb	r3, [r7, #14]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3714      	adds	r7, #20
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd90      	pop	{r4, r7, pc}

0800e570 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e582:	78fa      	ldrb	r2, [r7, #3]
 800e584:	4611      	mov	r1, r2
 800e586:	4618      	mov	r0, r3
 800e588:	f7f6 f8b3 	bl	80046f2 <HAL_HCD_HC_GetURBState>
 800e58c:	4603      	mov	r3, r0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d103      	bne.n	800e5b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e5ac:	78fb      	ldrb	r3, [r7, #3]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 f8a0 	bl	800e6f4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e5b4:	20c8      	movs	r0, #200	; 0xc8
 800e5b6:	f7f4 fe45 	bl	8003244 <HAL_Delay>
  return USBH_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	212c      	movs	r1, #44	; 0x2c
 800e5e2:	fb01 f303 	mul.w	r3, r1, r3
 800e5e6:	4413      	add	r3, r2
 800e5e8:	333b      	adds	r3, #59	; 0x3b
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d009      	beq.n	800e604 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	212c      	movs	r1, #44	; 0x2c
 800e5f6:	fb01 f303 	mul.w	r3, r1, r3
 800e5fa:	4413      	add	r3, r2
 800e5fc:	3354      	adds	r3, #84	; 0x54
 800e5fe:	78ba      	ldrb	r2, [r7, #2]
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	e008      	b.n	800e616 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e604:	78fb      	ldrb	r3, [r7, #3]
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	212c      	movs	r1, #44	; 0x2c
 800e60a:	fb01 f303 	mul.w	r3, r1, r3
 800e60e:	4413      	add	r3, r2
 800e610:	3355      	adds	r3, #85	; 0x55
 800e612:	78ba      	ldrb	r2, [r7, #2]
 800e614:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3714      	adds	r7, #20
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	460b      	mov	r3, r1
 800e62e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e63a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e63c:	78fb      	ldrb	r3, [r7, #3]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	212c      	movs	r1, #44	; 0x2c
 800e642:	fb01 f303 	mul.w	r3, r1, r3
 800e646:	4413      	add	r3, r2
 800e648:	333b      	adds	r3, #59	; 0x3b
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d009      	beq.n	800e664 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	212c      	movs	r1, #44	; 0x2c
 800e656:	fb01 f303 	mul.w	r3, r1, r3
 800e65a:	4413      	add	r3, r2
 800e65c:	3354      	adds	r3, #84	; 0x54
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	73fb      	strb	r3, [r7, #15]
 800e662:	e008      	b.n	800e676 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	212c      	movs	r1, #44	; 0x2c
 800e66a:	fb01 f303 	mul.w	r3, r1, r3
 800e66e:	4413      	add	r3, r2
 800e670:	3355      	adds	r3, #85	; 0x55
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7f4 fdd9 	bl	8003244 <HAL_Delay>
}
 800e692:	bf00      	nop
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	2b03      	cmp	r3, #3
 800e6ae:	d817      	bhi.n	800e6e0 <USBH_Get_USB_Status+0x44>
 800e6b0:	a201      	add	r2, pc, #4	; (adr r2, 800e6b8 <USBH_Get_USB_Status+0x1c>)
 800e6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b6:	bf00      	nop
 800e6b8:	0800e6c9 	.word	0x0800e6c9
 800e6bc:	0800e6cf 	.word	0x0800e6cf
 800e6c0:	0800e6d5 	.word	0x0800e6d5
 800e6c4:	0800e6db 	.word	0x0800e6db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e6cc:	e00b      	b.n	800e6e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6d2:	e008      	b.n	800e6e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e6d8:	e005      	b.n	800e6e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e6da:	2302      	movs	r3, #2
 800e6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e6de:	e002      	b.n	800e6e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e6e4:	bf00      	nop
  }
  return usb_status;
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3714      	adds	r7, #20
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e702:	79fb      	ldrb	r3, [r7, #7]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d102      	bne.n	800e70e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e708:	2301      	movs	r3, #1
 800e70a:	73fb      	strb	r3, [r7, #15]
 800e70c:	e001      	b.n	800e712 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e712:	7bfb      	ldrb	r3, [r7, #15]
 800e714:	461a      	mov	r2, r3
 800e716:	2110      	movs	r1, #16
 800e718:	4803      	ldr	r0, [pc, #12]	; (800e728 <MX_DriverVbusHS+0x34>)
 800e71a:	f7f5 fc0d 	bl	8003f38 <HAL_GPIO_WritePin>
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	40020800 	.word	0x40020800

0800e72c <atoi>:
 800e72c:	220a      	movs	r2, #10
 800e72e:	2100      	movs	r1, #0
 800e730:	f000 bac0 	b.w	800ecb4 <strtol>

0800e734 <__errno>:
 800e734:	4b01      	ldr	r3, [pc, #4]	; (800e73c <__errno+0x8>)
 800e736:	6818      	ldr	r0, [r3, #0]
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	20000030 	.word	0x20000030

0800e740 <__libc_init_array>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	4d0d      	ldr	r5, [pc, #52]	; (800e778 <__libc_init_array+0x38>)
 800e744:	4c0d      	ldr	r4, [pc, #52]	; (800e77c <__libc_init_array+0x3c>)
 800e746:	1b64      	subs	r4, r4, r5
 800e748:	10a4      	asrs	r4, r4, #2
 800e74a:	2600      	movs	r6, #0
 800e74c:	42a6      	cmp	r6, r4
 800e74e:	d109      	bne.n	800e764 <__libc_init_array+0x24>
 800e750:	4d0b      	ldr	r5, [pc, #44]	; (800e780 <__libc_init_array+0x40>)
 800e752:	4c0c      	ldr	r4, [pc, #48]	; (800e784 <__libc_init_array+0x44>)
 800e754:	f001 faec 	bl	800fd30 <_init>
 800e758:	1b64      	subs	r4, r4, r5
 800e75a:	10a4      	asrs	r4, r4, #2
 800e75c:	2600      	movs	r6, #0
 800e75e:	42a6      	cmp	r6, r4
 800e760:	d105      	bne.n	800e76e <__libc_init_array+0x2e>
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	f855 3b04 	ldr.w	r3, [r5], #4
 800e768:	4798      	blx	r3
 800e76a:	3601      	adds	r6, #1
 800e76c:	e7ee      	b.n	800e74c <__libc_init_array+0xc>
 800e76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e772:	4798      	blx	r3
 800e774:	3601      	adds	r6, #1
 800e776:	e7f2      	b.n	800e75e <__libc_init_array+0x1e>
 800e778:	080102c4 	.word	0x080102c4
 800e77c:	080102c4 	.word	0x080102c4
 800e780:	080102c4 	.word	0x080102c4
 800e784:	080102c8 	.word	0x080102c8

0800e788 <malloc>:
 800e788:	4b02      	ldr	r3, [pc, #8]	; (800e794 <malloc+0xc>)
 800e78a:	4601      	mov	r1, r0
 800e78c:	6818      	ldr	r0, [r3, #0]
 800e78e:	f000 b88d 	b.w	800e8ac <_malloc_r>
 800e792:	bf00      	nop
 800e794:	20000030 	.word	0x20000030

0800e798 <free>:
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <free+0xc>)
 800e79a:	4601      	mov	r1, r0
 800e79c:	6818      	ldr	r0, [r3, #0]
 800e79e:	f000 b819 	b.w	800e7d4 <_free_r>
 800e7a2:	bf00      	nop
 800e7a4:	20000030 	.word	0x20000030

0800e7a8 <memcpy>:
 800e7a8:	440a      	add	r2, r1
 800e7aa:	4291      	cmp	r1, r2
 800e7ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e7b0:	d100      	bne.n	800e7b4 <memcpy+0xc>
 800e7b2:	4770      	bx	lr
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7be:	4291      	cmp	r1, r2
 800e7c0:	d1f9      	bne.n	800e7b6 <memcpy+0xe>
 800e7c2:	bd10      	pop	{r4, pc}

0800e7c4 <memset>:
 800e7c4:	4402      	add	r2, r0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d100      	bne.n	800e7ce <memset+0xa>
 800e7cc:	4770      	bx	lr
 800e7ce:	f803 1b01 	strb.w	r1, [r3], #1
 800e7d2:	e7f9      	b.n	800e7c8 <memset+0x4>

0800e7d4 <_free_r>:
 800e7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	d044      	beq.n	800e864 <_free_r+0x90>
 800e7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7de:	9001      	str	r0, [sp, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e7e6:	bfb8      	it	lt
 800e7e8:	18e4      	addlt	r4, r4, r3
 800e7ea:	f000 fc8d 	bl	800f108 <__malloc_lock>
 800e7ee:	4a1e      	ldr	r2, [pc, #120]	; (800e868 <_free_r+0x94>)
 800e7f0:	9801      	ldr	r0, [sp, #4]
 800e7f2:	6813      	ldr	r3, [r2, #0]
 800e7f4:	b933      	cbnz	r3, 800e804 <_free_r+0x30>
 800e7f6:	6063      	str	r3, [r4, #4]
 800e7f8:	6014      	str	r4, [r2, #0]
 800e7fa:	b003      	add	sp, #12
 800e7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e800:	f000 bc88 	b.w	800f114 <__malloc_unlock>
 800e804:	42a3      	cmp	r3, r4
 800e806:	d908      	bls.n	800e81a <_free_r+0x46>
 800e808:	6825      	ldr	r5, [r4, #0]
 800e80a:	1961      	adds	r1, r4, r5
 800e80c:	428b      	cmp	r3, r1
 800e80e:	bf01      	itttt	eq
 800e810:	6819      	ldreq	r1, [r3, #0]
 800e812:	685b      	ldreq	r3, [r3, #4]
 800e814:	1949      	addeq	r1, r1, r5
 800e816:	6021      	streq	r1, [r4, #0]
 800e818:	e7ed      	b.n	800e7f6 <_free_r+0x22>
 800e81a:	461a      	mov	r2, r3
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	b10b      	cbz	r3, 800e824 <_free_r+0x50>
 800e820:	42a3      	cmp	r3, r4
 800e822:	d9fa      	bls.n	800e81a <_free_r+0x46>
 800e824:	6811      	ldr	r1, [r2, #0]
 800e826:	1855      	adds	r5, r2, r1
 800e828:	42a5      	cmp	r5, r4
 800e82a:	d10b      	bne.n	800e844 <_free_r+0x70>
 800e82c:	6824      	ldr	r4, [r4, #0]
 800e82e:	4421      	add	r1, r4
 800e830:	1854      	adds	r4, r2, r1
 800e832:	42a3      	cmp	r3, r4
 800e834:	6011      	str	r1, [r2, #0]
 800e836:	d1e0      	bne.n	800e7fa <_free_r+0x26>
 800e838:	681c      	ldr	r4, [r3, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	6053      	str	r3, [r2, #4]
 800e83e:	4421      	add	r1, r4
 800e840:	6011      	str	r1, [r2, #0]
 800e842:	e7da      	b.n	800e7fa <_free_r+0x26>
 800e844:	d902      	bls.n	800e84c <_free_r+0x78>
 800e846:	230c      	movs	r3, #12
 800e848:	6003      	str	r3, [r0, #0]
 800e84a:	e7d6      	b.n	800e7fa <_free_r+0x26>
 800e84c:	6825      	ldr	r5, [r4, #0]
 800e84e:	1961      	adds	r1, r4, r5
 800e850:	428b      	cmp	r3, r1
 800e852:	bf04      	itt	eq
 800e854:	6819      	ldreq	r1, [r3, #0]
 800e856:	685b      	ldreq	r3, [r3, #4]
 800e858:	6063      	str	r3, [r4, #4]
 800e85a:	bf04      	itt	eq
 800e85c:	1949      	addeq	r1, r1, r5
 800e85e:	6021      	streq	r1, [r4, #0]
 800e860:	6054      	str	r4, [r2, #4]
 800e862:	e7ca      	b.n	800e7fa <_free_r+0x26>
 800e864:	b003      	add	sp, #12
 800e866:	bd30      	pop	{r4, r5, pc}
 800e868:	20003b3c 	.word	0x20003b3c

0800e86c <sbrk_aligned>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4e0e      	ldr	r6, [pc, #56]	; (800e8a8 <sbrk_aligned+0x3c>)
 800e870:	460c      	mov	r4, r1
 800e872:	6831      	ldr	r1, [r6, #0]
 800e874:	4605      	mov	r5, r0
 800e876:	b911      	cbnz	r1, 800e87e <sbrk_aligned+0x12>
 800e878:	f000 f8a4 	bl	800e9c4 <_sbrk_r>
 800e87c:	6030      	str	r0, [r6, #0]
 800e87e:	4621      	mov	r1, r4
 800e880:	4628      	mov	r0, r5
 800e882:	f000 f89f 	bl	800e9c4 <_sbrk_r>
 800e886:	1c43      	adds	r3, r0, #1
 800e888:	d00a      	beq.n	800e8a0 <sbrk_aligned+0x34>
 800e88a:	1cc4      	adds	r4, r0, #3
 800e88c:	f024 0403 	bic.w	r4, r4, #3
 800e890:	42a0      	cmp	r0, r4
 800e892:	d007      	beq.n	800e8a4 <sbrk_aligned+0x38>
 800e894:	1a21      	subs	r1, r4, r0
 800e896:	4628      	mov	r0, r5
 800e898:	f000 f894 	bl	800e9c4 <_sbrk_r>
 800e89c:	3001      	adds	r0, #1
 800e89e:	d101      	bne.n	800e8a4 <sbrk_aligned+0x38>
 800e8a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	20003b40 	.word	0x20003b40

0800e8ac <_malloc_r>:
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	1ccd      	adds	r5, r1, #3
 800e8b2:	f025 0503 	bic.w	r5, r5, #3
 800e8b6:	3508      	adds	r5, #8
 800e8b8:	2d0c      	cmp	r5, #12
 800e8ba:	bf38      	it	cc
 800e8bc:	250c      	movcc	r5, #12
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	4607      	mov	r7, r0
 800e8c2:	db01      	blt.n	800e8c8 <_malloc_r+0x1c>
 800e8c4:	42a9      	cmp	r1, r5
 800e8c6:	d905      	bls.n	800e8d4 <_malloc_r+0x28>
 800e8c8:	230c      	movs	r3, #12
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	2600      	movs	r6, #0
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d4:	4e2e      	ldr	r6, [pc, #184]	; (800e990 <_malloc_r+0xe4>)
 800e8d6:	f000 fc17 	bl	800f108 <__malloc_lock>
 800e8da:	6833      	ldr	r3, [r6, #0]
 800e8dc:	461c      	mov	r4, r3
 800e8de:	bb34      	cbnz	r4, 800e92e <_malloc_r+0x82>
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	f7ff ffc2 	bl	800e86c <sbrk_aligned>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	d14d      	bne.n	800e98a <_malloc_r+0xde>
 800e8ee:	6834      	ldr	r4, [r6, #0]
 800e8f0:	4626      	mov	r6, r4
 800e8f2:	2e00      	cmp	r6, #0
 800e8f4:	d140      	bne.n	800e978 <_malloc_r+0xcc>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	eb04 0803 	add.w	r8, r4, r3
 800e900:	f000 f860 	bl	800e9c4 <_sbrk_r>
 800e904:	4580      	cmp	r8, r0
 800e906:	d13a      	bne.n	800e97e <_malloc_r+0xd2>
 800e908:	6821      	ldr	r1, [r4, #0]
 800e90a:	3503      	adds	r5, #3
 800e90c:	1a6d      	subs	r5, r5, r1
 800e90e:	f025 0503 	bic.w	r5, r5, #3
 800e912:	3508      	adds	r5, #8
 800e914:	2d0c      	cmp	r5, #12
 800e916:	bf38      	it	cc
 800e918:	250c      	movcc	r5, #12
 800e91a:	4629      	mov	r1, r5
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7ff ffa5 	bl	800e86c <sbrk_aligned>
 800e922:	3001      	adds	r0, #1
 800e924:	d02b      	beq.n	800e97e <_malloc_r+0xd2>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	442b      	add	r3, r5
 800e92a:	6023      	str	r3, [r4, #0]
 800e92c:	e00e      	b.n	800e94c <_malloc_r+0xa0>
 800e92e:	6822      	ldr	r2, [r4, #0]
 800e930:	1b52      	subs	r2, r2, r5
 800e932:	d41e      	bmi.n	800e972 <_malloc_r+0xc6>
 800e934:	2a0b      	cmp	r2, #11
 800e936:	d916      	bls.n	800e966 <_malloc_r+0xba>
 800e938:	1961      	adds	r1, r4, r5
 800e93a:	42a3      	cmp	r3, r4
 800e93c:	6025      	str	r5, [r4, #0]
 800e93e:	bf18      	it	ne
 800e940:	6059      	strne	r1, [r3, #4]
 800e942:	6863      	ldr	r3, [r4, #4]
 800e944:	bf08      	it	eq
 800e946:	6031      	streq	r1, [r6, #0]
 800e948:	5162      	str	r2, [r4, r5]
 800e94a:	604b      	str	r3, [r1, #4]
 800e94c:	4638      	mov	r0, r7
 800e94e:	f104 060b 	add.w	r6, r4, #11
 800e952:	f000 fbdf 	bl	800f114 <__malloc_unlock>
 800e956:	f026 0607 	bic.w	r6, r6, #7
 800e95a:	1d23      	adds	r3, r4, #4
 800e95c:	1af2      	subs	r2, r6, r3
 800e95e:	d0b6      	beq.n	800e8ce <_malloc_r+0x22>
 800e960:	1b9b      	subs	r3, r3, r6
 800e962:	50a3      	str	r3, [r4, r2]
 800e964:	e7b3      	b.n	800e8ce <_malloc_r+0x22>
 800e966:	6862      	ldr	r2, [r4, #4]
 800e968:	42a3      	cmp	r3, r4
 800e96a:	bf0c      	ite	eq
 800e96c:	6032      	streq	r2, [r6, #0]
 800e96e:	605a      	strne	r2, [r3, #4]
 800e970:	e7ec      	b.n	800e94c <_malloc_r+0xa0>
 800e972:	4623      	mov	r3, r4
 800e974:	6864      	ldr	r4, [r4, #4]
 800e976:	e7b2      	b.n	800e8de <_malloc_r+0x32>
 800e978:	4634      	mov	r4, r6
 800e97a:	6876      	ldr	r6, [r6, #4]
 800e97c:	e7b9      	b.n	800e8f2 <_malloc_r+0x46>
 800e97e:	230c      	movs	r3, #12
 800e980:	603b      	str	r3, [r7, #0]
 800e982:	4638      	mov	r0, r7
 800e984:	f000 fbc6 	bl	800f114 <__malloc_unlock>
 800e988:	e7a1      	b.n	800e8ce <_malloc_r+0x22>
 800e98a:	6025      	str	r5, [r4, #0]
 800e98c:	e7de      	b.n	800e94c <_malloc_r+0xa0>
 800e98e:	bf00      	nop
 800e990:	20003b3c 	.word	0x20003b3c

0800e994 <iprintf>:
 800e994:	b40f      	push	{r0, r1, r2, r3}
 800e996:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <iprintf+0x2c>)
 800e998:	b513      	push	{r0, r1, r4, lr}
 800e99a:	681c      	ldr	r4, [r3, #0]
 800e99c:	b124      	cbz	r4, 800e9a8 <iprintf+0x14>
 800e99e:	69a3      	ldr	r3, [r4, #24]
 800e9a0:	b913      	cbnz	r3, 800e9a8 <iprintf+0x14>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 faaa 	bl	800eefc <__sinit>
 800e9a8:	ab05      	add	r3, sp, #20
 800e9aa:	9a04      	ldr	r2, [sp, #16]
 800e9ac:	68a1      	ldr	r1, [r4, #8]
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f000 fd3b 	bl	800f42c <_vfiprintf_r>
 800e9b6:	b002      	add	sp, #8
 800e9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9bc:	b004      	add	sp, #16
 800e9be:	4770      	bx	lr
 800e9c0:	20000030 	.word	0x20000030

0800e9c4 <_sbrk_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4d06      	ldr	r5, [pc, #24]	; (800e9e0 <_sbrk_r+0x1c>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	602b      	str	r3, [r5, #0]
 800e9d0:	f7f4 fb54 	bl	800307c <_sbrk>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_sbrk_r+0x1a>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_sbrk_r+0x1a>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20003b48 	.word	0x20003b48

0800e9e4 <setvbuf>:
 800e9e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9e8:	461d      	mov	r5, r3
 800e9ea:	4b5d      	ldr	r3, [pc, #372]	; (800eb60 <setvbuf+0x17c>)
 800e9ec:	681f      	ldr	r7, [r3, #0]
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	460e      	mov	r6, r1
 800e9f2:	4690      	mov	r8, r2
 800e9f4:	b127      	cbz	r7, 800ea00 <setvbuf+0x1c>
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	b913      	cbnz	r3, 800ea00 <setvbuf+0x1c>
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	f000 fa7e 	bl	800eefc <__sinit>
 800ea00:	4b58      	ldr	r3, [pc, #352]	; (800eb64 <setvbuf+0x180>)
 800ea02:	429c      	cmp	r4, r3
 800ea04:	d167      	bne.n	800ead6 <setvbuf+0xf2>
 800ea06:	687c      	ldr	r4, [r7, #4]
 800ea08:	f1b8 0f02 	cmp.w	r8, #2
 800ea0c:	d006      	beq.n	800ea1c <setvbuf+0x38>
 800ea0e:	f1b8 0f01 	cmp.w	r8, #1
 800ea12:	f200 809f 	bhi.w	800eb54 <setvbuf+0x170>
 800ea16:	2d00      	cmp	r5, #0
 800ea18:	f2c0 809c 	blt.w	800eb54 <setvbuf+0x170>
 800ea1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea1e:	07db      	lsls	r3, r3, #31
 800ea20:	d405      	bmi.n	800ea2e <setvbuf+0x4a>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	0598      	lsls	r0, r3, #22
 800ea26:	d402      	bmi.n	800ea2e <setvbuf+0x4a>
 800ea28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea2a:	f000 fb05 	bl	800f038 <__retarget_lock_acquire_recursive>
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4638      	mov	r0, r7
 800ea32:	f000 f9cf 	bl	800edd4 <_fflush_r>
 800ea36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea38:	b141      	cbz	r1, 800ea4c <setvbuf+0x68>
 800ea3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea3e:	4299      	cmp	r1, r3
 800ea40:	d002      	beq.n	800ea48 <setvbuf+0x64>
 800ea42:	4638      	mov	r0, r7
 800ea44:	f7ff fec6 	bl	800e7d4 <_free_r>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	6363      	str	r3, [r4, #52]	; 0x34
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	61a3      	str	r3, [r4, #24]
 800ea50:	6063      	str	r3, [r4, #4]
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	0619      	lsls	r1, r3, #24
 800ea56:	d503      	bpl.n	800ea60 <setvbuf+0x7c>
 800ea58:	6921      	ldr	r1, [r4, #16]
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	f7ff feba 	bl	800e7d4 <_free_r>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ea66:	f023 0303 	bic.w	r3, r3, #3
 800ea6a:	f1b8 0f02 	cmp.w	r8, #2
 800ea6e:	81a3      	strh	r3, [r4, #12]
 800ea70:	d06c      	beq.n	800eb4c <setvbuf+0x168>
 800ea72:	ab01      	add	r3, sp, #4
 800ea74:	466a      	mov	r2, sp
 800ea76:	4621      	mov	r1, r4
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f000 fadf 	bl	800f03c <__swhatbuf_r>
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	4318      	orrs	r0, r3
 800ea82:	81a0      	strh	r0, [r4, #12]
 800ea84:	2d00      	cmp	r5, #0
 800ea86:	d130      	bne.n	800eaea <setvbuf+0x106>
 800ea88:	9d00      	ldr	r5, [sp, #0]
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f7ff fe7c 	bl	800e788 <malloc>
 800ea90:	4606      	mov	r6, r0
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d155      	bne.n	800eb42 <setvbuf+0x15e>
 800ea96:	f8dd 9000 	ldr.w	r9, [sp]
 800ea9a:	45a9      	cmp	r9, r5
 800ea9c:	d14a      	bne.n	800eb34 <setvbuf+0x150>
 800ea9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	60a2      	str	r2, [r4, #8]
 800eaa6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800eaaa:	6022      	str	r2, [r4, #0]
 800eaac:	6122      	str	r2, [r4, #16]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab4:	6162      	str	r2, [r4, #20]
 800eab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eab8:	f043 0302 	orr.w	r3, r3, #2
 800eabc:	07d2      	lsls	r2, r2, #31
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	d405      	bmi.n	800eace <setvbuf+0xea>
 800eac2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800eac6:	d102      	bne.n	800eace <setvbuf+0xea>
 800eac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaca:	f000 fab6 	bl	800f03a <__retarget_lock_release_recursive>
 800eace:	4628      	mov	r0, r5
 800ead0:	b003      	add	sp, #12
 800ead2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ead6:	4b24      	ldr	r3, [pc, #144]	; (800eb68 <setvbuf+0x184>)
 800ead8:	429c      	cmp	r4, r3
 800eada:	d101      	bne.n	800eae0 <setvbuf+0xfc>
 800eadc:	68bc      	ldr	r4, [r7, #8]
 800eade:	e793      	b.n	800ea08 <setvbuf+0x24>
 800eae0:	4b22      	ldr	r3, [pc, #136]	; (800eb6c <setvbuf+0x188>)
 800eae2:	429c      	cmp	r4, r3
 800eae4:	bf08      	it	eq
 800eae6:	68fc      	ldreq	r4, [r7, #12]
 800eae8:	e78e      	b.n	800ea08 <setvbuf+0x24>
 800eaea:	2e00      	cmp	r6, #0
 800eaec:	d0cd      	beq.n	800ea8a <setvbuf+0xa6>
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	b913      	cbnz	r3, 800eaf8 <setvbuf+0x114>
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f000 fa02 	bl	800eefc <__sinit>
 800eaf8:	f1b8 0f01 	cmp.w	r8, #1
 800eafc:	bf08      	it	eq
 800eafe:	89a3      	ldrheq	r3, [r4, #12]
 800eb00:	6026      	str	r6, [r4, #0]
 800eb02:	bf04      	itt	eq
 800eb04:	f043 0301 	orreq.w	r3, r3, #1
 800eb08:	81a3      	strheq	r3, [r4, #12]
 800eb0a:	89a2      	ldrh	r2, [r4, #12]
 800eb0c:	f012 0308 	ands.w	r3, r2, #8
 800eb10:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800eb14:	d01c      	beq.n	800eb50 <setvbuf+0x16c>
 800eb16:	07d3      	lsls	r3, r2, #31
 800eb18:	bf41      	itttt	mi
 800eb1a:	2300      	movmi	r3, #0
 800eb1c:	426d      	negmi	r5, r5
 800eb1e:	60a3      	strmi	r3, [r4, #8]
 800eb20:	61a5      	strmi	r5, [r4, #24]
 800eb22:	bf58      	it	pl
 800eb24:	60a5      	strpl	r5, [r4, #8]
 800eb26:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800eb28:	f015 0501 	ands.w	r5, r5, #1
 800eb2c:	d115      	bne.n	800eb5a <setvbuf+0x176>
 800eb2e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800eb32:	e7c8      	b.n	800eac6 <setvbuf+0xe2>
 800eb34:	4648      	mov	r0, r9
 800eb36:	f7ff fe27 	bl	800e788 <malloc>
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d0ae      	beq.n	800ea9e <setvbuf+0xba>
 800eb40:	464d      	mov	r5, r9
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	e7d0      	b.n	800eaee <setvbuf+0x10a>
 800eb4c:	2500      	movs	r5, #0
 800eb4e:	e7a8      	b.n	800eaa2 <setvbuf+0xbe>
 800eb50:	60a3      	str	r3, [r4, #8]
 800eb52:	e7e8      	b.n	800eb26 <setvbuf+0x142>
 800eb54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eb58:	e7b9      	b.n	800eace <setvbuf+0xea>
 800eb5a:	2500      	movs	r5, #0
 800eb5c:	e7b7      	b.n	800eace <setvbuf+0xea>
 800eb5e:	bf00      	nop
 800eb60:	20000030 	.word	0x20000030
 800eb64:	08010248 	.word	0x08010248
 800eb68:	08010268 	.word	0x08010268
 800eb6c:	08010228 	.word	0x08010228

0800eb70 <siprintf>:
 800eb70:	b40e      	push	{r1, r2, r3}
 800eb72:	b500      	push	{lr}
 800eb74:	b09c      	sub	sp, #112	; 0x70
 800eb76:	ab1d      	add	r3, sp, #116	; 0x74
 800eb78:	9002      	str	r0, [sp, #8]
 800eb7a:	9006      	str	r0, [sp, #24]
 800eb7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb80:	4809      	ldr	r0, [pc, #36]	; (800eba8 <siprintf+0x38>)
 800eb82:	9107      	str	r1, [sp, #28]
 800eb84:	9104      	str	r1, [sp, #16]
 800eb86:	4909      	ldr	r1, [pc, #36]	; (800ebac <siprintf+0x3c>)
 800eb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb8c:	9105      	str	r1, [sp, #20]
 800eb8e:	6800      	ldr	r0, [r0, #0]
 800eb90:	9301      	str	r3, [sp, #4]
 800eb92:	a902      	add	r1, sp, #8
 800eb94:	f000 fb20 	bl	800f1d8 <_svfiprintf_r>
 800eb98:	9b02      	ldr	r3, [sp, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	701a      	strb	r2, [r3, #0]
 800eb9e:	b01c      	add	sp, #112	; 0x70
 800eba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba4:	b003      	add	sp, #12
 800eba6:	4770      	bx	lr
 800eba8:	20000030 	.word	0x20000030
 800ebac:	ffff0208 	.word	0xffff0208

0800ebb0 <_strtol_l.constprop.0>:
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb6:	d001      	beq.n	800ebbc <_strtol_l.constprop.0+0xc>
 800ebb8:	2b24      	cmp	r3, #36	; 0x24
 800ebba:	d906      	bls.n	800ebca <_strtol_l.constprop.0+0x1a>
 800ebbc:	f7ff fdba 	bl	800e734 <__errno>
 800ebc0:	2316      	movs	r3, #22
 800ebc2:	6003      	str	r3, [r0, #0]
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ecb0 <_strtol_l.constprop.0+0x100>
 800ebce:	460d      	mov	r5, r1
 800ebd0:	462e      	mov	r6, r5
 800ebd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ebda:	f017 0708 	ands.w	r7, r7, #8
 800ebde:	d1f7      	bne.n	800ebd0 <_strtol_l.constprop.0+0x20>
 800ebe0:	2c2d      	cmp	r4, #45	; 0x2d
 800ebe2:	d132      	bne.n	800ec4a <_strtol_l.constprop.0+0x9a>
 800ebe4:	782c      	ldrb	r4, [r5, #0]
 800ebe6:	2701      	movs	r7, #1
 800ebe8:	1cb5      	adds	r5, r6, #2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d05b      	beq.n	800eca6 <_strtol_l.constprop.0+0xf6>
 800ebee:	2b10      	cmp	r3, #16
 800ebf0:	d109      	bne.n	800ec06 <_strtol_l.constprop.0+0x56>
 800ebf2:	2c30      	cmp	r4, #48	; 0x30
 800ebf4:	d107      	bne.n	800ec06 <_strtol_l.constprop.0+0x56>
 800ebf6:	782c      	ldrb	r4, [r5, #0]
 800ebf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ebfc:	2c58      	cmp	r4, #88	; 0x58
 800ebfe:	d14d      	bne.n	800ec9c <_strtol_l.constprop.0+0xec>
 800ec00:	786c      	ldrb	r4, [r5, #1]
 800ec02:	2310      	movs	r3, #16
 800ec04:	3502      	adds	r5, #2
 800ec06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ec0e:	f04f 0c00 	mov.w	ip, #0
 800ec12:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec16:	4666      	mov	r6, ip
 800ec18:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ec20:	f1be 0f09 	cmp.w	lr, #9
 800ec24:	d816      	bhi.n	800ec54 <_strtol_l.constprop.0+0xa4>
 800ec26:	4674      	mov	r4, lr
 800ec28:	42a3      	cmp	r3, r4
 800ec2a:	dd24      	ble.n	800ec76 <_strtol_l.constprop.0+0xc6>
 800ec2c:	f1bc 0f00 	cmp.w	ip, #0
 800ec30:	db1e      	blt.n	800ec70 <_strtol_l.constprop.0+0xc0>
 800ec32:	45b1      	cmp	r9, r6
 800ec34:	d31c      	bcc.n	800ec70 <_strtol_l.constprop.0+0xc0>
 800ec36:	d101      	bne.n	800ec3c <_strtol_l.constprop.0+0x8c>
 800ec38:	45a2      	cmp	sl, r4
 800ec3a:	db19      	blt.n	800ec70 <_strtol_l.constprop.0+0xc0>
 800ec3c:	fb06 4603 	mla	r6, r6, r3, r4
 800ec40:	f04f 0c01 	mov.w	ip, #1
 800ec44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec48:	e7e8      	b.n	800ec1c <_strtol_l.constprop.0+0x6c>
 800ec4a:	2c2b      	cmp	r4, #43	; 0x2b
 800ec4c:	bf04      	itt	eq
 800ec4e:	782c      	ldrbeq	r4, [r5, #0]
 800ec50:	1cb5      	addeq	r5, r6, #2
 800ec52:	e7ca      	b.n	800ebea <_strtol_l.constprop.0+0x3a>
 800ec54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ec58:	f1be 0f19 	cmp.w	lr, #25
 800ec5c:	d801      	bhi.n	800ec62 <_strtol_l.constprop.0+0xb2>
 800ec5e:	3c37      	subs	r4, #55	; 0x37
 800ec60:	e7e2      	b.n	800ec28 <_strtol_l.constprop.0+0x78>
 800ec62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ec66:	f1be 0f19 	cmp.w	lr, #25
 800ec6a:	d804      	bhi.n	800ec76 <_strtol_l.constprop.0+0xc6>
 800ec6c:	3c57      	subs	r4, #87	; 0x57
 800ec6e:	e7db      	b.n	800ec28 <_strtol_l.constprop.0+0x78>
 800ec70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ec74:	e7e6      	b.n	800ec44 <_strtol_l.constprop.0+0x94>
 800ec76:	f1bc 0f00 	cmp.w	ip, #0
 800ec7a:	da05      	bge.n	800ec88 <_strtol_l.constprop.0+0xd8>
 800ec7c:	2322      	movs	r3, #34	; 0x22
 800ec7e:	6003      	str	r3, [r0, #0]
 800ec80:	4646      	mov	r6, r8
 800ec82:	b942      	cbnz	r2, 800ec96 <_strtol_l.constprop.0+0xe6>
 800ec84:	4630      	mov	r0, r6
 800ec86:	e79e      	b.n	800ebc6 <_strtol_l.constprop.0+0x16>
 800ec88:	b107      	cbz	r7, 800ec8c <_strtol_l.constprop.0+0xdc>
 800ec8a:	4276      	negs	r6, r6
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	d0f9      	beq.n	800ec84 <_strtol_l.constprop.0+0xd4>
 800ec90:	f1bc 0f00 	cmp.w	ip, #0
 800ec94:	d000      	beq.n	800ec98 <_strtol_l.constprop.0+0xe8>
 800ec96:	1e69      	subs	r1, r5, #1
 800ec98:	6011      	str	r1, [r2, #0]
 800ec9a:	e7f3      	b.n	800ec84 <_strtol_l.constprop.0+0xd4>
 800ec9c:	2430      	movs	r4, #48	; 0x30
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1b1      	bne.n	800ec06 <_strtol_l.constprop.0+0x56>
 800eca2:	2308      	movs	r3, #8
 800eca4:	e7af      	b.n	800ec06 <_strtol_l.constprop.0+0x56>
 800eca6:	2c30      	cmp	r4, #48	; 0x30
 800eca8:	d0a5      	beq.n	800ebf6 <_strtol_l.constprop.0+0x46>
 800ecaa:	230a      	movs	r3, #10
 800ecac:	e7ab      	b.n	800ec06 <_strtol_l.constprop.0+0x56>
 800ecae:	bf00      	nop
 800ecb0:	08010125 	.word	0x08010125

0800ecb4 <strtol>:
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	460a      	mov	r2, r1
 800ecb8:	4601      	mov	r1, r0
 800ecba:	4802      	ldr	r0, [pc, #8]	; (800ecc4 <strtol+0x10>)
 800ecbc:	6800      	ldr	r0, [r0, #0]
 800ecbe:	f7ff bf77 	b.w	800ebb0 <_strtol_l.constprop.0>
 800ecc2:	bf00      	nop
 800ecc4:	20000030 	.word	0x20000030

0800ecc8 <__sflush_r>:
 800ecc8:	898a      	ldrh	r2, [r1, #12]
 800ecca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecce:	4605      	mov	r5, r0
 800ecd0:	0710      	lsls	r0, r2, #28
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	d458      	bmi.n	800ed88 <__sflush_r+0xc0>
 800ecd6:	684b      	ldr	r3, [r1, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dc05      	bgt.n	800ece8 <__sflush_r+0x20>
 800ecdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	dc02      	bgt.n	800ece8 <__sflush_r+0x20>
 800ece2:	2000      	movs	r0, #0
 800ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecea:	2e00      	cmp	r6, #0
 800ecec:	d0f9      	beq.n	800ece2 <__sflush_r+0x1a>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecf4:	682f      	ldr	r7, [r5, #0]
 800ecf6:	602b      	str	r3, [r5, #0]
 800ecf8:	d032      	beq.n	800ed60 <__sflush_r+0x98>
 800ecfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecfc:	89a3      	ldrh	r3, [r4, #12]
 800ecfe:	075a      	lsls	r2, r3, #29
 800ed00:	d505      	bpl.n	800ed0e <__sflush_r+0x46>
 800ed02:	6863      	ldr	r3, [r4, #4]
 800ed04:	1ac0      	subs	r0, r0, r3
 800ed06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed08:	b10b      	cbz	r3, 800ed0e <__sflush_r+0x46>
 800ed0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed0c:	1ac0      	subs	r0, r0, r3
 800ed0e:	2300      	movs	r3, #0
 800ed10:	4602      	mov	r2, r0
 800ed12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed14:	6a21      	ldr	r1, [r4, #32]
 800ed16:	4628      	mov	r0, r5
 800ed18:	47b0      	blx	r6
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	89a3      	ldrh	r3, [r4, #12]
 800ed1e:	d106      	bne.n	800ed2e <__sflush_r+0x66>
 800ed20:	6829      	ldr	r1, [r5, #0]
 800ed22:	291d      	cmp	r1, #29
 800ed24:	d82c      	bhi.n	800ed80 <__sflush_r+0xb8>
 800ed26:	4a2a      	ldr	r2, [pc, #168]	; (800edd0 <__sflush_r+0x108>)
 800ed28:	40ca      	lsrs	r2, r1
 800ed2a:	07d6      	lsls	r6, r2, #31
 800ed2c:	d528      	bpl.n	800ed80 <__sflush_r+0xb8>
 800ed2e:	2200      	movs	r2, #0
 800ed30:	6062      	str	r2, [r4, #4]
 800ed32:	04d9      	lsls	r1, r3, #19
 800ed34:	6922      	ldr	r2, [r4, #16]
 800ed36:	6022      	str	r2, [r4, #0]
 800ed38:	d504      	bpl.n	800ed44 <__sflush_r+0x7c>
 800ed3a:	1c42      	adds	r2, r0, #1
 800ed3c:	d101      	bne.n	800ed42 <__sflush_r+0x7a>
 800ed3e:	682b      	ldr	r3, [r5, #0]
 800ed40:	b903      	cbnz	r3, 800ed44 <__sflush_r+0x7c>
 800ed42:	6560      	str	r0, [r4, #84]	; 0x54
 800ed44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed46:	602f      	str	r7, [r5, #0]
 800ed48:	2900      	cmp	r1, #0
 800ed4a:	d0ca      	beq.n	800ece2 <__sflush_r+0x1a>
 800ed4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed50:	4299      	cmp	r1, r3
 800ed52:	d002      	beq.n	800ed5a <__sflush_r+0x92>
 800ed54:	4628      	mov	r0, r5
 800ed56:	f7ff fd3d 	bl	800e7d4 <_free_r>
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ed5e:	e7c1      	b.n	800ece4 <__sflush_r+0x1c>
 800ed60:	6a21      	ldr	r1, [r4, #32]
 800ed62:	2301      	movs	r3, #1
 800ed64:	4628      	mov	r0, r5
 800ed66:	47b0      	blx	r6
 800ed68:	1c41      	adds	r1, r0, #1
 800ed6a:	d1c7      	bne.n	800ecfc <__sflush_r+0x34>
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d0c4      	beq.n	800ecfc <__sflush_r+0x34>
 800ed72:	2b1d      	cmp	r3, #29
 800ed74:	d001      	beq.n	800ed7a <__sflush_r+0xb2>
 800ed76:	2b16      	cmp	r3, #22
 800ed78:	d101      	bne.n	800ed7e <__sflush_r+0xb6>
 800ed7a:	602f      	str	r7, [r5, #0]
 800ed7c:	e7b1      	b.n	800ece2 <__sflush_r+0x1a>
 800ed7e:	89a3      	ldrh	r3, [r4, #12]
 800ed80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed84:	81a3      	strh	r3, [r4, #12]
 800ed86:	e7ad      	b.n	800ece4 <__sflush_r+0x1c>
 800ed88:	690f      	ldr	r7, [r1, #16]
 800ed8a:	2f00      	cmp	r7, #0
 800ed8c:	d0a9      	beq.n	800ece2 <__sflush_r+0x1a>
 800ed8e:	0793      	lsls	r3, r2, #30
 800ed90:	680e      	ldr	r6, [r1, #0]
 800ed92:	bf08      	it	eq
 800ed94:	694b      	ldreq	r3, [r1, #20]
 800ed96:	600f      	str	r7, [r1, #0]
 800ed98:	bf18      	it	ne
 800ed9a:	2300      	movne	r3, #0
 800ed9c:	eba6 0807 	sub.w	r8, r6, r7
 800eda0:	608b      	str	r3, [r1, #8]
 800eda2:	f1b8 0f00 	cmp.w	r8, #0
 800eda6:	dd9c      	ble.n	800ece2 <__sflush_r+0x1a>
 800eda8:	6a21      	ldr	r1, [r4, #32]
 800edaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800edac:	4643      	mov	r3, r8
 800edae:	463a      	mov	r2, r7
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b0      	blx	r6
 800edb4:	2800      	cmp	r0, #0
 800edb6:	dc06      	bgt.n	800edc6 <__sflush_r+0xfe>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edbe:	81a3      	strh	r3, [r4, #12]
 800edc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edc4:	e78e      	b.n	800ece4 <__sflush_r+0x1c>
 800edc6:	4407      	add	r7, r0
 800edc8:	eba8 0800 	sub.w	r8, r8, r0
 800edcc:	e7e9      	b.n	800eda2 <__sflush_r+0xda>
 800edce:	bf00      	nop
 800edd0:	20400001 	.word	0x20400001

0800edd4 <_fflush_r>:
 800edd4:	b538      	push	{r3, r4, r5, lr}
 800edd6:	690b      	ldr	r3, [r1, #16]
 800edd8:	4605      	mov	r5, r0
 800edda:	460c      	mov	r4, r1
 800eddc:	b913      	cbnz	r3, 800ede4 <_fflush_r+0x10>
 800edde:	2500      	movs	r5, #0
 800ede0:	4628      	mov	r0, r5
 800ede2:	bd38      	pop	{r3, r4, r5, pc}
 800ede4:	b118      	cbz	r0, 800edee <_fflush_r+0x1a>
 800ede6:	6983      	ldr	r3, [r0, #24]
 800ede8:	b90b      	cbnz	r3, 800edee <_fflush_r+0x1a>
 800edea:	f000 f887 	bl	800eefc <__sinit>
 800edee:	4b14      	ldr	r3, [pc, #80]	; (800ee40 <_fflush_r+0x6c>)
 800edf0:	429c      	cmp	r4, r3
 800edf2:	d11b      	bne.n	800ee2c <_fflush_r+0x58>
 800edf4:	686c      	ldr	r4, [r5, #4]
 800edf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0ef      	beq.n	800edde <_fflush_r+0xa>
 800edfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee00:	07d0      	lsls	r0, r2, #31
 800ee02:	d404      	bmi.n	800ee0e <_fflush_r+0x3a>
 800ee04:	0599      	lsls	r1, r3, #22
 800ee06:	d402      	bmi.n	800ee0e <_fflush_r+0x3a>
 800ee08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee0a:	f000 f915 	bl	800f038 <__retarget_lock_acquire_recursive>
 800ee0e:	4628      	mov	r0, r5
 800ee10:	4621      	mov	r1, r4
 800ee12:	f7ff ff59 	bl	800ecc8 <__sflush_r>
 800ee16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee18:	07da      	lsls	r2, r3, #31
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	d4e0      	bmi.n	800ede0 <_fflush_r+0xc>
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	059b      	lsls	r3, r3, #22
 800ee22:	d4dd      	bmi.n	800ede0 <_fflush_r+0xc>
 800ee24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee26:	f000 f908 	bl	800f03a <__retarget_lock_release_recursive>
 800ee2a:	e7d9      	b.n	800ede0 <_fflush_r+0xc>
 800ee2c:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <_fflush_r+0x70>)
 800ee2e:	429c      	cmp	r4, r3
 800ee30:	d101      	bne.n	800ee36 <_fflush_r+0x62>
 800ee32:	68ac      	ldr	r4, [r5, #8]
 800ee34:	e7df      	b.n	800edf6 <_fflush_r+0x22>
 800ee36:	4b04      	ldr	r3, [pc, #16]	; (800ee48 <_fflush_r+0x74>)
 800ee38:	429c      	cmp	r4, r3
 800ee3a:	bf08      	it	eq
 800ee3c:	68ec      	ldreq	r4, [r5, #12]
 800ee3e:	e7da      	b.n	800edf6 <_fflush_r+0x22>
 800ee40:	08010248 	.word	0x08010248
 800ee44:	08010268 	.word	0x08010268
 800ee48:	08010228 	.word	0x08010228

0800ee4c <std>:
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	b510      	push	{r4, lr}
 800ee50:	4604      	mov	r4, r0
 800ee52:	e9c0 3300 	strd	r3, r3, [r0]
 800ee56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee5a:	6083      	str	r3, [r0, #8]
 800ee5c:	8181      	strh	r1, [r0, #12]
 800ee5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ee60:	81c2      	strh	r2, [r0, #14]
 800ee62:	6183      	str	r3, [r0, #24]
 800ee64:	4619      	mov	r1, r3
 800ee66:	2208      	movs	r2, #8
 800ee68:	305c      	adds	r0, #92	; 0x5c
 800ee6a:	f7ff fcab 	bl	800e7c4 <memset>
 800ee6e:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <std+0x38>)
 800ee70:	6263      	str	r3, [r4, #36]	; 0x24
 800ee72:	4b05      	ldr	r3, [pc, #20]	; (800ee88 <std+0x3c>)
 800ee74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee76:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <std+0x40>)
 800ee78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <std+0x44>)
 800ee7c:	6224      	str	r4, [r4, #32]
 800ee7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	bf00      	nop
 800ee84:	0800f9b5 	.word	0x0800f9b5
 800ee88:	0800f9d7 	.word	0x0800f9d7
 800ee8c:	0800fa0f 	.word	0x0800fa0f
 800ee90:	0800fa33 	.word	0x0800fa33

0800ee94 <_cleanup_r>:
 800ee94:	4901      	ldr	r1, [pc, #4]	; (800ee9c <_cleanup_r+0x8>)
 800ee96:	f000 b8af 	b.w	800eff8 <_fwalk_reent>
 800ee9a:	bf00      	nop
 800ee9c:	0800edd5 	.word	0x0800edd5

0800eea0 <__sfmoreglue>:
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	2268      	movs	r2, #104	; 0x68
 800eea4:	1e4d      	subs	r5, r1, #1
 800eea6:	4355      	muls	r5, r2
 800eea8:	460e      	mov	r6, r1
 800eeaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eeae:	f7ff fcfd 	bl	800e8ac <_malloc_r>
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	b140      	cbz	r0, 800eec8 <__sfmoreglue+0x28>
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	e9c0 1600 	strd	r1, r6, [r0]
 800eebc:	300c      	adds	r0, #12
 800eebe:	60a0      	str	r0, [r4, #8]
 800eec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eec4:	f7ff fc7e 	bl	800e7c4 <memset>
 800eec8:	4620      	mov	r0, r4
 800eeca:	bd70      	pop	{r4, r5, r6, pc}

0800eecc <__sfp_lock_acquire>:
 800eecc:	4801      	ldr	r0, [pc, #4]	; (800eed4 <__sfp_lock_acquire+0x8>)
 800eece:	f000 b8b3 	b.w	800f038 <__retarget_lock_acquire_recursive>
 800eed2:	bf00      	nop
 800eed4:	20003b45 	.word	0x20003b45

0800eed8 <__sfp_lock_release>:
 800eed8:	4801      	ldr	r0, [pc, #4]	; (800eee0 <__sfp_lock_release+0x8>)
 800eeda:	f000 b8ae 	b.w	800f03a <__retarget_lock_release_recursive>
 800eede:	bf00      	nop
 800eee0:	20003b45 	.word	0x20003b45

0800eee4 <__sinit_lock_acquire>:
 800eee4:	4801      	ldr	r0, [pc, #4]	; (800eeec <__sinit_lock_acquire+0x8>)
 800eee6:	f000 b8a7 	b.w	800f038 <__retarget_lock_acquire_recursive>
 800eeea:	bf00      	nop
 800eeec:	20003b46 	.word	0x20003b46

0800eef0 <__sinit_lock_release>:
 800eef0:	4801      	ldr	r0, [pc, #4]	; (800eef8 <__sinit_lock_release+0x8>)
 800eef2:	f000 b8a2 	b.w	800f03a <__retarget_lock_release_recursive>
 800eef6:	bf00      	nop
 800eef8:	20003b46 	.word	0x20003b46

0800eefc <__sinit>:
 800eefc:	b510      	push	{r4, lr}
 800eefe:	4604      	mov	r4, r0
 800ef00:	f7ff fff0 	bl	800eee4 <__sinit_lock_acquire>
 800ef04:	69a3      	ldr	r3, [r4, #24]
 800ef06:	b11b      	cbz	r3, 800ef10 <__sinit+0x14>
 800ef08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef0c:	f7ff bff0 	b.w	800eef0 <__sinit_lock_release>
 800ef10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef14:	6523      	str	r3, [r4, #80]	; 0x50
 800ef16:	4b13      	ldr	r3, [pc, #76]	; (800ef64 <__sinit+0x68>)
 800ef18:	4a13      	ldr	r2, [pc, #76]	; (800ef68 <__sinit+0x6c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef1e:	42a3      	cmp	r3, r4
 800ef20:	bf04      	itt	eq
 800ef22:	2301      	moveq	r3, #1
 800ef24:	61a3      	streq	r3, [r4, #24]
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 f820 	bl	800ef6c <__sfp>
 800ef2c:	6060      	str	r0, [r4, #4]
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f000 f81c 	bl	800ef6c <__sfp>
 800ef34:	60a0      	str	r0, [r4, #8]
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 f818 	bl	800ef6c <__sfp>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	60e0      	str	r0, [r4, #12]
 800ef40:	2104      	movs	r1, #4
 800ef42:	6860      	ldr	r0, [r4, #4]
 800ef44:	f7ff ff82 	bl	800ee4c <std>
 800ef48:	68a0      	ldr	r0, [r4, #8]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	2109      	movs	r1, #9
 800ef4e:	f7ff ff7d 	bl	800ee4c <std>
 800ef52:	68e0      	ldr	r0, [r4, #12]
 800ef54:	2202      	movs	r2, #2
 800ef56:	2112      	movs	r1, #18
 800ef58:	f7ff ff78 	bl	800ee4c <std>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	61a3      	str	r3, [r4, #24]
 800ef60:	e7d2      	b.n	800ef08 <__sinit+0xc>
 800ef62:	bf00      	nop
 800ef64:	08010120 	.word	0x08010120
 800ef68:	0800ee95 	.word	0x0800ee95

0800ef6c <__sfp>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	4607      	mov	r7, r0
 800ef70:	f7ff ffac 	bl	800eecc <__sfp_lock_acquire>
 800ef74:	4b1e      	ldr	r3, [pc, #120]	; (800eff0 <__sfp+0x84>)
 800ef76:	681e      	ldr	r6, [r3, #0]
 800ef78:	69b3      	ldr	r3, [r6, #24]
 800ef7a:	b913      	cbnz	r3, 800ef82 <__sfp+0x16>
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7ff ffbd 	bl	800eefc <__sinit>
 800ef82:	3648      	adds	r6, #72	; 0x48
 800ef84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	d503      	bpl.n	800ef94 <__sfp+0x28>
 800ef8c:	6833      	ldr	r3, [r6, #0]
 800ef8e:	b30b      	cbz	r3, 800efd4 <__sfp+0x68>
 800ef90:	6836      	ldr	r6, [r6, #0]
 800ef92:	e7f7      	b.n	800ef84 <__sfp+0x18>
 800ef94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef98:	b9d5      	cbnz	r5, 800efd0 <__sfp+0x64>
 800ef9a:	4b16      	ldr	r3, [pc, #88]	; (800eff4 <__sfp+0x88>)
 800ef9c:	60e3      	str	r3, [r4, #12]
 800ef9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800efa2:	6665      	str	r5, [r4, #100]	; 0x64
 800efa4:	f000 f847 	bl	800f036 <__retarget_lock_init_recursive>
 800efa8:	f7ff ff96 	bl	800eed8 <__sfp_lock_release>
 800efac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800efb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800efb4:	6025      	str	r5, [r4, #0]
 800efb6:	61a5      	str	r5, [r4, #24]
 800efb8:	2208      	movs	r2, #8
 800efba:	4629      	mov	r1, r5
 800efbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efc0:	f7ff fc00 	bl	800e7c4 <memset>
 800efc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efcc:	4620      	mov	r0, r4
 800efce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd0:	3468      	adds	r4, #104	; 0x68
 800efd2:	e7d9      	b.n	800ef88 <__sfp+0x1c>
 800efd4:	2104      	movs	r1, #4
 800efd6:	4638      	mov	r0, r7
 800efd8:	f7ff ff62 	bl	800eea0 <__sfmoreglue>
 800efdc:	4604      	mov	r4, r0
 800efde:	6030      	str	r0, [r6, #0]
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d1d5      	bne.n	800ef90 <__sfp+0x24>
 800efe4:	f7ff ff78 	bl	800eed8 <__sfp_lock_release>
 800efe8:	230c      	movs	r3, #12
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	e7ee      	b.n	800efcc <__sfp+0x60>
 800efee:	bf00      	nop
 800eff0:	08010120 	.word	0x08010120
 800eff4:	ffff0001 	.word	0xffff0001

0800eff8 <_fwalk_reent>:
 800eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800effc:	4606      	mov	r6, r0
 800effe:	4688      	mov	r8, r1
 800f000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f004:	2700      	movs	r7, #0
 800f006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f00a:	f1b9 0901 	subs.w	r9, r9, #1
 800f00e:	d505      	bpl.n	800f01c <_fwalk_reent+0x24>
 800f010:	6824      	ldr	r4, [r4, #0]
 800f012:	2c00      	cmp	r4, #0
 800f014:	d1f7      	bne.n	800f006 <_fwalk_reent+0xe>
 800f016:	4638      	mov	r0, r7
 800f018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f01c:	89ab      	ldrh	r3, [r5, #12]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d907      	bls.n	800f032 <_fwalk_reent+0x3a>
 800f022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f026:	3301      	adds	r3, #1
 800f028:	d003      	beq.n	800f032 <_fwalk_reent+0x3a>
 800f02a:	4629      	mov	r1, r5
 800f02c:	4630      	mov	r0, r6
 800f02e:	47c0      	blx	r8
 800f030:	4307      	orrs	r7, r0
 800f032:	3568      	adds	r5, #104	; 0x68
 800f034:	e7e9      	b.n	800f00a <_fwalk_reent+0x12>

0800f036 <__retarget_lock_init_recursive>:
 800f036:	4770      	bx	lr

0800f038 <__retarget_lock_acquire_recursive>:
 800f038:	4770      	bx	lr

0800f03a <__retarget_lock_release_recursive>:
 800f03a:	4770      	bx	lr

0800f03c <__swhatbuf_r>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	460e      	mov	r6, r1
 800f040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f044:	2900      	cmp	r1, #0
 800f046:	b096      	sub	sp, #88	; 0x58
 800f048:	4614      	mov	r4, r2
 800f04a:	461d      	mov	r5, r3
 800f04c:	da08      	bge.n	800f060 <__swhatbuf_r+0x24>
 800f04e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	602a      	str	r2, [r5, #0]
 800f056:	061a      	lsls	r2, r3, #24
 800f058:	d410      	bmi.n	800f07c <__swhatbuf_r+0x40>
 800f05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f05e:	e00e      	b.n	800f07e <__swhatbuf_r+0x42>
 800f060:	466a      	mov	r2, sp
 800f062:	f000 fdcd 	bl	800fc00 <_fstat_r>
 800f066:	2800      	cmp	r0, #0
 800f068:	dbf1      	blt.n	800f04e <__swhatbuf_r+0x12>
 800f06a:	9a01      	ldr	r2, [sp, #4]
 800f06c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f070:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f074:	425a      	negs	r2, r3
 800f076:	415a      	adcs	r2, r3
 800f078:	602a      	str	r2, [r5, #0]
 800f07a:	e7ee      	b.n	800f05a <__swhatbuf_r+0x1e>
 800f07c:	2340      	movs	r3, #64	; 0x40
 800f07e:	2000      	movs	r0, #0
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	b016      	add	sp, #88	; 0x58
 800f084:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f088 <__smakebuf_r>:
 800f088:	898b      	ldrh	r3, [r1, #12]
 800f08a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f08c:	079d      	lsls	r5, r3, #30
 800f08e:	4606      	mov	r6, r0
 800f090:	460c      	mov	r4, r1
 800f092:	d507      	bpl.n	800f0a4 <__smakebuf_r+0x1c>
 800f094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	6123      	str	r3, [r4, #16]
 800f09c:	2301      	movs	r3, #1
 800f09e:	6163      	str	r3, [r4, #20]
 800f0a0:	b002      	add	sp, #8
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
 800f0a4:	ab01      	add	r3, sp, #4
 800f0a6:	466a      	mov	r2, sp
 800f0a8:	f7ff ffc8 	bl	800f03c <__swhatbuf_r>
 800f0ac:	9900      	ldr	r1, [sp, #0]
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7ff fbfb 	bl	800e8ac <_malloc_r>
 800f0b6:	b948      	cbnz	r0, 800f0cc <__smakebuf_r+0x44>
 800f0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0bc:	059a      	lsls	r2, r3, #22
 800f0be:	d4ef      	bmi.n	800f0a0 <__smakebuf_r+0x18>
 800f0c0:	f023 0303 	bic.w	r3, r3, #3
 800f0c4:	f043 0302 	orr.w	r3, r3, #2
 800f0c8:	81a3      	strh	r3, [r4, #12]
 800f0ca:	e7e3      	b.n	800f094 <__smakebuf_r+0xc>
 800f0cc:	4b0d      	ldr	r3, [pc, #52]	; (800f104 <__smakebuf_r+0x7c>)
 800f0ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	6020      	str	r0, [r4, #0]
 800f0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0d8:	81a3      	strh	r3, [r4, #12]
 800f0da:	9b00      	ldr	r3, [sp, #0]
 800f0dc:	6163      	str	r3, [r4, #20]
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	6120      	str	r0, [r4, #16]
 800f0e2:	b15b      	cbz	r3, 800f0fc <__smakebuf_r+0x74>
 800f0e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f000 fd9b 	bl	800fc24 <_isatty_r>
 800f0ee:	b128      	cbz	r0, 800f0fc <__smakebuf_r+0x74>
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	f043 0301 	orr.w	r3, r3, #1
 800f0fa:	81a3      	strh	r3, [r4, #12]
 800f0fc:	89a0      	ldrh	r0, [r4, #12]
 800f0fe:	4305      	orrs	r5, r0
 800f100:	81a5      	strh	r5, [r4, #12]
 800f102:	e7cd      	b.n	800f0a0 <__smakebuf_r+0x18>
 800f104:	0800ee95 	.word	0x0800ee95

0800f108 <__malloc_lock>:
 800f108:	4801      	ldr	r0, [pc, #4]	; (800f110 <__malloc_lock+0x8>)
 800f10a:	f7ff bf95 	b.w	800f038 <__retarget_lock_acquire_recursive>
 800f10e:	bf00      	nop
 800f110:	20003b44 	.word	0x20003b44

0800f114 <__malloc_unlock>:
 800f114:	4801      	ldr	r0, [pc, #4]	; (800f11c <__malloc_unlock+0x8>)
 800f116:	f7ff bf90 	b.w	800f03a <__retarget_lock_release_recursive>
 800f11a:	bf00      	nop
 800f11c:	20003b44 	.word	0x20003b44

0800f120 <__ssputs_r>:
 800f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f124:	688e      	ldr	r6, [r1, #8]
 800f126:	429e      	cmp	r6, r3
 800f128:	4682      	mov	sl, r0
 800f12a:	460c      	mov	r4, r1
 800f12c:	4690      	mov	r8, r2
 800f12e:	461f      	mov	r7, r3
 800f130:	d838      	bhi.n	800f1a4 <__ssputs_r+0x84>
 800f132:	898a      	ldrh	r2, [r1, #12]
 800f134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f138:	d032      	beq.n	800f1a0 <__ssputs_r+0x80>
 800f13a:	6825      	ldr	r5, [r4, #0]
 800f13c:	6909      	ldr	r1, [r1, #16]
 800f13e:	eba5 0901 	sub.w	r9, r5, r1
 800f142:	6965      	ldr	r5, [r4, #20]
 800f144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f14c:	3301      	adds	r3, #1
 800f14e:	444b      	add	r3, r9
 800f150:	106d      	asrs	r5, r5, #1
 800f152:	429d      	cmp	r5, r3
 800f154:	bf38      	it	cc
 800f156:	461d      	movcc	r5, r3
 800f158:	0553      	lsls	r3, r2, #21
 800f15a:	d531      	bpl.n	800f1c0 <__ssputs_r+0xa0>
 800f15c:	4629      	mov	r1, r5
 800f15e:	f7ff fba5 	bl	800e8ac <_malloc_r>
 800f162:	4606      	mov	r6, r0
 800f164:	b950      	cbnz	r0, 800f17c <__ssputs_r+0x5c>
 800f166:	230c      	movs	r3, #12
 800f168:	f8ca 3000 	str.w	r3, [sl]
 800f16c:	89a3      	ldrh	r3, [r4, #12]
 800f16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f172:	81a3      	strh	r3, [r4, #12]
 800f174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f17c:	6921      	ldr	r1, [r4, #16]
 800f17e:	464a      	mov	r2, r9
 800f180:	f7ff fb12 	bl	800e7a8 <memcpy>
 800f184:	89a3      	ldrh	r3, [r4, #12]
 800f186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18e:	81a3      	strh	r3, [r4, #12]
 800f190:	6126      	str	r6, [r4, #16]
 800f192:	6165      	str	r5, [r4, #20]
 800f194:	444e      	add	r6, r9
 800f196:	eba5 0509 	sub.w	r5, r5, r9
 800f19a:	6026      	str	r6, [r4, #0]
 800f19c:	60a5      	str	r5, [r4, #8]
 800f19e:	463e      	mov	r6, r7
 800f1a0:	42be      	cmp	r6, r7
 800f1a2:	d900      	bls.n	800f1a6 <__ssputs_r+0x86>
 800f1a4:	463e      	mov	r6, r7
 800f1a6:	6820      	ldr	r0, [r4, #0]
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	4641      	mov	r1, r8
 800f1ac:	f000 fd5c 	bl	800fc68 <memmove>
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	1b9b      	subs	r3, r3, r6
 800f1b4:	60a3      	str	r3, [r4, #8]
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	4433      	add	r3, r6
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e7db      	b.n	800f178 <__ssputs_r+0x58>
 800f1c0:	462a      	mov	r2, r5
 800f1c2:	f000 fd6b 	bl	800fc9c <_realloc_r>
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d1e1      	bne.n	800f190 <__ssputs_r+0x70>
 800f1cc:	6921      	ldr	r1, [r4, #16]
 800f1ce:	4650      	mov	r0, sl
 800f1d0:	f7ff fb00 	bl	800e7d4 <_free_r>
 800f1d4:	e7c7      	b.n	800f166 <__ssputs_r+0x46>
	...

0800f1d8 <_svfiprintf_r>:
 800f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	4698      	mov	r8, r3
 800f1de:	898b      	ldrh	r3, [r1, #12]
 800f1e0:	061b      	lsls	r3, r3, #24
 800f1e2:	b09d      	sub	sp, #116	; 0x74
 800f1e4:	4607      	mov	r7, r0
 800f1e6:	460d      	mov	r5, r1
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	d50e      	bpl.n	800f20a <_svfiprintf_r+0x32>
 800f1ec:	690b      	ldr	r3, [r1, #16]
 800f1ee:	b963      	cbnz	r3, 800f20a <_svfiprintf_r+0x32>
 800f1f0:	2140      	movs	r1, #64	; 0x40
 800f1f2:	f7ff fb5b 	bl	800e8ac <_malloc_r>
 800f1f6:	6028      	str	r0, [r5, #0]
 800f1f8:	6128      	str	r0, [r5, #16]
 800f1fa:	b920      	cbnz	r0, 800f206 <_svfiprintf_r+0x2e>
 800f1fc:	230c      	movs	r3, #12
 800f1fe:	603b      	str	r3, [r7, #0]
 800f200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f204:	e0d1      	b.n	800f3aa <_svfiprintf_r+0x1d2>
 800f206:	2340      	movs	r3, #64	; 0x40
 800f208:	616b      	str	r3, [r5, #20]
 800f20a:	2300      	movs	r3, #0
 800f20c:	9309      	str	r3, [sp, #36]	; 0x24
 800f20e:	2320      	movs	r3, #32
 800f210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f214:	f8cd 800c 	str.w	r8, [sp, #12]
 800f218:	2330      	movs	r3, #48	; 0x30
 800f21a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f3c4 <_svfiprintf_r+0x1ec>
 800f21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f222:	f04f 0901 	mov.w	r9, #1
 800f226:	4623      	mov	r3, r4
 800f228:	469a      	mov	sl, r3
 800f22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f22e:	b10a      	cbz	r2, 800f234 <_svfiprintf_r+0x5c>
 800f230:	2a25      	cmp	r2, #37	; 0x25
 800f232:	d1f9      	bne.n	800f228 <_svfiprintf_r+0x50>
 800f234:	ebba 0b04 	subs.w	fp, sl, r4
 800f238:	d00b      	beq.n	800f252 <_svfiprintf_r+0x7a>
 800f23a:	465b      	mov	r3, fp
 800f23c:	4622      	mov	r2, r4
 800f23e:	4629      	mov	r1, r5
 800f240:	4638      	mov	r0, r7
 800f242:	f7ff ff6d 	bl	800f120 <__ssputs_r>
 800f246:	3001      	adds	r0, #1
 800f248:	f000 80aa 	beq.w	800f3a0 <_svfiprintf_r+0x1c8>
 800f24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f24e:	445a      	add	r2, fp
 800f250:	9209      	str	r2, [sp, #36]	; 0x24
 800f252:	f89a 3000 	ldrb.w	r3, [sl]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f000 80a2 	beq.w	800f3a0 <_svfiprintf_r+0x1c8>
 800f25c:	2300      	movs	r3, #0
 800f25e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f266:	f10a 0a01 	add.w	sl, sl, #1
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	9307      	str	r3, [sp, #28]
 800f26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f272:	931a      	str	r3, [sp, #104]	; 0x68
 800f274:	4654      	mov	r4, sl
 800f276:	2205      	movs	r2, #5
 800f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27c:	4851      	ldr	r0, [pc, #324]	; (800f3c4 <_svfiprintf_r+0x1ec>)
 800f27e:	f7f0 ffb7 	bl	80001f0 <memchr>
 800f282:	9a04      	ldr	r2, [sp, #16]
 800f284:	b9d8      	cbnz	r0, 800f2be <_svfiprintf_r+0xe6>
 800f286:	06d0      	lsls	r0, r2, #27
 800f288:	bf44      	itt	mi
 800f28a:	2320      	movmi	r3, #32
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f290:	0711      	lsls	r1, r2, #28
 800f292:	bf44      	itt	mi
 800f294:	232b      	movmi	r3, #43	; 0x2b
 800f296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f29a:	f89a 3000 	ldrb.w	r3, [sl]
 800f29e:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a0:	d015      	beq.n	800f2ce <_svfiprintf_r+0xf6>
 800f2a2:	9a07      	ldr	r2, [sp, #28]
 800f2a4:	4654      	mov	r4, sl
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f04f 0c0a 	mov.w	ip, #10
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b2:	3b30      	subs	r3, #48	; 0x30
 800f2b4:	2b09      	cmp	r3, #9
 800f2b6:	d94e      	bls.n	800f356 <_svfiprintf_r+0x17e>
 800f2b8:	b1b0      	cbz	r0, 800f2e8 <_svfiprintf_r+0x110>
 800f2ba:	9207      	str	r2, [sp, #28]
 800f2bc:	e014      	b.n	800f2e8 <_svfiprintf_r+0x110>
 800f2be:	eba0 0308 	sub.w	r3, r0, r8
 800f2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	9304      	str	r3, [sp, #16]
 800f2ca:	46a2      	mov	sl, r4
 800f2cc:	e7d2      	b.n	800f274 <_svfiprintf_r+0x9c>
 800f2ce:	9b03      	ldr	r3, [sp, #12]
 800f2d0:	1d19      	adds	r1, r3, #4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	9103      	str	r1, [sp, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	bfbb      	ittet	lt
 800f2da:	425b      	neglt	r3, r3
 800f2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e0:	9307      	strge	r3, [sp, #28]
 800f2e2:	9307      	strlt	r3, [sp, #28]
 800f2e4:	bfb8      	it	lt
 800f2e6:	9204      	strlt	r2, [sp, #16]
 800f2e8:	7823      	ldrb	r3, [r4, #0]
 800f2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f2ec:	d10c      	bne.n	800f308 <_svfiprintf_r+0x130>
 800f2ee:	7863      	ldrb	r3, [r4, #1]
 800f2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f2:	d135      	bne.n	800f360 <_svfiprintf_r+0x188>
 800f2f4:	9b03      	ldr	r3, [sp, #12]
 800f2f6:	1d1a      	adds	r2, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	9203      	str	r2, [sp, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfb8      	it	lt
 800f300:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f304:	3402      	adds	r4, #2
 800f306:	9305      	str	r3, [sp, #20]
 800f308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f3d4 <_svfiprintf_r+0x1fc>
 800f30c:	7821      	ldrb	r1, [r4, #0]
 800f30e:	2203      	movs	r2, #3
 800f310:	4650      	mov	r0, sl
 800f312:	f7f0 ff6d 	bl	80001f0 <memchr>
 800f316:	b140      	cbz	r0, 800f32a <_svfiprintf_r+0x152>
 800f318:	2340      	movs	r3, #64	; 0x40
 800f31a:	eba0 000a 	sub.w	r0, r0, sl
 800f31e:	fa03 f000 	lsl.w	r0, r3, r0
 800f322:	9b04      	ldr	r3, [sp, #16]
 800f324:	4303      	orrs	r3, r0
 800f326:	3401      	adds	r4, #1
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	4826      	ldr	r0, [pc, #152]	; (800f3c8 <_svfiprintf_r+0x1f0>)
 800f330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f334:	2206      	movs	r2, #6
 800f336:	f7f0 ff5b 	bl	80001f0 <memchr>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d038      	beq.n	800f3b0 <_svfiprintf_r+0x1d8>
 800f33e:	4b23      	ldr	r3, [pc, #140]	; (800f3cc <_svfiprintf_r+0x1f4>)
 800f340:	bb1b      	cbnz	r3, 800f38a <_svfiprintf_r+0x1b2>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	3307      	adds	r3, #7
 800f346:	f023 0307 	bic.w	r3, r3, #7
 800f34a:	3308      	adds	r3, #8
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f350:	4433      	add	r3, r6
 800f352:	9309      	str	r3, [sp, #36]	; 0x24
 800f354:	e767      	b.n	800f226 <_svfiprintf_r+0x4e>
 800f356:	fb0c 3202 	mla	r2, ip, r2, r3
 800f35a:	460c      	mov	r4, r1
 800f35c:	2001      	movs	r0, #1
 800f35e:	e7a5      	b.n	800f2ac <_svfiprintf_r+0xd4>
 800f360:	2300      	movs	r3, #0
 800f362:	3401      	adds	r4, #1
 800f364:	9305      	str	r3, [sp, #20]
 800f366:	4619      	mov	r1, r3
 800f368:	f04f 0c0a 	mov.w	ip, #10
 800f36c:	4620      	mov	r0, r4
 800f36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f372:	3a30      	subs	r2, #48	; 0x30
 800f374:	2a09      	cmp	r2, #9
 800f376:	d903      	bls.n	800f380 <_svfiprintf_r+0x1a8>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0c5      	beq.n	800f308 <_svfiprintf_r+0x130>
 800f37c:	9105      	str	r1, [sp, #20]
 800f37e:	e7c3      	b.n	800f308 <_svfiprintf_r+0x130>
 800f380:	fb0c 2101 	mla	r1, ip, r1, r2
 800f384:	4604      	mov	r4, r0
 800f386:	2301      	movs	r3, #1
 800f388:	e7f0      	b.n	800f36c <_svfiprintf_r+0x194>
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <_svfiprintf_r+0x1f8>)
 800f392:	a904      	add	r1, sp, #16
 800f394:	4638      	mov	r0, r7
 800f396:	f3af 8000 	nop.w
 800f39a:	1c42      	adds	r2, r0, #1
 800f39c:	4606      	mov	r6, r0
 800f39e:	d1d6      	bne.n	800f34e <_svfiprintf_r+0x176>
 800f3a0:	89ab      	ldrh	r3, [r5, #12]
 800f3a2:	065b      	lsls	r3, r3, #25
 800f3a4:	f53f af2c 	bmi.w	800f200 <_svfiprintf_r+0x28>
 800f3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3aa:	b01d      	add	sp, #116	; 0x74
 800f3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b0:	ab03      	add	r3, sp, #12
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	462a      	mov	r2, r5
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <_svfiprintf_r+0x1f8>)
 800f3b8:	a904      	add	r1, sp, #16
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f000 f9d4 	bl	800f768 <_printf_i>
 800f3c0:	e7eb      	b.n	800f39a <_svfiprintf_r+0x1c2>
 800f3c2:	bf00      	nop
 800f3c4:	08010288 	.word	0x08010288
 800f3c8:	08010292 	.word	0x08010292
 800f3cc:	00000000 	.word	0x00000000
 800f3d0:	0800f121 	.word	0x0800f121
 800f3d4:	0801028e 	.word	0x0801028e

0800f3d8 <__sfputc_r>:
 800f3d8:	6893      	ldr	r3, [r2, #8]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	b410      	push	{r4}
 800f3e0:	6093      	str	r3, [r2, #8]
 800f3e2:	da08      	bge.n	800f3f6 <__sfputc_r+0x1e>
 800f3e4:	6994      	ldr	r4, [r2, #24]
 800f3e6:	42a3      	cmp	r3, r4
 800f3e8:	db01      	blt.n	800f3ee <__sfputc_r+0x16>
 800f3ea:	290a      	cmp	r1, #10
 800f3ec:	d103      	bne.n	800f3f6 <__sfputc_r+0x1e>
 800f3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3f2:	f000 bb23 	b.w	800fa3c <__swbuf_r>
 800f3f6:	6813      	ldr	r3, [r2, #0]
 800f3f8:	1c58      	adds	r0, r3, #1
 800f3fa:	6010      	str	r0, [r2, #0]
 800f3fc:	7019      	strb	r1, [r3, #0]
 800f3fe:	4608      	mov	r0, r1
 800f400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <__sfputs_r>:
 800f406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f408:	4606      	mov	r6, r0
 800f40a:	460f      	mov	r7, r1
 800f40c:	4614      	mov	r4, r2
 800f40e:	18d5      	adds	r5, r2, r3
 800f410:	42ac      	cmp	r4, r5
 800f412:	d101      	bne.n	800f418 <__sfputs_r+0x12>
 800f414:	2000      	movs	r0, #0
 800f416:	e007      	b.n	800f428 <__sfputs_r+0x22>
 800f418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f41c:	463a      	mov	r2, r7
 800f41e:	4630      	mov	r0, r6
 800f420:	f7ff ffda 	bl	800f3d8 <__sfputc_r>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	d1f3      	bne.n	800f410 <__sfputs_r+0xa>
 800f428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f42c <_vfiprintf_r>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	460d      	mov	r5, r1
 800f432:	b09d      	sub	sp, #116	; 0x74
 800f434:	4614      	mov	r4, r2
 800f436:	4698      	mov	r8, r3
 800f438:	4606      	mov	r6, r0
 800f43a:	b118      	cbz	r0, 800f444 <_vfiprintf_r+0x18>
 800f43c:	6983      	ldr	r3, [r0, #24]
 800f43e:	b90b      	cbnz	r3, 800f444 <_vfiprintf_r+0x18>
 800f440:	f7ff fd5c 	bl	800eefc <__sinit>
 800f444:	4b89      	ldr	r3, [pc, #548]	; (800f66c <_vfiprintf_r+0x240>)
 800f446:	429d      	cmp	r5, r3
 800f448:	d11b      	bne.n	800f482 <_vfiprintf_r+0x56>
 800f44a:	6875      	ldr	r5, [r6, #4]
 800f44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f44e:	07d9      	lsls	r1, r3, #31
 800f450:	d405      	bmi.n	800f45e <_vfiprintf_r+0x32>
 800f452:	89ab      	ldrh	r3, [r5, #12]
 800f454:	059a      	lsls	r2, r3, #22
 800f456:	d402      	bmi.n	800f45e <_vfiprintf_r+0x32>
 800f458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f45a:	f7ff fded 	bl	800f038 <__retarget_lock_acquire_recursive>
 800f45e:	89ab      	ldrh	r3, [r5, #12]
 800f460:	071b      	lsls	r3, r3, #28
 800f462:	d501      	bpl.n	800f468 <_vfiprintf_r+0x3c>
 800f464:	692b      	ldr	r3, [r5, #16]
 800f466:	b9eb      	cbnz	r3, 800f4a4 <_vfiprintf_r+0x78>
 800f468:	4629      	mov	r1, r5
 800f46a:	4630      	mov	r0, r6
 800f46c:	f000 fb4a 	bl	800fb04 <__swsetup_r>
 800f470:	b1c0      	cbz	r0, 800f4a4 <_vfiprintf_r+0x78>
 800f472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f474:	07dc      	lsls	r4, r3, #31
 800f476:	d50e      	bpl.n	800f496 <_vfiprintf_r+0x6a>
 800f478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f47c:	b01d      	add	sp, #116	; 0x74
 800f47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f482:	4b7b      	ldr	r3, [pc, #492]	; (800f670 <_vfiprintf_r+0x244>)
 800f484:	429d      	cmp	r5, r3
 800f486:	d101      	bne.n	800f48c <_vfiprintf_r+0x60>
 800f488:	68b5      	ldr	r5, [r6, #8]
 800f48a:	e7df      	b.n	800f44c <_vfiprintf_r+0x20>
 800f48c:	4b79      	ldr	r3, [pc, #484]	; (800f674 <_vfiprintf_r+0x248>)
 800f48e:	429d      	cmp	r5, r3
 800f490:	bf08      	it	eq
 800f492:	68f5      	ldreq	r5, [r6, #12]
 800f494:	e7da      	b.n	800f44c <_vfiprintf_r+0x20>
 800f496:	89ab      	ldrh	r3, [r5, #12]
 800f498:	0598      	lsls	r0, r3, #22
 800f49a:	d4ed      	bmi.n	800f478 <_vfiprintf_r+0x4c>
 800f49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f49e:	f7ff fdcc 	bl	800f03a <__retarget_lock_release_recursive>
 800f4a2:	e7e9      	b.n	800f478 <_vfiprintf_r+0x4c>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a8:	2320      	movs	r3, #32
 800f4aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4b2:	2330      	movs	r3, #48	; 0x30
 800f4b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f678 <_vfiprintf_r+0x24c>
 800f4b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4bc:	f04f 0901 	mov.w	r9, #1
 800f4c0:	4623      	mov	r3, r4
 800f4c2:	469a      	mov	sl, r3
 800f4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4c8:	b10a      	cbz	r2, 800f4ce <_vfiprintf_r+0xa2>
 800f4ca:	2a25      	cmp	r2, #37	; 0x25
 800f4cc:	d1f9      	bne.n	800f4c2 <_vfiprintf_r+0x96>
 800f4ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f4d2:	d00b      	beq.n	800f4ec <_vfiprintf_r+0xc0>
 800f4d4:	465b      	mov	r3, fp
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f7ff ff93 	bl	800f406 <__sfputs_r>
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	f000 80aa 	beq.w	800f63a <_vfiprintf_r+0x20e>
 800f4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4e8:	445a      	add	r2, fp
 800f4ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f000 80a2 	beq.w	800f63a <_vfiprintf_r+0x20e>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f500:	f10a 0a01 	add.w	sl, sl, #1
 800f504:	9304      	str	r3, [sp, #16]
 800f506:	9307      	str	r3, [sp, #28]
 800f508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f50c:	931a      	str	r3, [sp, #104]	; 0x68
 800f50e:	4654      	mov	r4, sl
 800f510:	2205      	movs	r2, #5
 800f512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f516:	4858      	ldr	r0, [pc, #352]	; (800f678 <_vfiprintf_r+0x24c>)
 800f518:	f7f0 fe6a 	bl	80001f0 <memchr>
 800f51c:	9a04      	ldr	r2, [sp, #16]
 800f51e:	b9d8      	cbnz	r0, 800f558 <_vfiprintf_r+0x12c>
 800f520:	06d1      	lsls	r1, r2, #27
 800f522:	bf44      	itt	mi
 800f524:	2320      	movmi	r3, #32
 800f526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f52a:	0713      	lsls	r3, r2, #28
 800f52c:	bf44      	itt	mi
 800f52e:	232b      	movmi	r3, #43	; 0x2b
 800f530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f534:	f89a 3000 	ldrb.w	r3, [sl]
 800f538:	2b2a      	cmp	r3, #42	; 0x2a
 800f53a:	d015      	beq.n	800f568 <_vfiprintf_r+0x13c>
 800f53c:	9a07      	ldr	r2, [sp, #28]
 800f53e:	4654      	mov	r4, sl
 800f540:	2000      	movs	r0, #0
 800f542:	f04f 0c0a 	mov.w	ip, #10
 800f546:	4621      	mov	r1, r4
 800f548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f54c:	3b30      	subs	r3, #48	; 0x30
 800f54e:	2b09      	cmp	r3, #9
 800f550:	d94e      	bls.n	800f5f0 <_vfiprintf_r+0x1c4>
 800f552:	b1b0      	cbz	r0, 800f582 <_vfiprintf_r+0x156>
 800f554:	9207      	str	r2, [sp, #28]
 800f556:	e014      	b.n	800f582 <_vfiprintf_r+0x156>
 800f558:	eba0 0308 	sub.w	r3, r0, r8
 800f55c:	fa09 f303 	lsl.w	r3, r9, r3
 800f560:	4313      	orrs	r3, r2
 800f562:	9304      	str	r3, [sp, #16]
 800f564:	46a2      	mov	sl, r4
 800f566:	e7d2      	b.n	800f50e <_vfiprintf_r+0xe2>
 800f568:	9b03      	ldr	r3, [sp, #12]
 800f56a:	1d19      	adds	r1, r3, #4
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	9103      	str	r1, [sp, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	bfbb      	ittet	lt
 800f574:	425b      	neglt	r3, r3
 800f576:	f042 0202 	orrlt.w	r2, r2, #2
 800f57a:	9307      	strge	r3, [sp, #28]
 800f57c:	9307      	strlt	r3, [sp, #28]
 800f57e:	bfb8      	it	lt
 800f580:	9204      	strlt	r2, [sp, #16]
 800f582:	7823      	ldrb	r3, [r4, #0]
 800f584:	2b2e      	cmp	r3, #46	; 0x2e
 800f586:	d10c      	bne.n	800f5a2 <_vfiprintf_r+0x176>
 800f588:	7863      	ldrb	r3, [r4, #1]
 800f58a:	2b2a      	cmp	r3, #42	; 0x2a
 800f58c:	d135      	bne.n	800f5fa <_vfiprintf_r+0x1ce>
 800f58e:	9b03      	ldr	r3, [sp, #12]
 800f590:	1d1a      	adds	r2, r3, #4
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	9203      	str	r2, [sp, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	bfb8      	it	lt
 800f59a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f59e:	3402      	adds	r4, #2
 800f5a0:	9305      	str	r3, [sp, #20]
 800f5a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f688 <_vfiprintf_r+0x25c>
 800f5a6:	7821      	ldrb	r1, [r4, #0]
 800f5a8:	2203      	movs	r2, #3
 800f5aa:	4650      	mov	r0, sl
 800f5ac:	f7f0 fe20 	bl	80001f0 <memchr>
 800f5b0:	b140      	cbz	r0, 800f5c4 <_vfiprintf_r+0x198>
 800f5b2:	2340      	movs	r3, #64	; 0x40
 800f5b4:	eba0 000a 	sub.w	r0, r0, sl
 800f5b8:	fa03 f000 	lsl.w	r0, r3, r0
 800f5bc:	9b04      	ldr	r3, [sp, #16]
 800f5be:	4303      	orrs	r3, r0
 800f5c0:	3401      	adds	r4, #1
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c8:	482c      	ldr	r0, [pc, #176]	; (800f67c <_vfiprintf_r+0x250>)
 800f5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ce:	2206      	movs	r2, #6
 800f5d0:	f7f0 fe0e 	bl	80001f0 <memchr>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d03f      	beq.n	800f658 <_vfiprintf_r+0x22c>
 800f5d8:	4b29      	ldr	r3, [pc, #164]	; (800f680 <_vfiprintf_r+0x254>)
 800f5da:	bb1b      	cbnz	r3, 800f624 <_vfiprintf_r+0x1f8>
 800f5dc:	9b03      	ldr	r3, [sp, #12]
 800f5de:	3307      	adds	r3, #7
 800f5e0:	f023 0307 	bic.w	r3, r3, #7
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ea:	443b      	add	r3, r7
 800f5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ee:	e767      	b.n	800f4c0 <_vfiprintf_r+0x94>
 800f5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	e7a5      	b.n	800f546 <_vfiprintf_r+0x11a>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	3401      	adds	r4, #1
 800f5fe:	9305      	str	r3, [sp, #20]
 800f600:	4619      	mov	r1, r3
 800f602:	f04f 0c0a 	mov.w	ip, #10
 800f606:	4620      	mov	r0, r4
 800f608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f60c:	3a30      	subs	r2, #48	; 0x30
 800f60e:	2a09      	cmp	r2, #9
 800f610:	d903      	bls.n	800f61a <_vfiprintf_r+0x1ee>
 800f612:	2b00      	cmp	r3, #0
 800f614:	d0c5      	beq.n	800f5a2 <_vfiprintf_r+0x176>
 800f616:	9105      	str	r1, [sp, #20]
 800f618:	e7c3      	b.n	800f5a2 <_vfiprintf_r+0x176>
 800f61a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f61e:	4604      	mov	r4, r0
 800f620:	2301      	movs	r3, #1
 800f622:	e7f0      	b.n	800f606 <_vfiprintf_r+0x1da>
 800f624:	ab03      	add	r3, sp, #12
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	462a      	mov	r2, r5
 800f62a:	4b16      	ldr	r3, [pc, #88]	; (800f684 <_vfiprintf_r+0x258>)
 800f62c:	a904      	add	r1, sp, #16
 800f62e:	4630      	mov	r0, r6
 800f630:	f3af 8000 	nop.w
 800f634:	4607      	mov	r7, r0
 800f636:	1c78      	adds	r0, r7, #1
 800f638:	d1d6      	bne.n	800f5e8 <_vfiprintf_r+0x1bc>
 800f63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f63c:	07d9      	lsls	r1, r3, #31
 800f63e:	d405      	bmi.n	800f64c <_vfiprintf_r+0x220>
 800f640:	89ab      	ldrh	r3, [r5, #12]
 800f642:	059a      	lsls	r2, r3, #22
 800f644:	d402      	bmi.n	800f64c <_vfiprintf_r+0x220>
 800f646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f648:	f7ff fcf7 	bl	800f03a <__retarget_lock_release_recursive>
 800f64c:	89ab      	ldrh	r3, [r5, #12]
 800f64e:	065b      	lsls	r3, r3, #25
 800f650:	f53f af12 	bmi.w	800f478 <_vfiprintf_r+0x4c>
 800f654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f656:	e711      	b.n	800f47c <_vfiprintf_r+0x50>
 800f658:	ab03      	add	r3, sp, #12
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	462a      	mov	r2, r5
 800f65e:	4b09      	ldr	r3, [pc, #36]	; (800f684 <_vfiprintf_r+0x258>)
 800f660:	a904      	add	r1, sp, #16
 800f662:	4630      	mov	r0, r6
 800f664:	f000 f880 	bl	800f768 <_printf_i>
 800f668:	e7e4      	b.n	800f634 <_vfiprintf_r+0x208>
 800f66a:	bf00      	nop
 800f66c:	08010248 	.word	0x08010248
 800f670:	08010268 	.word	0x08010268
 800f674:	08010228 	.word	0x08010228
 800f678:	08010288 	.word	0x08010288
 800f67c:	08010292 	.word	0x08010292
 800f680:	00000000 	.word	0x00000000
 800f684:	0800f407 	.word	0x0800f407
 800f688:	0801028e 	.word	0x0801028e

0800f68c <_printf_common>:
 800f68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f690:	4616      	mov	r6, r2
 800f692:	4699      	mov	r9, r3
 800f694:	688a      	ldr	r2, [r1, #8]
 800f696:	690b      	ldr	r3, [r1, #16]
 800f698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f69c:	4293      	cmp	r3, r2
 800f69e:	bfb8      	it	lt
 800f6a0:	4613      	movlt	r3, r2
 800f6a2:	6033      	str	r3, [r6, #0]
 800f6a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	b10a      	cbz	r2, 800f6b2 <_printf_common+0x26>
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	6033      	str	r3, [r6, #0]
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	0699      	lsls	r1, r3, #26
 800f6b6:	bf42      	ittt	mi
 800f6b8:	6833      	ldrmi	r3, [r6, #0]
 800f6ba:	3302      	addmi	r3, #2
 800f6bc:	6033      	strmi	r3, [r6, #0]
 800f6be:	6825      	ldr	r5, [r4, #0]
 800f6c0:	f015 0506 	ands.w	r5, r5, #6
 800f6c4:	d106      	bne.n	800f6d4 <_printf_common+0x48>
 800f6c6:	f104 0a19 	add.w	sl, r4, #25
 800f6ca:	68e3      	ldr	r3, [r4, #12]
 800f6cc:	6832      	ldr	r2, [r6, #0]
 800f6ce:	1a9b      	subs	r3, r3, r2
 800f6d0:	42ab      	cmp	r3, r5
 800f6d2:	dc26      	bgt.n	800f722 <_printf_common+0x96>
 800f6d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6d8:	1e13      	subs	r3, r2, #0
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	bf18      	it	ne
 800f6de:	2301      	movne	r3, #1
 800f6e0:	0692      	lsls	r2, r2, #26
 800f6e2:	d42b      	bmi.n	800f73c <_printf_common+0xb0>
 800f6e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	47c0      	blx	r8
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	d01e      	beq.n	800f730 <_printf_common+0xa4>
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	68e5      	ldr	r5, [r4, #12]
 800f6f6:	6832      	ldr	r2, [r6, #0]
 800f6f8:	f003 0306 	and.w	r3, r3, #6
 800f6fc:	2b04      	cmp	r3, #4
 800f6fe:	bf08      	it	eq
 800f700:	1aad      	subeq	r5, r5, r2
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	6922      	ldr	r2, [r4, #16]
 800f706:	bf0c      	ite	eq
 800f708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f70c:	2500      	movne	r5, #0
 800f70e:	4293      	cmp	r3, r2
 800f710:	bfc4      	itt	gt
 800f712:	1a9b      	subgt	r3, r3, r2
 800f714:	18ed      	addgt	r5, r5, r3
 800f716:	2600      	movs	r6, #0
 800f718:	341a      	adds	r4, #26
 800f71a:	42b5      	cmp	r5, r6
 800f71c:	d11a      	bne.n	800f754 <_printf_common+0xc8>
 800f71e:	2000      	movs	r0, #0
 800f720:	e008      	b.n	800f734 <_printf_common+0xa8>
 800f722:	2301      	movs	r3, #1
 800f724:	4652      	mov	r2, sl
 800f726:	4649      	mov	r1, r9
 800f728:	4638      	mov	r0, r7
 800f72a:	47c0      	blx	r8
 800f72c:	3001      	adds	r0, #1
 800f72e:	d103      	bne.n	800f738 <_printf_common+0xac>
 800f730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f738:	3501      	adds	r5, #1
 800f73a:	e7c6      	b.n	800f6ca <_printf_common+0x3e>
 800f73c:	18e1      	adds	r1, r4, r3
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	2030      	movs	r0, #48	; 0x30
 800f742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f746:	4422      	add	r2, r4
 800f748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f74c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f750:	3302      	adds	r3, #2
 800f752:	e7c7      	b.n	800f6e4 <_printf_common+0x58>
 800f754:	2301      	movs	r3, #1
 800f756:	4622      	mov	r2, r4
 800f758:	4649      	mov	r1, r9
 800f75a:	4638      	mov	r0, r7
 800f75c:	47c0      	blx	r8
 800f75e:	3001      	adds	r0, #1
 800f760:	d0e6      	beq.n	800f730 <_printf_common+0xa4>
 800f762:	3601      	adds	r6, #1
 800f764:	e7d9      	b.n	800f71a <_printf_common+0x8e>
	...

0800f768 <_printf_i>:
 800f768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f76c:	7e0f      	ldrb	r7, [r1, #24]
 800f76e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f770:	2f78      	cmp	r7, #120	; 0x78
 800f772:	4691      	mov	r9, r2
 800f774:	4680      	mov	r8, r0
 800f776:	460c      	mov	r4, r1
 800f778:	469a      	mov	sl, r3
 800f77a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f77e:	d807      	bhi.n	800f790 <_printf_i+0x28>
 800f780:	2f62      	cmp	r7, #98	; 0x62
 800f782:	d80a      	bhi.n	800f79a <_printf_i+0x32>
 800f784:	2f00      	cmp	r7, #0
 800f786:	f000 80d8 	beq.w	800f93a <_printf_i+0x1d2>
 800f78a:	2f58      	cmp	r7, #88	; 0x58
 800f78c:	f000 80a3 	beq.w	800f8d6 <_printf_i+0x16e>
 800f790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f798:	e03a      	b.n	800f810 <_printf_i+0xa8>
 800f79a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f79e:	2b15      	cmp	r3, #21
 800f7a0:	d8f6      	bhi.n	800f790 <_printf_i+0x28>
 800f7a2:	a101      	add	r1, pc, #4	; (adr r1, 800f7a8 <_printf_i+0x40>)
 800f7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7a8:	0800f801 	.word	0x0800f801
 800f7ac:	0800f815 	.word	0x0800f815
 800f7b0:	0800f791 	.word	0x0800f791
 800f7b4:	0800f791 	.word	0x0800f791
 800f7b8:	0800f791 	.word	0x0800f791
 800f7bc:	0800f791 	.word	0x0800f791
 800f7c0:	0800f815 	.word	0x0800f815
 800f7c4:	0800f791 	.word	0x0800f791
 800f7c8:	0800f791 	.word	0x0800f791
 800f7cc:	0800f791 	.word	0x0800f791
 800f7d0:	0800f791 	.word	0x0800f791
 800f7d4:	0800f921 	.word	0x0800f921
 800f7d8:	0800f845 	.word	0x0800f845
 800f7dc:	0800f903 	.word	0x0800f903
 800f7e0:	0800f791 	.word	0x0800f791
 800f7e4:	0800f791 	.word	0x0800f791
 800f7e8:	0800f943 	.word	0x0800f943
 800f7ec:	0800f791 	.word	0x0800f791
 800f7f0:	0800f845 	.word	0x0800f845
 800f7f4:	0800f791 	.word	0x0800f791
 800f7f8:	0800f791 	.word	0x0800f791
 800f7fc:	0800f90b 	.word	0x0800f90b
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	1d1a      	adds	r2, r3, #4
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	602a      	str	r2, [r5, #0]
 800f808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f810:	2301      	movs	r3, #1
 800f812:	e0a3      	b.n	800f95c <_printf_i+0x1f4>
 800f814:	6820      	ldr	r0, [r4, #0]
 800f816:	6829      	ldr	r1, [r5, #0]
 800f818:	0606      	lsls	r6, r0, #24
 800f81a:	f101 0304 	add.w	r3, r1, #4
 800f81e:	d50a      	bpl.n	800f836 <_printf_i+0xce>
 800f820:	680e      	ldr	r6, [r1, #0]
 800f822:	602b      	str	r3, [r5, #0]
 800f824:	2e00      	cmp	r6, #0
 800f826:	da03      	bge.n	800f830 <_printf_i+0xc8>
 800f828:	232d      	movs	r3, #45	; 0x2d
 800f82a:	4276      	negs	r6, r6
 800f82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f830:	485e      	ldr	r0, [pc, #376]	; (800f9ac <_printf_i+0x244>)
 800f832:	230a      	movs	r3, #10
 800f834:	e019      	b.n	800f86a <_printf_i+0x102>
 800f836:	680e      	ldr	r6, [r1, #0]
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f83e:	bf18      	it	ne
 800f840:	b236      	sxthne	r6, r6
 800f842:	e7ef      	b.n	800f824 <_printf_i+0xbc>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	6820      	ldr	r0, [r4, #0]
 800f848:	1d19      	adds	r1, r3, #4
 800f84a:	6029      	str	r1, [r5, #0]
 800f84c:	0601      	lsls	r1, r0, #24
 800f84e:	d501      	bpl.n	800f854 <_printf_i+0xec>
 800f850:	681e      	ldr	r6, [r3, #0]
 800f852:	e002      	b.n	800f85a <_printf_i+0xf2>
 800f854:	0646      	lsls	r6, r0, #25
 800f856:	d5fb      	bpl.n	800f850 <_printf_i+0xe8>
 800f858:	881e      	ldrh	r6, [r3, #0]
 800f85a:	4854      	ldr	r0, [pc, #336]	; (800f9ac <_printf_i+0x244>)
 800f85c:	2f6f      	cmp	r7, #111	; 0x6f
 800f85e:	bf0c      	ite	eq
 800f860:	2308      	moveq	r3, #8
 800f862:	230a      	movne	r3, #10
 800f864:	2100      	movs	r1, #0
 800f866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f86a:	6865      	ldr	r5, [r4, #4]
 800f86c:	60a5      	str	r5, [r4, #8]
 800f86e:	2d00      	cmp	r5, #0
 800f870:	bfa2      	ittt	ge
 800f872:	6821      	ldrge	r1, [r4, #0]
 800f874:	f021 0104 	bicge.w	r1, r1, #4
 800f878:	6021      	strge	r1, [r4, #0]
 800f87a:	b90e      	cbnz	r6, 800f880 <_printf_i+0x118>
 800f87c:	2d00      	cmp	r5, #0
 800f87e:	d04d      	beq.n	800f91c <_printf_i+0x1b4>
 800f880:	4615      	mov	r5, r2
 800f882:	fbb6 f1f3 	udiv	r1, r6, r3
 800f886:	fb03 6711 	mls	r7, r3, r1, r6
 800f88a:	5dc7      	ldrb	r7, [r0, r7]
 800f88c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f890:	4637      	mov	r7, r6
 800f892:	42bb      	cmp	r3, r7
 800f894:	460e      	mov	r6, r1
 800f896:	d9f4      	bls.n	800f882 <_printf_i+0x11a>
 800f898:	2b08      	cmp	r3, #8
 800f89a:	d10b      	bne.n	800f8b4 <_printf_i+0x14c>
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	07de      	lsls	r6, r3, #31
 800f8a0:	d508      	bpl.n	800f8b4 <_printf_i+0x14c>
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	6861      	ldr	r1, [r4, #4]
 800f8a6:	4299      	cmp	r1, r3
 800f8a8:	bfde      	ittt	le
 800f8aa:	2330      	movle	r3, #48	; 0x30
 800f8ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f8b4:	1b52      	subs	r2, r2, r5
 800f8b6:	6122      	str	r2, [r4, #16]
 800f8b8:	f8cd a000 	str.w	sl, [sp]
 800f8bc:	464b      	mov	r3, r9
 800f8be:	aa03      	add	r2, sp, #12
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	4640      	mov	r0, r8
 800f8c4:	f7ff fee2 	bl	800f68c <_printf_common>
 800f8c8:	3001      	adds	r0, #1
 800f8ca:	d14c      	bne.n	800f966 <_printf_i+0x1fe>
 800f8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8d0:	b004      	add	sp, #16
 800f8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d6:	4835      	ldr	r0, [pc, #212]	; (800f9ac <_printf_i+0x244>)
 800f8d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f8dc:	6829      	ldr	r1, [r5, #0]
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f8e4:	6029      	str	r1, [r5, #0]
 800f8e6:	061d      	lsls	r5, r3, #24
 800f8e8:	d514      	bpl.n	800f914 <_printf_i+0x1ac>
 800f8ea:	07df      	lsls	r7, r3, #31
 800f8ec:	bf44      	itt	mi
 800f8ee:	f043 0320 	orrmi.w	r3, r3, #32
 800f8f2:	6023      	strmi	r3, [r4, #0]
 800f8f4:	b91e      	cbnz	r6, 800f8fe <_printf_i+0x196>
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	f023 0320 	bic.w	r3, r3, #32
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	2310      	movs	r3, #16
 800f900:	e7b0      	b.n	800f864 <_printf_i+0xfc>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	f043 0320 	orr.w	r3, r3, #32
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	2378      	movs	r3, #120	; 0x78
 800f90c:	4828      	ldr	r0, [pc, #160]	; (800f9b0 <_printf_i+0x248>)
 800f90e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f912:	e7e3      	b.n	800f8dc <_printf_i+0x174>
 800f914:	0659      	lsls	r1, r3, #25
 800f916:	bf48      	it	mi
 800f918:	b2b6      	uxthmi	r6, r6
 800f91a:	e7e6      	b.n	800f8ea <_printf_i+0x182>
 800f91c:	4615      	mov	r5, r2
 800f91e:	e7bb      	b.n	800f898 <_printf_i+0x130>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	6826      	ldr	r6, [r4, #0]
 800f924:	6961      	ldr	r1, [r4, #20]
 800f926:	1d18      	adds	r0, r3, #4
 800f928:	6028      	str	r0, [r5, #0]
 800f92a:	0635      	lsls	r5, r6, #24
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	d501      	bpl.n	800f934 <_printf_i+0x1cc>
 800f930:	6019      	str	r1, [r3, #0]
 800f932:	e002      	b.n	800f93a <_printf_i+0x1d2>
 800f934:	0670      	lsls	r0, r6, #25
 800f936:	d5fb      	bpl.n	800f930 <_printf_i+0x1c8>
 800f938:	8019      	strh	r1, [r3, #0]
 800f93a:	2300      	movs	r3, #0
 800f93c:	6123      	str	r3, [r4, #16]
 800f93e:	4615      	mov	r5, r2
 800f940:	e7ba      	b.n	800f8b8 <_printf_i+0x150>
 800f942:	682b      	ldr	r3, [r5, #0]
 800f944:	1d1a      	adds	r2, r3, #4
 800f946:	602a      	str	r2, [r5, #0]
 800f948:	681d      	ldr	r5, [r3, #0]
 800f94a:	6862      	ldr	r2, [r4, #4]
 800f94c:	2100      	movs	r1, #0
 800f94e:	4628      	mov	r0, r5
 800f950:	f7f0 fc4e 	bl	80001f0 <memchr>
 800f954:	b108      	cbz	r0, 800f95a <_printf_i+0x1f2>
 800f956:	1b40      	subs	r0, r0, r5
 800f958:	6060      	str	r0, [r4, #4]
 800f95a:	6863      	ldr	r3, [r4, #4]
 800f95c:	6123      	str	r3, [r4, #16]
 800f95e:	2300      	movs	r3, #0
 800f960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f964:	e7a8      	b.n	800f8b8 <_printf_i+0x150>
 800f966:	6923      	ldr	r3, [r4, #16]
 800f968:	462a      	mov	r2, r5
 800f96a:	4649      	mov	r1, r9
 800f96c:	4640      	mov	r0, r8
 800f96e:	47d0      	blx	sl
 800f970:	3001      	adds	r0, #1
 800f972:	d0ab      	beq.n	800f8cc <_printf_i+0x164>
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	079b      	lsls	r3, r3, #30
 800f978:	d413      	bmi.n	800f9a2 <_printf_i+0x23a>
 800f97a:	68e0      	ldr	r0, [r4, #12]
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	4298      	cmp	r0, r3
 800f980:	bfb8      	it	lt
 800f982:	4618      	movlt	r0, r3
 800f984:	e7a4      	b.n	800f8d0 <_printf_i+0x168>
 800f986:	2301      	movs	r3, #1
 800f988:	4632      	mov	r2, r6
 800f98a:	4649      	mov	r1, r9
 800f98c:	4640      	mov	r0, r8
 800f98e:	47d0      	blx	sl
 800f990:	3001      	adds	r0, #1
 800f992:	d09b      	beq.n	800f8cc <_printf_i+0x164>
 800f994:	3501      	adds	r5, #1
 800f996:	68e3      	ldr	r3, [r4, #12]
 800f998:	9903      	ldr	r1, [sp, #12]
 800f99a:	1a5b      	subs	r3, r3, r1
 800f99c:	42ab      	cmp	r3, r5
 800f99e:	dcf2      	bgt.n	800f986 <_printf_i+0x21e>
 800f9a0:	e7eb      	b.n	800f97a <_printf_i+0x212>
 800f9a2:	2500      	movs	r5, #0
 800f9a4:	f104 0619 	add.w	r6, r4, #25
 800f9a8:	e7f5      	b.n	800f996 <_printf_i+0x22e>
 800f9aa:	bf00      	nop
 800f9ac:	08010299 	.word	0x08010299
 800f9b0:	080102aa 	.word	0x080102aa

0800f9b4 <__sread>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9bc:	f000 f99e 	bl	800fcfc <_read_r>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	bfab      	itete	ge
 800f9c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9c6:	89a3      	ldrhlt	r3, [r4, #12]
 800f9c8:	181b      	addge	r3, r3, r0
 800f9ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9ce:	bfac      	ite	ge
 800f9d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9d2:	81a3      	strhlt	r3, [r4, #12]
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <__swrite>:
 800f9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9da:	461f      	mov	r7, r3
 800f9dc:	898b      	ldrh	r3, [r1, #12]
 800f9de:	05db      	lsls	r3, r3, #23
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	4616      	mov	r6, r2
 800f9e6:	d505      	bpl.n	800f9f4 <__swrite+0x1e>
 800f9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ec:	2302      	movs	r3, #2
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f000 f928 	bl	800fc44 <_lseek_r>
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9fe:	81a3      	strh	r3, [r4, #12]
 800fa00:	4632      	mov	r2, r6
 800fa02:	463b      	mov	r3, r7
 800fa04:	4628      	mov	r0, r5
 800fa06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0a:	f000 b869 	b.w	800fae0 <_write_r>

0800fa0e <__sseek>:
 800fa0e:	b510      	push	{r4, lr}
 800fa10:	460c      	mov	r4, r1
 800fa12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa16:	f000 f915 	bl	800fc44 <_lseek_r>
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	bf15      	itete	ne
 800fa20:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa2a:	81a3      	strheq	r3, [r4, #12]
 800fa2c:	bf18      	it	ne
 800fa2e:	81a3      	strhne	r3, [r4, #12]
 800fa30:	bd10      	pop	{r4, pc}

0800fa32 <__sclose>:
 800fa32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa36:	f000 b8d3 	b.w	800fbe0 <_close_r>
	...

0800fa3c <__swbuf_r>:
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	460e      	mov	r6, r1
 800fa40:	4614      	mov	r4, r2
 800fa42:	4605      	mov	r5, r0
 800fa44:	b118      	cbz	r0, 800fa4e <__swbuf_r+0x12>
 800fa46:	6983      	ldr	r3, [r0, #24]
 800fa48:	b90b      	cbnz	r3, 800fa4e <__swbuf_r+0x12>
 800fa4a:	f7ff fa57 	bl	800eefc <__sinit>
 800fa4e:	4b21      	ldr	r3, [pc, #132]	; (800fad4 <__swbuf_r+0x98>)
 800fa50:	429c      	cmp	r4, r3
 800fa52:	d12b      	bne.n	800faac <__swbuf_r+0x70>
 800fa54:	686c      	ldr	r4, [r5, #4]
 800fa56:	69a3      	ldr	r3, [r4, #24]
 800fa58:	60a3      	str	r3, [r4, #8]
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	071a      	lsls	r2, r3, #28
 800fa5e:	d52f      	bpl.n	800fac0 <__swbuf_r+0x84>
 800fa60:	6923      	ldr	r3, [r4, #16]
 800fa62:	b36b      	cbz	r3, 800fac0 <__swbuf_r+0x84>
 800fa64:	6923      	ldr	r3, [r4, #16]
 800fa66:	6820      	ldr	r0, [r4, #0]
 800fa68:	1ac0      	subs	r0, r0, r3
 800fa6a:	6963      	ldr	r3, [r4, #20]
 800fa6c:	b2f6      	uxtb	r6, r6
 800fa6e:	4283      	cmp	r3, r0
 800fa70:	4637      	mov	r7, r6
 800fa72:	dc04      	bgt.n	800fa7e <__swbuf_r+0x42>
 800fa74:	4621      	mov	r1, r4
 800fa76:	4628      	mov	r0, r5
 800fa78:	f7ff f9ac 	bl	800edd4 <_fflush_r>
 800fa7c:	bb30      	cbnz	r0, 800facc <__swbuf_r+0x90>
 800fa7e:	68a3      	ldr	r3, [r4, #8]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	60a3      	str	r3, [r4, #8]
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	6022      	str	r2, [r4, #0]
 800fa8a:	701e      	strb	r6, [r3, #0]
 800fa8c:	6963      	ldr	r3, [r4, #20]
 800fa8e:	3001      	adds	r0, #1
 800fa90:	4283      	cmp	r3, r0
 800fa92:	d004      	beq.n	800fa9e <__swbuf_r+0x62>
 800fa94:	89a3      	ldrh	r3, [r4, #12]
 800fa96:	07db      	lsls	r3, r3, #31
 800fa98:	d506      	bpl.n	800faa8 <__swbuf_r+0x6c>
 800fa9a:	2e0a      	cmp	r6, #10
 800fa9c:	d104      	bne.n	800faa8 <__swbuf_r+0x6c>
 800fa9e:	4621      	mov	r1, r4
 800faa0:	4628      	mov	r0, r5
 800faa2:	f7ff f997 	bl	800edd4 <_fflush_r>
 800faa6:	b988      	cbnz	r0, 800facc <__swbuf_r+0x90>
 800faa8:	4638      	mov	r0, r7
 800faaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faac:	4b0a      	ldr	r3, [pc, #40]	; (800fad8 <__swbuf_r+0x9c>)
 800faae:	429c      	cmp	r4, r3
 800fab0:	d101      	bne.n	800fab6 <__swbuf_r+0x7a>
 800fab2:	68ac      	ldr	r4, [r5, #8]
 800fab4:	e7cf      	b.n	800fa56 <__swbuf_r+0x1a>
 800fab6:	4b09      	ldr	r3, [pc, #36]	; (800fadc <__swbuf_r+0xa0>)
 800fab8:	429c      	cmp	r4, r3
 800faba:	bf08      	it	eq
 800fabc:	68ec      	ldreq	r4, [r5, #12]
 800fabe:	e7ca      	b.n	800fa56 <__swbuf_r+0x1a>
 800fac0:	4621      	mov	r1, r4
 800fac2:	4628      	mov	r0, r5
 800fac4:	f000 f81e 	bl	800fb04 <__swsetup_r>
 800fac8:	2800      	cmp	r0, #0
 800faca:	d0cb      	beq.n	800fa64 <__swbuf_r+0x28>
 800facc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fad0:	e7ea      	b.n	800faa8 <__swbuf_r+0x6c>
 800fad2:	bf00      	nop
 800fad4:	08010248 	.word	0x08010248
 800fad8:	08010268 	.word	0x08010268
 800fadc:	08010228 	.word	0x08010228

0800fae0 <_write_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_write_r+0x20>)
 800fae4:	4604      	mov	r4, r0
 800fae6:	4608      	mov	r0, r1
 800fae8:	4611      	mov	r1, r2
 800faea:	2200      	movs	r2, #0
 800faec:	602a      	str	r2, [r5, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	f7f2 fe3a 	bl	8002768 <_write>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_write_r+0x1e>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_write_r+0x1e>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	20003b48 	.word	0x20003b48

0800fb04 <__swsetup_r>:
 800fb04:	4b32      	ldr	r3, [pc, #200]	; (800fbd0 <__swsetup_r+0xcc>)
 800fb06:	b570      	push	{r4, r5, r6, lr}
 800fb08:	681d      	ldr	r5, [r3, #0]
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	b125      	cbz	r5, 800fb1a <__swsetup_r+0x16>
 800fb10:	69ab      	ldr	r3, [r5, #24]
 800fb12:	b913      	cbnz	r3, 800fb1a <__swsetup_r+0x16>
 800fb14:	4628      	mov	r0, r5
 800fb16:	f7ff f9f1 	bl	800eefc <__sinit>
 800fb1a:	4b2e      	ldr	r3, [pc, #184]	; (800fbd4 <__swsetup_r+0xd0>)
 800fb1c:	429c      	cmp	r4, r3
 800fb1e:	d10f      	bne.n	800fb40 <__swsetup_r+0x3c>
 800fb20:	686c      	ldr	r4, [r5, #4]
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb28:	0719      	lsls	r1, r3, #28
 800fb2a:	d42c      	bmi.n	800fb86 <__swsetup_r+0x82>
 800fb2c:	06dd      	lsls	r5, r3, #27
 800fb2e:	d411      	bmi.n	800fb54 <__swsetup_r+0x50>
 800fb30:	2309      	movs	r3, #9
 800fb32:	6033      	str	r3, [r6, #0]
 800fb34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb38:	81a3      	strh	r3, [r4, #12]
 800fb3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb3e:	e03e      	b.n	800fbbe <__swsetup_r+0xba>
 800fb40:	4b25      	ldr	r3, [pc, #148]	; (800fbd8 <__swsetup_r+0xd4>)
 800fb42:	429c      	cmp	r4, r3
 800fb44:	d101      	bne.n	800fb4a <__swsetup_r+0x46>
 800fb46:	68ac      	ldr	r4, [r5, #8]
 800fb48:	e7eb      	b.n	800fb22 <__swsetup_r+0x1e>
 800fb4a:	4b24      	ldr	r3, [pc, #144]	; (800fbdc <__swsetup_r+0xd8>)
 800fb4c:	429c      	cmp	r4, r3
 800fb4e:	bf08      	it	eq
 800fb50:	68ec      	ldreq	r4, [r5, #12]
 800fb52:	e7e6      	b.n	800fb22 <__swsetup_r+0x1e>
 800fb54:	0758      	lsls	r0, r3, #29
 800fb56:	d512      	bpl.n	800fb7e <__swsetup_r+0x7a>
 800fb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb5a:	b141      	cbz	r1, 800fb6e <__swsetup_r+0x6a>
 800fb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb60:	4299      	cmp	r1, r3
 800fb62:	d002      	beq.n	800fb6a <__swsetup_r+0x66>
 800fb64:	4630      	mov	r0, r6
 800fb66:	f7fe fe35 	bl	800e7d4 <_free_r>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6363      	str	r3, [r4, #52]	; 0x34
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb74:	81a3      	strh	r3, [r4, #12]
 800fb76:	2300      	movs	r3, #0
 800fb78:	6063      	str	r3, [r4, #4]
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	f043 0308 	orr.w	r3, r3, #8
 800fb84:	81a3      	strh	r3, [r4, #12]
 800fb86:	6923      	ldr	r3, [r4, #16]
 800fb88:	b94b      	cbnz	r3, 800fb9e <__swsetup_r+0x9a>
 800fb8a:	89a3      	ldrh	r3, [r4, #12]
 800fb8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb94:	d003      	beq.n	800fb9e <__swsetup_r+0x9a>
 800fb96:	4621      	mov	r1, r4
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f7ff fa75 	bl	800f088 <__smakebuf_r>
 800fb9e:	89a0      	ldrh	r0, [r4, #12]
 800fba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fba4:	f010 0301 	ands.w	r3, r0, #1
 800fba8:	d00a      	beq.n	800fbc0 <__swsetup_r+0xbc>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60a3      	str	r3, [r4, #8]
 800fbae:	6963      	ldr	r3, [r4, #20]
 800fbb0:	425b      	negs	r3, r3
 800fbb2:	61a3      	str	r3, [r4, #24]
 800fbb4:	6923      	ldr	r3, [r4, #16]
 800fbb6:	b943      	cbnz	r3, 800fbca <__swsetup_r+0xc6>
 800fbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbbc:	d1ba      	bne.n	800fb34 <__swsetup_r+0x30>
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}
 800fbc0:	0781      	lsls	r1, r0, #30
 800fbc2:	bf58      	it	pl
 800fbc4:	6963      	ldrpl	r3, [r4, #20]
 800fbc6:	60a3      	str	r3, [r4, #8]
 800fbc8:	e7f4      	b.n	800fbb4 <__swsetup_r+0xb0>
 800fbca:	2000      	movs	r0, #0
 800fbcc:	e7f7      	b.n	800fbbe <__swsetup_r+0xba>
 800fbce:	bf00      	nop
 800fbd0:	20000030 	.word	0x20000030
 800fbd4:	08010248 	.word	0x08010248
 800fbd8:	08010268 	.word	0x08010268
 800fbdc:	08010228 	.word	0x08010228

0800fbe0 <_close_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4d06      	ldr	r5, [pc, #24]	; (800fbfc <_close_r+0x1c>)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4608      	mov	r0, r1
 800fbea:	602b      	str	r3, [r5, #0]
 800fbec:	f7f2 fde8 	bl	80027c0 <_close>
 800fbf0:	1c43      	adds	r3, r0, #1
 800fbf2:	d102      	bne.n	800fbfa <_close_r+0x1a>
 800fbf4:	682b      	ldr	r3, [r5, #0]
 800fbf6:	b103      	cbz	r3, 800fbfa <_close_r+0x1a>
 800fbf8:	6023      	str	r3, [r4, #0]
 800fbfa:	bd38      	pop	{r3, r4, r5, pc}
 800fbfc:	20003b48 	.word	0x20003b48

0800fc00 <_fstat_r>:
 800fc00:	b538      	push	{r3, r4, r5, lr}
 800fc02:	4d07      	ldr	r5, [pc, #28]	; (800fc20 <_fstat_r+0x20>)
 800fc04:	2300      	movs	r3, #0
 800fc06:	4604      	mov	r4, r0
 800fc08:	4608      	mov	r0, r1
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	602b      	str	r3, [r5, #0]
 800fc0e:	f7f2 fe27 	bl	8002860 <_fstat>
 800fc12:	1c43      	adds	r3, r0, #1
 800fc14:	d102      	bne.n	800fc1c <_fstat_r+0x1c>
 800fc16:	682b      	ldr	r3, [r5, #0]
 800fc18:	b103      	cbz	r3, 800fc1c <_fstat_r+0x1c>
 800fc1a:	6023      	str	r3, [r4, #0]
 800fc1c:	bd38      	pop	{r3, r4, r5, pc}
 800fc1e:	bf00      	nop
 800fc20:	20003b48 	.word	0x20003b48

0800fc24 <_isatty_r>:
 800fc24:	b538      	push	{r3, r4, r5, lr}
 800fc26:	4d06      	ldr	r5, [pc, #24]	; (800fc40 <_isatty_r+0x1c>)
 800fc28:	2300      	movs	r3, #0
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	4608      	mov	r0, r1
 800fc2e:	602b      	str	r3, [r5, #0]
 800fc30:	f7f2 fd84 	bl	800273c <_isatty>
 800fc34:	1c43      	adds	r3, r0, #1
 800fc36:	d102      	bne.n	800fc3e <_isatty_r+0x1a>
 800fc38:	682b      	ldr	r3, [r5, #0]
 800fc3a:	b103      	cbz	r3, 800fc3e <_isatty_r+0x1a>
 800fc3c:	6023      	str	r3, [r4, #0]
 800fc3e:	bd38      	pop	{r3, r4, r5, pc}
 800fc40:	20003b48 	.word	0x20003b48

0800fc44 <_lseek_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d07      	ldr	r5, [pc, #28]	; (800fc64 <_lseek_r+0x20>)
 800fc48:	4604      	mov	r4, r0
 800fc4a:	4608      	mov	r0, r1
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	2200      	movs	r2, #0
 800fc50:	602a      	str	r2, [r5, #0]
 800fc52:	461a      	mov	r2, r3
 800fc54:	f7f2 fdcb 	bl	80027ee <_lseek>
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	d102      	bne.n	800fc62 <_lseek_r+0x1e>
 800fc5c:	682b      	ldr	r3, [r5, #0]
 800fc5e:	b103      	cbz	r3, 800fc62 <_lseek_r+0x1e>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	20003b48 	.word	0x20003b48

0800fc68 <memmove>:
 800fc68:	4288      	cmp	r0, r1
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	eb01 0402 	add.w	r4, r1, r2
 800fc70:	d902      	bls.n	800fc78 <memmove+0x10>
 800fc72:	4284      	cmp	r4, r0
 800fc74:	4623      	mov	r3, r4
 800fc76:	d807      	bhi.n	800fc88 <memmove+0x20>
 800fc78:	1e43      	subs	r3, r0, #1
 800fc7a:	42a1      	cmp	r1, r4
 800fc7c:	d008      	beq.n	800fc90 <memmove+0x28>
 800fc7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc86:	e7f8      	b.n	800fc7a <memmove+0x12>
 800fc88:	4402      	add	r2, r0
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	428a      	cmp	r2, r1
 800fc8e:	d100      	bne.n	800fc92 <memmove+0x2a>
 800fc90:	bd10      	pop	{r4, pc}
 800fc92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc9a:	e7f7      	b.n	800fc8c <memmove+0x24>

0800fc9c <_realloc_r>:
 800fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca0:	4680      	mov	r8, r0
 800fca2:	4614      	mov	r4, r2
 800fca4:	460e      	mov	r6, r1
 800fca6:	b921      	cbnz	r1, 800fcb2 <_realloc_r+0x16>
 800fca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcac:	4611      	mov	r1, r2
 800fcae:	f7fe bdfd 	b.w	800e8ac <_malloc_r>
 800fcb2:	b92a      	cbnz	r2, 800fcc0 <_realloc_r+0x24>
 800fcb4:	f7fe fd8e 	bl	800e7d4 <_free_r>
 800fcb8:	4625      	mov	r5, r4
 800fcba:	4628      	mov	r0, r5
 800fcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc0:	f000 f82e 	bl	800fd20 <_malloc_usable_size_r>
 800fcc4:	4284      	cmp	r4, r0
 800fcc6:	4607      	mov	r7, r0
 800fcc8:	d802      	bhi.n	800fcd0 <_realloc_r+0x34>
 800fcca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcce:	d812      	bhi.n	800fcf6 <_realloc_r+0x5a>
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	4640      	mov	r0, r8
 800fcd4:	f7fe fdea 	bl	800e8ac <_malloc_r>
 800fcd8:	4605      	mov	r5, r0
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d0ed      	beq.n	800fcba <_realloc_r+0x1e>
 800fcde:	42bc      	cmp	r4, r7
 800fce0:	4622      	mov	r2, r4
 800fce2:	4631      	mov	r1, r6
 800fce4:	bf28      	it	cs
 800fce6:	463a      	movcs	r2, r7
 800fce8:	f7fe fd5e 	bl	800e7a8 <memcpy>
 800fcec:	4631      	mov	r1, r6
 800fcee:	4640      	mov	r0, r8
 800fcf0:	f7fe fd70 	bl	800e7d4 <_free_r>
 800fcf4:	e7e1      	b.n	800fcba <_realloc_r+0x1e>
 800fcf6:	4635      	mov	r5, r6
 800fcf8:	e7df      	b.n	800fcba <_realloc_r+0x1e>
	...

0800fcfc <_read_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d07      	ldr	r5, [pc, #28]	; (800fd1c <_read_r+0x20>)
 800fd00:	4604      	mov	r4, r0
 800fd02:	4608      	mov	r0, r1
 800fd04:	4611      	mov	r1, r2
 800fd06:	2200      	movs	r2, #0
 800fd08:	602a      	str	r2, [r5, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f7f2 fd80 	bl	8002810 <_read>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_read_r+0x1e>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_read_r+0x1e>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	20003b48 	.word	0x20003b48

0800fd20 <_malloc_usable_size_r>:
 800fd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd24:	1f18      	subs	r0, r3, #4
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	bfbc      	itt	lt
 800fd2a:	580b      	ldrlt	r3, [r1, r0]
 800fd2c:	18c0      	addlt	r0, r0, r3
 800fd2e:	4770      	bx	lr

0800fd30 <_init>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	bf00      	nop
 800fd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd36:	bc08      	pop	{r3}
 800fd38:	469e      	mov	lr, r3
 800fd3a:	4770      	bx	lr

0800fd3c <_fini>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	bf00      	nop
 800fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd42:	bc08      	pop	{r3}
 800fd44:	469e      	mov	lr, r3
 800fd46:	4770      	bx	lr
