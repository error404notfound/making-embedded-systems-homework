
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008740  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e40  08008e40  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e48  08008e48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000336c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200033e0  200033e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018009  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000329c  00000000  00000000  000380ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ba3  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dc2  00000000  00000000  000645a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e21d1  00000000  00000000  0007e365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160536  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c7c  00000000  00000000  00160588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080088d8 	.word	0x080088d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080088d8 	.word	0x080088d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	080088f0 	.word	0x080088f0
 8000738:	0800893c 	.word	0x0800893c
 800073c:	08008940 	.word	0x08008940
 8000740:	20000190 	.word	0x20000190
 8000744:	20000090 	.word	0x20000090

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000190 	.word	0x20000190
 80008a4:	20000090 	.word	0x20000090
 80008a8:	20000194 	.word	0x20000194
 80008ac:	08008944 	.word	0x08008944
 80008b0:	0800894c 	.word	0x0800894c
 80008b4:	0800893c 	.word	0x0800893c
 80008b8:	08008954 	.word	0x08008954
 80008bc:	08008940 	.word	0x08008940

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fe68 	bl	800769c <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080089fc 	.word	0x080089fc
 8000d0c:	080089b0 	.word	0x080089b0
 8000d10:	080089b4 	.word	0x080089b4

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	080089b8 	.word	0x080089b8
 8000dc0:	080089c8 	.word	0x080089c8
 8000dc4:	080089d0 	.word	0x080089d0
 8000dc8:	080089b4 	.word	0x080089b4

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	080089d4 	.word	0x080089d4
 8000e10:	080089b4 	.word	0x080089b4

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	080089e4 	.word	0x080089e4
 8000e3c:	080089b4 	.word	0x080089b4

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	080089fc 	.word	0x080089fc

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001a0 	.word	0x200001a0
 8000e74:	2000019c 	.word	0x2000019c

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fc6b 	bl	800676a <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000198 	.word	0x20000198
 8000ea4:	200001ae 	.word	0x200001ae

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f006 fc08 	bl	8007708 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000019c 	.word	0x2000019c
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	200001a0 	.word	0x200001a0
 8000f1c:	080089f8 	.word	0x080089f8

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f006 fbec 	bl	8007708 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	080089f8 	.word	0x080089f8

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fbf8 	bl	800676a <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001a0 	.word	0x200001a0
 8000f88:	200001ae 	.word	0x200001ae
 8000f8c:	200001a4 	.word	0x200001a4
 8000f90:	2000019c 	.word	0x2000019c
 8000f94:	20000198 	.word	0x20000198

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <I3G450D_Init+0x164>)
 8000fa2:	f002 fe73 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 fff6 	bl	8002f98 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4852      	ldr	r0, [pc, #328]	; (80010fc <I3G450D_Init+0x164>)
 8000fb2:	f002 fe6b 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f001 ffee 	bl	8002f98 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <I3G450D_Init+0x168>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <I3G450D_Init+0x168>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	494c      	ldr	r1, [pc, #304]	; (8001100 <I3G450D_Init+0x168>)
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <I3G450D_Init+0x16c>)
 8000fd0:	f003 fd57 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4848      	ldr	r0, [pc, #288]	; (80010fc <I3G450D_Init+0x164>)
 8000fda:	f002 fe57 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 ffda 	bl	8002f98 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <I3G450D_Init+0x164>)
 8000fea:	f002 fe4f 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 ffd2 	bl	8002f98 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <I3G450D_Init+0x168>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <I3G450D_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	493e      	ldr	r1, [pc, #248]	; (8001100 <I3G450D_Init+0x168>)
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <I3G450D_Init+0x16c>)
 8001008:	f003 fd3b 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	483a      	ldr	r0, [pc, #232]	; (80010fc <I3G450D_Init+0x164>)
 8001012:	f002 fe3b 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 ffbe 	bl	8002f98 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4836      	ldr	r0, [pc, #216]	; (80010fc <I3G450D_Init+0x164>)
 8001022:	f002 fe33 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 ffb6 	bl	8002f98 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <I3G450D_Init+0x168>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <I3G450D_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4930      	ldr	r1, [pc, #192]	; (8001100 <I3G450D_Init+0x168>)
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <I3G450D_Init+0x16c>)
 8001040:	f003 fd1f 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <I3G450D_Init+0x164>)
 800104a:	f002 fe1f 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 ffa2 	bl	8002f98 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4828      	ldr	r0, [pc, #160]	; (80010fc <I3G450D_Init+0x164>)
 800105a:	f002 fe17 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 ff9a 	bl	8002f98 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <I3G450D_Init+0x168>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <I3G450D_Init+0x168>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4922      	ldr	r1, [pc, #136]	; (8001100 <I3G450D_Init+0x168>)
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <I3G450D_Init+0x16c>)
 8001078:	f003 fd03 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <I3G450D_Init+0x164>)
 8001082:	f002 fe03 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 ff86 	bl	8002f98 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <I3G450D_Init+0x164>)
 8001092:	f002 fdfb 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 ff7e 	bl	8002f98 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <I3G450D_Init+0x168>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <I3G450D_Init+0x168>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <I3G450D_Init+0x168>)
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <I3G450D_Init+0x16c>)
 80010b0:	f003 fce7 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <I3G450D_Init+0x164>)
 80010ba:	f002 fde7 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 ff6a 	bl	8002f98 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <I3G450D_Init+0x164>)
 80010ca:	f002 fddf 	bl	8003c8c <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <I3G450D_Init+0x168>)
 80010d0:	228f      	movs	r2, #143	; 0x8f
 80010d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	2201      	movs	r2, #1
 80010d8:	4909      	ldr	r1, [pc, #36]	; (8001100 <I3G450D_Init+0x168>)
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <I3G450D_Init+0x16c>)
 80010dc:	f003 fcd1 	bl	8004a82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2201      	movs	r2, #1
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <I3G450D_Init+0x170>)
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <I3G450D_Init+0x16c>)
 80010e8:	f003 fe07 	bl	8004cfa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <I3G450D_Init+0x164>)
 80010f2:	f002 fdcb 	bl	8003c8c <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800
 8001100:	200030e8 	.word	0x200030e8
 8001104:	200031ac 	.word	0x200031ac
 8001108:	200030ed 	.word	0x200030ed

0800110c <I3G450D_loop>:

void I3G450D_loop(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	; 0x60
 8001110:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800111e:	2300      	movs	r3, #0
 8001120:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <I3G450D_loop+0x1b0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <I3G450D_loop+0x6a>
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 80ba 	beq.w	80012e8 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001174:	e36d      	b.n	8001852 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <I3G450D_loop+0x1b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 8368 	bne.w	8001850 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001186:	f002 fd81 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <I3G450D_loop+0x1bc>)
 800118c:	22a8      	movs	r2, #168	; 0xa8
 800118e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	2201      	movs	r2, #1
 8001194:	494c      	ldr	r1, [pc, #304]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001196:	484d      	ldr	r0, [pc, #308]	; (80012cc <I3G450D_loop+0x1c0>)
 8001198:	f003 fc73 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	2201      	movs	r2, #1
 80011a0:	494b      	ldr	r1, [pc, #300]	; (80012d0 <I3G450D_loop+0x1c4>)
 80011a2:	484a      	ldr	r0, [pc, #296]	; (80012cc <I3G450D_loop+0x1c0>)
 80011a4:	f003 fda9 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ae:	f002 fd6d 	bl	8003c8c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4843      	ldr	r0, [pc, #268]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011b8:	f002 fd68 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011be:	22a9      	movs	r2, #169	; 0xa9
 80011c0:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	2201      	movs	r2, #1
 80011c6:	4940      	ldr	r1, [pc, #256]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011c8:	4840      	ldr	r0, [pc, #256]	; (80012cc <I3G450D_loop+0x1c0>)
 80011ca:	f003 fc5a 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80011ce:	2332      	movs	r3, #50	; 0x32
 80011d0:	2201      	movs	r2, #1
 80011d2:	4940      	ldr	r1, [pc, #256]	; (80012d4 <I3G450D_loop+0x1c8>)
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <I3G450D_loop+0x1c0>)
 80011d6:	f003 fd90 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2102      	movs	r1, #2
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011e0:	f002 fd54 	bl	8003c8c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	4836      	ldr	r0, [pc, #216]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ea:	f002 fd4f 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011f4:	2332      	movs	r3, #50	; 0x32
 80011f6:	2201      	movs	r2, #1
 80011f8:	4933      	ldr	r1, [pc, #204]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011fa:	4834      	ldr	r0, [pc, #208]	; (80012cc <I3G450D_loop+0x1c0>)
 80011fc:	f003 fc41 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8001200:	2332      	movs	r3, #50	; 0x32
 8001202:	2201      	movs	r2, #1
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <I3G450D_loop+0x1cc>)
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <I3G450D_loop+0x1c0>)
 8001208:	f003 fd77 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001212:	f002 fd3b 	bl	8003c8c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	482a      	ldr	r0, [pc, #168]	; (80012c4 <I3G450D_loop+0x1b8>)
 800121c:	f002 fd36 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001222:	22ab      	movs	r2, #171	; 0xab
 8001224:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	2201      	movs	r2, #1
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <I3G450D_loop+0x1bc>)
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <I3G450D_loop+0x1c0>)
 800122e:	f003 fc28 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	2201      	movs	r2, #1
 8001236:	4929      	ldr	r1, [pc, #164]	; (80012dc <I3G450D_loop+0x1d0>)
 8001238:	4824      	ldr	r0, [pc, #144]	; (80012cc <I3G450D_loop+0x1c0>)
 800123a:	f003 fd5e 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001244:	f002 fd22 	bl	8003c8c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <I3G450D_loop+0x1b8>)
 800124e:	f002 fd1d 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001254:	22ac      	movs	r2, #172	; 0xac
 8001256:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001258:	2332      	movs	r3, #50	; 0x32
 800125a:	2201      	movs	r2, #1
 800125c:	491a      	ldr	r1, [pc, #104]	; (80012c8 <I3G450D_loop+0x1bc>)
 800125e:	481b      	ldr	r0, [pc, #108]	; (80012cc <I3G450D_loop+0x1c0>)
 8001260:	f003 fc0f 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	491d      	ldr	r1, [pc, #116]	; (80012e0 <I3G450D_loop+0x1d4>)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <I3G450D_loop+0x1c0>)
 800126c:	f003 fd45 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001276:	f002 fd09 	bl	8003c8c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001280:	f002 fd04 	bl	8003c8c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001286:	22ad      	movs	r2, #173	; 0xad
 8001288:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800128a:	2332      	movs	r3, #50	; 0x32
 800128c:	2201      	movs	r2, #1
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <I3G450D_loop+0x1c0>)
 8001292:	f003 fbf6 	bl	8004a82 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	2201      	movs	r2, #1
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <I3G450D_loop+0x1d8>)
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <I3G450D_loop+0x1c0>)
 800129e:	f003 fd2c 	bl	8004cfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <I3G450D_loop+0x1b8>)
 80012a8:	f002 fcf0 	bl	8003c8c <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <I3G450D_loop+0x1b0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <I3G450D_loop+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
				break;
 80012b8:	e2ca      	b.n	8001850 <I3G450D_loop+0x744>
 80012ba:	bf00      	nop
 80012bc:	200001b0 	.word	0x200001b0
 80012c0:	20000000 	.word	0x20000000
 80012c4:	40020800 	.word	0x40020800
 80012c8:	200030e8 	.word	0x200030e8
 80012cc:	200031ac 	.word	0x200031ac
 80012d0:	200030ed 	.word	0x200030ed
 80012d4:	200030ee 	.word	0x200030ee
 80012d8:	200030ef 	.word	0x200030ef
 80012dc:	200030f0 	.word	0x200030f0
 80012e0:	200030f1 	.word	0x200030f1
 80012e4:	200030f2 	.word	0x200030f2
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80012e8:	4ba0      	ldr	r3, [pc, #640]	; (800156c <I3G450D_loop+0x460>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b9e      	ldr	r3, [pc, #632]	; (800156c <I3G450D_loop+0x460>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80012fe:	4b9b      	ldr	r3, [pc, #620]	; (800156c <I3G450D_loop+0x460>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <I3G450D_loop+0x460>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001314:	4b95      	ldr	r3, [pc, #596]	; (800156c <I3G450D_loop+0x460>)
 8001316:	799b      	ldrb	r3, [r3, #6]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <I3G450D_loop+0x460>)
 800131e:	795b      	ldrb	r3, [r3, #5]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <I3G450D_loop+0x464>)
 8001330:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <I3G450D_loop+0x468>)
 800133a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800133c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <I3G450D_loop+0x46c>)
 8001342:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001344:	4b8d      	ldr	r3, [pc, #564]	; (800157c <I3G450D_loop+0x470>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80d5 	bne.w	80014f8 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 800134e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <I3G450D_loop+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001584 <I3G450D_loop+0x478>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <I3G450D_loop+0x47c>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	b21b      	sxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <I3G450D_loop+0x480>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001584 <I3G450D_loop+0x478>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <I3G450D_loop+0x484>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001398:	b21b      	sxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <I3G450D_loop+0x488>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001584 <I3G450D_loop+0x478>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b79      	ldr	r3, [pc, #484]	; (8001598 <I3G450D_loop+0x48c>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <I3G450D_loop+0x490>)
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80013bc:	4b72      	ldr	r3, [pc, #456]	; (8001588 <I3G450D_loop+0x47c>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <I3G450D_loop+0x494>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dc0c      	bgt.n	80013ec <I3G450D_loop+0x2e0>
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <I3G450D_loop+0x494>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb1 7a67 	vneg.f32	s14, s15
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <I3G450D_loop+0x47c>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd1b      	ble.n	8001424 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <I3G450D_loop+0x47c>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <I3G450D_loop+0x498>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <I3G450D_loop+0x49c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <I3G450D_loop+0x49c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <I3G450D_loop+0x47c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <I3G450D_loop+0x498>)
 8001422:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001424:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <I3G450D_loop+0x484>)
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <I3G450D_loop+0x4a0>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dc0c      	bgt.n	8001454 <I3G450D_loop+0x348>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <I3G450D_loop+0x4a0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eeb1 7a67 	vneg.f32	s14, s15
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <I3G450D_loop+0x484>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd1b      	ble.n	800148c <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <I3G450D_loop+0x484>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <I3G450D_loop+0x4a4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <I3G450D_loop+0x484>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <I3G450D_loop+0x4a4>)
 800148a:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <I3G450D_loop+0x48c>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <I3G450D_loop+0x4ac>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dc0d      	bgt.n	80014be <I3G450D_loop+0x3b2>
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <I3G450D_loop+0x4ac>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eeb1 7a67 	vneg.f32	s14, s15
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <I3G450D_loop+0x48c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	f340 81c2 	ble.w	8001842 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <I3G450D_loop+0x48c>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <I3G450D_loop+0x4b0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <I3G450D_loop+0x48c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <I3G450D_loop+0x4b0>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e1a4      	b.n	8001842 <I3G450D_loop+0x736>
				switch(currentcalistate)
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <I3G450D_loop+0x470>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 819b 	beq.w	8001838 <I3G450D_loop+0x72c>
 8001502:	2b02      	cmp	r3, #2
 8001504:	f300 819a 	bgt.w	800183c <I3G450D_loop+0x730>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <I3G450D_loop+0x406>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d029      	beq.n	8001564 <I3G450D_loop+0x458>
						break;
 8001510:	e194      	b.n	800183c <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800151a:	b211      	sxth	r1, r2
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <I3G450D_loop+0x4bc>)
 800151e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800152a:	b211      	sxth	r1, r2
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <I3G450D_loop+0x4c0>)
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001538:	b211      	sxth	r1, r2
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <I3G450D_loop+0x4c4>)
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001548:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <I3G450D_loop+0x4b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001552:	f0c0 8175 	bcc.w	8001840 <I3G450D_loop+0x734>
							caliCounter=0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <I3G450D_loop+0x470>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
						break;
 8001562:	e16d      	b.n	8001840 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001568:	e0a5      	b.n	80016b6 <I3G450D_loop+0x5aa>
 800156a:	bf00      	nop
 800156c:	200030ec 	.word	0x200030ec
 8001570:	200001fc 	.word	0x200001fc
 8001574:	200001fe 	.word	0x200001fe
 8001578:	20000200 	.word	0x20000200
 800157c:	200001af 	.word	0x200001af
 8001580:	200001c0 	.word	0x200001c0
 8001584:	3d8f5c29 	.word	0x3d8f5c29
 8001588:	200001b4 	.word	0x200001b4
 800158c:	200001c4 	.word	0x200001c4
 8001590:	200001b8 	.word	0x200001b8
 8001594:	200001c8 	.word	0x200001c8
 8001598:	200001bc 	.word	0x200001bc
 800159c:	3b449ba6 	.word	0x3b449ba6
 80015a0:	200001cc 	.word	0x200001cc
 80015a4:	200001e4 	.word	0x200001e4
 80015a8:	200001d8 	.word	0x200001d8
 80015ac:	200001d0 	.word	0x200001d0
 80015b0:	200001e8 	.word	0x200001e8
 80015b4:	200001dc 	.word	0x200001dc
 80015b8:	200001d4 	.word	0x200001d4
 80015bc:	200001ec 	.word	0x200001ec
 80015c0:	200001e0 	.word	0x200001e0
 80015c4:	20000204 	.word	0x20000204
 80015c8:	20000208 	.word	0x20000208
 80015cc:	200011a8 	.word	0x200011a8
 80015d0:	20002148 	.word	0x20002148
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	443b      	add	r3, r7
 80015dc:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	499d      	ldr	r1, [pc, #628]	; (800185c <I3G450D_loop+0x750>)
 80015e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ea:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015ee:	4413      	add	r3, r2
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3360      	adds	r3, #96	; 0x60
 80015f8:	443b      	add	r3, r7
 80015fa:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80015fe:	461a      	mov	r2, r3
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	4996      	ldr	r1, [pc, #600]	; (8001860 <I3G450D_loop+0x754>)
 8001606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001608:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800160c:	4413      	add	r3, r2
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	443b      	add	r3, r7
 8001618:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800161c:	461a      	mov	r2, r3
 800161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <I3G450D_loop+0x758>)
 8001624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001626:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800162a:	4413      	add	r3, r2
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800162e:	4a8b      	ldr	r2, [pc, #556]	; (800185c <I3G450D_loop+0x750>)
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	443b      	add	r3, r7
 800163e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <I3G450D_loop+0x754>)
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800164a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	443b      	add	r3, r7
 8001652:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001656:	4a83      	ldr	r2, [pc, #524]	; (8001864 <I3G450D_loop+0x758>)
 8001658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800165e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3360      	adds	r3, #96	; 0x60
 8001664:	443b      	add	r3, r7
 8001666:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <I3G450D_loop+0x75c>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a7c      	ldr	r2, [pc, #496]	; (800186c <I3G450D_loop+0x760>)
 800167a:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <I3G450D_loop+0x75c>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1092      	asrs	r2, r2, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <I3G450D_loop+0x764>)
 800168c:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	4a75      	ldr	r2, [pc, #468]	; (8001868 <I3G450D_loop+0x75c>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1092      	asrs	r2, r2, #2
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a75      	ldr	r2, [pc, #468]	; (8001874 <I3G450D_loop+0x768>)
 800169e:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	3301      	adds	r3, #1
 80016a4:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80016a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d901      	bls.n	80016b0 <I3G450D_loop+0x5a4>
									windowPosition=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	3301      	adds	r3, #1
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016bc:	d38a      	bcc.n	80015d4 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c2:	e089      	b.n	80017d8 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <I3G450D_loop+0x750>)
 80016c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <I3G450D_loop+0x760>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <I3G450D_loop+0x76c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd0a      	ble.n	80016f2 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <I3G450D_loop+0x750>)
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <I3G450D_loop+0x760>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a62      	ldr	r2, [pc, #392]	; (8001878 <I3G450D_loop+0x76c>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e015      	b.n	800171e <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <I3G450D_loop+0x750>)
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <I3G450D_loop+0x760>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <I3G450D_loop+0x76c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	425b      	negs	r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	da08      	bge.n	800171e <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <I3G450D_loop+0x760>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4952      	ldr	r1, [pc, #328]	; (800185c <I3G450D_loop+0x750>)
 8001712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001714:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <I3G450D_loop+0x76c>)
 800171c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800171e:	4a50      	ldr	r2, [pc, #320]	; (8001860 <I3G450D_loop+0x754>)
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001726:	461a      	mov	r2, r3
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <I3G450D_loop+0x764>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <I3G450D_loop+0x770>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	dd0a      	ble.n	800174c <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <I3G450D_loop+0x754>)
 8001738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800173e:	461a      	mov	r2, r3
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <I3G450D_loop+0x764>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <I3G450D_loop+0x770>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e015      	b.n	8001778 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <I3G450D_loop+0x754>)
 800174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001754:	461a      	mov	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <I3G450D_loop+0x764>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <I3G450D_loop+0x770>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	425b      	negs	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	da08      	bge.n	8001778 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <I3G450D_loop+0x764>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	493d      	ldr	r1, [pc, #244]	; (8001860 <I3G450D_loop+0x754>)
 800176c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800176e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <I3G450D_loop+0x770>)
 8001776:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <I3G450D_loop+0x758>)
 800177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	461a      	mov	r2, r3
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <I3G450D_loop+0x768>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <I3G450D_loop+0x774>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd0a      	ble.n	80017a6 <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <I3G450D_loop+0x758>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001798:	461a      	mov	r2, r3
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <I3G450D_loop+0x768>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <I3G450D_loop+0x774>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e015      	b.n	80017d2 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <I3G450D_loop+0x758>)
 80017a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <I3G450D_loop+0x768>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <I3G450D_loop+0x774>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	425b      	negs	r3, r3
 80017bc:	429a      	cmp	r2, r3
 80017be:	da08      	bge.n	80017d2 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <I3G450D_loop+0x768>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4927      	ldr	r1, [pc, #156]	; (8001864 <I3G450D_loop+0x758>)
 80017c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <I3G450D_loop+0x774>)
 80017d0:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d4:	3301      	adds	r3, #1
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017de:	f4ff af71 	bcc.w	80016c4 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <I3G450D_loop+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001884 <I3G450D_loop+0x778>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <I3G450D_loop+0x77c>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <I3G450D_loop+0x770>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001884 <I3G450D_loop+0x778>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <I3G450D_loop+0x780>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <I3G450D_loop+0x774>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001884 <I3G450D_loop+0x778>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <I3G450D_loop+0x784>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <I3G450D_loop+0x788>)
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
							break;
 8001836:	e004      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001838:	bf00      	nop
 800183a:	e002      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001840:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <I3G450D_loop+0x78c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <I3G450D_loop+0x790>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e000      	b.n	8001852 <I3G450D_loop+0x746>
				break;
 8001850:	bf00      	nop

		}
}
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	; 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000208 	.word	0x20000208
 8001860:	200011a8 	.word	0x200011a8
 8001864:	20002148 	.word	0x20002148
 8001868:	66666667 	.word	0x66666667
 800186c:	200001c0 	.word	0x200001c0
 8001870:	200001c4 	.word	0x200001c4
 8001874:	200001c8 	.word	0x200001c8
 8001878:	200001f0 	.word	0x200001f0
 800187c:	200001f4 	.word	0x200001f4
 8001880:	200001f8 	.word	0x200001f8
 8001884:	3d8f5c29 	.word	0x3d8f5c29
 8001888:	200001cc 	.word	0x200001cc
 800188c:	200001d0 	.word	0x200001d0
 8001890:	200001d4 	.word	0x200001d4
 8001894:	200001af 	.word	0x200001af
 8001898:	200001b0 	.word	0x200001b0
 800189c:	20000000 	.word	0x20000000

080018a0 <LIS3DH_readReg>:
static uint8_t accelSpiRxBuf[7];


SPI_HandleTypeDef * LIS3DH_hspi;

uint8_t LIS3DH_readReg(uint8_t lis3dhReg){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]


		uint8_t sendAddr;
		uint8_t readData;

		sendAddr = LIS3DH_READ | lis3dhReg;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	73fb      	strb	r3, [r7, #15]

	    csOn();
 80018b4:	f000 f86c 	bl	8001990 <csOn>

	    HAL_SPI_Transmit(LIS3DH_hspi, &sendAddr, 1, HAL_MAX_DELAY);
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LIS3DH_readReg+0x4c>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	f107 010f 	add.w	r1, r7, #15
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	2201      	movs	r2, #1
 80018c6:	f003 f8dc 	bl	8004a82 <HAL_SPI_Transmit>
	    HAL_SPI_Receive( LIS3DH_hspi, &readData, 1, HAL_MAX_DELAY);
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LIS3DH_readReg+0x4c>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f107 010e 	add.w	r1, r7, #14
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	2201      	movs	r2, #1
 80018d8:	f003 fa0f 	bl	8004cfa <HAL_SPI_Receive>

		csOff();
 80018dc:	f000 f84c 	bl	8001978 <csOff>

		return (readData);
 80018e0:	7bbb      	ldrb	r3, [r7, #14]

}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200030f4 	.word	0x200030f4

080018f0 <LIS3DH_writeReg>:
void LIS3DH_writeReg(uint8_t lis3dhReg, uint8_t lis3dhValue)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	uint8_t sendAddr;
	uint8_t sendData;

	sendAddr = LIS3DH_WRITE | lis3dhReg;
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	73fb      	strb	r3, [r7, #15]
	sendData = lis3dhValue;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	73bb      	strb	r3, [r7, #14]

   csOn();
 8001908:	f000 f842 	bl	8001990 <csOn>

    HAL_SPI_Transmit(LIS3DH_hspi, &sendAddr, 1, HAL_MAX_DELAY);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <LIS3DH_writeReg+0x4c>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f107 010f 	add.w	r1, r7, #15
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001918:	2201      	movs	r2, #1
 800191a:	f003 f8b2 	bl	8004a82 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(LIS3DH_hspi, &sendData, 1, HAL_MAX_DELAY);
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <LIS3DH_writeReg+0x4c>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 010e 	add.w	r1, r7, #14
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	2201      	movs	r2, #1
 800192c:	f003 f8a9 	bl	8004a82 <HAL_SPI_Transmit>

	csOff();
 8001930:	f000 f822 	bl	8001978 <csOff>

	return;
 8001934:	bf00      	nop

}
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200030f4 	.word	0x200030f4

08001940 <Lis3dhInit>:



void Lis3dhInit(SPI_HandleTypeDef *hspi){
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
turn on the device and gather acceleration data, select the HR bit in CTRL_REG4 and the
LPen bit in CTRL_REG1, enable at least one of the axes and select the preferred ODR.*/



	LIS3DH_hspi = hspi;
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <Lis3dhInit+0x34>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef hal_res;

//writs to Ctrl_reg1 to wake it up.
	LIS3DH_writeReg(0x20,0x7);
 800194e:	2107      	movs	r1, #7
 8001950:	2020      	movs	r0, #32
 8001952:	f7ff ffcd 	bl	80018f0 <LIS3DH_writeReg>
	uint8_t ctrl_reg =LIS3DH_readReg(0x20);
 8001956:	2020      	movs	r0, #32
 8001958:	f7ff ffa2 	bl	80018a0 <LIS3DH_readReg>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
	uint8_t who_am_i = LIS3DH_readReg(0x0f);
 8001960:	200f      	movs	r0, #15
 8001962:	f7ff ff9d 	bl	80018a0 <LIS3DH_readReg>
 8001966:	4603      	mov	r3, r0
 8001968:	73bb      	strb	r3, [r7, #14]





}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200030f4 	.word	0x200030f4

08001978 <csOff>:
/* Private APIs */
/** @brief Set SPI Chip select OFF
 * @retval none
 */
void csOff(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSport, CSpin , GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2104      	movs	r1, #4
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <csOff+0x14>)
 8001982:	f002 f983 	bl	8003c8c <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40020c00 	.word	0x40020c00

08001990 <csOn>:

/** @brief Set SPI Chip select ON this accelerometor expects low on cs transmitting
 * @retval none
 */
void csOn(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSport, CSpin , GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2104      	movs	r1, #4
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <csOn+0x14>)
 800199a:	f002 f977 	bl	8003c8c <HAL_GPIO_WritePin>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f001 fa81 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f851 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fab5 	bl	8001f24 <MX_GPIO_Init>
  MX_CRC_Init();
 80019ba:	f000 f8b7 	bl	8001b2c <MX_CRC_Init>
  MX_I2C3_Init();
 80019be:	f000 f8c9 	bl	8001b54 <MX_I2C3_Init>
  MX_SPI5_Init();
 80019c2:	f000 f93d 	bl	8001c40 <MX_SPI5_Init>
  MX_TIM1_Init();
 80019c6:	f000 f971 	bl	8001cac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80019ca:	f000 fa37 	bl	8001e3c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80019ce:	f000 fa89 	bl	8001ee4 <MX_DMA_Init>
  MX_TIM2_Init();
 80019d2:	f000 f9bf 	bl	8001d54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80019d6:	f000 fa5b 	bl	8001e90 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80019da:	f000 f8fb 	bl	8001bd4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 80019de:	f7ff fadb 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <main+0xa8>)
 80019e4:	f000 fd8e 	bl	8002504 <RetargetInit>
  ConsoleInit(&huart1);
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <main+0xa8>)
 80019ea:	f7fe fe7d 	bl	80006e8 <ConsoleInit>
  Lis3dhInit(&hspi3);
 80019ee:	4819      	ldr	r0, [pc, #100]	; (8001a54 <main+0xac>)
 80019f0:	f7ff ffa6 	bl	8001940 <Lis3dhInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80019f8:	230b      	movs	r3, #11
 80019fa:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	71bb      	strb	r3, [r7, #6]
 8001a00:	e01b      	b.n	8001a3a <main+0x92>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	fb12 f303 	smulbb	r3, r2, r3
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	227f      	movs	r2, #127	; 0x7f
 8001a14:	21ff      	movs	r1, #255	; 0xff
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fca8 	bl	800236c <hsl_to_rgb>
 8001a1c:	6038      	str	r0, [r7, #0]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	b2d9      	uxtb	r1, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	79b8      	ldrb	r0, [r7, #6]
 8001a30:	f000 fe42 	bl	80026b8 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	d9e0      	bls.n	8001a02 <main+0x5a>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	3301      	adds	r3, #1
 8001a44:	71fb      	strb	r3, [r7, #7]
	  		//led_render();
	  		// Some delay*/


	  		ConsoleProcess();
 8001a46:	f7fe fe7f 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 8001a4a:	f7ff fb5f 	bl	800110c <I3G450D_loop>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001a4e:	e7d5      	b.n	80019fc <main+0x54>
 8001a50:	200032f4 	.word	0x200032f4
 8001a54:	20003154 	.word	0x20003154

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b094      	sub	sp, #80	; 0x50
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	2230      	movs	r2, #48	; 0x30
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fe46 	bl	80076f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <SystemClock_Config+0xd0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa4:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <SystemClock_Config+0xd0>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <SystemClock_Config+0xd0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ad0:	2360      	movs	r3, #96	; 0x60
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 faad 	bl	8004040 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aec:	f000 fd04 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2302      	movs	r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fd0f 	bl	8004530 <HAL_RCC_ClockConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b18:	f000 fcee 	bl	80024f8 <Error_Handler>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3750      	adds	r7, #80	; 0x50
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000

08001b2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_CRC_Init+0x20>)
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <MX_CRC_Init+0x24>)
 8001b34:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_CRC_Init+0x20>)
 8001b38:	f001 fb63 	bl	8003202 <HAL_CRC_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b42:	f000 fcd9 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200030f8 	.word	0x200030f8
 8001b50:	40023000 	.word	0x40023000

08001b54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_I2C3_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <MX_I2C3_Init+0x7c>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b92:	f002 f895 	bl	8003cc0 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f000 fcac 	bl	80024f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001ba4:	f002 f9d0 	bl	8003f48 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bae:	f000 fca3 	bl	80024f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001bb6:	f002 fa03 	bl	8003fc0 <HAL_I2CEx_ConfigDigitalFilter>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f000 fc9a 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20003100 	.word	0x20003100
 8001bcc:	40005c00 	.word	0x40005c00
 8001bd0:	000186a0 	.word	0x000186a0

08001bd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <MX_SPI3_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_SPI3_Init+0x64>)
 8001c26:	f002 fea3 	bl	8004970 <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 fc62 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20003154 	.word	0x20003154
 8001c3c:	40003c00 	.word	0x40003c00

08001c40 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <MX_SPI5_Init+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c50:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c70:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c74:	2218      	movs	r2, #24
 8001c76:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_SPI5_Init+0x64>)
 8001c92:	f002 fe6d 	bl	8004970 <HAL_SPI_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c9c:	f000 fc2c 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200031ac 	.word	0x200031ac
 8001ca8:	40015000 	.word	0x40015000

08001cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <MX_TIM1_Init+0xa4>)
 8001ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf4:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001cf6:	f003 fbe3 	bl	80054c0 <HAL_TIM_Base_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d00:	f000 fbfa 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480e      	ldr	r0, [pc, #56]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001d12:	f003 ff19 	bl	8005b48 <HAL_TIM_ConfigClockSource>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d1c:	f000 fbec 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001d2e:	f004 fb0b 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d38:	f000 fbde 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM1_Init+0xa0>)
 8001d3e:	f000 fec9 	bl	8002ad4 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20003204 	.word	0x20003204
 8001d50:	40010000 	.word	0x40010000

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001d9a:	223b      	movs	r2, #59	; 0x3b
 8001d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001daa:	4823      	ldr	r0, [pc, #140]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001dac:	f003 fb88 	bl	80054c0 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001db6:	f000 fb9f 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001dc8:	f003 febe 	bl	8005b48 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001dd2:	f000 fb91 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dd6:	4818      	ldr	r0, [pc, #96]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001dd8:	f003 fbc1 	bl	800555e <HAL_TIM_PWM_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001de2:	f000 fb89 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001df6:	f004 faa7 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e00:	f000 fb7a 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e04:	2360      	movs	r3, #96	; 0x60
 8001e06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001e1c:	f003 fdd2 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e26:	f000 fb67 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_TIM2_Init+0xe4>)
 8001e2c:	f000 fec2 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000324c 	.word	0x2000324c

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART1_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e74:	f004 faf8 	bl	8006468 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 fb3b 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200032f4 	.word	0x200032f4
 8001e8c:	40011000 	.word	0x40011000

08001e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <MX_USART2_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec8:	f004 face 	bl	8006468 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ed2:	f000 fb11 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20003338 	.word	0x20003338
 8001ee0:	40004400 	.word	0x40004400

08001ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2010      	movs	r0, #16
 8001f0c:	f001 f943 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f10:	2010      	movs	r0, #16
 8001f12:	f001 f95c 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	4bb2      	ldr	r3, [pc, #712]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4ab1      	ldr	r2, [pc, #708]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4baf      	ldr	r3, [pc, #700]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	4bab      	ldr	r3, [pc, #684]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4aaa      	ldr	r2, [pc, #680]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f60:	f043 0320 	orr.w	r3, r3, #32
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	4ba4      	ldr	r3, [pc, #656]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4aa3      	ldr	r2, [pc, #652]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4ba1      	ldr	r3, [pc, #644]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a9c      	ldr	r2, [pc, #624]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b9a      	ldr	r3, [pc, #616]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b96      	ldr	r3, [pc, #600]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a95      	ldr	r2, [pc, #596]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b93      	ldr	r3, [pc, #588]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a8e      	ldr	r2, [pc, #568]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a80      	ldr	r2, [pc, #512]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <MX_GPIO_Init+0x2e4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2116      	movs	r1, #22
 800201e:	487b      	ldr	r0, [pc, #492]	; (800220c <MX_GPIO_Init+0x2e8>)
 8002020:	f001 fe34 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	4879      	ldr	r0, [pc, #484]	; (8002210 <MX_GPIO_Init+0x2ec>)
 800202a:	f001 fe2f 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f243 0104 	movw	r1, #12292	; 0x3004
 8002034:	4877      	ldr	r0, [pc, #476]	; (8002214 <MX_GPIO_Init+0x2f0>)
 8002036:	f001 fe29 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002040:	4875      	ldr	r0, [pc, #468]	; (8002218 <MX_GPIO_Init+0x2f4>)
 8002042:	f001 fe23 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002046:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002058:	230c      	movs	r3, #12
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	486e      	ldr	r0, [pc, #440]	; (800221c <MX_GPIO_Init+0x2f8>)
 8002064:	f001 fc66 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800207a:	230e      	movs	r3, #14
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	4865      	ldr	r0, [pc, #404]	; (800221c <MX_GPIO_Init+0x2f8>)
 8002086:	f001 fc55 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800208a:	2301      	movs	r3, #1
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800209a:	230c      	movs	r3, #12
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a2:	4619      	mov	r1, r3
 80020a4:	4859      	ldr	r0, [pc, #356]	; (800220c <MX_GPIO_Init+0x2e8>)
 80020a6:	f001 fc45 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80020aa:	2316      	movs	r3, #22
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020be:	4619      	mov	r1, r3
 80020c0:	4852      	ldr	r0, [pc, #328]	; (800220c <MX_GPIO_Init+0x2e8>)
 80020c2:	f001 fc37 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80020c6:	2307      	movs	r3, #7
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d8:	4619      	mov	r1, r3
 80020da:	484d      	ldr	r0, [pc, #308]	; (8002210 <MX_GPIO_Init+0x2ec>)
 80020dc:	f001 fc2a 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020e0:	f641 0358 	movw	r3, #6232	; 0x1858
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f2:	230e      	movs	r3, #14
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4844      	ldr	r0, [pc, #272]	; (8002210 <MX_GPIO_Init+0x2ec>)
 80020fe:	f001 fc19 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	483d      	ldr	r0, [pc, #244]	; (8002210 <MX_GPIO_Init+0x2ec>)
 800211a:	f001 fc0b 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800211e:	2320      	movs	r3, #32
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002122:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4836      	ldr	r0, [pc, #216]	; (800220c <MX_GPIO_Init+0x2e8>)
 8002134:	f001 fbfe 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002138:	2303      	movs	r3, #3
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002148:	2309      	movs	r3, #9
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4833      	ldr	r0, [pc, #204]	; (8002220 <MX_GPIO_Init+0x2fc>)
 8002154:	f001 fbee 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002158:	2304      	movs	r3, #4
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	482d      	ldr	r0, [pc, #180]	; (8002220 <MX_GPIO_Init+0x2fc>)
 800216c:	f001 fbe2 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002170:	f248 1333 	movw	r3, #33075	; 0x8133
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002182:	230c      	movs	r3, #12
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	4822      	ldr	r0, [pc, #136]	; (8002218 <MX_GPIO_Init+0x2f4>)
 800218e:	f001 fbd1 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002192:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a4:	230c      	movs	r3, #12
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	481d      	ldr	r0, [pc, #116]	; (8002224 <MX_GPIO_Init+0x300>)
 80021b0:	f001 fbc0 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80021b4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c6:	230e      	movs	r3, #14
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <MX_GPIO_Init+0x2fc>)
 80021d2:	f001 fbaf 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80021d6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80021e8:	230c      	movs	r3, #12
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <MX_GPIO_Init+0x2fc>)
 80021f4:	f001 fb9e 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80021f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	e010      	b.n	8002228 <MX_GPIO_Init+0x304>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40020800 	.word	0x40020800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021800 	.word	0x40021800
 800221c:	40021400 	.word	0x40021400
 8002220:	40020400 	.word	0x40020400
 8002224:	40021000 	.word	0x40021000
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	484a      	ldr	r0, [pc, #296]	; (800235c <MX_GPIO_Init+0x438>)
 8002232:	f001 fb7f 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002236:	f24c 7303 	movw	r3, #50947	; 0xc703
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002248:	230c      	movs	r3, #12
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4843      	ldr	r0, [pc, #268]	; (8002360 <MX_GPIO_Init+0x43c>)
 8002254:	f001 fb6e 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	4619      	mov	r1, r3
 800226c:	483c      	ldr	r0, [pc, #240]	; (8002360 <MX_GPIO_Init+0x43c>)
 800226e:	f001 fb61 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 8002272:	f243 0304 	movw	r3, #12292	; 0x3004
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4835      	ldr	r0, [pc, #212]	; (8002360 <MX_GPIO_Init+0x43c>)
 800228c:	f001 fb52 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002290:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a2:	230e      	movs	r3, #14
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	482d      	ldr	r0, [pc, #180]	; (8002364 <MX_GPIO_Init+0x440>)
 80022ae:	f001 fb41 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80022b2:	23c0      	movs	r3, #192	; 0xc0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022c2:	230e      	movs	r3, #14
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ca:	4619      	mov	r1, r3
 80022cc:	4826      	ldr	r0, [pc, #152]	; (8002368 <MX_GPIO_Init+0x444>)
 80022ce:	f001 fb31 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 80022d2:	2308      	movs	r3, #8
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022e2:	230e      	movs	r3, #14
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	481c      	ldr	r0, [pc, #112]	; (8002360 <MX_GPIO_Init+0x43c>)
 80022ee:	f001 fb21 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80022f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002304:	2309      	movs	r3, #9
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	4619      	mov	r1, r3
 800230e:	4815      	ldr	r0, [pc, #84]	; (8002364 <MX_GPIO_Init+0x440>)
 8002310:	f001 fb10 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002314:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <MX_GPIO_Init+0x440>)
 800232e:	f001 fb01 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002332:	2360      	movs	r3, #96	; 0x60
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002342:	230c      	movs	r3, #12
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_GPIO_Init+0x438>)
 800234e:	f001 faf1 	bl	8003934 <HAL_GPIO_Init>

}
 8002352:	bf00      	nop
 8002354:	3738      	adds	r7, #56	; 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40020400 	.word	0x40020400
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021800 	.word	0x40021800
 8002368:	40020800 	.word	0x40020800

0800236c <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	460b      	mov	r3, r1
 8002378:	71bb      	strb	r3, [r7, #6]
 800237a:	4613      	mov	r3, r2
 800237c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800237e:	797b      	ldrb	r3, [r7, #5]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <hsl_to_rgb+0x1c>
 8002384:	2300      	movs	r3, #0
 8002386:	e0b1      	b.n	80024ec <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002388:	797b      	ldrb	r3, [r7, #5]
 800238a:	b29b      	uxth	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8002392:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db09      	blt.n	80023ae <hsl_to_rgb+0x42>
 800239a:	89bb      	ldrh	r3, [r7, #12]
 800239c:	b29b      	uxth	r3, r3
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	79ba      	ldrb	r2, [r7, #6]
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	121b      	asrs	r3, r3, #8
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	74fb      	strb	r3, [r7, #19]
 80023ac:	e00a      	b.n	80023c4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80023ae:	89bb      	ldrh	r3, [r7, #12]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023b8:	79ba      	ldrb	r2, [r7, #6]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	121b      	asrs	r3, r3, #8
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	0052      	lsls	r2, r2, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80023d4:	897b      	ldrh	r3, [r7, #10]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80023dc:	7d3b      	ldrb	r3, [r7, #20]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80023e8:	897b      	ldrh	r3, [r7, #10]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <hsl_to_rgb+0x9c>
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	7cfa      	ldrb	r2, [r7, #19]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	121b      	asrs	r3, r3, #8
 8002402:	b2db      	uxtb	r3, r3
 8002404:	74bb      	strb	r3, [r7, #18]
 8002406:	e00a      	b.n	800241e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002410:	7cfa      	ldrb	r2, [r7, #19]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	121b      	asrs	r3, r3, #8
 800241a:	b2db      	uxtb	r3, r3
 800241c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	797a      	ldrb	r2, [r7, #5]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	b29b      	uxth	r3, r3
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b04      	cmp	r3, #4
 8002438:	d839      	bhi.n	80024ae <hsl_to_rgb+0x142>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <hsl_to_rgb+0xd4>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002455 	.word	0x08002455
 8002444:	08002467 	.word	0x08002467
 8002448:	08002479 	.word	0x08002479
 800244c:	0800248b 	.word	0x0800248b
 8002450:	0800249d 	.word	0x0800249d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	7cbb      	ldrb	r3, [r7, #18]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	75bb      	strb	r3, [r7, #22]
 8002460:	2300      	movs	r3, #0
 8002462:	757b      	strb	r3, [r7, #21]
 8002464:	e02c      	b.n	80024c0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002466:	7cbb      	ldrb	r3, [r7, #18]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	75fb      	strb	r3, [r7, #23]
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	75bb      	strb	r3, [r7, #22]
 8002472:	2300      	movs	r3, #0
 8002474:	757b      	strb	r3, [r7, #21]
 8002476:	e023      	b.n	80024c0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	75bb      	strb	r3, [r7, #22]
 8002482:	7cbb      	ldrb	r3, [r7, #18]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	757b      	strb	r3, [r7, #21]
 8002488:	e01a      	b.n	80024c0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
 800248e:	7cbb      	ldrb	r3, [r7, #18]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	75bb      	strb	r3, [r7, #22]
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	757b      	strb	r3, [r7, #21]
 800249a:	e011      	b.n	80024c0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800249c:	7cbb      	ldrb	r3, [r7, #18]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	75fb      	strb	r3, [r7, #23]
 80024a2:	2300      	movs	r3, #0
 80024a4:	75bb      	strb	r3, [r7, #22]
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	757b      	strb	r3, [r7, #21]
 80024ac:	e008      	b.n	80024c0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	75fb      	strb	r3, [r7, #23]
 80024b4:	2300      	movs	r3, #0
 80024b6:	75bb      	strb	r3, [r7, #22]
 80024b8:	7cbb      	ldrb	r3, [r7, #18]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	757b      	strb	r3, [r7, #21]
 80024be:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	7c7b      	ldrb	r3, [r7, #17]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	7dbb      	ldrb	r3, [r7, #22]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	7c7b      	ldrb	r3, [r7, #17]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	440b      	add	r3, r1
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	431a      	orrs	r2, r3
 80024de:	7d7b      	ldrb	r3, [r7, #21]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	7c7b      	ldrb	r3, [r7, #17]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	440b      	add	r3, r1
 80024ea:	4313      	orrs	r3, r2
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	e7fe      	b.n	8002500 <Error_Handler+0x8>
	...

08002504 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <RetargetInit+0x28>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <RetargetInit+0x2c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	2300      	movs	r3, #0
 800251a:	2202      	movs	r2, #2
 800251c:	2100      	movs	r1, #0
 800251e:	f005 f90b 	bl	8007738 <setvbuf>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000337c 	.word	0x2000337c
 8002530:	20000010 	.word	0x20000010

08002534 <_isatty>:

int _isatty(int fd) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db04      	blt.n	800254c <_isatty+0x18>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	dc01      	bgt.n	800254c <_isatty+0x18>
    return 1;
 8002548:	2301      	movs	r3, #1
 800254a:	e005      	b.n	8002558 <_isatty+0x24>

  errno = EBADF;
 800254c:	f005 f8aa 	bl	80076a4 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	2209      	movs	r2, #9
 8002554:	601a      	str	r2, [r3, #0]
  return 0;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_write>:

int _write(int fd, char* ptr, int len) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d002      	beq.n	8002578 <_write+0x18>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d111      	bne.n	800259c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <_write+0x54>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	f003 ffbc 	bl	8006502 <HAL_UART_Transmit>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <_write+0x38>
      return len;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	e008      	b.n	80025aa <_write+0x4a>
    else
      return EIO;
 8002598:	2305      	movs	r3, #5
 800259a:	e006      	b.n	80025aa <_write+0x4a>
  }
  errno = EBADF;
 800259c:	f005 f882 	bl	80076a4 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2209      	movs	r2, #9
 80025a4:	601a      	str	r2, [r3, #0]
  return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000337c 	.word	0x2000337c

080025b8 <_close>:

int _close(int fd) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db04      	blt.n	80025d0 <_close+0x18>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	dc01      	bgt.n	80025d0 <_close+0x18>
    return 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e006      	b.n	80025de <_close+0x26>

  errno = EBADF;
 80025d0:	f005 f868 	bl	80076a4 <__errno>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2209      	movs	r2, #9
 80025d8:	601a      	str	r2, [r3, #0]
  return -1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80025f2:	f005 f857 	bl	80076a4 <__errno>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2209      	movs	r2, #9
 80025fa:	601a      	str	r2, [r3, #0]
  return -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_read>:

int _read(int fd, char* ptr, int len) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d110      	bne.n	800263c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <_read+0x4c>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002622:	2201      	movs	r2, #1
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	f003 fffe 	bl	8006626 <HAL_UART_Receive>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <_read+0x30>
      return 1;
 8002634:	2301      	movs	r3, #1
 8002636:	e008      	b.n	800264a <_read+0x42>
    else
      return EIO;
 8002638:	2305      	movs	r3, #5
 800263a:	e006      	b.n	800264a <_read+0x42>
  }
  errno = EBADF;
 800263c:	f005 f832 	bl	80076a4 <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	2209      	movs	r2, #9
 8002644:	601a      	str	r2, [r3, #0]
  return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000337c 	.word	0x2000337c

08002658 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db08      	blt.n	800267a <_fstat+0x22>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	dc05      	bgt.n	800267a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002674:	605a      	str	r2, [r3, #4]
    return 0;
 8002676:	2300      	movs	r3, #0
 8002678:	e005      	b.n	8002686 <_fstat+0x2e>
  }

  errno = EBADF;
 800267a:	f005 f813 	bl	80076a4 <__errno>
 800267e:	4603      	mov	r3, r0
 8002680:	2209      	movs	r2, #9
 8002682:	601a      	str	r2, [r3, #0]
  return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	460a      	mov	r2, r1
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	4613      	mov	r3, r2
 800269c:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	79ba      	ldrb	r2, [r7, #6]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	121b      	asrs	r3, r3, #8
 80026a8:	b2db      	uxtb	r3, r3
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4604      	mov	r4, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71bb      	strb	r3, [r7, #6]
 80026ce:	460b      	mov	r3, r1
 80026d0:	717b      	strb	r3, [r7, #5]
 80026d2:	4613      	mov	r3, r2
 80026d4:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	189c      	adds	r4, r3, r2
 80026de:	797b      	ldrb	r3, [r7, #5]
 80026e0:	21b0      	movs	r1, #176	; 0xb0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ffd3 	bl	800268e <scale8>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <led_set_RGB+0x6c>)
 80026ee:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	3301      	adds	r3, #1
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <led_set_RGB+0x6c>)
 80026fc:	79ba      	ldrb	r2, [r7, #6]
 80026fe:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	1c9c      	adds	r4, r3, #2
 800270a:	793b      	ldrb	r3, [r7, #4]
 800270c:	21f0      	movs	r1, #240	; 0xf0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffbd 	bl	800268e <scale8>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <led_set_RGB+0x6c>)
 800271a:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	20003380 	.word	0x20003380

08002728 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d852      	bhi.n	80027de <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e046      	b.n	80027cc <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	4a37      	ldr	r2, [pc, #220]	; (8002828 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	dd01      	ble.n	8002760 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 800275c:	2126      	movs	r1, #38	; 0x26
 800275e:	e000      	b.n	8002762 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002760:	2113      	movs	r1, #19
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3318      	adds	r3, #24
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002768:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3301      	adds	r3, #1
 8002776:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	dd01      	ble.n	800278e <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 800278a:	2126      	movs	r1, #38	; 0x26
 800278c:	e000      	b.n	8002790 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800278e:	2113      	movs	r1, #19
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3320      	adds	r3, #32
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002796:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	3302      	adds	r3, #2
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dd01      	ble.n	80027bc <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80027b8:	2126      	movs	r1, #38	; 0x26
 80027ba:	e000      	b.n	80027be <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80027bc:	2113      	movs	r1, #19
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3328      	adds	r3, #40	; 0x28
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80027c4:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d9b5      	bls.n	800273e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027da:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80027dc:	e01d      	b.n	800281a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d812      	bhi.n	800280c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80027e6:	2318      	movs	r3, #24
 80027e8:	72fb      	strb	r3, [r7, #11]
 80027ea:	e006      	b.n	80027fa <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80027ec:	7afb      	ldrb	r3, [r7, #11]
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80027f0:	2100      	movs	r1, #0
 80027f2:	54d1      	strb	r1, [r2, r3]
 80027f4:	7afb      	ldrb	r3, [r7, #11]
 80027f6:	3301      	adds	r3, #1
 80027f8:	72fb      	strb	r3, [r7, #11]
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	2b2f      	cmp	r3, #47	; 0x2f
 80027fe:	d9f5      	bls.n	80027ec <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	e006      	b.n	800281a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002812:	2100      	movs	r1, #0
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002816:	f002 fefb 	bl	8005610 <HAL_TIM_PWM_Stop_DMA>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200033c4 	.word	0x200033c4
 8002828:	20003380 	.word	0x20003380
 800282c:	20003394 	.word	0x20003394
 8002830:	2000324c 	.word	0x2000324c

08002834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_MspInit+0x68>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_MspInit+0x68>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_MspInit+0x68>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_MspInit+0x68>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_MspInit+0x68>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_MspInit+0x68>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	2005      	movs	r0, #5
 8002878:	f000 fc8d 	bl	8003196 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800287c:	2005      	movs	r0, #5
 800287e:	f000 fca6 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	2005      	movs	r0, #5
 8002888:	f000 fc85 	bl	8003196 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800288c:	2005      	movs	r0, #5
 800288e:	f000 fc9e 	bl	80031ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <HAL_CRC_MspInit+0x3c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_CRC_MspInit+0x40>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_CRC_MspInit+0x40>)
 80028bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_CRC_MspInit+0x40>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023000 	.word	0x40023000
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <HAL_I2C_MspInit+0xc4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d14b      	bne.n	800299e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a27      	ldr	r2, [pc, #156]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800293e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002950:	2304      	movs	r3, #4
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4815      	ldr	r0, [pc, #84]	; (80029b0 <HAL_I2C_MspInit+0xcc>)
 800295c:	f000 ffea 	bl	8003934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002966:	2312      	movs	r3, #18
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002972:	2304      	movs	r3, #4
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <HAL_I2C_MspInit+0xd0>)
 800297e:	f000 ffd9 	bl	8003934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 800298c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_I2C_MspInit+0xc8>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40005c00 	.word	0x40005c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020000 	.word	0x40020000

080029b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <HAL_SPI_MspInit+0x108>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d13b      	bne.n	8002a52 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a38      	ldr	r2, [pc, #224]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */


    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a40:	2306      	movs	r3, #6
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481f      	ldr	r0, [pc, #124]	; (8002ac8 <HAL_SPI_MspInit+0x110>)
 8002a4c:	f000 ff72 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002a50:	e031      	b.n	8002ab6 <HAL_SPI_MspInit+0xfe>
  else if(hspi->Instance==SPI5)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <HAL_SPI_MspInit+0x114>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d12c      	bne.n	8002ab6 <HAL_SPI_MspInit+0xfe>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a82:	f043 0320 	orr.w	r3, r3, #32
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_SPI_MspInit+0x10c>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a94:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <HAL_SPI_MspInit+0x118>)
 8002ab2:	f000 ff3f 	bl	8003934 <HAL_GPIO_Init>
}
 8002ab6:	bf00      	nop
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40003c00 	.word	0x40003c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40015000 	.word	0x40015000
 8002ad0:	40021400 	.word	0x40021400

08002ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	; (8002ba4 <HAL_TIM_Base_MspInit+0xd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b02:	e04a      	b.n	8002b9a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d145      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b32:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b36:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b66:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b6e:	480f      	ldr	r0, [pc, #60]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b70:	f000 fb64 	bl	800323c <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002b7a:	f7ff fcbd 	bl	80024f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
 8002b84:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_TIM_Base_MspInit+0xd8>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	201c      	movs	r0, #28
 8002b90:	f000 fb01 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b94:	201c      	movs	r0, #28
 8002b96:	f000 fb1a 	bl	80031ce <HAL_NVIC_EnableIRQ>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	20003294 	.word	0x20003294
 8002bb0:	40026088 	.word	0x40026088

08002bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d11d      	bne.n	8002c12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_TIM_MspPostInit+0x68>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_TIM_MspPostInit+0x68>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_TIM_MspPostInit+0x68>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <HAL_TIM_MspPostInit+0x6c>)
 8002c0e:	f000 fe91 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000

08002c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a36      	ldr	r2, [pc, #216]	; (8002d1c <HAL_UART_MspInit+0xf8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d135      	bne.n	8002cb2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c90:	2307      	movs	r3, #7
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4822      	ldr	r0, [pc, #136]	; (8002d24 <HAL_UART_MspInit+0x100>)
 8002c9c:	f000 fe4a 	bl	8003934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2025      	movs	r0, #37	; 0x25
 8002ca6:	f000 fa76 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002caa:	2025      	movs	r0, #37	; 0x25
 8002cac:	f000 fa8f 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cb0:	e030      	b.n	8002d14 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_UART_MspInit+0x104>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d12b      	bne.n	8002d14 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002ce2:	f043 0308 	orr.w	r3, r3, #8
 8002ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_UART_MspInit+0xfc>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cf4:	2360      	movs	r3, #96	; 0x60
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d04:	2307      	movs	r3, #7
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <HAL_UART_MspInit+0x108>)
 8002d10:	f000 fe10 	bl	8003934 <HAL_GPIO_Init>
}
 8002d14:	bf00      	nop
 8002d16:	3730      	adds	r7, #48	; 0x30
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40004400 	.word	0x40004400
 8002d2c:	40020c00 	.word	0x40020c00

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <NMI_Handler+0x4>

08002d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <HardFault_Handler+0x4>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <MemManage_Handler+0x4>

08002d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <BusFault_Handler+0x4>

08002d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <UsageFault_Handler+0x4>

08002d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7c:	f000 f8ec 	bl	8002f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <DMA1_Stream5_IRQHandler+0x10>)
 8002d9a:	f000 fb8f 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20003294 	.word	0x20003294

08002da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <TIM2_IRQHandler+0x10>)
 8002dae:	f002 fd01 	bl	80057b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000324c 	.word	0x2000324c

08002dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <USART1_IRQHandler+0x10>)
 8002dc2:	f003 fd03 	bl	80067cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200032f4 	.word	0x200032f4

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f004 fc50 	bl	80076a4 <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20030000 	.word	0x20030000
 8002e30:	00000400 	.word	0x00000400
 8002e34:	200033c8 	.word	0x200033c8
 8002e38:	200033e0 	.word	0x200033e0

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e66:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e7c:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e8a:	f7ff ffd7 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f004 fc0f 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fe fd89 	bl	80019a8 <main>
  bx  lr    
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002ea4:	08008e50 	.word	0x08008e50
  ldr r2, =_sbss
 8002ea8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002eac:	200033e0 	.word	0x200033e0

08002eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f94f 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f000 f808 	bl	8002ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fca4 	bl	8002834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_InitTick+0x54>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_InitTick+0x58>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f967 	bl	80031ea <HAL_SYSTICK_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00e      	b.n	8002f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d80a      	bhi.n	8002f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f34:	f000 f92f 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f38:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <HAL_InitTick+0x5c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	2000000c 	.word	0x2000000c
 8002f54:	20000008 	.word	0x20000008

08002f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_IncTick+0x20>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_IncTick+0x24>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_IncTick+0x24>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	200033cc 	.word	0x200033cc

08002f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_GetTick+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200033cc 	.word	0x200033cc

08002f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff ffee 	bl	8002f80 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb0:	d005      	beq.n	8002fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_Delay+0x44>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fbe:	bf00      	nop
 8002fc0:	f7ff ffde 	bl	8002f80 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8f7      	bhi.n	8002fc0 <HAL_Delay+0x28>
  {
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff3e 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff8e 	bl	80030d4 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff31 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e00e      	b.n	8003232 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	795b      	ldrb	r3, [r3, #5]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fb3b 	bl	80028a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff fe9a 	bl	8002f80 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e099      	b.n	800338c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003278:	e00f      	b.n	800329a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327a:	f7ff fe81 	bl	8002f80 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b05      	cmp	r3, #5
 8003286:	d908      	bls.n	800329a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e078      	b.n	800338c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e8      	bne.n	800327a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_DMA_Init+0x158>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b04      	cmp	r3, #4
 800332c:	d117      	bne.n	800335e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa7b 	bl	800383c <DMA_CheckFifoParam>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800335a:	2301      	movs	r3, #1
 800335c:	e016      	b.n	800338c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa32 	bl	80037d0 <DMA_CalcBaseAndBitshift>
 800336c:	4603      	mov	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	223f      	movs	r2, #63	; 0x3f
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	f010803f 	.word	0xf010803f

08003398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7ff fdeb 	bl	8002f80 <HAL_GetTick>
 80033aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e052      	b.n	8003470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0216 	bic.w	r2, r2, #22
 80033d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_DMA_Abort+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0208 	bic.w	r2, r2, #8
 8003408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341a:	e013      	b.n	8003444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341c:	f7ff fdb0 	bl	8002f80 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d90c      	bls.n	8003444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e015      	b.n	8003470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e4      	bne.n	800341c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	223f      	movs	r2, #63	; 0x3f
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00c      	b.n	80034b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2205      	movs	r2, #5
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c8:	4b8e      	ldr	r3, [pc, #568]	; (8003704 <HAL_DMA_IRQHandler+0x248>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a8e      	ldr	r2, [pc, #568]	; (8003708 <HAL_DMA_IRQHandler+0x24c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2208      	movs	r2, #8
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2208      	movs	r2, #8
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0202 	orr.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2204      	movs	r2, #4
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2210      	movs	r2, #16
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03c      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2210      	movs	r2, #16
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
 80035ea:	e01f      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e016      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2220      	movs	r2, #32
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808f 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8087 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2220      	movs	r2, #32
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b05      	cmp	r3, #5
 8003664:	d136      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_IRQHandler+0x1da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	223f      	movs	r2, #63	; 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d07e      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
        }
        return;
 80036d2:	e079      	b.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d031      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e02c      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
 8003702:	bf00      	nop
 8003704:	20000004 	.word	0x20000004
 8003708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e01e      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d032      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2205      	movs	r2, #5
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d307      	bcc.n	80037a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f2      	bne.n	8003788 <HAL_DMA_IRQHandler+0x2cc>
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c8:	bf00      	nop
    }
  }
}
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3b10      	subs	r3, #16
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <DMA_CalcBaseAndBitshift+0x64>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <DMA_CalcBaseAndBitshift+0x68>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d909      	bls.n	8003812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	e007      	b.n	8003822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	aaaaaaab 	.word	0xaaaaaaab
 8003838:	08008c9c 	.word	0x08008c9c

0800383c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d856      	bhi.n	800390a <DMA_CheckFifoParam+0xce>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <DMA_CheckFifoParam+0x28>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003887 	.word	0x08003887
 800386c:	08003875 	.word	0x08003875
 8003870:	0800390b 	.word	0x0800390b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d046      	beq.n	800390e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e043      	b.n	800390e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388e:	d140      	bne.n	8003912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e03d      	b.n	8003912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	d121      	bne.n	80038e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d837      	bhi.n	8003916 <DMA_CheckFifoParam+0xda>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x70>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038c3 	.word	0x080038c3
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	080038d5 	.word	0x080038d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e030      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d025      	beq.n	800391a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e022      	b.n	800391a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038dc:	d11f      	bne.n	800391e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038e2:	e01c      	b.n	800391e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d903      	bls.n	80038f2 <DMA_CheckFifoParam+0xb6>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d003      	beq.n	80038f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038f0:	e018      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      break;
 80038f6:	e015      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e00b      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 800390a:	bf00      	nop
 800390c:	e00a      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 800390e:	bf00      	nop
 8003910:	e008      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003912:	bf00      	nop
 8003914:	e006      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;   
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
    }
  } 
  
  return status; 
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e177      	b.n	8003c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	f040 8166 	bne.w	8003c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d005      	beq.n	8003986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	2b02      	cmp	r3, #2
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d017      	beq.n	8003a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d123      	bne.n	8003a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	08da      	lsrs	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3208      	adds	r2, #8
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80c0 	beq.w	8003c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_GPIO_Init+0x324>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a65      	ldr	r2, [pc, #404]	; (8003c58 <HAL_GPIO_Init+0x324>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_GPIO_Init+0x324>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad6:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <HAL_GPIO_Init+0x328>)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_GPIO_Init+0x32c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d037      	beq.n	8003b72 <HAL_GPIO_Init+0x23e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <HAL_GPIO_Init+0x330>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_GPIO_Init+0x23a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a56      	ldr	r2, [pc, #344]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02b      	beq.n	8003b6a <HAL_GPIO_Init+0x236>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a55      	ldr	r2, [pc, #340]	; (8003c6c <HAL_GPIO_Init+0x338>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x232>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a54      	ldr	r2, [pc, #336]	; (8003c70 <HAL_GPIO_Init+0x33c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x22e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a53      	ldr	r2, [pc, #332]	; (8003c74 <HAL_GPIO_Init+0x340>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x22a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_GPIO_Init+0x344>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x226>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a51      	ldr	r2, [pc, #324]	; (8003c7c <HAL_GPIO_Init+0x348>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x222>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a50      	ldr	r2, [pc, #320]	; (8003c80 <HAL_GPIO_Init+0x34c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x21e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4f      	ldr	r2, [pc, #316]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x21a>
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	e012      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b4e:	230a      	movs	r3, #10
 8003b50:	e010      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b52:	2308      	movs	r3, #8
 8003b54:	e00e      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b56:	2307      	movs	r3, #7
 8003b58:	e00c      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	e00a      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b5e:	2305      	movs	r3, #5
 8003b60:	e008      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b62:	2304      	movs	r3, #4
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_Init+0x240>
 8003b72:	2300      	movs	r3, #0
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f002 0203 	and.w	r2, r2, #3
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b84:	4935      	ldr	r1, [pc, #212]	; (8003c5c <HAL_GPIO_Init+0x328>)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bbc:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be0:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be6:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <HAL_GPIO_Init+0x354>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	f67f ae84 	bls.w	8003950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	; 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	40020000 	.word	0x40020000
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	40020c00 	.word	0x40020c00
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40021400 	.word	0x40021400
 8003c78:	40021800 	.word	0x40021800
 8003c7c:	40021c00 	.word	0x40021c00
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40022400 	.word	0x40022400
 8003c88:	40013c00 	.word	0x40013c00

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c9c:	787b      	ldrb	r3, [r7, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca8:	e003      	b.n	8003cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e12b      	b.n	8003f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fdfc 	bl	80028e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d24:	f000 fdfc 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8003d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4a81      	ldr	r2, [pc, #516]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d807      	bhi.n	8003d44 <HAL_I2C_Init+0x84>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a80      	ldr	r2, [pc, #512]	; (8003f38 <HAL_I2C_Init+0x278>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf94      	ite	ls
 8003d3c:	2301      	movls	r3, #1
 8003d3e:	2300      	movhi	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e006      	b.n	8003d52 <HAL_I2C_Init+0x92>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_I2C_Init+0x27c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bf94      	ite	ls
 8003d4c:	2301      	movls	r3, #1
 8003d4e:	2300      	movhi	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0e7      	b.n	8003f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a78      	ldr	r2, [pc, #480]	; (8003f40 <HAL_I2C_Init+0x280>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d802      	bhi.n	8003d94 <HAL_I2C_Init+0xd4>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3301      	adds	r3, #1
 8003d92:	e009      	b.n	8003da8 <HAL_I2C_Init+0xe8>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_I2C_Init+0x284>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	3301      	adds	r3, #1
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	495c      	ldr	r1, [pc, #368]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	d819      	bhi.n	8003dfc <HAL_I2C_Init+0x13c>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e59      	subs	r1, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ddc:	400b      	ands	r3, r1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_I2C_Init+0x138>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1e59      	subs	r1, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	e051      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	e04f      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_I2C_Init+0x168>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	440b      	add	r3, r1
 8003e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e012      	b.n	8003e4e <HAL_I2C_Init+0x18e>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	0099      	lsls	r1, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Init+0x196>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e022      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10e      	bne.n	8003e7c <HAL_I2C_Init+0x1bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1e58      	subs	r0, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	440b      	add	r3, r1
 8003e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	e00f      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	0099      	lsls	r1, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	6809      	ldr	r1, [r1, #0]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6911      	ldr	r1, [r2, #16]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	000186a0 	.word	0x000186a0
 8003f38:	001e847f 	.word	0x001e847f
 8003f3c:	003d08ff 	.word	0x003d08ff
 8003f40:	431bde83 	.word	0x431bde83
 8003f44:	10624dd3 	.word	0x10624dd3

08003f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d129      	bne.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	; 0x24
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0210 	bic.w	r2, r2, #16
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d12a      	bne.n	8004030 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2224      	movs	r2, #36	; 0x24
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	4313      	orrs	r3, r2
 800400a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	89fa      	ldrh	r2, [r7, #14]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e267      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d075      	beq.n	800414a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405e:	4b88      	ldr	r3, [pc, #544]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b04      	cmp	r3, #4
 8004068:	d00c      	beq.n	8004084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b85      	ldr	r3, [pc, #532]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004072:	2b08      	cmp	r3, #8
 8004074:	d112      	bne.n	800409c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004076:	4b82      	ldr	r3, [pc, #520]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05b      	beq.n	8004148 <HAL_RCC_OscConfig+0x108>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d157      	bne.n	8004148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e242      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x74>
 80040a6:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a75      	ldr	r2, [pc, #468]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x98>
 80040be:	4b70      	ldr	r3, [pc, #448]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6f      	ldr	r2, [pc, #444]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6c      	ldr	r2, [pc, #432]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040d8:	4b69      	ldr	r3, [pc, #420]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a68      	ldr	r2, [pc, #416]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a65      	ldr	r2, [pc, #404]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe ff42 	bl	8002f80 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004100:	f7fe ff3e 	bl	8002f80 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e207      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xc0>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe ff2e 	bl	8002f80 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004128:	f7fe ff2a 	bl	8002f80 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1f3      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	4b51      	ldr	r3, [pc, #324]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0xe8>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b44      	ldr	r3, [pc, #272]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x152>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e1c7      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4937      	ldr	r1, [pc, #220]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	e03a      	b.n	800421e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCC_OscConfig+0x244>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fe fee3 	bl	8002f80 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041be:	f7fe fedf 	bl	8002f80 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1a8      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4925      	ldr	r1, [pc, #148]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	e015      	b.n	800421e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_OscConfig+0x244>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe fec2 	bl	8002f80 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004200:	f7fe febe 	bl	8002f80 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e187      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d036      	beq.n	8004298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_RCC_OscConfig+0x248>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7fe fea2 	bl	8002f80 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004240:	f7fe fe9e 	bl	8002f80 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e167      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_OscConfig+0x240>)
 8004254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x200>
 800425e:	e01b      	b.n	8004298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_OscConfig+0x248>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004266:	f7fe fe8b 	bl	8002f80 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426c:	e00e      	b.n	800428c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426e:	f7fe fe87 	bl	8002f80 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d907      	bls.n	800428c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e150      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
 8004280:	40023800 	.word	0x40023800
 8004284:	42470000 	.word	0x42470000
 8004288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ea      	bne.n	800426e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8097 	beq.w	80043d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	4b81      	ldr	r3, [pc, #516]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	4b7d      	ldr	r3, [pc, #500]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a7c      	ldr	r2, [pc, #496]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b7a      	ldr	r3, [pc, #488]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	4b77      	ldr	r3, [pc, #476]	; (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d118      	bne.n	8004314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e2:	4b74      	ldr	r3, [pc, #464]	; (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a73      	ldr	r2, [pc, #460]	; (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ee:	f7fe fe47 	bl	8002f80 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f6:	f7fe fe43 	bl	8002f80 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e10c      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_OscConfig+0x474>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x2ea>
 800431c:	4b64      	ldr	r3, [pc, #400]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4a63      	ldr	r2, [pc, #396]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
 8004328:	e01c      	b.n	8004364 <HAL_RCC_OscConfig+0x324>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b05      	cmp	r3, #5
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x30c>
 8004332:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a5e      	ldr	r2, [pc, #376]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 0304 	orr.w	r3, r3, #4
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a5b      	ldr	r2, [pc, #364]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0x324>
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a57      	ldr	r2, [pc, #348]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	4b55      	ldr	r3, [pc, #340]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4a54      	ldr	r2, [pc, #336]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800435e:	f023 0304 	bic.w	r3, r3, #4
 8004362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe fe08 	bl	8002f80 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fe04 	bl	8002f80 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0cb      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438a:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ee      	beq.n	8004374 <HAL_RCC_OscConfig+0x334>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe fdf2 	bl	8002f80 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fe fdee 	bl	8002f80 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0b5      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ee      	bne.n	80043a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4a38      	ldr	r2, [pc, #224]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a1 	beq.w	8004520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043de:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d05c      	beq.n	80044a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d141      	bne.n	8004476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCC_OscConfig+0x478>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fdc2 	bl	8002f80 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe fdbe 	bl	8002f80 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e087      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	019b      	lsls	r3, r3, #6
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	3b01      	subs	r3, #1
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	491b      	ldr	r1, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x478>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fe fd97 	bl	8002f80 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004456:	f7fe fd93 	bl	8002f80 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e05c      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x416>
 8004474:	e054      	b.n	8004520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCC_OscConfig+0x478>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fe fd80 	bl	8002f80 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe fd7c 	bl	8002f80 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e045      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x444>
 80044a2:	e03d      	b.n	8004520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e038      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <HAL_RCC_OscConfig+0x4ec>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d028      	beq.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d121      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d11a      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d111      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cc      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b68      	ldr	r3, [pc, #416]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d90c      	bls.n	800456c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b63      	ldr	r3, [pc, #396]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0b8      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b59      	ldr	r3, [pc, #356]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a58      	ldr	r2, [pc, #352]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800458e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a52      	ldr	r2, [pc, #328]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b50      	ldr	r3, [pc, #320]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	494d      	ldr	r1, [pc, #308]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d044      	beq.n	8004650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d119      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b3f      	ldr	r3, [pc, #252]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e067      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b37      	ldr	r3, [pc, #220]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4934      	ldr	r1, [pc, #208]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004620:	f7fe fcae 	bl	8002f80 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fe fcaa 	bl	8002f80 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e04f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d20c      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e032      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4916      	ldr	r1, [pc, #88]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	490e      	ldr	r1, [pc, #56]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b6:	f000 f821 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	490a      	ldr	r1, [pc, #40]	; (80046f0 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	5ccb      	ldrb	r3, [r1, r3]
 80046ca:	fa22 f303 	lsr.w	r3, r2, r3
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fc0e 	bl	8002ef8 <HAL_InitTick>

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08008c84 	.word	0x08008c84
 80046f4:	20000004 	.word	0x20000004
 80046f8:	20000008 	.word	0x20000008

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b094      	sub	sp, #80	; 0x50
 8004702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
 8004708:	2300      	movs	r3, #0
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470c:	2300      	movs	r3, #0
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004714:	4b79      	ldr	r3, [pc, #484]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d00d      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x40>
 8004720:	2b08      	cmp	r3, #8
 8004722:	f200 80e1 	bhi.w	80048e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x34>
 800472a:	2b04      	cmp	r3, #4
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x3a>
 800472e:	e0db      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_GetSysClockFreq+0x204>)
 8004732:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004734:	e0db      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004736:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCC_GetSysClockFreq+0x208>)
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473a:	e0d8      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800473c:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004746:	4b6d      	ldr	r3, [pc, #436]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d063      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004752:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	2200      	movs	r2, #0
 800475a:	63bb      	str	r3, [r7, #56]	; 0x38
 800475c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	0159      	lsls	r1, r3, #5
 800477c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004780:	0150      	lsls	r0, r2, #5
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4621      	mov	r1, r4
 8004788:	1a51      	subs	r1, r2, r1
 800478a:	6139      	str	r1, [r7, #16]
 800478c:	4629      	mov	r1, r5
 800478e:	eb63 0301 	sbc.w	r3, r3, r1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a0:	4659      	mov	r1, fp
 80047a2:	018b      	lsls	r3, r1, #6
 80047a4:	4651      	mov	r1, sl
 80047a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047aa:	4651      	mov	r1, sl
 80047ac:	018a      	lsls	r2, r1, #6
 80047ae:	4651      	mov	r1, sl
 80047b0:	ebb2 0801 	subs.w	r8, r2, r1
 80047b4:	4659      	mov	r1, fp
 80047b6:	eb63 0901 	sbc.w	r9, r3, r1
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ce:	4690      	mov	r8, r2
 80047d0:	4699      	mov	r9, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	eb18 0303 	adds.w	r3, r8, r3
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	462b      	mov	r3, r5
 80047dc:	eb49 0303 	adc.w	r3, r9, r3
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047ee:	4629      	mov	r1, r5
 80047f0:	024b      	lsls	r3, r1, #9
 80047f2:	4621      	mov	r1, r4
 80047f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047f8:	4621      	mov	r1, r4
 80047fa:	024a      	lsls	r2, r1, #9
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	2200      	movs	r2, #0
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
 8004806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800480c:	f7fb fd40 	bl	8000290 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4613      	mov	r3, r2
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	e058      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481a:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	099b      	lsrs	r3, r3, #6
 8004820:	2200      	movs	r2, #0
 8004822:	4618      	mov	r0, r3
 8004824:	4611      	mov	r1, r2
 8004826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	2300      	movs	r3, #0
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	0159      	lsls	r1, r3, #5
 8004842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004846:	0150      	lsls	r0, r2, #5
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4641      	mov	r1, r8
 800484e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004852:	4649      	mov	r1, r9
 8004854:	eb63 0b01 	sbc.w	fp, r3, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800486c:	ebb2 040a 	subs.w	r4, r2, sl
 8004870:	eb63 050b 	sbc.w	r5, r3, fp
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	00eb      	lsls	r3, r5, #3
 800487e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004882:	00e2      	lsls	r2, r4, #3
 8004884:	4614      	mov	r4, r2
 8004886:	461d      	mov	r5, r3
 8004888:	4643      	mov	r3, r8
 800488a:	18e3      	adds	r3, r4, r3
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	464b      	mov	r3, r9
 8004890:	eb45 0303 	adc.w	r3, r5, r3
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a2:	4629      	mov	r1, r5
 80048a4:	028b      	lsls	r3, r1, #10
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ac:	4621      	mov	r1, r4
 80048ae:	028a      	lsls	r2, r1, #10
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	61fa      	str	r2, [r7, #28]
 80048bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c0:	f7fb fce6 	bl	8000290 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_GetSysClockFreq+0x200>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	3301      	adds	r3, #1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e6:	e002      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3750      	adds	r7, #80	; 0x50
 80048f4:	46bd      	mov	sp, r7
 80048f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000004 	.word	0x20000004

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004924:	f7ff fff0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0a9b      	lsrs	r3, r3, #10
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4903      	ldr	r1, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	08008c94 	.word	0x08008c94

08004948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800494c:	f7ff ffdc 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	0b5b      	lsrs	r3, r3, #13
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCC_GetPCLK2Freq+0x24>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	08008c94 	.word	0x08008c94

08004970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07b      	b.n	8004a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d108      	bne.n	800499c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004992:	d009      	beq.n	80049a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
 800499a:	e005      	b.n	80049a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fff8 	bl	80029b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	ea42 0103 	orr.w	r1, r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0104 	and.w	r1, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0210 	and.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b088      	sub	sp, #32
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_SPI_Transmit+0x22>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e126      	b.n	8004cf2 <HAL_SPI_Transmit+0x270>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aac:	f7fe fa68 	bl	8002f80 <HAL_GetTick>
 8004ab0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac6:	e10b      	b.n	8004ce0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Transmit+0x52>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad8:	e102      	b.n	8004ce0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2203      	movs	r2, #3
 8004ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d10f      	bne.n	8004b42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d007      	beq.n	8004b60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b68:	d14b      	bne.n	8004c02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0xf6>
 8004b72:	8afb      	ldrh	r3, [r7, #22]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d13e      	bne.n	8004bf6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b9c:	e02b      	b.n	8004bf6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d112      	bne.n	8004bd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	1c9a      	adds	r2, r3, #2
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bd0:	e011      	b.n	8004bf6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd2:	f7fe f9d5 	bl	8002f80 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d803      	bhi.n	8004bea <HAL_SPI_Transmit+0x168>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_Transmit+0x16e>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf4:	e074      	b.n	8004ce0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ce      	bne.n	8004b9e <HAL_SPI_Transmit+0x11c>
 8004c00:	e04c      	b.n	8004c9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_SPI_Transmit+0x18e>
 8004c0a:	8afb      	ldrh	r3, [r7, #22]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d140      	bne.n	8004c92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	7812      	ldrb	r2, [r2, #0]
 8004c1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c36:	e02c      	b.n	8004c92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d113      	bne.n	8004c6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c6c:	e011      	b.n	8004c92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6e:	f7fe f987 	bl	8002f80 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d803      	bhi.n	8004c86 <HAL_SPI_Transmit+0x204>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Transmit+0x20a>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c90:	e026      	b.n	8004ce0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1cd      	bne.n	8004c38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fbcb 	bl	800543c <SPI_EndRxTxTransaction>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e000      	b.n	8004ce0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b088      	sub	sp, #32
 8004cfe:	af02      	add	r7, sp, #8
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d112      	bne.n	8004d3e <HAL_SPI_Receive+0x44>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10e      	bne.n	8004d3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2204      	movs	r2, #4
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f8f1 	bl	8004f1c <HAL_SPI_TransmitReceive>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	e0ea      	b.n	8004f14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_Receive+0x52>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0e3      	b.n	8004f14 <HAL_SPI_Receive+0x21a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d54:	f7fe f914 	bl	8002f80 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
 8004d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d6a:	e0ca      	b.n	8004f02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x7e>
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d7c:	e0c1      	b.n	8004f02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2204      	movs	r2, #4
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d10f      	bne.n	8004de6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004de4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d007      	beq.n	8004e04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d162      	bne.n	8004ed2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e0c:	e02e      	b.n	8004e6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d115      	bne.n	8004e48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f103 020c 	add.w	r2, r3, #12
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e46:	e011      	b.n	8004e6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e48:	f7fe f89a 	bl	8002f80 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d803      	bhi.n	8004e60 <HAL_SPI_Receive+0x166>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5e:	d102      	bne.n	8004e66 <HAL_SPI_Receive+0x16c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e6a:	e04a      	b.n	8004f02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1cb      	bne.n	8004e0e <HAL_SPI_Receive+0x114>
 8004e76:	e031      	b.n	8004edc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d113      	bne.n	8004eae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	b292      	uxth	r2, r2
 8004e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eac:	e011      	b.n	8004ed2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eae:	f7fe f867 	bl	8002f80 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d803      	bhi.n	8004ec6 <HAL_SPI_Receive+0x1cc>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Receive+0x1d2>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ed0:	e017      	b.n	8004f02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1cd      	bne.n	8004e78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa45 	bl	8005370 <SPI_EndRxTransaction>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
 8004efe:	e000      	b.n	8004f02 <HAL_SPI_Receive+0x208>
  }

error :
 8004f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x26>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e18a      	b.n	8005258 <HAL_SPI_TransmitReceive+0x33c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f4a:	f7fe f819 	bl	8002f80 <HAL_GetTick>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d00f      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x70>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d107      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x68>
 8004f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d003      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f8a:	e15b      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0x82>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0x82>
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fa4:	e14e      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d003      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	887a      	ldrh	r2, [r7, #2]
 8004fe2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d007      	beq.n	800500e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d178      	bne.n	800510a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x10a>
 8005020:	8b7b      	ldrh	r3, [r7, #26]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d166      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	881a      	ldrh	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504a:	e053      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d11b      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x176>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x176>
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d113      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	1c9a      	adds	r2, r3, #2
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d119      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x1b8>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d014      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	b292      	uxth	r2, r2
 80050b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d0:	2301      	movs	r3, #1
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050d4:	f7fd ff54 	bl	8002f80 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d807      	bhi.n	80050f4 <HAL_SPI_TransmitReceive+0x1d8>
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ea:	d003      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050f2:	e0a7      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1a6      	bne.n	800504c <HAL_SPI_TransmitReceive+0x130>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1a1      	bne.n	800504c <HAL_SPI_TransmitReceive+0x130>
 8005108:	e07c      	b.n	8005204 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x1fc>
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d16b      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513e:	e057      	b.n	80051f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d11c      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x26c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d017      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x26c>
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d114      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d119      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x2ae>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d014      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c6:	2301      	movs	r3, #1
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ca:	f7fd fed9 	bl	8002f80 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d803      	bhi.n	80051e2 <HAL_SPI_TransmitReceive+0x2c6>
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x2cc>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051ee:	e029      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1a2      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x224>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d19d      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f917 	bl	800543c <SPI_EndRxTxTransaction>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005220:	e010      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	e000      	b.n	8005244 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005242:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005258:	4618      	mov	r0, r3
 800525a:	3730      	adds	r7, #48	; 0x30
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005270:	f7fd fe86 	bl	8002f80 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4413      	add	r3, r2
 800527e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005280:	f7fd fe7e 	bl	8002f80 <HAL_GetTick>
 8005284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	015b      	lsls	r3, r3, #5
 800528c:	0d1b      	lsrs	r3, r3, #20
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	e054      	b.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529e:	d050      	beq.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a0:	f7fd fe6e 	bl	8002f80 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d902      	bls.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d13d      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ce:	d111      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d8:	d004      	beq.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d107      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d10f      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e017      	b.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d19b      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000004 	.word	0x20000004

08005370 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005384:	d111      	bne.n	80053aa <SPI_EndRxTransaction+0x3a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538e:	d004      	beq.n	800539a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005398:	d107      	bne.n	80053aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b2:	d12a      	bne.n	800540a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d012      	beq.n	80053e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2180      	movs	r1, #128	; 0x80
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff ff49 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02d      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e026      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2101      	movs	r1, #1
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff36 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e013      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	2101      	movs	r1, #1
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff ff23 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e000      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005448:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <SPI_EndRxTxTransaction+0x7c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <SPI_EndRxTxTransaction+0x80>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0d5b      	lsrs	r3, r3, #21
 8005454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005466:	d112      	bne.n	800548e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fef4 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e00f      	b.n	80054ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d0f2      	beq.n	800548e <SPI_EndRxTxTransaction+0x52>
 80054a8:	e000      	b.n	80054ac <SPI_EndRxTxTransaction+0x70>
        break;
 80054aa:	bf00      	nop
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000004 	.word	0x20000004
 80054bc:	165e9f81 	.word	0x165e9f81

080054c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e041      	b.n	8005556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd faf4 	bl	8002ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f000 fc12 	bl	8005d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e041      	b.n	80055f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f839 	bl	80055fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 fbc3 	bl	8005d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d855      	bhi.n	80056d0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005661 	.word	0x08005661
 8005630:	080056d1 	.word	0x080056d1
 8005634:	080056d1 	.word	0x080056d1
 8005638:	080056d1 	.word	0x080056d1
 800563c:	0800567d 	.word	0x0800567d
 8005640:	080056d1 	.word	0x080056d1
 8005644:	080056d1 	.word	0x080056d1
 8005648:	080056d1 	.word	0x080056d1
 800564c:	08005699 	.word	0x08005699
 8005650:	080056d1 	.word	0x080056d1
 8005654:	080056d1 	.word	0x080056d1
 8005658:	080056d1 	.word	0x080056d1
 800565c:	080056b5 	.word	0x080056b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800566e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd feff 	bl	8003478 <HAL_DMA_Abort_IT>
      break;
 800567a:	e02c      	b.n	80056d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd fef1 	bl	8003478 <HAL_DMA_Abort_IT>
      break;
 8005696:	e01e      	b.n	80056d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd fee3 	bl	8003478 <HAL_DMA_Abort_IT>
      break;
 80056b2:	e010      	b.n	80056d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fed5 	bl	8003478 <HAL_DMA_Abort_IT>
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d161      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fe09 	bl	80062fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIM_PWM_Stop_DMA+0xee>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005702:	2300      	movs	r3, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d017      	beq.n	8005738 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	f240 4344 	movw	r3, #1092	; 0x444
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	f240 4344 	movw	r3, #1092	; 0x444
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <HAL_TIM_PWM_Stop_DMA+0x168>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005776:	e013      	b.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d104      	bne.n	8005788 <HAL_TIM_PWM_Stop_DMA+0x178>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005786:	e00b      	b.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d104      	bne.n	8005798 <HAL_TIM_PWM_Stop_DMA+0x188>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005796:	e003      	b.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0202 	mvn.w	r2, #2
 80057e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa81 	bl	8005cfe <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa73 	bl	8005cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fc ff8f 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d122      	bne.n	8005864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0204 	mvn.w	r2, #4
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa57 	bl	8005cfe <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa49 	bl	8005cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fc ff65 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0208 	mvn.w	r2, #8
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa2d 	bl	8005cfe <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa1f 	bl	8005cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fc ff3b 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0210 	mvn.w	r2, #16
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2208      	movs	r2, #8
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa03 	bl	8005cfe <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9f5 	bl	8005cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fc ff11 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0201 	mvn.w	r2, #1
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9cf 	bl	8005cd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fd78 	bl	8006454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9c1 	bl	8005d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0220 	mvn.w	r2, #32
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fd42 	bl	8006440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0ae      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	f200 809f 	bhi.w	8005b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005b31 	.word	0x08005b31
 8005a00:	08005b31 	.word	0x08005b31
 8005a04:	08005b31 	.word	0x08005b31
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005b31 	.word	0x08005b31
 8005a10:	08005b31 	.word	0x08005b31
 8005a14:	08005b31 	.word	0x08005b31
 8005a18:	08005aaf 	.word	0x08005aaf
 8005a1c:	08005b31 	.word	0x08005b31
 8005a20:	08005b31 	.word	0x08005b31
 8005a24:	08005b31 	.word	0x08005b31
 8005a28:	08005aef 	.word	0x08005aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa18 	bl	8005e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0204 	bic.w	r2, r2, #4
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	619a      	str	r2, [r3, #24]
      break;
 8005a6a:	e064      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fa68 	bl	8005f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	619a      	str	r2, [r3, #24]
      break;
 8005aac:	e043      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fabd 	bl	8006034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0208 	orr.w	r2, r2, #8
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0204 	bic.w	r2, r2, #4
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	61da      	str	r2, [r3, #28]
      break;
 8005aec:	e023      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb11 	bl	800611c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	021a      	lsls	r2, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	61da      	str	r2, [r3, #28]
      break;
 8005b2e:	e002      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]
      break;
 8005b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIM_ConfigClockSource+0x1c>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e0b4      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x186>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9c:	d03e      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0xd4>
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	f200 8087 	bhi.w	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	f000 8086 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x172>
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d87f      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b70      	cmp	r3, #112	; 0x70
 8005bb6:	d01a      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0xa6>
 8005bb8:	2b70      	cmp	r3, #112	; 0x70
 8005bba:	d87b      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b60      	cmp	r3, #96	; 0x60
 8005bbe:	d050      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x11a>
 8005bc0:	2b60      	cmp	r3, #96	; 0x60
 8005bc2:	d877      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b50      	cmp	r3, #80	; 0x50
 8005bc6:	d03c      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0xfa>
 8005bc8:	2b50      	cmp	r3, #80	; 0x50
 8005bca:	d873      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d058      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x13a>
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d86f      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b30      	cmp	r3, #48	; 0x30
 8005bd6:	d064      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d86b      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d060      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d867      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05c      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d05a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	e062      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6899      	ldr	r1, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f000 fb5d 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	609a      	str	r2, [r3, #8]
      break;
 8005c1a:	e04f      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	6899      	ldr	r1, [r3, #8]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f000 fb46 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c3e:	609a      	str	r2, [r3, #8]
      break;
 8005c40:	e03c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 faba 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2150      	movs	r1, #80	; 0x50
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fb13 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e02c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 fad9 	bl	8006226 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2160      	movs	r1, #96	; 0x60
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fb03 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e01c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f000 fa9a 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 faf3 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005ca0:	e00c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 faea 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005cb2:	e003      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e000      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <TIM_Base_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d46:	d00f      	beq.n	8005d68 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3d      	ldr	r2, [pc, #244]	; (8005e40 <TIM_Base_SetConfig+0x118>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3c      	ldr	r2, [pc, #240]	; (8005e44 <TIM_Base_SetConfig+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3b      	ldr	r2, [pc, #236]	; (8005e48 <TIM_Base_SetConfig+0x120>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3a      	ldr	r2, [pc, #232]	; (8005e4c <TIM_Base_SetConfig+0x124>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d108      	bne.n	8005d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2f      	ldr	r2, [pc, #188]	; (8005e3c <TIM_Base_SetConfig+0x114>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02b      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d027      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2c      	ldr	r2, [pc, #176]	; (8005e40 <TIM_Base_SetConfig+0x118>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d023      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2b      	ldr	r2, [pc, #172]	; (8005e44 <TIM_Base_SetConfig+0x11c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <TIM_Base_SetConfig+0x120>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01b      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <TIM_Base_SetConfig+0x124>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d017      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <TIM_Base_SetConfig+0x128>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <TIM_Base_SetConfig+0x12c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a26      	ldr	r2, [pc, #152]	; (8005e58 <TIM_Base_SetConfig+0x130>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a25      	ldr	r2, [pc, #148]	; (8005e5c <TIM_Base_SetConfig+0x134>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <TIM_Base_SetConfig+0x138>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <TIM_Base_SetConfig+0x13c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d108      	bne.n	8005dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <TIM_Base_SetConfig+0x114>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0xf8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <TIM_Base_SetConfig+0x124>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d103      	bne.n	8005e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	615a      	str	r2, [r3, #20]
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40014400 	.word	0x40014400
 8005e58:	40014800 	.word	0x40014800
 8005e5c:	40001800 	.word	0x40001800
 8005e60:	40001c00 	.word	0x40001c00
 8005e64:	40002000 	.word	0x40002000

08005e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 0302 	bic.w	r3, r3, #2
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a20      	ldr	r2, [pc, #128]	; (8005f40 <TIM_OC1_SetConfig+0xd8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC1_SetConfig+0x64>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <TIM_OC1_SetConfig+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10c      	bne.n	8005ee6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0308 	bic.w	r3, r3, #8
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <TIM_OC1_SetConfig+0xd8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_OC1_SetConfig+0x8e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <TIM_OC1_SetConfig+0xdc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d111      	bne.n	8005f1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	40010000 	.word	0x40010000
 8005f44:	40010400 	.word	0x40010400

08005f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0210 	bic.w	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0320 	bic.w	r3, r3, #32
 8005f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a22      	ldr	r2, [pc, #136]	; (800602c <TIM_OC2_SetConfig+0xe4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x68>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <TIM_OC2_SetConfig+0xe8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a17      	ldr	r2, [pc, #92]	; (800602c <TIM_OC2_SetConfig+0xe4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC2_SetConfig+0x94>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a16      	ldr	r2, [pc, #88]	; (8006030 <TIM_OC2_SetConfig+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d113      	bne.n	8006004 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40010400 	.word	0x40010400

08006034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800607c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <TIM_OC3_SetConfig+0xe0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC3_SetConfig+0x66>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <TIM_OC3_SetConfig+0xe4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10d      	bne.n	80060b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a16      	ldr	r2, [pc, #88]	; (8006114 <TIM_OC3_SetConfig+0xe0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0x92>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a15      	ldr	r2, [pc, #84]	; (8006118 <TIM_OC3_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d113      	bne.n	80060ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40010000 	.word	0x40010000
 8006118:	40010400 	.word	0x40010400

0800611c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <TIM_OC4_SetConfig+0xa4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC4_SetConfig+0x68>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <TIM_OC4_SetConfig+0xa8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d109      	bne.n	8006198 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40010400 	.word	0x40010400

080061c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 030a 	bic.w	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f043 0307 	orr.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2201      	movs	r2, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e05a      	b.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a21      	ldr	r2, [pc, #132]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ac:	d01d      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1a      	ldr	r2, [pc, #104]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a18      	ldr	r2, [pc, #96]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a15      	ldr	r2, [pc, #84]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10c      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40010400 	.word	0x40010400
 8006438:	40014000 	.word	0x40014000
 800643c:	40001800 	.word	0x40001800

08006440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e03f      	b.n	80064fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fc fbc8 	bl	8002c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	; 0x24
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fe81 	bl	80071b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08a      	sub	sp, #40	; 0x28
 8006506:	af02      	add	r7, sp, #8
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b20      	cmp	r3, #32
 8006520:	d17c      	bne.n	800661c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_Transmit+0x2c>
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e075      	b.n	800661e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UART_Transmit+0x3e>
 800653c:	2302      	movs	r3, #2
 800653e:	e06e      	b.n	800661e <HAL_UART_Transmit+0x11c>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2221      	movs	r2, #33	; 0x21
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006556:	f7fc fd13 	bl	8002f80 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d108      	bne.n	8006584 <HAL_UART_Transmit+0x82>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e003      	b.n	800658c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006594:	e02a      	b.n	80065ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fbc1 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e036      	b.n	800661e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	3302      	adds	r3, #2
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e007      	b.n	80065de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1cf      	bne.n	8006596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	2140      	movs	r1, #64	; 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fb91 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08a      	sub	sp, #40	; 0x28
 800662a:	af02      	add	r7, sp, #8
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 808c 	bne.w	8006760 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_UART_Receive+0x2e>
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e084      	b.n	8006762 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_UART_Receive+0x40>
 8006662:	2302      	movs	r3, #2
 8006664:	e07d      	b.n	8006762 <HAL_UART_Receive+0x13c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	; 0x22
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006682:	f7fc fc7d 	bl	8002f80 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	88fa      	ldrh	r2, [r7, #6]
 8006692:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d108      	bne.n	80066b0 <HAL_UART_Receive+0x8a>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e003      	b.n	80066b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80066c0:	e043      	b.n	800674a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2120      	movs	r1, #32
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fb2b 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e042      	b.n	8006762 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	3302      	adds	r3, #2
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e01f      	b.n	800673c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	d007      	beq.n	8006716 <HAL_UART_Receive+0xf0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_UART_Receive+0xfe>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e008      	b.n	8006736 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	b2da      	uxtb	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1b6      	bne.n	80066c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b20      	cmp	r3, #32
 8006782:	d11d      	bne.n	80067c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_UART_Receive_IT+0x26>
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e016      	b.n	80067c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Receive_IT+0x38>
 800679e:	2302      	movs	r3, #2
 80067a0:	e00f      	b.n	80067c2 <HAL_UART_Receive_IT+0x58>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fb24 	bl	8006e04 <UART_Start_Receive_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0ba      	sub	sp, #232	; 0xe8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800680a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_UART_IRQHandler+0x66>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc07 	bl	800703e <UART_Receive_IT>
      return;
 8006830:	e256      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80de 	beq.w	80069f8 <HAL_UART_IRQHandler+0x22c>
 800683c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80d1 	beq.w	80069f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_UART_IRQHandler+0xae>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <HAL_UART_IRQHandler+0xd2>
 8006886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0202 	orr.w	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_UART_IRQHandler+0xf6>
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_UART_IRQHandler+0x126>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0208 	orr.w	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 81ed 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_UART_IRQHandler+0x14e>
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb92 	bl	800703e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <HAL_UART_IRQHandler+0x17a>
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04f      	beq.n	80069e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa9a 	bl	8006e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d141      	bne.n	80069de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800698a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800699e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1d9      	bne.n	800695a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d013      	beq.n	80069d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	4a7d      	ldr	r2, [pc, #500]	; (8006ba8 <HAL_UART_IRQHandler+0x3dc>)
 80069b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fc fd5c 	bl	8003478 <HAL_DMA_Abort_IT>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	e00e      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f990 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e00a      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f98c 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	e006      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f988 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069f2:	e170      	b.n	8006cd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	bf00      	nop
    return;
 80069f6:	e16e      	b.n	8006cd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 814a 	bne.w	8006c96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8143 	beq.w	8006c96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 813c 	beq.w	8006c96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	f040 80b4 	bne.w	8006bac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8140 	beq.w	8006cda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a62:	429a      	cmp	r2, r3
 8006a64:	f080 8139 	bcs.w	8006cda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	f000 8088 	beq.w	8006b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1d9      	bne.n	8006a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e1      	bne.n	8006aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e3      	bne.n	8006b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b70:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fc fc05 	bl	8003398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f8b6 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ba4:	e099      	b.n	8006cda <HAL_UART_IRQHandler+0x50e>
 8006ba6:	bf00      	nop
 8006ba8:	08006f47 	.word	0x08006f47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 808b 	beq.w	8006cde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8086 	beq.w	8006cde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bf6:	647a      	str	r2, [r7, #68]	; 0x44
 8006bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e3      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	69b9      	ldr	r1, [r7, #24]
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	617b      	str	r3, [r7, #20]
   return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e3      	bne.n	8006c50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f83e 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c94:	e023      	b.n	8006cde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x4ea>
 8006ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f95d 	bl	8006f6e <UART_Transmit_IT>
    return;
 8006cb4:	e014      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x514>
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f99d 	bl	800700e <UART_EndTransmit_IT>
    return;
 8006cd4:	e004      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
    return;
 8006cd6:	bf00      	nop
 8006cd8:	e002      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
      return;
 8006cde:	bf00      	nop
  }
}
 8006ce0:	37e8      	adds	r7, #232	; 0xe8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop

08006ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b090      	sub	sp, #64	; 0x40
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d38:	e050      	b.n	8006ddc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d40:	d04c      	beq.n	8006ddc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d48:	f7fc f91a 	bl	8002f80 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d241      	bcs.n	8006ddc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d78:	637a      	str	r2, [r7, #52]	; 0x34
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dac:	623a      	str	r2, [r7, #32]
 8006dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	69f9      	ldr	r1, [r7, #28]
 8006db2:	6a3a      	ldr	r2, [r7, #32]
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e00f      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d09f      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3740      	adds	r7, #64	; 0x40
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2222      	movs	r2, #34	; 0x22
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695a      	ldr	r2, [r3, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0220 	orr.w	r2, r2, #32
 8006e70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ea8:	643a      	str	r2, [r7, #64]	; 0x40
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f023 0301 	bic.w	r3, r3, #1
 8006ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3314      	adds	r3, #20
 8006eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d119      	bne.n	8006f2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f023 0310 	bic.w	r3, r3, #16
 8006f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f18:	61ba      	str	r2, [r7, #24]
 8006f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6979      	ldr	r1, [r7, #20]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	613b      	str	r3, [r7, #16]
   return(result);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f3a:	bf00      	nop
 8006f3c:	3754      	adds	r7, #84	; 0x54
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fecb 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b21      	cmp	r3, #33	; 0x21
 8006f80:	d13e      	bne.n	8007000 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8a:	d114      	bne.n	8006fb6 <UART_Transmit_IT+0x48>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d110      	bne.n	8006fb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	621a      	str	r2, [r3, #32]
 8006fb4:	e008      	b.n	8006fc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6211      	str	r1, [r2, #32]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10f      	bne.n	8006ffc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007000:	2302      	movs	r3, #2
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007024:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fe5a 	bl	8006ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b08c      	sub	sp, #48	; 0x30
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b22      	cmp	r3, #34	; 0x22
 8007050:	f040 80ab 	bne.w	80071aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705c:	d117      	bne.n	800708e <UART_Receive_IT+0x50>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d113      	bne.n	800708e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707c:	b29a      	uxth	r2, r3
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	1c9a      	adds	r2, r3, #2
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	629a      	str	r2, [r3, #40]	; 0x28
 800708c:	e026      	b.n	80070dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a0:	d007      	beq.n	80070b2 <UART_Receive_IT+0x74>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <UART_Receive_IT+0x82>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e008      	b.n	80070d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4619      	mov	r1, r3
 80070ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d15a      	bne.n	80071a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0220 	bic.w	r2, r2, #32
 80070fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800710e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0201 	bic.w	r2, r2, #1
 800711e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	2b01      	cmp	r3, #1
 800712e:	d135      	bne.n	800719c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	330c      	adds	r3, #12
 800713c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	613b      	str	r3, [r7, #16]
   return(result);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f023 0310 	bic.w	r3, r3, #16
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007156:	623a      	str	r2, [r7, #32]
 8007158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	69f9      	ldr	r1, [r7, #28]
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	61bb      	str	r3, [r7, #24]
   return(result);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d10a      	bne.n	800718e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fdbb 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
 800719a:	e002      	b.n	80071a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7f9 fecf 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e002      	b.n	80071ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e000      	b.n	80071ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071aa:	2302      	movs	r3, #2
  }
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3730      	adds	r7, #48	; 0x30
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b8:	b0c0      	sub	sp, #256	; 0x100
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	ea40 0301 	orr.w	r3, r0, r1
 80071dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800720c:	f021 010c 	bic.w	r1, r1, #12
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800721a:	430b      	orrs	r3, r1
 800721c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	6999      	ldr	r1, [r3, #24]
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	ea40 0301 	orr.w	r3, r0, r1
 800723a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b8f      	ldr	r3, [pc, #572]	; (8007480 <UART_SetConfig+0x2cc>)
 8007244:	429a      	cmp	r2, r3
 8007246:	d005      	beq.n	8007254 <UART_SetConfig+0xa0>
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b8d      	ldr	r3, [pc, #564]	; (8007484 <UART_SetConfig+0x2d0>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d104      	bne.n	800725e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007254:	f7fd fb78 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 8007258:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800725c:	e003      	b.n	8007266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800725e:	f7fd fb5f 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8007262:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007270:	f040 810c 	bne.w	800748c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800727e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	1891      	adds	r1, r2, r2
 800728c:	65b9      	str	r1, [r7, #88]	; 0x58
 800728e:	415b      	adcs	r3, r3
 8007290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007296:	4621      	mov	r1, r4
 8007298:	eb12 0801 	adds.w	r8, r2, r1
 800729c:	4629      	mov	r1, r5
 800729e:	eb43 0901 	adc.w	r9, r3, r1
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072b6:	4690      	mov	r8, r2
 80072b8:	4699      	mov	r9, r3
 80072ba:	4623      	mov	r3, r4
 80072bc:	eb18 0303 	adds.w	r3, r8, r3
 80072c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c4:	462b      	mov	r3, r5
 80072c6:	eb49 0303 	adc.w	r3, r9, r3
 80072ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072e2:	460b      	mov	r3, r1
 80072e4:	18db      	adds	r3, r3, r3
 80072e6:	653b      	str	r3, [r7, #80]	; 0x50
 80072e8:	4613      	mov	r3, r2
 80072ea:	eb42 0303 	adc.w	r3, r2, r3
 80072ee:	657b      	str	r3, [r7, #84]	; 0x54
 80072f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072f8:	f7f8 ffca 	bl	8000290 <__aeabi_uldivmod>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <UART_SetConfig+0x2d4>)
 8007302:	fba3 2302 	umull	r2, r3, r3, r2
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	011c      	lsls	r4, r3, #4
 800730a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007314:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	1891      	adds	r1, r2, r2
 8007322:	64b9      	str	r1, [r7, #72]	; 0x48
 8007324:	415b      	adcs	r3, r3
 8007326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800732c:	4641      	mov	r1, r8
 800732e:	eb12 0a01 	adds.w	sl, r2, r1
 8007332:	4649      	mov	r1, r9
 8007334:	eb43 0b01 	adc.w	fp, r3, r1
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800734c:	4692      	mov	sl, r2
 800734e:	469b      	mov	fp, r3
 8007350:	4643      	mov	r3, r8
 8007352:	eb1a 0303 	adds.w	r3, sl, r3
 8007356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800735a:	464b      	mov	r3, r9
 800735c:	eb4b 0303 	adc.w	r3, fp, r3
 8007360:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007370:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007378:	460b      	mov	r3, r1
 800737a:	18db      	adds	r3, r3, r3
 800737c:	643b      	str	r3, [r7, #64]	; 0x40
 800737e:	4613      	mov	r3, r2
 8007380:	eb42 0303 	adc.w	r3, r2, r3
 8007384:	647b      	str	r3, [r7, #68]	; 0x44
 8007386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800738a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800738e:	f7f8 ff7f 	bl	8000290 <__aeabi_uldivmod>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4611      	mov	r1, r2
 8007398:	4b3b      	ldr	r3, [pc, #236]	; (8007488 <UART_SetConfig+0x2d4>)
 800739a:	fba3 2301 	umull	r2, r3, r3, r1
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	2264      	movs	r2, #100	; 0x64
 80073a2:	fb02 f303 	mul.w	r3, r2, r3
 80073a6:	1acb      	subs	r3, r1, r3
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073ae:	4b36      	ldr	r3, [pc, #216]	; (8007488 <UART_SetConfig+0x2d4>)
 80073b0:	fba3 2302 	umull	r2, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073bc:	441c      	add	r4, r3
 80073be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	1891      	adds	r1, r2, r2
 80073d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80073d8:	415b      	adcs	r3, r3
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073e0:	4641      	mov	r1, r8
 80073e2:	1851      	adds	r1, r2, r1
 80073e4:	6339      	str	r1, [r7, #48]	; 0x30
 80073e6:	4649      	mov	r1, r9
 80073e8:	414b      	adcs	r3, r1
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073f8:	4659      	mov	r1, fp
 80073fa:	00cb      	lsls	r3, r1, #3
 80073fc:	4651      	mov	r1, sl
 80073fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007402:	4651      	mov	r1, sl
 8007404:	00ca      	lsls	r2, r1, #3
 8007406:	4610      	mov	r0, r2
 8007408:	4619      	mov	r1, r3
 800740a:	4603      	mov	r3, r0
 800740c:	4642      	mov	r2, r8
 800740e:	189b      	adds	r3, r3, r2
 8007410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007414:	464b      	mov	r3, r9
 8007416:	460a      	mov	r2, r1
 8007418:	eb42 0303 	adc.w	r3, r2, r3
 800741c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800742c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007434:	460b      	mov	r3, r1
 8007436:	18db      	adds	r3, r3, r3
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
 800743a:	4613      	mov	r3, r2
 800743c:	eb42 0303 	adc.w	r3, r2, r3
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800744a:	f7f8 ff21 	bl	8000290 <__aeabi_uldivmod>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <UART_SetConfig+0x2d4>)
 8007454:	fba3 1302 	umull	r1, r3, r3, r2
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	2164      	movs	r1, #100	; 0x64
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	3332      	adds	r3, #50	; 0x32
 8007466:	4a08      	ldr	r2, [pc, #32]	; (8007488 <UART_SetConfig+0x2d4>)
 8007468:	fba2 2303 	umull	r2, r3, r2, r3
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	f003 0207 	and.w	r2, r3, #7
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4422      	add	r2, r4
 800747a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800747c:	e105      	b.n	800768a <UART_SetConfig+0x4d6>
 800747e:	bf00      	nop
 8007480:	40011000 	.word	0x40011000
 8007484:	40011400 	.word	0x40011400
 8007488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800748c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007496:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800749a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800749e:	4642      	mov	r2, r8
 80074a0:	464b      	mov	r3, r9
 80074a2:	1891      	adds	r1, r2, r2
 80074a4:	6239      	str	r1, [r7, #32]
 80074a6:	415b      	adcs	r3, r3
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
 80074aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ae:	4641      	mov	r1, r8
 80074b0:	1854      	adds	r4, r2, r1
 80074b2:	4649      	mov	r1, r9
 80074b4:	eb43 0501 	adc.w	r5, r3, r1
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	00eb      	lsls	r3, r5, #3
 80074c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074c6:	00e2      	lsls	r2, r4, #3
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	4643      	mov	r3, r8
 80074ce:	18e3      	adds	r3, r4, r3
 80074d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074d4:	464b      	mov	r3, r9
 80074d6:	eb45 0303 	adc.w	r3, r5, r3
 80074da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074fa:	4629      	mov	r1, r5
 80074fc:	008b      	lsls	r3, r1, #2
 80074fe:	4621      	mov	r1, r4
 8007500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007504:	4621      	mov	r1, r4
 8007506:	008a      	lsls	r2, r1, #2
 8007508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800750c:	f7f8 fec0 	bl	8000290 <__aeabi_uldivmod>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4b60      	ldr	r3, [pc, #384]	; (8007698 <UART_SetConfig+0x4e4>)
 8007516:	fba3 2302 	umull	r2, r3, r3, r2
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	011c      	lsls	r4, r3, #4
 800751e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007522:	2200      	movs	r2, #0
 8007524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800752c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	1891      	adds	r1, r2, r2
 8007536:	61b9      	str	r1, [r7, #24]
 8007538:	415b      	adcs	r3, r3
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007540:	4641      	mov	r1, r8
 8007542:	1851      	adds	r1, r2, r1
 8007544:	6139      	str	r1, [r7, #16]
 8007546:	4649      	mov	r1, r9
 8007548:	414b      	adcs	r3, r1
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007558:	4659      	mov	r1, fp
 800755a:	00cb      	lsls	r3, r1, #3
 800755c:	4651      	mov	r1, sl
 800755e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007562:	4651      	mov	r1, sl
 8007564:	00ca      	lsls	r2, r1, #3
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	4603      	mov	r3, r0
 800756c:	4642      	mov	r2, r8
 800756e:	189b      	adds	r3, r3, r2
 8007570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007574:	464b      	mov	r3, r9
 8007576:	460a      	mov	r2, r1
 8007578:	eb42 0303 	adc.w	r3, r2, r3
 800757c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	67bb      	str	r3, [r7, #120]	; 0x78
 800758a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007598:	4649      	mov	r1, r9
 800759a:	008b      	lsls	r3, r1, #2
 800759c:	4641      	mov	r1, r8
 800759e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a2:	4641      	mov	r1, r8
 80075a4:	008a      	lsls	r2, r1, #2
 80075a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075aa:	f7f8 fe71 	bl	8000290 <__aeabi_uldivmod>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4b39      	ldr	r3, [pc, #228]	; (8007698 <UART_SetConfig+0x4e4>)
 80075b4:	fba3 1302 	umull	r1, r3, r3, r2
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	2164      	movs	r1, #100	; 0x64
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	3332      	adds	r3, #50	; 0x32
 80075c6:	4a34      	ldr	r2, [pc, #208]	; (8007698 <UART_SetConfig+0x4e4>)
 80075c8:	fba2 2303 	umull	r2, r3, r2, r3
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d2:	441c      	add	r4, r3
 80075d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d8:	2200      	movs	r2, #0
 80075da:	673b      	str	r3, [r7, #112]	; 0x70
 80075dc:	677a      	str	r2, [r7, #116]	; 0x74
 80075de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075e2:	4642      	mov	r2, r8
 80075e4:	464b      	mov	r3, r9
 80075e6:	1891      	adds	r1, r2, r2
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	415b      	adcs	r3, r3
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075f2:	4641      	mov	r1, r8
 80075f4:	1851      	adds	r1, r2, r1
 80075f6:	6039      	str	r1, [r7, #0]
 80075f8:	4649      	mov	r1, r9
 80075fa:	414b      	adcs	r3, r1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800760a:	4659      	mov	r1, fp
 800760c:	00cb      	lsls	r3, r1, #3
 800760e:	4651      	mov	r1, sl
 8007610:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007614:	4651      	mov	r1, sl
 8007616:	00ca      	lsls	r2, r1, #3
 8007618:	4610      	mov	r0, r2
 800761a:	4619      	mov	r1, r3
 800761c:	4603      	mov	r3, r0
 800761e:	4642      	mov	r2, r8
 8007620:	189b      	adds	r3, r3, r2
 8007622:	66bb      	str	r3, [r7, #104]	; 0x68
 8007624:	464b      	mov	r3, r9
 8007626:	460a      	mov	r2, r1
 8007628:	eb42 0303 	adc.w	r3, r2, r3
 800762c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	663b      	str	r3, [r7, #96]	; 0x60
 8007638:	667a      	str	r2, [r7, #100]	; 0x64
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007646:	4649      	mov	r1, r9
 8007648:	008b      	lsls	r3, r1, #2
 800764a:	4641      	mov	r1, r8
 800764c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007650:	4641      	mov	r1, r8
 8007652:	008a      	lsls	r2, r1, #2
 8007654:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007658:	f7f8 fe1a 	bl	8000290 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <UART_SetConfig+0x4e4>)
 8007662:	fba3 1302 	umull	r1, r3, r3, r2
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	2164      	movs	r1, #100	; 0x64
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	3332      	adds	r3, #50	; 0x32
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <UART_SetConfig+0x4e4>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4422      	add	r2, r4
 8007688:	609a      	str	r2, [r3, #8]
}
 800768a:	bf00      	nop
 800768c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007690:	46bd      	mov	sp, r7
 8007692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007696:	bf00      	nop
 8007698:	51eb851f 	.word	0x51eb851f

0800769c <atoi>:
 800769c:	220a      	movs	r2, #10
 800769e:	2100      	movs	r1, #0
 80076a0:	f000 b992 	b.w	80079c8 <strtol>

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000010 	.word	0x20000010

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4d0d      	ldr	r5, [pc, #52]	; (80076e8 <__libc_init_array+0x38>)
 80076b4:	4c0d      	ldr	r4, [pc, #52]	; (80076ec <__libc_init_array+0x3c>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	2600      	movs	r6, #0
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	4d0b      	ldr	r5, [pc, #44]	; (80076f0 <__libc_init_array+0x40>)
 80076c2:	4c0c      	ldr	r4, [pc, #48]	; (80076f4 <__libc_init_array+0x44>)
 80076c4:	f001 f908 	bl	80088d8 <_init>
 80076c8:	1b64      	subs	r4, r4, r5
 80076ca:	10a4      	asrs	r4, r4, #2
 80076cc:	2600      	movs	r6, #0
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	08008e48 	.word	0x08008e48
 80076ec:	08008e48 	.word	0x08008e48
 80076f0:	08008e48 	.word	0x08008e48
 80076f4:	08008e4c 	.word	0x08008e4c

080076f8 <memset>:
 80076f8:	4402      	add	r2, r0
 80076fa:	4603      	mov	r3, r0
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d100      	bne.n	8007702 <memset+0xa>
 8007700:	4770      	bx	lr
 8007702:	f803 1b01 	strb.w	r1, [r3], #1
 8007706:	e7f9      	b.n	80076fc <memset+0x4>

08007708 <iprintf>:
 8007708:	b40f      	push	{r0, r1, r2, r3}
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <iprintf+0x2c>)
 800770c:	b513      	push	{r0, r1, r4, lr}
 800770e:	681c      	ldr	r4, [r3, #0]
 8007710:	b124      	cbz	r4, 800771c <iprintf+0x14>
 8007712:	69a3      	ldr	r3, [r4, #24]
 8007714:	b913      	cbnz	r3, 800771c <iprintf+0x14>
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fa7a 	bl	8007c10 <__sinit>
 800771c:	ab05      	add	r3, sp, #20
 800771e:	9a04      	ldr	r2, [sp, #16]
 8007720:	68a1      	ldr	r1, [r4, #8]
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fc8b 	bl	8008040 <_vfiprintf_r>
 800772a:	b002      	add	sp, #8
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	b004      	add	sp, #16
 8007732:	4770      	bx	lr
 8007734:	20000010 	.word	0x20000010

08007738 <setvbuf>:
 8007738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800773c:	461d      	mov	r5, r3
 800773e:	4b5d      	ldr	r3, [pc, #372]	; (80078b4 <setvbuf+0x17c>)
 8007740:	681f      	ldr	r7, [r3, #0]
 8007742:	4604      	mov	r4, r0
 8007744:	460e      	mov	r6, r1
 8007746:	4690      	mov	r8, r2
 8007748:	b127      	cbz	r7, 8007754 <setvbuf+0x1c>
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	b913      	cbnz	r3, 8007754 <setvbuf+0x1c>
 800774e:	4638      	mov	r0, r7
 8007750:	f000 fa5e 	bl	8007c10 <__sinit>
 8007754:	4b58      	ldr	r3, [pc, #352]	; (80078b8 <setvbuf+0x180>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d167      	bne.n	800782a <setvbuf+0xf2>
 800775a:	687c      	ldr	r4, [r7, #4]
 800775c:	f1b8 0f02 	cmp.w	r8, #2
 8007760:	d006      	beq.n	8007770 <setvbuf+0x38>
 8007762:	f1b8 0f01 	cmp.w	r8, #1
 8007766:	f200 809f 	bhi.w	80078a8 <setvbuf+0x170>
 800776a:	2d00      	cmp	r5, #0
 800776c:	f2c0 809c 	blt.w	80078a8 <setvbuf+0x170>
 8007770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007772:	07db      	lsls	r3, r3, #31
 8007774:	d405      	bmi.n	8007782 <setvbuf+0x4a>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	0598      	lsls	r0, r3, #22
 800777a:	d402      	bmi.n	8007782 <setvbuf+0x4a>
 800777c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777e:	f000 fae5 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007782:	4621      	mov	r1, r4
 8007784:	4638      	mov	r0, r7
 8007786:	f000 f9af 	bl	8007ae8 <_fflush_r>
 800778a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800778c:	b141      	cbz	r1, 80077a0 <setvbuf+0x68>
 800778e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007792:	4299      	cmp	r1, r3
 8007794:	d002      	beq.n	800779c <setvbuf+0x64>
 8007796:	4638      	mov	r0, r7
 8007798:	f000 fb48 	bl	8007e2c <_free_r>
 800779c:	2300      	movs	r3, #0
 800779e:	6363      	str	r3, [r4, #52]	; 0x34
 80077a0:	2300      	movs	r3, #0
 80077a2:	61a3      	str	r3, [r4, #24]
 80077a4:	6063      	str	r3, [r4, #4]
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	0619      	lsls	r1, r3, #24
 80077aa:	d503      	bpl.n	80077b4 <setvbuf+0x7c>
 80077ac:	6921      	ldr	r1, [r4, #16]
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 fb3c 	bl	8007e2c <_free_r>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	f1b8 0f02 	cmp.w	r8, #2
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	d06c      	beq.n	80078a0 <setvbuf+0x168>
 80077c6:	ab01      	add	r3, sp, #4
 80077c8:	466a      	mov	r2, sp
 80077ca:	4621      	mov	r1, r4
 80077cc:	4638      	mov	r0, r7
 80077ce:	f000 fabf 	bl	8007d50 <__swhatbuf_r>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	4318      	orrs	r0, r3
 80077d6:	81a0      	strh	r0, [r4, #12]
 80077d8:	2d00      	cmp	r5, #0
 80077da:	d130      	bne.n	800783e <setvbuf+0x106>
 80077dc:	9d00      	ldr	r5, [sp, #0]
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fb1c 	bl	8007e1c <malloc>
 80077e4:	4606      	mov	r6, r0
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d155      	bne.n	8007896 <setvbuf+0x15e>
 80077ea:	f8dd 9000 	ldr.w	r9, [sp]
 80077ee:	45a9      	cmp	r9, r5
 80077f0:	d14a      	bne.n	8007888 <setvbuf+0x150>
 80077f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80077f6:	2200      	movs	r2, #0
 80077f8:	60a2      	str	r2, [r4, #8]
 80077fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	6122      	str	r2, [r4, #16]
 8007802:	2201      	movs	r2, #1
 8007804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007808:	6162      	str	r2, [r4, #20]
 800780a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	07d2      	lsls	r2, r2, #31
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	d405      	bmi.n	8007822 <setvbuf+0xea>
 8007816:	f413 7f00 	tst.w	r3, #512	; 0x200
 800781a:	d102      	bne.n	8007822 <setvbuf+0xea>
 800781c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781e:	f000 fa96 	bl	8007d4e <__retarget_lock_release_recursive>
 8007822:	4628      	mov	r0, r5
 8007824:	b003      	add	sp, #12
 8007826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800782a:	4b24      	ldr	r3, [pc, #144]	; (80078bc <setvbuf+0x184>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d101      	bne.n	8007834 <setvbuf+0xfc>
 8007830:	68bc      	ldr	r4, [r7, #8]
 8007832:	e793      	b.n	800775c <setvbuf+0x24>
 8007834:	4b22      	ldr	r3, [pc, #136]	; (80078c0 <setvbuf+0x188>)
 8007836:	429c      	cmp	r4, r3
 8007838:	bf08      	it	eq
 800783a:	68fc      	ldreq	r4, [r7, #12]
 800783c:	e78e      	b.n	800775c <setvbuf+0x24>
 800783e:	2e00      	cmp	r6, #0
 8007840:	d0cd      	beq.n	80077de <setvbuf+0xa6>
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	b913      	cbnz	r3, 800784c <setvbuf+0x114>
 8007846:	4638      	mov	r0, r7
 8007848:	f000 f9e2 	bl	8007c10 <__sinit>
 800784c:	f1b8 0f01 	cmp.w	r8, #1
 8007850:	bf08      	it	eq
 8007852:	89a3      	ldrheq	r3, [r4, #12]
 8007854:	6026      	str	r6, [r4, #0]
 8007856:	bf04      	itt	eq
 8007858:	f043 0301 	orreq.w	r3, r3, #1
 800785c:	81a3      	strheq	r3, [r4, #12]
 800785e:	89a2      	ldrh	r2, [r4, #12]
 8007860:	f012 0308 	ands.w	r3, r2, #8
 8007864:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007868:	d01c      	beq.n	80078a4 <setvbuf+0x16c>
 800786a:	07d3      	lsls	r3, r2, #31
 800786c:	bf41      	itttt	mi
 800786e:	2300      	movmi	r3, #0
 8007870:	426d      	negmi	r5, r5
 8007872:	60a3      	strmi	r3, [r4, #8]
 8007874:	61a5      	strmi	r5, [r4, #24]
 8007876:	bf58      	it	pl
 8007878:	60a5      	strpl	r5, [r4, #8]
 800787a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800787c:	f015 0501 	ands.w	r5, r5, #1
 8007880:	d115      	bne.n	80078ae <setvbuf+0x176>
 8007882:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007886:	e7c8      	b.n	800781a <setvbuf+0xe2>
 8007888:	4648      	mov	r0, r9
 800788a:	f000 fac7 	bl	8007e1c <malloc>
 800788e:	4606      	mov	r6, r0
 8007890:	2800      	cmp	r0, #0
 8007892:	d0ae      	beq.n	80077f2 <setvbuf+0xba>
 8007894:	464d      	mov	r5, r9
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	e7d0      	b.n	8007842 <setvbuf+0x10a>
 80078a0:	2500      	movs	r5, #0
 80078a2:	e7a8      	b.n	80077f6 <setvbuf+0xbe>
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	e7e8      	b.n	800787a <setvbuf+0x142>
 80078a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078ac:	e7b9      	b.n	8007822 <setvbuf+0xea>
 80078ae:	2500      	movs	r5, #0
 80078b0:	e7b7      	b.n	8007822 <setvbuf+0xea>
 80078b2:	bf00      	nop
 80078b4:	20000010 	.word	0x20000010
 80078b8:	08008dcc 	.word	0x08008dcc
 80078bc:	08008dec 	.word	0x08008dec
 80078c0:	08008dac 	.word	0x08008dac

080078c4 <_strtol_l.constprop.0>:
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ca:	d001      	beq.n	80078d0 <_strtol_l.constprop.0+0xc>
 80078cc:	2b24      	cmp	r3, #36	; 0x24
 80078ce:	d906      	bls.n	80078de <_strtol_l.constprop.0+0x1a>
 80078d0:	f7ff fee8 	bl	80076a4 <__errno>
 80078d4:	2316      	movs	r3, #22
 80078d6:	6003      	str	r3, [r0, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079c4 <_strtol_l.constprop.0+0x100>
 80078e2:	460d      	mov	r5, r1
 80078e4:	462e      	mov	r6, r5
 80078e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 80078ee:	f017 0708 	ands.w	r7, r7, #8
 80078f2:	d1f7      	bne.n	80078e4 <_strtol_l.constprop.0+0x20>
 80078f4:	2c2d      	cmp	r4, #45	; 0x2d
 80078f6:	d132      	bne.n	800795e <_strtol_l.constprop.0+0x9a>
 80078f8:	782c      	ldrb	r4, [r5, #0]
 80078fa:	2701      	movs	r7, #1
 80078fc:	1cb5      	adds	r5, r6, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d05b      	beq.n	80079ba <_strtol_l.constprop.0+0xf6>
 8007902:	2b10      	cmp	r3, #16
 8007904:	d109      	bne.n	800791a <_strtol_l.constprop.0+0x56>
 8007906:	2c30      	cmp	r4, #48	; 0x30
 8007908:	d107      	bne.n	800791a <_strtol_l.constprop.0+0x56>
 800790a:	782c      	ldrb	r4, [r5, #0]
 800790c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007910:	2c58      	cmp	r4, #88	; 0x58
 8007912:	d14d      	bne.n	80079b0 <_strtol_l.constprop.0+0xec>
 8007914:	786c      	ldrb	r4, [r5, #1]
 8007916:	2310      	movs	r3, #16
 8007918:	3502      	adds	r5, #2
 800791a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800791e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007922:	f04f 0c00 	mov.w	ip, #0
 8007926:	fbb8 f9f3 	udiv	r9, r8, r3
 800792a:	4666      	mov	r6, ip
 800792c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007930:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007934:	f1be 0f09 	cmp.w	lr, #9
 8007938:	d816      	bhi.n	8007968 <_strtol_l.constprop.0+0xa4>
 800793a:	4674      	mov	r4, lr
 800793c:	42a3      	cmp	r3, r4
 800793e:	dd24      	ble.n	800798a <_strtol_l.constprop.0+0xc6>
 8007940:	f1bc 0f00 	cmp.w	ip, #0
 8007944:	db1e      	blt.n	8007984 <_strtol_l.constprop.0+0xc0>
 8007946:	45b1      	cmp	r9, r6
 8007948:	d31c      	bcc.n	8007984 <_strtol_l.constprop.0+0xc0>
 800794a:	d101      	bne.n	8007950 <_strtol_l.constprop.0+0x8c>
 800794c:	45a2      	cmp	sl, r4
 800794e:	db19      	blt.n	8007984 <_strtol_l.constprop.0+0xc0>
 8007950:	fb06 4603 	mla	r6, r6, r3, r4
 8007954:	f04f 0c01 	mov.w	ip, #1
 8007958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800795c:	e7e8      	b.n	8007930 <_strtol_l.constprop.0+0x6c>
 800795e:	2c2b      	cmp	r4, #43	; 0x2b
 8007960:	bf04      	itt	eq
 8007962:	782c      	ldrbeq	r4, [r5, #0]
 8007964:	1cb5      	addeq	r5, r6, #2
 8007966:	e7ca      	b.n	80078fe <_strtol_l.constprop.0+0x3a>
 8007968:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800796c:	f1be 0f19 	cmp.w	lr, #25
 8007970:	d801      	bhi.n	8007976 <_strtol_l.constprop.0+0xb2>
 8007972:	3c37      	subs	r4, #55	; 0x37
 8007974:	e7e2      	b.n	800793c <_strtol_l.constprop.0+0x78>
 8007976:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800797a:	f1be 0f19 	cmp.w	lr, #25
 800797e:	d804      	bhi.n	800798a <_strtol_l.constprop.0+0xc6>
 8007980:	3c57      	subs	r4, #87	; 0x57
 8007982:	e7db      	b.n	800793c <_strtol_l.constprop.0+0x78>
 8007984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007988:	e7e6      	b.n	8007958 <_strtol_l.constprop.0+0x94>
 800798a:	f1bc 0f00 	cmp.w	ip, #0
 800798e:	da05      	bge.n	800799c <_strtol_l.constprop.0+0xd8>
 8007990:	2322      	movs	r3, #34	; 0x22
 8007992:	6003      	str	r3, [r0, #0]
 8007994:	4646      	mov	r6, r8
 8007996:	b942      	cbnz	r2, 80079aa <_strtol_l.constprop.0+0xe6>
 8007998:	4630      	mov	r0, r6
 800799a:	e79e      	b.n	80078da <_strtol_l.constprop.0+0x16>
 800799c:	b107      	cbz	r7, 80079a0 <_strtol_l.constprop.0+0xdc>
 800799e:	4276      	negs	r6, r6
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d0f9      	beq.n	8007998 <_strtol_l.constprop.0+0xd4>
 80079a4:	f1bc 0f00 	cmp.w	ip, #0
 80079a8:	d000      	beq.n	80079ac <_strtol_l.constprop.0+0xe8>
 80079aa:	1e69      	subs	r1, r5, #1
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	e7f3      	b.n	8007998 <_strtol_l.constprop.0+0xd4>
 80079b0:	2430      	movs	r4, #48	; 0x30
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1b1      	bne.n	800791a <_strtol_l.constprop.0+0x56>
 80079b6:	2308      	movs	r3, #8
 80079b8:	e7af      	b.n	800791a <_strtol_l.constprop.0+0x56>
 80079ba:	2c30      	cmp	r4, #48	; 0x30
 80079bc:	d0a5      	beq.n	800790a <_strtol_l.constprop.0+0x46>
 80079be:	230a      	movs	r3, #10
 80079c0:	e7ab      	b.n	800791a <_strtol_l.constprop.0+0x56>
 80079c2:	bf00      	nop
 80079c4:	08008ca9 	.word	0x08008ca9

080079c8 <strtol>:
 80079c8:	4613      	mov	r3, r2
 80079ca:	460a      	mov	r2, r1
 80079cc:	4601      	mov	r1, r0
 80079ce:	4802      	ldr	r0, [pc, #8]	; (80079d8 <strtol+0x10>)
 80079d0:	6800      	ldr	r0, [r0, #0]
 80079d2:	f7ff bf77 	b.w	80078c4 <_strtol_l.constprop.0>
 80079d6:	bf00      	nop
 80079d8:	20000010 	.word	0x20000010

080079dc <__sflush_r>:
 80079dc:	898a      	ldrh	r2, [r1, #12]
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	0710      	lsls	r0, r2, #28
 80079e6:	460c      	mov	r4, r1
 80079e8:	d458      	bmi.n	8007a9c <__sflush_r+0xc0>
 80079ea:	684b      	ldr	r3, [r1, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc05      	bgt.n	80079fc <__sflush_r+0x20>
 80079f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc02      	bgt.n	80079fc <__sflush_r+0x20>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d0f9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a08:	682f      	ldr	r7, [r5, #0]
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	d032      	beq.n	8007a74 <__sflush_r+0x98>
 8007a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	075a      	lsls	r2, r3, #29
 8007a14:	d505      	bpl.n	8007a22 <__sflush_r+0x46>
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	1ac0      	subs	r0, r0, r3
 8007a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a1c:	b10b      	cbz	r3, 8007a22 <__sflush_r+0x46>
 8007a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a20:	1ac0      	subs	r0, r0, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	4602      	mov	r2, r0
 8007a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a28:	6a21      	ldr	r1, [r4, #32]
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b0      	blx	r6
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	d106      	bne.n	8007a42 <__sflush_r+0x66>
 8007a34:	6829      	ldr	r1, [r5, #0]
 8007a36:	291d      	cmp	r1, #29
 8007a38:	d82c      	bhi.n	8007a94 <__sflush_r+0xb8>
 8007a3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ae4 <__sflush_r+0x108>)
 8007a3c:	40ca      	lsrs	r2, r1
 8007a3e:	07d6      	lsls	r6, r2, #31
 8007a40:	d528      	bpl.n	8007a94 <__sflush_r+0xb8>
 8007a42:	2200      	movs	r2, #0
 8007a44:	6062      	str	r2, [r4, #4]
 8007a46:	04d9      	lsls	r1, r3, #19
 8007a48:	6922      	ldr	r2, [r4, #16]
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	d504      	bpl.n	8007a58 <__sflush_r+0x7c>
 8007a4e:	1c42      	adds	r2, r0, #1
 8007a50:	d101      	bne.n	8007a56 <__sflush_r+0x7a>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b903      	cbnz	r3, 8007a58 <__sflush_r+0x7c>
 8007a56:	6560      	str	r0, [r4, #84]	; 0x54
 8007a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5a:	602f      	str	r7, [r5, #0]
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d0ca      	beq.n	80079f6 <__sflush_r+0x1a>
 8007a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a64:	4299      	cmp	r1, r3
 8007a66:	d002      	beq.n	8007a6e <__sflush_r+0x92>
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f9df 	bl	8007e2c <_free_r>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	6360      	str	r0, [r4, #52]	; 0x34
 8007a72:	e7c1      	b.n	80079f8 <__sflush_r+0x1c>
 8007a74:	6a21      	ldr	r1, [r4, #32]
 8007a76:	2301      	movs	r3, #1
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b0      	blx	r6
 8007a7c:	1c41      	adds	r1, r0, #1
 8007a7e:	d1c7      	bne.n	8007a10 <__sflush_r+0x34>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0c4      	beq.n	8007a10 <__sflush_r+0x34>
 8007a86:	2b1d      	cmp	r3, #29
 8007a88:	d001      	beq.n	8007a8e <__sflush_r+0xb2>
 8007a8a:	2b16      	cmp	r3, #22
 8007a8c:	d101      	bne.n	8007a92 <__sflush_r+0xb6>
 8007a8e:	602f      	str	r7, [r5, #0]
 8007a90:	e7b1      	b.n	80079f6 <__sflush_r+0x1a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e7ad      	b.n	80079f8 <__sflush_r+0x1c>
 8007a9c:	690f      	ldr	r7, [r1, #16]
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	d0a9      	beq.n	80079f6 <__sflush_r+0x1a>
 8007aa2:	0793      	lsls	r3, r2, #30
 8007aa4:	680e      	ldr	r6, [r1, #0]
 8007aa6:	bf08      	it	eq
 8007aa8:	694b      	ldreq	r3, [r1, #20]
 8007aaa:	600f      	str	r7, [r1, #0]
 8007aac:	bf18      	it	ne
 8007aae:	2300      	movne	r3, #0
 8007ab0:	eba6 0807 	sub.w	r8, r6, r7
 8007ab4:	608b      	str	r3, [r1, #8]
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	dd9c      	ble.n	80079f6 <__sflush_r+0x1a>
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b0      	blx	r6
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	dc06      	bgt.n	8007ada <__sflush_r+0xfe>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad8:	e78e      	b.n	80079f8 <__sflush_r+0x1c>
 8007ada:	4407      	add	r7, r0
 8007adc:	eba8 0800 	sub.w	r8, r8, r0
 8007ae0:	e7e9      	b.n	8007ab6 <__sflush_r+0xda>
 8007ae2:	bf00      	nop
 8007ae4:	20400001 	.word	0x20400001

08007ae8 <_fflush_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	690b      	ldr	r3, [r1, #16]
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b913      	cbnz	r3, 8007af8 <_fflush_r+0x10>
 8007af2:	2500      	movs	r5, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	b118      	cbz	r0, 8007b02 <_fflush_r+0x1a>
 8007afa:	6983      	ldr	r3, [r0, #24]
 8007afc:	b90b      	cbnz	r3, 8007b02 <_fflush_r+0x1a>
 8007afe:	f000 f887 	bl	8007c10 <__sinit>
 8007b02:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <_fflush_r+0x6c>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	d11b      	bne.n	8007b40 <_fflush_r+0x58>
 8007b08:	686c      	ldr	r4, [r5, #4]
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0ef      	beq.n	8007af2 <_fflush_r+0xa>
 8007b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b14:	07d0      	lsls	r0, r2, #31
 8007b16:	d404      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b18:	0599      	lsls	r1, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f915 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	4621      	mov	r1, r4
 8007b26:	f7ff ff59 	bl	80079dc <__sflush_r>
 8007b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b2c:	07da      	lsls	r2, r3, #31
 8007b2e:	4605      	mov	r5, r0
 8007b30:	d4e0      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	059b      	lsls	r3, r3, #22
 8007b36:	d4dd      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b3a:	f000 f908 	bl	8007d4e <__retarget_lock_release_recursive>
 8007b3e:	e7d9      	b.n	8007af4 <_fflush_r+0xc>
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <_fflush_r+0x70>)
 8007b42:	429c      	cmp	r4, r3
 8007b44:	d101      	bne.n	8007b4a <_fflush_r+0x62>
 8007b46:	68ac      	ldr	r4, [r5, #8]
 8007b48:	e7df      	b.n	8007b0a <_fflush_r+0x22>
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <_fflush_r+0x74>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	bf08      	it	eq
 8007b50:	68ec      	ldreq	r4, [r5, #12]
 8007b52:	e7da      	b.n	8007b0a <_fflush_r+0x22>
 8007b54:	08008dcc 	.word	0x08008dcc
 8007b58:	08008dec 	.word	0x08008dec
 8007b5c:	08008dac 	.word	0x08008dac

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	; 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	; 0x5c
 8007b7e:	f7ff fdbb 	bl	80076f8 <memset>
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x38>)
 8007b84:	6263      	str	r3, [r4, #36]	; 0x24
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x3c>)
 8007b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x40>)
 8007b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <std+0x44>)
 8007b90:	6224      	str	r4, [r4, #32]
 8007b92:	6323      	str	r3, [r4, #48]	; 0x30
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	bf00      	nop
 8007b98:	080085e9 	.word	0x080085e9
 8007b9c:	0800860b 	.word	0x0800860b
 8007ba0:	08008643 	.word	0x08008643
 8007ba4:	08008667 	.word	0x08008667

08007ba8 <_cleanup_r>:
 8007ba8:	4901      	ldr	r1, [pc, #4]	; (8007bb0 <_cleanup_r+0x8>)
 8007baa:	f000 b8af 	b.w	8007d0c <_fwalk_reent>
 8007bae:	bf00      	nop
 8007bb0:	08007ae9 	.word	0x08007ae9

08007bb4 <__sfmoreglue>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	2268      	movs	r2, #104	; 0x68
 8007bb8:	1e4d      	subs	r5, r1, #1
 8007bba:	4355      	muls	r5, r2
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bc2:	f000 f99f 	bl	8007f04 <_malloc_r>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	b140      	cbz	r0, 8007bdc <__sfmoreglue+0x28>
 8007bca:	2100      	movs	r1, #0
 8007bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8007bd0:	300c      	adds	r0, #12
 8007bd2:	60a0      	str	r0, [r4, #8]
 8007bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd8:	f7ff fd8e 	bl	80076f8 <memset>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd70      	pop	{r4, r5, r6, pc}

08007be0 <__sfp_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sfp_lock_acquire+0x8>)
 8007be2:	f000 b8b3 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	200033d1 	.word	0x200033d1

08007bec <__sfp_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sfp_lock_release+0x8>)
 8007bee:	f000 b8ae 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	200033d1 	.word	0x200033d1

08007bf8 <__sinit_lock_acquire>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__sinit_lock_acquire+0x8>)
 8007bfa:	f000 b8a7 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	200033d2 	.word	0x200033d2

08007c04 <__sinit_lock_release>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__sinit_lock_release+0x8>)
 8007c06:	f000 b8a2 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	200033d2 	.word	0x200033d2

08007c10 <__sinit>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	4604      	mov	r4, r0
 8007c14:	f7ff fff0 	bl	8007bf8 <__sinit_lock_acquire>
 8007c18:	69a3      	ldr	r3, [r4, #24]
 8007c1a:	b11b      	cbz	r3, 8007c24 <__sinit+0x14>
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c20:	f7ff bff0 	b.w	8007c04 <__sinit_lock_release>
 8007c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c28:	6523      	str	r3, [r4, #80]	; 0x50
 8007c2a:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <__sinit+0x68>)
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <__sinit+0x6c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	bf04      	itt	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	61a3      	streq	r3, [r4, #24]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 f820 	bl	8007c80 <__sfp>
 8007c40:	6060      	str	r0, [r4, #4]
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 f81c 	bl	8007c80 <__sfp>
 8007c48:	60a0      	str	r0, [r4, #8]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 f818 	bl	8007c80 <__sfp>
 8007c50:	2200      	movs	r2, #0
 8007c52:	60e0      	str	r0, [r4, #12]
 8007c54:	2104      	movs	r1, #4
 8007c56:	6860      	ldr	r0, [r4, #4]
 8007c58:	f7ff ff82 	bl	8007b60 <std>
 8007c5c:	68a0      	ldr	r0, [r4, #8]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2109      	movs	r1, #9
 8007c62:	f7ff ff7d 	bl	8007b60 <std>
 8007c66:	68e0      	ldr	r0, [r4, #12]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	2112      	movs	r1, #18
 8007c6c:	f7ff ff78 	bl	8007b60 <std>
 8007c70:	2301      	movs	r3, #1
 8007c72:	61a3      	str	r3, [r4, #24]
 8007c74:	e7d2      	b.n	8007c1c <__sinit+0xc>
 8007c76:	bf00      	nop
 8007c78:	08008ca4 	.word	0x08008ca4
 8007c7c:	08007ba9 	.word	0x08007ba9

08007c80 <__sfp>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	4607      	mov	r7, r0
 8007c84:	f7ff ffac 	bl	8007be0 <__sfp_lock_acquire>
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <__sfp+0x84>)
 8007c8a:	681e      	ldr	r6, [r3, #0]
 8007c8c:	69b3      	ldr	r3, [r6, #24]
 8007c8e:	b913      	cbnz	r3, 8007c96 <__sfp+0x16>
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ffbd 	bl	8007c10 <__sinit>
 8007c96:	3648      	adds	r6, #72	; 0x48
 8007c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	d503      	bpl.n	8007ca8 <__sfp+0x28>
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	b30b      	cbz	r3, 8007ce8 <__sfp+0x68>
 8007ca4:	6836      	ldr	r6, [r6, #0]
 8007ca6:	e7f7      	b.n	8007c98 <__sfp+0x18>
 8007ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cac:	b9d5      	cbnz	r5, 8007ce4 <__sfp+0x64>
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <__sfp+0x88>)
 8007cb0:	60e3      	str	r3, [r4, #12]
 8007cb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb8:	f000 f847 	bl	8007d4a <__retarget_lock_init_recursive>
 8007cbc:	f7ff ff96 	bl	8007bec <__sfp_lock_release>
 8007cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc8:	6025      	str	r5, [r4, #0]
 8007cca:	61a5      	str	r5, [r4, #24]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd4:	f7ff fd10 	bl	80076f8 <memset>
 8007cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce4:	3468      	adds	r4, #104	; 0x68
 8007ce6:	e7d9      	b.n	8007c9c <__sfp+0x1c>
 8007ce8:	2104      	movs	r1, #4
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7ff ff62 	bl	8007bb4 <__sfmoreglue>
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	6030      	str	r0, [r6, #0]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1d5      	bne.n	8007ca4 <__sfp+0x24>
 8007cf8:	f7ff ff78 	bl	8007bec <__sfp_lock_release>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	e7ee      	b.n	8007ce0 <__sfp+0x60>
 8007d02:	bf00      	nop
 8007d04:	08008ca4 	.word	0x08008ca4
 8007d08:	ffff0001 	.word	0xffff0001

08007d0c <_fwalk_reent>:
 8007d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4606      	mov	r6, r0
 8007d12:	4688      	mov	r8, r1
 8007d14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d18:	2700      	movs	r7, #0
 8007d1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d22:	d505      	bpl.n	8007d30 <_fwalk_reent+0x24>
 8007d24:	6824      	ldr	r4, [r4, #0]
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d1f7      	bne.n	8007d1a <_fwalk_reent+0xe>
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d907      	bls.n	8007d46 <_fwalk_reent+0x3a>
 8007d36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	d003      	beq.n	8007d46 <_fwalk_reent+0x3a>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	47c0      	blx	r8
 8007d44:	4307      	orrs	r7, r0
 8007d46:	3568      	adds	r5, #104	; 0x68
 8007d48:	e7e9      	b.n	8007d1e <_fwalk_reent+0x12>

08007d4a <__retarget_lock_init_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <__retarget_lock_acquire_recursive>:
 8007d4c:	4770      	bx	lr

08007d4e <__retarget_lock_release_recursive>:
 8007d4e:	4770      	bx	lr

08007d50 <__swhatbuf_r>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	b096      	sub	sp, #88	; 0x58
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	461d      	mov	r5, r3
 8007d60:	da08      	bge.n	8007d74 <__swhatbuf_r+0x24>
 8007d62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	061a      	lsls	r2, r3, #24
 8007d6c:	d410      	bmi.n	8007d90 <__swhatbuf_r+0x40>
 8007d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d72:	e00e      	b.n	8007d92 <__swhatbuf_r+0x42>
 8007d74:	466a      	mov	r2, sp
 8007d76:	f000 fd5d 	bl	8008834 <_fstat_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	dbf1      	blt.n	8007d62 <__swhatbuf_r+0x12>
 8007d7e:	9a01      	ldr	r2, [sp, #4]
 8007d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d88:	425a      	negs	r2, r3
 8007d8a:	415a      	adcs	r2, r3
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	e7ee      	b.n	8007d6e <__swhatbuf_r+0x1e>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	2000      	movs	r0, #0
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	b016      	add	sp, #88	; 0x58
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d9c <__smakebuf_r>:
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da0:	079d      	lsls	r5, r3, #30
 8007da2:	4606      	mov	r6, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d507      	bpl.n	8007db8 <__smakebuf_r+0x1c>
 8007da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	2301      	movs	r3, #1
 8007db2:	6163      	str	r3, [r4, #20]
 8007db4:	b002      	add	sp, #8
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	ab01      	add	r3, sp, #4
 8007dba:	466a      	mov	r2, sp
 8007dbc:	f7ff ffc8 	bl	8007d50 <__swhatbuf_r>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f89d 	bl	8007f04 <_malloc_r>
 8007dca:	b948      	cbnz	r0, 8007de0 <__smakebuf_r+0x44>
 8007dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d4ef      	bmi.n	8007db4 <__smakebuf_r+0x18>
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e7e3      	b.n	8007da8 <__smakebuf_r+0xc>
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <__smakebuf_r+0x7c>)
 8007de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	6020      	str	r0, [r4, #0]
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	6163      	str	r3, [r4, #20]
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	6120      	str	r0, [r4, #16]
 8007df6:	b15b      	cbz	r3, 8007e10 <__smakebuf_r+0x74>
 8007df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 fd2b 	bl	8008858 <_isatty_r>
 8007e02:	b128      	cbz	r0, 8007e10 <__smakebuf_r+0x74>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	89a0      	ldrh	r0, [r4, #12]
 8007e12:	4305      	orrs	r5, r0
 8007e14:	81a5      	strh	r5, [r4, #12]
 8007e16:	e7cd      	b.n	8007db4 <__smakebuf_r+0x18>
 8007e18:	08007ba9 	.word	0x08007ba9

08007e1c <malloc>:
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <malloc+0xc>)
 8007e1e:	4601      	mov	r1, r0
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f000 b86f 	b.w	8007f04 <_malloc_r>
 8007e26:	bf00      	nop
 8007e28:	20000010 	.word	0x20000010

08007e2c <_free_r>:
 8007e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e2e:	2900      	cmp	r1, #0
 8007e30:	d044      	beq.n	8007ebc <_free_r+0x90>
 8007e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e36:	9001      	str	r0, [sp, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e3e:	bfb8      	it	lt
 8007e40:	18e4      	addlt	r4, r4, r3
 8007e42:	f000 fd2b 	bl	800889c <__malloc_lock>
 8007e46:	4a1e      	ldr	r2, [pc, #120]	; (8007ec0 <_free_r+0x94>)
 8007e48:	9801      	ldr	r0, [sp, #4]
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	b933      	cbnz	r3, 8007e5c <_free_r+0x30>
 8007e4e:	6063      	str	r3, [r4, #4]
 8007e50:	6014      	str	r4, [r2, #0]
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e58:	f000 bd26 	b.w	80088a8 <__malloc_unlock>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d908      	bls.n	8007e72 <_free_r+0x46>
 8007e60:	6825      	ldr	r5, [r4, #0]
 8007e62:	1961      	adds	r1, r4, r5
 8007e64:	428b      	cmp	r3, r1
 8007e66:	bf01      	itttt	eq
 8007e68:	6819      	ldreq	r1, [r3, #0]
 8007e6a:	685b      	ldreq	r3, [r3, #4]
 8007e6c:	1949      	addeq	r1, r1, r5
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	e7ed      	b.n	8007e4e <_free_r+0x22>
 8007e72:	461a      	mov	r2, r3
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	b10b      	cbz	r3, 8007e7c <_free_r+0x50>
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d9fa      	bls.n	8007e72 <_free_r+0x46>
 8007e7c:	6811      	ldr	r1, [r2, #0]
 8007e7e:	1855      	adds	r5, r2, r1
 8007e80:	42a5      	cmp	r5, r4
 8007e82:	d10b      	bne.n	8007e9c <_free_r+0x70>
 8007e84:	6824      	ldr	r4, [r4, #0]
 8007e86:	4421      	add	r1, r4
 8007e88:	1854      	adds	r4, r2, r1
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	6011      	str	r1, [r2, #0]
 8007e8e:	d1e0      	bne.n	8007e52 <_free_r+0x26>
 8007e90:	681c      	ldr	r4, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	6053      	str	r3, [r2, #4]
 8007e96:	4421      	add	r1, r4
 8007e98:	6011      	str	r1, [r2, #0]
 8007e9a:	e7da      	b.n	8007e52 <_free_r+0x26>
 8007e9c:	d902      	bls.n	8007ea4 <_free_r+0x78>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	e7d6      	b.n	8007e52 <_free_r+0x26>
 8007ea4:	6825      	ldr	r5, [r4, #0]
 8007ea6:	1961      	adds	r1, r4, r5
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf04      	itt	eq
 8007eac:	6819      	ldreq	r1, [r3, #0]
 8007eae:	685b      	ldreq	r3, [r3, #4]
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	bf04      	itt	eq
 8007eb4:	1949      	addeq	r1, r1, r5
 8007eb6:	6021      	streq	r1, [r4, #0]
 8007eb8:	6054      	str	r4, [r2, #4]
 8007eba:	e7ca      	b.n	8007e52 <_free_r+0x26>
 8007ebc:	b003      	add	sp, #12
 8007ebe:	bd30      	pop	{r4, r5, pc}
 8007ec0:	200033d4 	.word	0x200033d4

08007ec4 <sbrk_aligned>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0e      	ldr	r6, [pc, #56]	; (8007f00 <sbrk_aligned+0x3c>)
 8007ec8:	460c      	mov	r4, r1
 8007eca:	6831      	ldr	r1, [r6, #0]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	b911      	cbnz	r1, 8007ed6 <sbrk_aligned+0x12>
 8007ed0:	f000 fb7a 	bl	80085c8 <_sbrk_r>
 8007ed4:	6030      	str	r0, [r6, #0]
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 fb75 	bl	80085c8 <_sbrk_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d00a      	beq.n	8007ef8 <sbrk_aligned+0x34>
 8007ee2:	1cc4      	adds	r4, r0, #3
 8007ee4:	f024 0403 	bic.w	r4, r4, #3
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d007      	beq.n	8007efc <sbrk_aligned+0x38>
 8007eec:	1a21      	subs	r1, r4, r0
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 fb6a 	bl	80085c8 <_sbrk_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d101      	bne.n	8007efc <sbrk_aligned+0x38>
 8007ef8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007efc:	4620      	mov	r0, r4
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	200033d8 	.word	0x200033d8

08007f04 <_malloc_r>:
 8007f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f08:	1ccd      	adds	r5, r1, #3
 8007f0a:	f025 0503 	bic.w	r5, r5, #3
 8007f0e:	3508      	adds	r5, #8
 8007f10:	2d0c      	cmp	r5, #12
 8007f12:	bf38      	it	cc
 8007f14:	250c      	movcc	r5, #12
 8007f16:	2d00      	cmp	r5, #0
 8007f18:	4607      	mov	r7, r0
 8007f1a:	db01      	blt.n	8007f20 <_malloc_r+0x1c>
 8007f1c:	42a9      	cmp	r1, r5
 8007f1e:	d905      	bls.n	8007f2c <_malloc_r+0x28>
 8007f20:	230c      	movs	r3, #12
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	2600      	movs	r6, #0
 8007f26:	4630      	mov	r0, r6
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2c:	4e2e      	ldr	r6, [pc, #184]	; (8007fe8 <_malloc_r+0xe4>)
 8007f2e:	f000 fcb5 	bl	800889c <__malloc_lock>
 8007f32:	6833      	ldr	r3, [r6, #0]
 8007f34:	461c      	mov	r4, r3
 8007f36:	bb34      	cbnz	r4, 8007f86 <_malloc_r+0x82>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ffc2 	bl	8007ec4 <sbrk_aligned>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	4604      	mov	r4, r0
 8007f44:	d14d      	bne.n	8007fe2 <_malloc_r+0xde>
 8007f46:	6834      	ldr	r4, [r6, #0]
 8007f48:	4626      	mov	r6, r4
 8007f4a:	2e00      	cmp	r6, #0
 8007f4c:	d140      	bne.n	8007fd0 <_malloc_r+0xcc>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4631      	mov	r1, r6
 8007f52:	4638      	mov	r0, r7
 8007f54:	eb04 0803 	add.w	r8, r4, r3
 8007f58:	f000 fb36 	bl	80085c8 <_sbrk_r>
 8007f5c:	4580      	cmp	r8, r0
 8007f5e:	d13a      	bne.n	8007fd6 <_malloc_r+0xd2>
 8007f60:	6821      	ldr	r1, [r4, #0]
 8007f62:	3503      	adds	r5, #3
 8007f64:	1a6d      	subs	r5, r5, r1
 8007f66:	f025 0503 	bic.w	r5, r5, #3
 8007f6a:	3508      	adds	r5, #8
 8007f6c:	2d0c      	cmp	r5, #12
 8007f6e:	bf38      	it	cc
 8007f70:	250c      	movcc	r5, #12
 8007f72:	4629      	mov	r1, r5
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff ffa5 	bl	8007ec4 <sbrk_aligned>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	d02b      	beq.n	8007fd6 <_malloc_r+0xd2>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	442b      	add	r3, r5
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	e00e      	b.n	8007fa4 <_malloc_r+0xa0>
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	1b52      	subs	r2, r2, r5
 8007f8a:	d41e      	bmi.n	8007fca <_malloc_r+0xc6>
 8007f8c:	2a0b      	cmp	r2, #11
 8007f8e:	d916      	bls.n	8007fbe <_malloc_r+0xba>
 8007f90:	1961      	adds	r1, r4, r5
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	6025      	str	r5, [r4, #0]
 8007f96:	bf18      	it	ne
 8007f98:	6059      	strne	r1, [r3, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	bf08      	it	eq
 8007f9e:	6031      	streq	r1, [r6, #0]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f104 060b 	add.w	r6, r4, #11
 8007faa:	f000 fc7d 	bl	80088a8 <__malloc_unlock>
 8007fae:	f026 0607 	bic.w	r6, r6, #7
 8007fb2:	1d23      	adds	r3, r4, #4
 8007fb4:	1af2      	subs	r2, r6, r3
 8007fb6:	d0b6      	beq.n	8007f26 <_malloc_r+0x22>
 8007fb8:	1b9b      	subs	r3, r3, r6
 8007fba:	50a3      	str	r3, [r4, r2]
 8007fbc:	e7b3      	b.n	8007f26 <_malloc_r+0x22>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	bf0c      	ite	eq
 8007fc4:	6032      	streq	r2, [r6, #0]
 8007fc6:	605a      	strne	r2, [r3, #4]
 8007fc8:	e7ec      	b.n	8007fa4 <_malloc_r+0xa0>
 8007fca:	4623      	mov	r3, r4
 8007fcc:	6864      	ldr	r4, [r4, #4]
 8007fce:	e7b2      	b.n	8007f36 <_malloc_r+0x32>
 8007fd0:	4634      	mov	r4, r6
 8007fd2:	6876      	ldr	r6, [r6, #4]
 8007fd4:	e7b9      	b.n	8007f4a <_malloc_r+0x46>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f000 fc64 	bl	80088a8 <__malloc_unlock>
 8007fe0:	e7a1      	b.n	8007f26 <_malloc_r+0x22>
 8007fe2:	6025      	str	r5, [r4, #0]
 8007fe4:	e7de      	b.n	8007fa4 <_malloc_r+0xa0>
 8007fe6:	bf00      	nop
 8007fe8:	200033d4 	.word	0x200033d4

08007fec <__sfputc_r>:
 8007fec:	6893      	ldr	r3, [r2, #8]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	b410      	push	{r4}
 8007ff4:	6093      	str	r3, [r2, #8]
 8007ff6:	da08      	bge.n	800800a <__sfputc_r+0x1e>
 8007ff8:	6994      	ldr	r4, [r2, #24]
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	db01      	blt.n	8008002 <__sfputc_r+0x16>
 8007ffe:	290a      	cmp	r1, #10
 8008000:	d103      	bne.n	800800a <__sfputc_r+0x1e>
 8008002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008006:	f000 bb33 	b.w	8008670 <__swbuf_r>
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	1c58      	adds	r0, r3, #1
 800800e:	6010      	str	r0, [r2, #0]
 8008010:	7019      	strb	r1, [r3, #0]
 8008012:	4608      	mov	r0, r1
 8008014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008018:	4770      	bx	lr

0800801a <__sfputs_r>:
 800801a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801c:	4606      	mov	r6, r0
 800801e:	460f      	mov	r7, r1
 8008020:	4614      	mov	r4, r2
 8008022:	18d5      	adds	r5, r2, r3
 8008024:	42ac      	cmp	r4, r5
 8008026:	d101      	bne.n	800802c <__sfputs_r+0x12>
 8008028:	2000      	movs	r0, #0
 800802a:	e007      	b.n	800803c <__sfputs_r+0x22>
 800802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008030:	463a      	mov	r2, r7
 8008032:	4630      	mov	r0, r6
 8008034:	f7ff ffda 	bl	8007fec <__sfputc_r>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d1f3      	bne.n	8008024 <__sfputs_r+0xa>
 800803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008040 <_vfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	460d      	mov	r5, r1
 8008046:	b09d      	sub	sp, #116	; 0x74
 8008048:	4614      	mov	r4, r2
 800804a:	4698      	mov	r8, r3
 800804c:	4606      	mov	r6, r0
 800804e:	b118      	cbz	r0, 8008058 <_vfiprintf_r+0x18>
 8008050:	6983      	ldr	r3, [r0, #24]
 8008052:	b90b      	cbnz	r3, 8008058 <_vfiprintf_r+0x18>
 8008054:	f7ff fddc 	bl	8007c10 <__sinit>
 8008058:	4b89      	ldr	r3, [pc, #548]	; (8008280 <_vfiprintf_r+0x240>)
 800805a:	429d      	cmp	r5, r3
 800805c:	d11b      	bne.n	8008096 <_vfiprintf_r+0x56>
 800805e:	6875      	ldr	r5, [r6, #4]
 8008060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008062:	07d9      	lsls	r1, r3, #31
 8008064:	d405      	bmi.n	8008072 <_vfiprintf_r+0x32>
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	059a      	lsls	r2, r3, #22
 800806a:	d402      	bmi.n	8008072 <_vfiprintf_r+0x32>
 800806c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806e:	f7ff fe6d 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8008072:	89ab      	ldrh	r3, [r5, #12]
 8008074:	071b      	lsls	r3, r3, #28
 8008076:	d501      	bpl.n	800807c <_vfiprintf_r+0x3c>
 8008078:	692b      	ldr	r3, [r5, #16]
 800807a:	b9eb      	cbnz	r3, 80080b8 <_vfiprintf_r+0x78>
 800807c:	4629      	mov	r1, r5
 800807e:	4630      	mov	r0, r6
 8008080:	f000 fb5a 	bl	8008738 <__swsetup_r>
 8008084:	b1c0      	cbz	r0, 80080b8 <_vfiprintf_r+0x78>
 8008086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008088:	07dc      	lsls	r4, r3, #31
 800808a:	d50e      	bpl.n	80080aa <_vfiprintf_r+0x6a>
 800808c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008090:	b01d      	add	sp, #116	; 0x74
 8008092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008096:	4b7b      	ldr	r3, [pc, #492]	; (8008284 <_vfiprintf_r+0x244>)
 8008098:	429d      	cmp	r5, r3
 800809a:	d101      	bne.n	80080a0 <_vfiprintf_r+0x60>
 800809c:	68b5      	ldr	r5, [r6, #8]
 800809e:	e7df      	b.n	8008060 <_vfiprintf_r+0x20>
 80080a0:	4b79      	ldr	r3, [pc, #484]	; (8008288 <_vfiprintf_r+0x248>)
 80080a2:	429d      	cmp	r5, r3
 80080a4:	bf08      	it	eq
 80080a6:	68f5      	ldreq	r5, [r6, #12]
 80080a8:	e7da      	b.n	8008060 <_vfiprintf_r+0x20>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	0598      	lsls	r0, r3, #22
 80080ae:	d4ed      	bmi.n	800808c <_vfiprintf_r+0x4c>
 80080b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080b2:	f7ff fe4c 	bl	8007d4e <__retarget_lock_release_recursive>
 80080b6:	e7e9      	b.n	800808c <_vfiprintf_r+0x4c>
 80080b8:	2300      	movs	r3, #0
 80080ba:	9309      	str	r3, [sp, #36]	; 0x24
 80080bc:	2320      	movs	r3, #32
 80080be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c6:	2330      	movs	r3, #48	; 0x30
 80080c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800828c <_vfiprintf_r+0x24c>
 80080cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d0:	f04f 0901 	mov.w	r9, #1
 80080d4:	4623      	mov	r3, r4
 80080d6:	469a      	mov	sl, r3
 80080d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080dc:	b10a      	cbz	r2, 80080e2 <_vfiprintf_r+0xa2>
 80080de:	2a25      	cmp	r2, #37	; 0x25
 80080e0:	d1f9      	bne.n	80080d6 <_vfiprintf_r+0x96>
 80080e2:	ebba 0b04 	subs.w	fp, sl, r4
 80080e6:	d00b      	beq.n	8008100 <_vfiprintf_r+0xc0>
 80080e8:	465b      	mov	r3, fp
 80080ea:	4622      	mov	r2, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ff93 	bl	800801a <__sfputs_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	f000 80aa 	beq.w	800824e <_vfiprintf_r+0x20e>
 80080fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fc:	445a      	add	r2, fp
 80080fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008100:	f89a 3000 	ldrb.w	r3, [sl]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80a2 	beq.w	800824e <_vfiprintf_r+0x20e>
 800810a:	2300      	movs	r3, #0
 800810c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008120:	931a      	str	r3, [sp, #104]	; 0x68
 8008122:	4654      	mov	r4, sl
 8008124:	2205      	movs	r2, #5
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4858      	ldr	r0, [pc, #352]	; (800828c <_vfiprintf_r+0x24c>)
 800812c:	f7f8 f860 	bl	80001f0 <memchr>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	b9d8      	cbnz	r0, 800816c <_vfiprintf_r+0x12c>
 8008134:	06d1      	lsls	r1, r2, #27
 8008136:	bf44      	itt	mi
 8008138:	2320      	movmi	r3, #32
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813e:	0713      	lsls	r3, r2, #28
 8008140:	bf44      	itt	mi
 8008142:	232b      	movmi	r3, #43	; 0x2b
 8008144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008148:	f89a 3000 	ldrb.w	r3, [sl]
 800814c:	2b2a      	cmp	r3, #42	; 0x2a
 800814e:	d015      	beq.n	800817c <_vfiprintf_r+0x13c>
 8008150:	9a07      	ldr	r2, [sp, #28]
 8008152:	4654      	mov	r4, sl
 8008154:	2000      	movs	r0, #0
 8008156:	f04f 0c0a 	mov.w	ip, #10
 800815a:	4621      	mov	r1, r4
 800815c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008160:	3b30      	subs	r3, #48	; 0x30
 8008162:	2b09      	cmp	r3, #9
 8008164:	d94e      	bls.n	8008204 <_vfiprintf_r+0x1c4>
 8008166:	b1b0      	cbz	r0, 8008196 <_vfiprintf_r+0x156>
 8008168:	9207      	str	r2, [sp, #28]
 800816a:	e014      	b.n	8008196 <_vfiprintf_r+0x156>
 800816c:	eba0 0308 	sub.w	r3, r0, r8
 8008170:	fa09 f303 	lsl.w	r3, r9, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	46a2      	mov	sl, r4
 800817a:	e7d2      	b.n	8008122 <_vfiprintf_r+0xe2>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1d19      	adds	r1, r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfbb      	ittet	lt
 8008188:	425b      	neglt	r3, r3
 800818a:	f042 0202 	orrlt.w	r2, r2, #2
 800818e:	9307      	strge	r3, [sp, #28]
 8008190:	9307      	strlt	r3, [sp, #28]
 8008192:	bfb8      	it	lt
 8008194:	9204      	strlt	r2, [sp, #16]
 8008196:	7823      	ldrb	r3, [r4, #0]
 8008198:	2b2e      	cmp	r3, #46	; 0x2e
 800819a:	d10c      	bne.n	80081b6 <_vfiprintf_r+0x176>
 800819c:	7863      	ldrb	r3, [r4, #1]
 800819e:	2b2a      	cmp	r3, #42	; 0x2a
 80081a0:	d135      	bne.n	800820e <_vfiprintf_r+0x1ce>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081b2:	3402      	adds	r4, #2
 80081b4:	9305      	str	r3, [sp, #20]
 80081b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800829c <_vfiprintf_r+0x25c>
 80081ba:	7821      	ldrb	r1, [r4, #0]
 80081bc:	2203      	movs	r2, #3
 80081be:	4650      	mov	r0, sl
 80081c0:	f7f8 f816 	bl	80001f0 <memchr>
 80081c4:	b140      	cbz	r0, 80081d8 <_vfiprintf_r+0x198>
 80081c6:	2340      	movs	r3, #64	; 0x40
 80081c8:	eba0 000a 	sub.w	r0, r0, sl
 80081cc:	fa03 f000 	lsl.w	r0, r3, r0
 80081d0:	9b04      	ldr	r3, [sp, #16]
 80081d2:	4303      	orrs	r3, r0
 80081d4:	3401      	adds	r4, #1
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081dc:	482c      	ldr	r0, [pc, #176]	; (8008290 <_vfiprintf_r+0x250>)
 80081de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e2:	2206      	movs	r2, #6
 80081e4:	f7f8 f804 	bl	80001f0 <memchr>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d03f      	beq.n	800826c <_vfiprintf_r+0x22c>
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <_vfiprintf_r+0x254>)
 80081ee:	bb1b      	cbnz	r3, 8008238 <_vfiprintf_r+0x1f8>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	3307      	adds	r3, #7
 80081f4:	f023 0307 	bic.w	r3, r3, #7
 80081f8:	3308      	adds	r3, #8
 80081fa:	9303      	str	r3, [sp, #12]
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	443b      	add	r3, r7
 8008200:	9309      	str	r3, [sp, #36]	; 0x24
 8008202:	e767      	b.n	80080d4 <_vfiprintf_r+0x94>
 8008204:	fb0c 3202 	mla	r2, ip, r2, r3
 8008208:	460c      	mov	r4, r1
 800820a:	2001      	movs	r0, #1
 800820c:	e7a5      	b.n	800815a <_vfiprintf_r+0x11a>
 800820e:	2300      	movs	r3, #0
 8008210:	3401      	adds	r4, #1
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	4619      	mov	r1, r3
 8008216:	f04f 0c0a 	mov.w	ip, #10
 800821a:	4620      	mov	r0, r4
 800821c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008220:	3a30      	subs	r2, #48	; 0x30
 8008222:	2a09      	cmp	r2, #9
 8008224:	d903      	bls.n	800822e <_vfiprintf_r+0x1ee>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0c5      	beq.n	80081b6 <_vfiprintf_r+0x176>
 800822a:	9105      	str	r1, [sp, #20]
 800822c:	e7c3      	b.n	80081b6 <_vfiprintf_r+0x176>
 800822e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008232:	4604      	mov	r4, r0
 8008234:	2301      	movs	r3, #1
 8008236:	e7f0      	b.n	800821a <_vfiprintf_r+0x1da>
 8008238:	ab03      	add	r3, sp, #12
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	462a      	mov	r2, r5
 800823e:	4b16      	ldr	r3, [pc, #88]	; (8008298 <_vfiprintf_r+0x258>)
 8008240:	a904      	add	r1, sp, #16
 8008242:	4630      	mov	r0, r6
 8008244:	f3af 8000 	nop.w
 8008248:	4607      	mov	r7, r0
 800824a:	1c78      	adds	r0, r7, #1
 800824c:	d1d6      	bne.n	80081fc <_vfiprintf_r+0x1bc>
 800824e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008250:	07d9      	lsls	r1, r3, #31
 8008252:	d405      	bmi.n	8008260 <_vfiprintf_r+0x220>
 8008254:	89ab      	ldrh	r3, [r5, #12]
 8008256:	059a      	lsls	r2, r3, #22
 8008258:	d402      	bmi.n	8008260 <_vfiprintf_r+0x220>
 800825a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800825c:	f7ff fd77 	bl	8007d4e <__retarget_lock_release_recursive>
 8008260:	89ab      	ldrh	r3, [r5, #12]
 8008262:	065b      	lsls	r3, r3, #25
 8008264:	f53f af12 	bmi.w	800808c <_vfiprintf_r+0x4c>
 8008268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800826a:	e711      	b.n	8008090 <_vfiprintf_r+0x50>
 800826c:	ab03      	add	r3, sp, #12
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	462a      	mov	r2, r5
 8008272:	4b09      	ldr	r3, [pc, #36]	; (8008298 <_vfiprintf_r+0x258>)
 8008274:	a904      	add	r1, sp, #16
 8008276:	4630      	mov	r0, r6
 8008278:	f000 f880 	bl	800837c <_printf_i>
 800827c:	e7e4      	b.n	8008248 <_vfiprintf_r+0x208>
 800827e:	bf00      	nop
 8008280:	08008dcc 	.word	0x08008dcc
 8008284:	08008dec 	.word	0x08008dec
 8008288:	08008dac 	.word	0x08008dac
 800828c:	08008e0c 	.word	0x08008e0c
 8008290:	08008e16 	.word	0x08008e16
 8008294:	00000000 	.word	0x00000000
 8008298:	0800801b 	.word	0x0800801b
 800829c:	08008e12 	.word	0x08008e12

080082a0 <_printf_common>:
 80082a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	4616      	mov	r6, r2
 80082a6:	4699      	mov	r9, r3
 80082a8:	688a      	ldr	r2, [r1, #8]
 80082aa:	690b      	ldr	r3, [r1, #16]
 80082ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b0:	4293      	cmp	r3, r2
 80082b2:	bfb8      	it	lt
 80082b4:	4613      	movlt	r3, r2
 80082b6:	6033      	str	r3, [r6, #0]
 80082b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082bc:	4607      	mov	r7, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	b10a      	cbz	r2, 80082c6 <_printf_common+0x26>
 80082c2:	3301      	adds	r3, #1
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	0699      	lsls	r1, r3, #26
 80082ca:	bf42      	ittt	mi
 80082cc:	6833      	ldrmi	r3, [r6, #0]
 80082ce:	3302      	addmi	r3, #2
 80082d0:	6033      	strmi	r3, [r6, #0]
 80082d2:	6825      	ldr	r5, [r4, #0]
 80082d4:	f015 0506 	ands.w	r5, r5, #6
 80082d8:	d106      	bne.n	80082e8 <_printf_common+0x48>
 80082da:	f104 0a19 	add.w	sl, r4, #25
 80082de:	68e3      	ldr	r3, [r4, #12]
 80082e0:	6832      	ldr	r2, [r6, #0]
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	42ab      	cmp	r3, r5
 80082e6:	dc26      	bgt.n	8008336 <_printf_common+0x96>
 80082e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082ec:	1e13      	subs	r3, r2, #0
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	bf18      	it	ne
 80082f2:	2301      	movne	r3, #1
 80082f4:	0692      	lsls	r2, r2, #26
 80082f6:	d42b      	bmi.n	8008350 <_printf_common+0xb0>
 80082f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082fc:	4649      	mov	r1, r9
 80082fe:	4638      	mov	r0, r7
 8008300:	47c0      	blx	r8
 8008302:	3001      	adds	r0, #1
 8008304:	d01e      	beq.n	8008344 <_printf_common+0xa4>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	68e5      	ldr	r5, [r4, #12]
 800830a:	6832      	ldr	r2, [r6, #0]
 800830c:	f003 0306 	and.w	r3, r3, #6
 8008310:	2b04      	cmp	r3, #4
 8008312:	bf08      	it	eq
 8008314:	1aad      	subeq	r5, r5, r2
 8008316:	68a3      	ldr	r3, [r4, #8]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	bf0c      	ite	eq
 800831c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008320:	2500      	movne	r5, #0
 8008322:	4293      	cmp	r3, r2
 8008324:	bfc4      	itt	gt
 8008326:	1a9b      	subgt	r3, r3, r2
 8008328:	18ed      	addgt	r5, r5, r3
 800832a:	2600      	movs	r6, #0
 800832c:	341a      	adds	r4, #26
 800832e:	42b5      	cmp	r5, r6
 8008330:	d11a      	bne.n	8008368 <_printf_common+0xc8>
 8008332:	2000      	movs	r0, #0
 8008334:	e008      	b.n	8008348 <_printf_common+0xa8>
 8008336:	2301      	movs	r3, #1
 8008338:	4652      	mov	r2, sl
 800833a:	4649      	mov	r1, r9
 800833c:	4638      	mov	r0, r7
 800833e:	47c0      	blx	r8
 8008340:	3001      	adds	r0, #1
 8008342:	d103      	bne.n	800834c <_printf_common+0xac>
 8008344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834c:	3501      	adds	r5, #1
 800834e:	e7c6      	b.n	80082de <_printf_common+0x3e>
 8008350:	18e1      	adds	r1, r4, r3
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	2030      	movs	r0, #48	; 0x30
 8008356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800835a:	4422      	add	r2, r4
 800835c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008364:	3302      	adds	r3, #2
 8008366:	e7c7      	b.n	80082f8 <_printf_common+0x58>
 8008368:	2301      	movs	r3, #1
 800836a:	4622      	mov	r2, r4
 800836c:	4649      	mov	r1, r9
 800836e:	4638      	mov	r0, r7
 8008370:	47c0      	blx	r8
 8008372:	3001      	adds	r0, #1
 8008374:	d0e6      	beq.n	8008344 <_printf_common+0xa4>
 8008376:	3601      	adds	r6, #1
 8008378:	e7d9      	b.n	800832e <_printf_common+0x8e>
	...

0800837c <_printf_i>:
 800837c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	7e0f      	ldrb	r7, [r1, #24]
 8008382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008384:	2f78      	cmp	r7, #120	; 0x78
 8008386:	4691      	mov	r9, r2
 8008388:	4680      	mov	r8, r0
 800838a:	460c      	mov	r4, r1
 800838c:	469a      	mov	sl, r3
 800838e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008392:	d807      	bhi.n	80083a4 <_printf_i+0x28>
 8008394:	2f62      	cmp	r7, #98	; 0x62
 8008396:	d80a      	bhi.n	80083ae <_printf_i+0x32>
 8008398:	2f00      	cmp	r7, #0
 800839a:	f000 80d8 	beq.w	800854e <_printf_i+0x1d2>
 800839e:	2f58      	cmp	r7, #88	; 0x58
 80083a0:	f000 80a3 	beq.w	80084ea <_printf_i+0x16e>
 80083a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083ac:	e03a      	b.n	8008424 <_printf_i+0xa8>
 80083ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083b2:	2b15      	cmp	r3, #21
 80083b4:	d8f6      	bhi.n	80083a4 <_printf_i+0x28>
 80083b6:	a101      	add	r1, pc, #4	; (adr r1, 80083bc <_printf_i+0x40>)
 80083b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083bc:	08008415 	.word	0x08008415
 80083c0:	08008429 	.word	0x08008429
 80083c4:	080083a5 	.word	0x080083a5
 80083c8:	080083a5 	.word	0x080083a5
 80083cc:	080083a5 	.word	0x080083a5
 80083d0:	080083a5 	.word	0x080083a5
 80083d4:	08008429 	.word	0x08008429
 80083d8:	080083a5 	.word	0x080083a5
 80083dc:	080083a5 	.word	0x080083a5
 80083e0:	080083a5 	.word	0x080083a5
 80083e4:	080083a5 	.word	0x080083a5
 80083e8:	08008535 	.word	0x08008535
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008517 	.word	0x08008517
 80083f4:	080083a5 	.word	0x080083a5
 80083f8:	080083a5 	.word	0x080083a5
 80083fc:	08008557 	.word	0x08008557
 8008400:	080083a5 	.word	0x080083a5
 8008404:	08008459 	.word	0x08008459
 8008408:	080083a5 	.word	0x080083a5
 800840c:	080083a5 	.word	0x080083a5
 8008410:	0800851f 	.word	0x0800851f
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	1d1a      	adds	r2, r3, #4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	602a      	str	r2, [r5, #0]
 800841c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008424:	2301      	movs	r3, #1
 8008426:	e0a3      	b.n	8008570 <_printf_i+0x1f4>
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	6829      	ldr	r1, [r5, #0]
 800842c:	0606      	lsls	r6, r0, #24
 800842e:	f101 0304 	add.w	r3, r1, #4
 8008432:	d50a      	bpl.n	800844a <_printf_i+0xce>
 8008434:	680e      	ldr	r6, [r1, #0]
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	2e00      	cmp	r6, #0
 800843a:	da03      	bge.n	8008444 <_printf_i+0xc8>
 800843c:	232d      	movs	r3, #45	; 0x2d
 800843e:	4276      	negs	r6, r6
 8008440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008444:	485e      	ldr	r0, [pc, #376]	; (80085c0 <_printf_i+0x244>)
 8008446:	230a      	movs	r3, #10
 8008448:	e019      	b.n	800847e <_printf_i+0x102>
 800844a:	680e      	ldr	r6, [r1, #0]
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008452:	bf18      	it	ne
 8008454:	b236      	sxthne	r6, r6
 8008456:	e7ef      	b.n	8008438 <_printf_i+0xbc>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	6820      	ldr	r0, [r4, #0]
 800845c:	1d19      	adds	r1, r3, #4
 800845e:	6029      	str	r1, [r5, #0]
 8008460:	0601      	lsls	r1, r0, #24
 8008462:	d501      	bpl.n	8008468 <_printf_i+0xec>
 8008464:	681e      	ldr	r6, [r3, #0]
 8008466:	e002      	b.n	800846e <_printf_i+0xf2>
 8008468:	0646      	lsls	r6, r0, #25
 800846a:	d5fb      	bpl.n	8008464 <_printf_i+0xe8>
 800846c:	881e      	ldrh	r6, [r3, #0]
 800846e:	4854      	ldr	r0, [pc, #336]	; (80085c0 <_printf_i+0x244>)
 8008470:	2f6f      	cmp	r7, #111	; 0x6f
 8008472:	bf0c      	ite	eq
 8008474:	2308      	moveq	r3, #8
 8008476:	230a      	movne	r3, #10
 8008478:	2100      	movs	r1, #0
 800847a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800847e:	6865      	ldr	r5, [r4, #4]
 8008480:	60a5      	str	r5, [r4, #8]
 8008482:	2d00      	cmp	r5, #0
 8008484:	bfa2      	ittt	ge
 8008486:	6821      	ldrge	r1, [r4, #0]
 8008488:	f021 0104 	bicge.w	r1, r1, #4
 800848c:	6021      	strge	r1, [r4, #0]
 800848e:	b90e      	cbnz	r6, 8008494 <_printf_i+0x118>
 8008490:	2d00      	cmp	r5, #0
 8008492:	d04d      	beq.n	8008530 <_printf_i+0x1b4>
 8008494:	4615      	mov	r5, r2
 8008496:	fbb6 f1f3 	udiv	r1, r6, r3
 800849a:	fb03 6711 	mls	r7, r3, r1, r6
 800849e:	5dc7      	ldrb	r7, [r0, r7]
 80084a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084a4:	4637      	mov	r7, r6
 80084a6:	42bb      	cmp	r3, r7
 80084a8:	460e      	mov	r6, r1
 80084aa:	d9f4      	bls.n	8008496 <_printf_i+0x11a>
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d10b      	bne.n	80084c8 <_printf_i+0x14c>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	07de      	lsls	r6, r3, #31
 80084b4:	d508      	bpl.n	80084c8 <_printf_i+0x14c>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	4299      	cmp	r1, r3
 80084bc:	bfde      	ittt	le
 80084be:	2330      	movle	r3, #48	; 0x30
 80084c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80084c8:	1b52      	subs	r2, r2, r5
 80084ca:	6122      	str	r2, [r4, #16]
 80084cc:	f8cd a000 	str.w	sl, [sp]
 80084d0:	464b      	mov	r3, r9
 80084d2:	aa03      	add	r2, sp, #12
 80084d4:	4621      	mov	r1, r4
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7ff fee2 	bl	80082a0 <_printf_common>
 80084dc:	3001      	adds	r0, #1
 80084de:	d14c      	bne.n	800857a <_printf_i+0x1fe>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084e4:	b004      	add	sp, #16
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	4835      	ldr	r0, [pc, #212]	; (80085c0 <_printf_i+0x244>)
 80084ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084f0:	6829      	ldr	r1, [r5, #0]
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80084f8:	6029      	str	r1, [r5, #0]
 80084fa:	061d      	lsls	r5, r3, #24
 80084fc:	d514      	bpl.n	8008528 <_printf_i+0x1ac>
 80084fe:	07df      	lsls	r7, r3, #31
 8008500:	bf44      	itt	mi
 8008502:	f043 0320 	orrmi.w	r3, r3, #32
 8008506:	6023      	strmi	r3, [r4, #0]
 8008508:	b91e      	cbnz	r6, 8008512 <_printf_i+0x196>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f023 0320 	bic.w	r3, r3, #32
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	2310      	movs	r3, #16
 8008514:	e7b0      	b.n	8008478 <_printf_i+0xfc>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	f043 0320 	orr.w	r3, r3, #32
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	2378      	movs	r3, #120	; 0x78
 8008520:	4828      	ldr	r0, [pc, #160]	; (80085c4 <_printf_i+0x248>)
 8008522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008526:	e7e3      	b.n	80084f0 <_printf_i+0x174>
 8008528:	0659      	lsls	r1, r3, #25
 800852a:	bf48      	it	mi
 800852c:	b2b6      	uxthmi	r6, r6
 800852e:	e7e6      	b.n	80084fe <_printf_i+0x182>
 8008530:	4615      	mov	r5, r2
 8008532:	e7bb      	b.n	80084ac <_printf_i+0x130>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	6826      	ldr	r6, [r4, #0]
 8008538:	6961      	ldr	r1, [r4, #20]
 800853a:	1d18      	adds	r0, r3, #4
 800853c:	6028      	str	r0, [r5, #0]
 800853e:	0635      	lsls	r5, r6, #24
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	d501      	bpl.n	8008548 <_printf_i+0x1cc>
 8008544:	6019      	str	r1, [r3, #0]
 8008546:	e002      	b.n	800854e <_printf_i+0x1d2>
 8008548:	0670      	lsls	r0, r6, #25
 800854a:	d5fb      	bpl.n	8008544 <_printf_i+0x1c8>
 800854c:	8019      	strh	r1, [r3, #0]
 800854e:	2300      	movs	r3, #0
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	4615      	mov	r5, r2
 8008554:	e7ba      	b.n	80084cc <_printf_i+0x150>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	1d1a      	adds	r2, r3, #4
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	681d      	ldr	r5, [r3, #0]
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	2100      	movs	r1, #0
 8008562:	4628      	mov	r0, r5
 8008564:	f7f7 fe44 	bl	80001f0 <memchr>
 8008568:	b108      	cbz	r0, 800856e <_printf_i+0x1f2>
 800856a:	1b40      	subs	r0, r0, r5
 800856c:	6060      	str	r0, [r4, #4]
 800856e:	6863      	ldr	r3, [r4, #4]
 8008570:	6123      	str	r3, [r4, #16]
 8008572:	2300      	movs	r3, #0
 8008574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008578:	e7a8      	b.n	80084cc <_printf_i+0x150>
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	462a      	mov	r2, r5
 800857e:	4649      	mov	r1, r9
 8008580:	4640      	mov	r0, r8
 8008582:	47d0      	blx	sl
 8008584:	3001      	adds	r0, #1
 8008586:	d0ab      	beq.n	80084e0 <_printf_i+0x164>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	079b      	lsls	r3, r3, #30
 800858c:	d413      	bmi.n	80085b6 <_printf_i+0x23a>
 800858e:	68e0      	ldr	r0, [r4, #12]
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	4298      	cmp	r0, r3
 8008594:	bfb8      	it	lt
 8008596:	4618      	movlt	r0, r3
 8008598:	e7a4      	b.n	80084e4 <_printf_i+0x168>
 800859a:	2301      	movs	r3, #1
 800859c:	4632      	mov	r2, r6
 800859e:	4649      	mov	r1, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	47d0      	blx	sl
 80085a4:	3001      	adds	r0, #1
 80085a6:	d09b      	beq.n	80084e0 <_printf_i+0x164>
 80085a8:	3501      	adds	r5, #1
 80085aa:	68e3      	ldr	r3, [r4, #12]
 80085ac:	9903      	ldr	r1, [sp, #12]
 80085ae:	1a5b      	subs	r3, r3, r1
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dcf2      	bgt.n	800859a <_printf_i+0x21e>
 80085b4:	e7eb      	b.n	800858e <_printf_i+0x212>
 80085b6:	2500      	movs	r5, #0
 80085b8:	f104 0619 	add.w	r6, r4, #25
 80085bc:	e7f5      	b.n	80085aa <_printf_i+0x22e>
 80085be:	bf00      	nop
 80085c0:	08008e1d 	.word	0x08008e1d
 80085c4:	08008e2e 	.word	0x08008e2e

080085c8 <_sbrk_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d06      	ldr	r5, [pc, #24]	; (80085e4 <_sbrk_r+0x1c>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7fa fbfc 	bl	8002dd0 <_sbrk>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_sbrk_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_sbrk_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	200033dc 	.word	0x200033dc

080085e8 <__sread>:
 80085e8:	b510      	push	{r4, lr}
 80085ea:	460c      	mov	r4, r1
 80085ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f0:	f000 f960 	bl	80088b4 <_read_r>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	bfab      	itete	ge
 80085f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085fa:	89a3      	ldrhlt	r3, [r4, #12]
 80085fc:	181b      	addge	r3, r3, r0
 80085fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008602:	bfac      	ite	ge
 8008604:	6563      	strge	r3, [r4, #84]	; 0x54
 8008606:	81a3      	strhlt	r3, [r4, #12]
 8008608:	bd10      	pop	{r4, pc}

0800860a <__swrite>:
 800860a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860e:	461f      	mov	r7, r3
 8008610:	898b      	ldrh	r3, [r1, #12]
 8008612:	05db      	lsls	r3, r3, #23
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	4616      	mov	r6, r2
 800861a:	d505      	bpl.n	8008628 <__swrite+0x1e>
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	2302      	movs	r3, #2
 8008622:	2200      	movs	r2, #0
 8008624:	f000 f928 	bl	8008878 <_lseek_r>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	4632      	mov	r2, r6
 8008636:	463b      	mov	r3, r7
 8008638:	4628      	mov	r0, r5
 800863a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	f000 b869 	b.w	8008714 <_write_r>

08008642 <__sseek>:
 8008642:	b510      	push	{r4, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864a:	f000 f915 	bl	8008878 <_lseek_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	bf15      	itete	ne
 8008654:	6560      	strne	r0, [r4, #84]	; 0x54
 8008656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800865a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800865e:	81a3      	strheq	r3, [r4, #12]
 8008660:	bf18      	it	ne
 8008662:	81a3      	strhne	r3, [r4, #12]
 8008664:	bd10      	pop	{r4, pc}

08008666 <__sclose>:
 8008666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866a:	f000 b8d3 	b.w	8008814 <_close_r>
	...

08008670 <__swbuf_r>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	460e      	mov	r6, r1
 8008674:	4614      	mov	r4, r2
 8008676:	4605      	mov	r5, r0
 8008678:	b118      	cbz	r0, 8008682 <__swbuf_r+0x12>
 800867a:	6983      	ldr	r3, [r0, #24]
 800867c:	b90b      	cbnz	r3, 8008682 <__swbuf_r+0x12>
 800867e:	f7ff fac7 	bl	8007c10 <__sinit>
 8008682:	4b21      	ldr	r3, [pc, #132]	; (8008708 <__swbuf_r+0x98>)
 8008684:	429c      	cmp	r4, r3
 8008686:	d12b      	bne.n	80086e0 <__swbuf_r+0x70>
 8008688:	686c      	ldr	r4, [r5, #4]
 800868a:	69a3      	ldr	r3, [r4, #24]
 800868c:	60a3      	str	r3, [r4, #8]
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	071a      	lsls	r2, r3, #28
 8008692:	d52f      	bpl.n	80086f4 <__swbuf_r+0x84>
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	b36b      	cbz	r3, 80086f4 <__swbuf_r+0x84>
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	1ac0      	subs	r0, r0, r3
 800869e:	6963      	ldr	r3, [r4, #20]
 80086a0:	b2f6      	uxtb	r6, r6
 80086a2:	4283      	cmp	r3, r0
 80086a4:	4637      	mov	r7, r6
 80086a6:	dc04      	bgt.n	80086b2 <__swbuf_r+0x42>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7ff fa1c 	bl	8007ae8 <_fflush_r>
 80086b0:	bb30      	cbnz	r0, 8008700 <__swbuf_r+0x90>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	701e      	strb	r6, [r3, #0]
 80086c0:	6963      	ldr	r3, [r4, #20]
 80086c2:	3001      	adds	r0, #1
 80086c4:	4283      	cmp	r3, r0
 80086c6:	d004      	beq.n	80086d2 <__swbuf_r+0x62>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d506      	bpl.n	80086dc <__swbuf_r+0x6c>
 80086ce:	2e0a      	cmp	r6, #10
 80086d0:	d104      	bne.n	80086dc <__swbuf_r+0x6c>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fa07 	bl	8007ae8 <_fflush_r>
 80086da:	b988      	cbnz	r0, 8008700 <__swbuf_r+0x90>
 80086dc:	4638      	mov	r0, r7
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <__swbuf_r+0x9c>)
 80086e2:	429c      	cmp	r4, r3
 80086e4:	d101      	bne.n	80086ea <__swbuf_r+0x7a>
 80086e6:	68ac      	ldr	r4, [r5, #8]
 80086e8:	e7cf      	b.n	800868a <__swbuf_r+0x1a>
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <__swbuf_r+0xa0>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	bf08      	it	eq
 80086f0:	68ec      	ldreq	r4, [r5, #12]
 80086f2:	e7ca      	b.n	800868a <__swbuf_r+0x1a>
 80086f4:	4621      	mov	r1, r4
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 f81e 	bl	8008738 <__swsetup_r>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d0cb      	beq.n	8008698 <__swbuf_r+0x28>
 8008700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008704:	e7ea      	b.n	80086dc <__swbuf_r+0x6c>
 8008706:	bf00      	nop
 8008708:	08008dcc 	.word	0x08008dcc
 800870c:	08008dec 	.word	0x08008dec
 8008710:	08008dac 	.word	0x08008dac

08008714 <_write_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d07      	ldr	r5, [pc, #28]	; (8008734 <_write_r+0x20>)
 8008718:	4604      	mov	r4, r0
 800871a:	4608      	mov	r0, r1
 800871c:	4611      	mov	r1, r2
 800871e:	2200      	movs	r2, #0
 8008720:	602a      	str	r2, [r5, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7f9 ff1c 	bl	8002560 <_write>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_write_r+0x1e>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_write_r+0x1e>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	200033dc 	.word	0x200033dc

08008738 <__swsetup_r>:
 8008738:	4b32      	ldr	r3, [pc, #200]	; (8008804 <__swsetup_r+0xcc>)
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	681d      	ldr	r5, [r3, #0]
 800873e:	4606      	mov	r6, r0
 8008740:	460c      	mov	r4, r1
 8008742:	b125      	cbz	r5, 800874e <__swsetup_r+0x16>
 8008744:	69ab      	ldr	r3, [r5, #24]
 8008746:	b913      	cbnz	r3, 800874e <__swsetup_r+0x16>
 8008748:	4628      	mov	r0, r5
 800874a:	f7ff fa61 	bl	8007c10 <__sinit>
 800874e:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <__swsetup_r+0xd0>)
 8008750:	429c      	cmp	r4, r3
 8008752:	d10f      	bne.n	8008774 <__swsetup_r+0x3c>
 8008754:	686c      	ldr	r4, [r5, #4]
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875c:	0719      	lsls	r1, r3, #28
 800875e:	d42c      	bmi.n	80087ba <__swsetup_r+0x82>
 8008760:	06dd      	lsls	r5, r3, #27
 8008762:	d411      	bmi.n	8008788 <__swsetup_r+0x50>
 8008764:	2309      	movs	r3, #9
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008772:	e03e      	b.n	80087f2 <__swsetup_r+0xba>
 8008774:	4b25      	ldr	r3, [pc, #148]	; (800880c <__swsetup_r+0xd4>)
 8008776:	429c      	cmp	r4, r3
 8008778:	d101      	bne.n	800877e <__swsetup_r+0x46>
 800877a:	68ac      	ldr	r4, [r5, #8]
 800877c:	e7eb      	b.n	8008756 <__swsetup_r+0x1e>
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <__swsetup_r+0xd8>)
 8008780:	429c      	cmp	r4, r3
 8008782:	bf08      	it	eq
 8008784:	68ec      	ldreq	r4, [r5, #12]
 8008786:	e7e6      	b.n	8008756 <__swsetup_r+0x1e>
 8008788:	0758      	lsls	r0, r3, #29
 800878a:	d512      	bpl.n	80087b2 <__swsetup_r+0x7a>
 800878c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800878e:	b141      	cbz	r1, 80087a2 <__swsetup_r+0x6a>
 8008790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008794:	4299      	cmp	r1, r3
 8008796:	d002      	beq.n	800879e <__swsetup_r+0x66>
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff fb47 	bl	8007e2c <_free_r>
 800879e:	2300      	movs	r3, #0
 80087a0:	6363      	str	r3, [r4, #52]	; 0x34
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	2300      	movs	r3, #0
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f043 0308 	orr.w	r3, r3, #8
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	b94b      	cbnz	r3, 80087d2 <__swsetup_r+0x9a>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c8:	d003      	beq.n	80087d2 <__swsetup_r+0x9a>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff fae5 	bl	8007d9c <__smakebuf_r>
 80087d2:	89a0      	ldrh	r0, [r4, #12]
 80087d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087d8:	f010 0301 	ands.w	r3, r0, #1
 80087dc:	d00a      	beq.n	80087f4 <__swsetup_r+0xbc>
 80087de:	2300      	movs	r3, #0
 80087e0:	60a3      	str	r3, [r4, #8]
 80087e2:	6963      	ldr	r3, [r4, #20]
 80087e4:	425b      	negs	r3, r3
 80087e6:	61a3      	str	r3, [r4, #24]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	b943      	cbnz	r3, 80087fe <__swsetup_r+0xc6>
 80087ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087f0:	d1ba      	bne.n	8008768 <__swsetup_r+0x30>
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	0781      	lsls	r1, r0, #30
 80087f6:	bf58      	it	pl
 80087f8:	6963      	ldrpl	r3, [r4, #20]
 80087fa:	60a3      	str	r3, [r4, #8]
 80087fc:	e7f4      	b.n	80087e8 <__swsetup_r+0xb0>
 80087fe:	2000      	movs	r0, #0
 8008800:	e7f7      	b.n	80087f2 <__swsetup_r+0xba>
 8008802:	bf00      	nop
 8008804:	20000010 	.word	0x20000010
 8008808:	08008dcc 	.word	0x08008dcc
 800880c:	08008dec 	.word	0x08008dec
 8008810:	08008dac 	.word	0x08008dac

08008814 <_close_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_close_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f9 feca 	bl	80025b8 <_close>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_close_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_close_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	200033dc 	.word	0x200033dc

08008834 <_fstat_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_fstat_r+0x20>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f9 ff09 	bl	8002658 <_fstat>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_fstat_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_fstat_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	200033dc 	.word	0x200033dc

08008858 <_isatty_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	; (8008874 <_isatty_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f9 fe66 	bl	8002534 <_isatty>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_isatty_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_isatty_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	200033dc 	.word	0x200033dc

08008878 <_lseek_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	; (8008898 <_lseek_r+0x20>)
 800887c:	4604      	mov	r4, r0
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	2200      	movs	r2, #0
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7f9 fead 	bl	80025e6 <_lseek>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_lseek_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_lseek_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	200033dc 	.word	0x200033dc

0800889c <__malloc_lock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_lock+0x8>)
 800889e:	f7ff ba55 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 80088a2:	bf00      	nop
 80088a4:	200033d0 	.word	0x200033d0

080088a8 <__malloc_unlock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_unlock+0x8>)
 80088aa:	f7ff ba50 	b.w	8007d4e <__retarget_lock_release_recursive>
 80088ae:	bf00      	nop
 80088b0:	200033d0 	.word	0x200033d0

080088b4 <_read_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	; (80088d4 <_read_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7f9 fea0 	bl	8002608 <_read>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_read_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_read_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	200033dc 	.word	0x200033dc

080088d8 <_init>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr

080088e4 <_fini>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	bf00      	nop
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr
