
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efd0  0800efd0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800efd0  0800efd0  0001efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efd8  0800efd8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efd8  0800efd8  0001efd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efdc  0800efdc  0001efdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800efe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003a60  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003af4  20003af4  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265bf  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005828  00000000  00000000  00046683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  0004beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001940  00000000  00000000  0004da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb21  00000000  00000000  0004f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b88  00000000  00000000  0007ae81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e76b9  00000000  00000000  000a2a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018a0c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a78  00000000  00000000  0018a114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ea50 	.word	0x0800ea50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800ea50 	.word	0x0800ea50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800ea68 	.word	0x0800ea68
 8000738:	0800eab4 	.word	0x0800eab4
 800073c:	0800eab8 	.word	0x0800eab8
 8000740:	200001b0 	.word	0x200001b0
 8000744:	200000b0 	.word	0x200000b0

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	0800eabc 	.word	0x0800eabc
 80008b0:	0800eac4 	.word	0x0800eac4
 80008b4:	0800eab4 	.word	0x0800eab4
 80008b8:	0800eacc 	.word	0x0800eacc
 80008bc:	0800eab8 	.word	0x0800eab8

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00c ff0e 	bl	800d7e8 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800eb78 	.word	0x0800eb78
 8000d0c:	0800eb28 	.word	0x0800eb28
 8000d10:	0800eb2c 	.word	0x0800eb2c

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800eb30 	.word	0x0800eb30
 8000dc0:	0800eb40 	.word	0x0800eb40
 8000dc4:	0800eb48 	.word	0x0800eb48
 8000dc8:	0800eb2c 	.word	0x0800eb2c

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800eb4c 	.word	0x0800eb4c
 8000e10:	0800eb2c 	.word	0x0800eb2c

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800eb5c 	.word	0x0800eb5c
 8000e3c:	0800eb2c 	.word	0x0800eb2c

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800eb78 	.word	0x0800eb78

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c0 	.word	0x200001c0
 8000e74:	200001bc 	.word	0x200001bc

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 f879 	bl	8007f86 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b8 	.word	0x200001b8
 8000ea4:	200001ce 	.word	0x200001ce

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00c fdac 	bl	800da50 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	0800eb70 	.word	0x0800eb70

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00c fd90 	bl	800da50 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800eb70 	.word	0x0800eb70

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 f806 	bl	8007f86 <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	200001ce 	.word	0x200001ce
 8000f8c:	200001c4 	.word	0x200001c4
 8000f90:	200001bc 	.word	0x200001bc
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <I3G450D_Init+0x164>)
 8000fa2:	f002 fe77 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 fffa 	bl	8002fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4852      	ldr	r0, [pc, #328]	; (80010fc <I3G450D_Init+0x164>)
 8000fb2:	f002 fe6f 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f001 fff2 	bl	8002fa0 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <I3G450D_Init+0x168>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <I3G450D_Init+0x168>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	494c      	ldr	r1, [pc, #304]	; (8001100 <I3G450D_Init+0x168>)
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <I3G450D_Init+0x16c>)
 8000fd0:	f005 f965 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4848      	ldr	r0, [pc, #288]	; (80010fc <I3G450D_Init+0x164>)
 8000fda:	f002 fe5b 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 ffde 	bl	8002fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <I3G450D_Init+0x164>)
 8000fea:	f002 fe53 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 ffd6 	bl	8002fa0 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <I3G450D_Init+0x168>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <I3G450D_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	493e      	ldr	r1, [pc, #248]	; (8001100 <I3G450D_Init+0x168>)
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <I3G450D_Init+0x16c>)
 8001008:	f005 f949 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	483a      	ldr	r0, [pc, #232]	; (80010fc <I3G450D_Init+0x164>)
 8001012:	f002 fe3f 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 ffc2 	bl	8002fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4836      	ldr	r0, [pc, #216]	; (80010fc <I3G450D_Init+0x164>)
 8001022:	f002 fe37 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 ffba 	bl	8002fa0 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <I3G450D_Init+0x168>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <I3G450D_Init+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4930      	ldr	r1, [pc, #192]	; (8001100 <I3G450D_Init+0x168>)
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <I3G450D_Init+0x16c>)
 8001040:	f005 f92d 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <I3G450D_Init+0x164>)
 800104a:	f002 fe23 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 ffa6 	bl	8002fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4828      	ldr	r0, [pc, #160]	; (80010fc <I3G450D_Init+0x164>)
 800105a:	f002 fe1b 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 ff9e 	bl	8002fa0 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <I3G450D_Init+0x168>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <I3G450D_Init+0x168>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4922      	ldr	r1, [pc, #136]	; (8001100 <I3G450D_Init+0x168>)
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <I3G450D_Init+0x16c>)
 8001078:	f005 f911 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <I3G450D_Init+0x164>)
 8001082:	f002 fe07 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 ff8a 	bl	8002fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <I3G450D_Init+0x164>)
 8001092:	f002 fdff 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 ff82 	bl	8002fa0 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <I3G450D_Init+0x168>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <I3G450D_Init+0x168>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <I3G450D_Init+0x168>)
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <I3G450D_Init+0x16c>)
 80010b0:	f005 f8f5 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <I3G450D_Init+0x164>)
 80010ba:	f002 fdeb 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 ff6e 	bl	8002fa0 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <I3G450D_Init+0x164>)
 80010ca:	f002 fde3 	bl	8003c94 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <I3G450D_Init+0x168>)
 80010d0:	228f      	movs	r2, #143	; 0x8f
 80010d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	2201      	movs	r2, #1
 80010d8:	4909      	ldr	r1, [pc, #36]	; (8001100 <I3G450D_Init+0x168>)
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <I3G450D_Init+0x16c>)
 80010dc:	f005 f8df 	bl	800629e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	2201      	movs	r2, #1
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <I3G450D_Init+0x170>)
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <I3G450D_Init+0x16c>)
 80010e8:	f005 fa15 	bl	8006516 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <I3G450D_Init+0x164>)
 80010f2:	f002 fdcf 	bl	8003c94 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800
 8001100:	20003108 	.word	0x20003108
 8001104:	200031cc 	.word	0x200031cc
 8001108:	2000310d 	.word	0x2000310d

0800110c <I3G450D_loop>:

void I3G450D_loop(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b098      	sub	sp, #96	; 0x60
 8001110:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800111e:	2300      	movs	r3, #0
 8001120:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <I3G450D_loop+0x1b0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <I3G450D_loop+0x6a>
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 80ba 	beq.w	80012e8 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001174:	e36d      	b.n	8001852 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <I3G450D_loop+0x1b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 8368 	bne.w	8001850 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001186:	f002 fd85 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <I3G450D_loop+0x1bc>)
 800118c:	22a8      	movs	r2, #168	; 0xa8
 800118e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	2201      	movs	r2, #1
 8001194:	494c      	ldr	r1, [pc, #304]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001196:	484d      	ldr	r0, [pc, #308]	; (80012cc <I3G450D_loop+0x1c0>)
 8001198:	f005 f881 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	2201      	movs	r2, #1
 80011a0:	494b      	ldr	r1, [pc, #300]	; (80012d0 <I3G450D_loop+0x1c4>)
 80011a2:	484a      	ldr	r0, [pc, #296]	; (80012cc <I3G450D_loop+0x1c0>)
 80011a4:	f005 f9b7 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ae:	f002 fd71 	bl	8003c94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4843      	ldr	r0, [pc, #268]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011b8:	f002 fd6c 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011be:	22a9      	movs	r2, #169	; 0xa9
 80011c0:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	2201      	movs	r2, #1
 80011c6:	4940      	ldr	r1, [pc, #256]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011c8:	4840      	ldr	r0, [pc, #256]	; (80012cc <I3G450D_loop+0x1c0>)
 80011ca:	f005 f868 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80011ce:	2332      	movs	r3, #50	; 0x32
 80011d0:	2201      	movs	r2, #1
 80011d2:	4940      	ldr	r1, [pc, #256]	; (80012d4 <I3G450D_loop+0x1c8>)
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <I3G450D_loop+0x1c0>)
 80011d6:	f005 f99e 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2102      	movs	r1, #2
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011e0:	f002 fd58 	bl	8003c94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	4836      	ldr	r0, [pc, #216]	; (80012c4 <I3G450D_loop+0x1b8>)
 80011ea:	f002 fd53 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011f4:	2332      	movs	r3, #50	; 0x32
 80011f6:	2201      	movs	r2, #1
 80011f8:	4933      	ldr	r1, [pc, #204]	; (80012c8 <I3G450D_loop+0x1bc>)
 80011fa:	4834      	ldr	r0, [pc, #208]	; (80012cc <I3G450D_loop+0x1c0>)
 80011fc:	f005 f84f 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8001200:	2332      	movs	r3, #50	; 0x32
 8001202:	2201      	movs	r2, #1
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <I3G450D_loop+0x1cc>)
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <I3G450D_loop+0x1c0>)
 8001208:	f005 f985 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001212:	f002 fd3f 	bl	8003c94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	482a      	ldr	r0, [pc, #168]	; (80012c4 <I3G450D_loop+0x1b8>)
 800121c:	f002 fd3a 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001222:	22ab      	movs	r2, #171	; 0xab
 8001224:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	2201      	movs	r2, #1
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <I3G450D_loop+0x1bc>)
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <I3G450D_loop+0x1c0>)
 800122e:	f005 f836 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	2201      	movs	r2, #1
 8001236:	4929      	ldr	r1, [pc, #164]	; (80012dc <I3G450D_loop+0x1d0>)
 8001238:	4824      	ldr	r0, [pc, #144]	; (80012cc <I3G450D_loop+0x1c0>)
 800123a:	f005 f96c 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001244:	f002 fd26 	bl	8003c94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <I3G450D_loop+0x1b8>)
 800124e:	f002 fd21 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001254:	22ac      	movs	r2, #172	; 0xac
 8001256:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001258:	2332      	movs	r3, #50	; 0x32
 800125a:	2201      	movs	r2, #1
 800125c:	491a      	ldr	r1, [pc, #104]	; (80012c8 <I3G450D_loop+0x1bc>)
 800125e:	481b      	ldr	r0, [pc, #108]	; (80012cc <I3G450D_loop+0x1c0>)
 8001260:	f005 f81d 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	491d      	ldr	r1, [pc, #116]	; (80012e0 <I3G450D_loop+0x1d4>)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <I3G450D_loop+0x1c0>)
 800126c:	f005 f953 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001276:	f002 fd0d 	bl	8003c94 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <I3G450D_loop+0x1b8>)
 8001280:	f002 fd08 	bl	8003c94 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001286:	22ad      	movs	r2, #173	; 0xad
 8001288:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800128a:	2332      	movs	r3, #50	; 0x32
 800128c:	2201      	movs	r2, #1
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <I3G450D_loop+0x1bc>)
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <I3G450D_loop+0x1c0>)
 8001292:	f005 f804 	bl	800629e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	2201      	movs	r2, #1
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <I3G450D_loop+0x1d8>)
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <I3G450D_loop+0x1c0>)
 800129e:	f005 f93a 	bl	8006516 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <I3G450D_loop+0x1b8>)
 80012a8:	f002 fcf4 	bl	8003c94 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <I3G450D_loop+0x1b0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <I3G450D_loop+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
				break;
 80012b8:	e2ca      	b.n	8001850 <I3G450D_loop+0x744>
 80012ba:	bf00      	nop
 80012bc:	200001d0 	.word	0x200001d0
 80012c0:	20000000 	.word	0x20000000
 80012c4:	40020800 	.word	0x40020800
 80012c8:	20003108 	.word	0x20003108
 80012cc:	200031cc 	.word	0x200031cc
 80012d0:	2000310d 	.word	0x2000310d
 80012d4:	2000310e 	.word	0x2000310e
 80012d8:	2000310f 	.word	0x2000310f
 80012dc:	20003110 	.word	0x20003110
 80012e0:	20003111 	.word	0x20003111
 80012e4:	20003112 	.word	0x20003112
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80012e8:	4ba0      	ldr	r3, [pc, #640]	; (800156c <I3G450D_loop+0x460>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b9e      	ldr	r3, [pc, #632]	; (800156c <I3G450D_loop+0x460>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80012fe:	4b9b      	ldr	r3, [pc, #620]	; (800156c <I3G450D_loop+0x460>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <I3G450D_loop+0x460>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001314:	4b95      	ldr	r3, [pc, #596]	; (800156c <I3G450D_loop+0x460>)
 8001316:	799b      	ldrb	r3, [r3, #6]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <I3G450D_loop+0x460>)
 800131e:	795b      	ldrb	r3, [r3, #5]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <I3G450D_loop+0x464>)
 8001330:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <I3G450D_loop+0x468>)
 800133a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800133c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <I3G450D_loop+0x46c>)
 8001342:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001344:	4b8d      	ldr	r3, [pc, #564]	; (800157c <I3G450D_loop+0x470>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80d5 	bne.w	80014f8 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 800134e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <I3G450D_loop+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001584 <I3G450D_loop+0x478>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <I3G450D_loop+0x47c>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	b21b      	sxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <I3G450D_loop+0x480>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001584 <I3G450D_loop+0x478>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <I3G450D_loop+0x484>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001398:	b21b      	sxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <I3G450D_loop+0x488>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001584 <I3G450D_loop+0x478>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b79      	ldr	r3, [pc, #484]	; (8001598 <I3G450D_loop+0x48c>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <I3G450D_loop+0x490>)
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80013bc:	4b72      	ldr	r3, [pc, #456]	; (8001588 <I3G450D_loop+0x47c>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <I3G450D_loop+0x494>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dc0c      	bgt.n	80013ec <I3G450D_loop+0x2e0>
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <I3G450D_loop+0x494>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb1 7a67 	vneg.f32	s14, s15
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <I3G450D_loop+0x47c>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd1b      	ble.n	8001424 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <I3G450D_loop+0x47c>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <I3G450D_loop+0x498>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <I3G450D_loop+0x49c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <I3G450D_loop+0x49c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <I3G450D_loop+0x47c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <I3G450D_loop+0x498>)
 8001422:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001424:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <I3G450D_loop+0x484>)
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <I3G450D_loop+0x4a0>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dc0c      	bgt.n	8001454 <I3G450D_loop+0x348>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <I3G450D_loop+0x4a0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eeb1 7a67 	vneg.f32	s14, s15
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <I3G450D_loop+0x484>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd1b      	ble.n	800148c <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <I3G450D_loop+0x484>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <I3G450D_loop+0x4a4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <I3G450D_loop+0x4a8>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <I3G450D_loop+0x484>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <I3G450D_loop+0x4a4>)
 800148a:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <I3G450D_loop+0x48c>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <I3G450D_loop+0x4ac>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dc0d      	bgt.n	80014be <I3G450D_loop+0x3b2>
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <I3G450D_loop+0x4ac>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eeb1 7a67 	vneg.f32	s14, s15
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <I3G450D_loop+0x48c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	f340 81c2 	ble.w	8001842 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <I3G450D_loop+0x48c>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <I3G450D_loop+0x4b0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <I3G450D_loop+0x4b4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <I3G450D_loop+0x48c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <I3G450D_loop+0x4b0>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e1a4      	b.n	8001842 <I3G450D_loop+0x736>
				switch(currentcalistate)
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <I3G450D_loop+0x470>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 819b 	beq.w	8001838 <I3G450D_loop+0x72c>
 8001502:	2b02      	cmp	r3, #2
 8001504:	f300 819a 	bgt.w	800183c <I3G450D_loop+0x730>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <I3G450D_loop+0x406>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d029      	beq.n	8001564 <I3G450D_loop+0x458>
						break;
 8001510:	e194      	b.n	800183c <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800151a:	b211      	sxth	r1, r2
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <I3G450D_loop+0x4bc>)
 800151e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800152a:	b211      	sxth	r1, r2
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <I3G450D_loop+0x4c0>)
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001538:	b211      	sxth	r1, r2
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <I3G450D_loop+0x4c4>)
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001548:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <I3G450D_loop+0x4b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001552:	f0c0 8175 	bcc.w	8001840 <I3G450D_loop+0x734>
							caliCounter=0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <I3G450D_loop+0x4b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <I3G450D_loop+0x470>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
						break;
 8001562:	e16d      	b.n	8001840 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001568:	e0a5      	b.n	80016b6 <I3G450D_loop+0x5aa>
 800156a:	bf00      	nop
 800156c:	2000310c 	.word	0x2000310c
 8001570:	2000021c 	.word	0x2000021c
 8001574:	2000021e 	.word	0x2000021e
 8001578:	20000220 	.word	0x20000220
 800157c:	200001cf 	.word	0x200001cf
 8001580:	200001e0 	.word	0x200001e0
 8001584:	3d8f5c29 	.word	0x3d8f5c29
 8001588:	200001d4 	.word	0x200001d4
 800158c:	200001e4 	.word	0x200001e4
 8001590:	200001d8 	.word	0x200001d8
 8001594:	200001e8 	.word	0x200001e8
 8001598:	200001dc 	.word	0x200001dc
 800159c:	3b449ba6 	.word	0x3b449ba6
 80015a0:	200001ec 	.word	0x200001ec
 80015a4:	20000204 	.word	0x20000204
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	200001f0 	.word	0x200001f0
 80015b0:	20000208 	.word	0x20000208
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	200001f4 	.word	0x200001f4
 80015bc:	2000020c 	.word	0x2000020c
 80015c0:	20000200 	.word	0x20000200
 80015c4:	20000224 	.word	0x20000224
 80015c8:	20000228 	.word	0x20000228
 80015cc:	200011c8 	.word	0x200011c8
 80015d0:	20002168 	.word	0x20002168
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	443b      	add	r3, r7
 80015dc:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	499d      	ldr	r1, [pc, #628]	; (800185c <I3G450D_loop+0x750>)
 80015e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ea:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015ee:	4413      	add	r3, r2
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3360      	adds	r3, #96	; 0x60
 80015f8:	443b      	add	r3, r7
 80015fa:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80015fe:	461a      	mov	r2, r3
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	4996      	ldr	r1, [pc, #600]	; (8001860 <I3G450D_loop+0x754>)
 8001606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001608:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800160c:	4413      	add	r3, r2
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	443b      	add	r3, r7
 8001618:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800161c:	461a      	mov	r2, r3
 800161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <I3G450D_loop+0x758>)
 8001624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001626:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800162a:	4413      	add	r3, r2
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800162e:	4a8b      	ldr	r2, [pc, #556]	; (800185c <I3G450D_loop+0x750>)
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	443b      	add	r3, r7
 800163e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <I3G450D_loop+0x754>)
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800164a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	443b      	add	r3, r7
 8001652:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001656:	4a83      	ldr	r2, [pc, #524]	; (8001864 <I3G450D_loop+0x758>)
 8001658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800165a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800165e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3360      	adds	r3, #96	; 0x60
 8001664:	443b      	add	r3, r7
 8001666:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <I3G450D_loop+0x75c>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a7c      	ldr	r2, [pc, #496]	; (800186c <I3G450D_loop+0x760>)
 800167a:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <I3G450D_loop+0x75c>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1092      	asrs	r2, r2, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <I3G450D_loop+0x764>)
 800168c:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	4a75      	ldr	r2, [pc, #468]	; (8001868 <I3G450D_loop+0x75c>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1092      	asrs	r2, r2, #2
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a75      	ldr	r2, [pc, #468]	; (8001874 <I3G450D_loop+0x768>)
 800169e:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	3301      	adds	r3, #1
 80016a4:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80016a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d901      	bls.n	80016b0 <I3G450D_loop+0x5a4>
									windowPosition=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	3301      	adds	r3, #1
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016bc:	d38a      	bcc.n	80015d4 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c2:	e089      	b.n	80017d8 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <I3G450D_loop+0x750>)
 80016c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <I3G450D_loop+0x760>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <I3G450D_loop+0x76c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd0a      	ble.n	80016f2 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <I3G450D_loop+0x750>)
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <I3G450D_loop+0x760>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a62      	ldr	r2, [pc, #392]	; (8001878 <I3G450D_loop+0x76c>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e015      	b.n	800171e <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <I3G450D_loop+0x750>)
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <I3G450D_loop+0x760>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <I3G450D_loop+0x76c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	425b      	negs	r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	da08      	bge.n	800171e <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <I3G450D_loop+0x760>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4952      	ldr	r1, [pc, #328]	; (800185c <I3G450D_loop+0x750>)
 8001712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001714:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <I3G450D_loop+0x76c>)
 800171c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800171e:	4a50      	ldr	r2, [pc, #320]	; (8001860 <I3G450D_loop+0x754>)
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001726:	461a      	mov	r2, r3
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <I3G450D_loop+0x764>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <I3G450D_loop+0x770>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	dd0a      	ble.n	800174c <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <I3G450D_loop+0x754>)
 8001738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800173e:	461a      	mov	r2, r3
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <I3G450D_loop+0x764>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <I3G450D_loop+0x770>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e015      	b.n	8001778 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <I3G450D_loop+0x754>)
 800174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001754:	461a      	mov	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <I3G450D_loop+0x764>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <I3G450D_loop+0x770>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	425b      	negs	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	da08      	bge.n	8001778 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <I3G450D_loop+0x764>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	493d      	ldr	r1, [pc, #244]	; (8001860 <I3G450D_loop+0x754>)
 800176c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800176e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <I3G450D_loop+0x770>)
 8001776:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <I3G450D_loop+0x758>)
 800177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	461a      	mov	r2, r3
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <I3G450D_loop+0x768>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <I3G450D_loop+0x774>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd0a      	ble.n	80017a6 <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <I3G450D_loop+0x758>)
 8001792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001798:	461a      	mov	r2, r3
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <I3G450D_loop+0x768>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <I3G450D_loop+0x774>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e015      	b.n	80017d2 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <I3G450D_loop+0x758>)
 80017a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <I3G450D_loop+0x768>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <I3G450D_loop+0x774>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	425b      	negs	r3, r3
 80017bc:	429a      	cmp	r2, r3
 80017be:	da08      	bge.n	80017d2 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <I3G450D_loop+0x768>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4927      	ldr	r1, [pc, #156]	; (8001864 <I3G450D_loop+0x758>)
 80017c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <I3G450D_loop+0x774>)
 80017d0:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d4:	3301      	adds	r3, #1
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017de:	f4ff af71 	bcc.w	80016c4 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <I3G450D_loop+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001884 <I3G450D_loop+0x778>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <I3G450D_loop+0x77c>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <I3G450D_loop+0x770>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001884 <I3G450D_loop+0x778>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <I3G450D_loop+0x780>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <I3G450D_loop+0x774>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001884 <I3G450D_loop+0x778>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <I3G450D_loop+0x784>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <I3G450D_loop+0x788>)
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
							break;
 8001836:	e004      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001838:	bf00      	nop
 800183a:	e002      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <I3G450D_loop+0x736>
						break;
 8001840:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <I3G450D_loop+0x78c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <I3G450D_loop+0x790>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e000      	b.n	8001852 <I3G450D_loop+0x746>
				break;
 8001850:	bf00      	nop

		}
}
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	; 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000228 	.word	0x20000228
 8001860:	200011c8 	.word	0x200011c8
 8001864:	20002168 	.word	0x20002168
 8001868:	66666667 	.word	0x66666667
 800186c:	200001e0 	.word	0x200001e0
 8001870:	200001e4 	.word	0x200001e4
 8001874:	200001e8 	.word	0x200001e8
 8001878:	20000210 	.word	0x20000210
 800187c:	20000214 	.word	0x20000214
 8001880:	20000218 	.word	0x20000218
 8001884:	3d8f5c29 	.word	0x3d8f5c29
 8001888:	200001ec 	.word	0x200001ec
 800188c:	200001f0 	.word	0x200001f0
 8001890:	200001f4 	.word	0x200001f4
 8001894:	200001cf 	.word	0x200001cf
 8001898:	200001d0 	.word	0x200001d0
 800189c:	20000000 	.word	0x20000000

080018a0 <LIS3DH_readReg>:
static uint8_t accelSpiRxBuf[7];


SPI_HandleTypeDef * LIS3DH_hspi;

uint8_t LIS3DH_readReg(uint8_t lis3dhReg){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]


		uint8_t sendAddr;
		uint8_t readData;

		sendAddr = LIS3DH_READ | lis3dhReg;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	73fb      	strb	r3, [r7, #15]

	    csOn();
 80018b4:	f000 f86c 	bl	8001990 <csOn>

	    HAL_SPI_Transmit(LIS3DH_hspi, &sendAddr, 1, HAL_MAX_DELAY);
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LIS3DH_readReg+0x4c>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	f107 010f 	add.w	r1, r7, #15
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	2201      	movs	r2, #1
 80018c6:	f004 fcea 	bl	800629e <HAL_SPI_Transmit>
	    HAL_SPI_Receive( LIS3DH_hspi, &readData, 1, HAL_MAX_DELAY);
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LIS3DH_readReg+0x4c>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f107 010e 	add.w	r1, r7, #14
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	2201      	movs	r2, #1
 80018d8:	f004 fe1d 	bl	8006516 <HAL_SPI_Receive>

		csOff();
 80018dc:	f000 f84c 	bl	8001978 <csOff>

		return (readData);
 80018e0:	7bbb      	ldrb	r3, [r7, #14]

}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20003114 	.word	0x20003114

080018f0 <LIS3DH_writeReg>:
void LIS3DH_writeReg(uint8_t lis3dhReg, uint8_t lis3dhValue)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	uint8_t sendAddr;
	uint8_t sendData;

	sendAddr = LIS3DH_WRITE | lis3dhReg;
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	73fb      	strb	r3, [r7, #15]
	sendData = lis3dhValue;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	73bb      	strb	r3, [r7, #14]

   csOn();
 8001908:	f000 f842 	bl	8001990 <csOn>

    HAL_SPI_Transmit(LIS3DH_hspi, &sendAddr, 1, HAL_MAX_DELAY);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <LIS3DH_writeReg+0x4c>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f107 010f 	add.w	r1, r7, #15
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001918:	2201      	movs	r2, #1
 800191a:	f004 fcc0 	bl	800629e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(LIS3DH_hspi, &sendData, 1, HAL_MAX_DELAY);
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <LIS3DH_writeReg+0x4c>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 010e 	add.w	r1, r7, #14
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	2201      	movs	r2, #1
 800192c:	f004 fcb7 	bl	800629e <HAL_SPI_Transmit>

	csOff();
 8001930:	f000 f822 	bl	8001978 <csOff>

	return;
 8001934:	bf00      	nop

}
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20003114 	.word	0x20003114

08001940 <Lis3dhInit>:



void Lis3dhInit(SPI_HandleTypeDef *hspi){
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
turn on the device and gather acceleration data, select the HR bit in CTRL_REG4 and the
LPen bit in CTRL_REG1, enable at least one of the axes and select the preferred ODR.*/



	LIS3DH_hspi = hspi;
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <Lis3dhInit+0x34>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef hal_res;

//writs to Ctrl_reg1 to wake it up.
	LIS3DH_writeReg(0x20,0x7);
 800194e:	2107      	movs	r1, #7
 8001950:	2020      	movs	r0, #32
 8001952:	f7ff ffcd 	bl	80018f0 <LIS3DH_writeReg>
	uint8_t ctrl_reg =LIS3DH_readReg(0x20);
 8001956:	2020      	movs	r0, #32
 8001958:	f7ff ffa2 	bl	80018a0 <LIS3DH_readReg>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
	uint8_t who_am_i = LIS3DH_readReg(0x0f);
 8001960:	200f      	movs	r0, #15
 8001962:	f7ff ff9d 	bl	80018a0 <LIS3DH_readReg>
 8001966:	4603      	mov	r3, r0
 8001968:	73bb      	strb	r3, [r7, #14]





}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20003114 	.word	0x20003114

08001978 <csOff>:
/* Private APIs */
/** @brief Set SPI Chip select OFF
 * @retval none
 */
void csOff(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSport, CSpin , GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2104      	movs	r1, #4
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <csOff+0x14>)
 8001982:	f002 f987 	bl	8003c94 <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40020c00 	.word	0x40020c00

08001990 <csOn>:

/** @brief Set SPI Chip select ON this accelerometor expects low on cs transmitting
 * @retval none
 */
void csOn(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSport, CSpin , GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2104      	movs	r1, #4
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <csOn+0x14>)
 800199a:	f002 f97b 	bl	8003c94 <HAL_GPIO_WritePin>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f001 fa85 	bl	8002ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f857 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fabb 	bl	8001f30 <MX_GPIO_Init>
  MX_CRC_Init();
 80019ba:	f000 f8bd 	bl	8001b38 <MX_CRC_Init>
  MX_I2C3_Init();
 80019be:	f000 f8cf 	bl	8001b60 <MX_I2C3_Init>
  MX_SPI5_Init();
 80019c2:	f000 f943 	bl	8001c4c <MX_SPI5_Init>
  MX_TIM1_Init();
 80019c6:	f000 f977 	bl	8001cb8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80019ca:	f000 fa3d 	bl	8001e48 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80019ce:	f000 fa8f 	bl	8001ef0 <MX_DMA_Init>
  MX_TIM2_Init();
 80019d2:	f000 f9c5 	bl	8001d60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80019d6:	f000 fa61 	bl	8001e9c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80019da:	f000 f901 	bl	8001be0 <MX_SPI3_Init>
  MX_FATFS_Init();
 80019de:	f008 fa51 	bl	8009e84 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80019e2:	f00b fbc3 	bl	800d16c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 80019e6:	f7ff fad7 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 80019ea:	481c      	ldr	r0, [pc, #112]	; (8001a5c <main+0xb4>)
 80019ec:	f000 fd72 	bl	80024d4 <RetargetInit>
  ConsoleInit(&huart1);
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <main+0xb4>)
 80019f2:	f7fe fe79 	bl	80006e8 <ConsoleInit>
  Lis3dhInit(&hspi3);
 80019f6:	481a      	ldr	r0, [pc, #104]	; (8001a60 <main+0xb8>)
 80019f8:	f7ff ffa2 	bl	8001940 <Lis3dhInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8001a00:	230b      	movs	r3, #11
 8001a02:	717b      	strb	r3, [r7, #5]

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001a04:	f00b fbd8 	bl	800d1b8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	71bb      	strb	r3, [r7, #6]
 8001a0c:	e01b      	b.n	8001a46 <main+0x9e>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001a0e:	79ba      	ldrb	r2, [r7, #6]
 8001a10:	797b      	ldrb	r3, [r7, #5]
 8001a12:	fb12 f303 	smulbb	r3, r2, r3
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	227f      	movs	r2, #127	; 0x7f
 8001a20:	21ff      	movs	r1, #255	; 0xff
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc8a 	bl	800233c <hsl_to_rgb>
 8001a28:	6038      	str	r0, [r7, #0]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	b2d9      	uxtb	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	79b8      	ldrb	r0, [r7, #6]
 8001a3c:	f000 fe24 	bl	8002688 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	3301      	adds	r3, #1
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	d9e0      	bls.n	8001a0e <main+0x66>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
	  		//led_render();
	  		// Some delay*/


	  		ConsoleProcess();
 8001a52:	f7fe fe79 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 8001a56:	f7ff fb59 	bl	800110c <I3G450D_loop>
    MX_USB_HOST_Process();
 8001a5a:	e7d3      	b.n	8001a04 <main+0x5c>
 8001a5c:	20003314 	.word	0x20003314
 8001a60:	20003174 	.word	0x20003174

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	; 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00b ff04 	bl	800d880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <SystemClock_Config+0xcc>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <SystemClock_Config+0xcc>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <SystemClock_Config+0xcc>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <SystemClock_Config+0xd0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <SystemClock_Config+0xd0>)
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <SystemClock_Config+0xd0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001adc:	2348      	movs	r3, #72	; 0x48
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 feb5 	bl	800585c <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001af8:	f000 fce6 	bl	80024c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	230f      	movs	r3, #15
 8001afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b00:	2302      	movs	r3, #2
 8001b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 f917 	bl	8005d4c <HAL_RCC_ClockConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b24:	f000 fcd0 	bl	80024c8 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3750      	adds	r7, #80	; 0x50
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_CRC_Init+0x20>)
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <MX_CRC_Init+0x24>)
 8001b40:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_CRC_Init+0x20>)
 8001b44:	f001 fb61 	bl	800320a <HAL_CRC_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b4e:	f000 fcbb 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20003118 	.word	0x20003118
 8001b5c:	40023000 	.word	0x40023000

08001b60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_I2C3_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <MX_I2C3_Init+0x7c>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001b9e:	f003 fc9d 	bl	80054dc <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fc8e 	bl	80024c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001bb0:	f003 fdd8 	bl	8005764 <HAL_I2CEx_ConfigAnalogFilter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f000 fc85 	bl	80024c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C3_Init+0x74>)
 8001bc2:	f003 fe0b 	bl	80057dc <HAL_I2CEx_ConfigDigitalFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 fc7c 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20003120 	.word	0x20003120
 8001bd8:	40005c00 	.word	0x40005c00
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI3_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI3_Init+0x64>)
 8001c32:	f004 faab 	bl	800618c <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 fc44 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20003174 	.word	0x20003174
 8001c48:	40003c00 	.word	0x40003c00

08001c4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <MX_SPI5_Init+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c80:	2218      	movs	r2, #24
 8001c82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c98:	220a      	movs	r2, #10
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c9e:	f004 fa75 	bl	800618c <HAL_SPI_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ca8:	f000 fc0e 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200031cc 	.word	0x200031cc
 8001cb4:	40015000 	.word	0x40015000

08001cb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <MX_TIM1_Init+0xa4>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d00:	4815      	ldr	r0, [pc, #84]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001d02:	f004 ffeb 	bl	8006cdc <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d0c:	f000 fbdc 	bl	80024c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480e      	ldr	r0, [pc, #56]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001d1e:	f005 fb21 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d28:	f000 fbce 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001d3a:	f005 ff13 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d44:	f000 fbc0 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM1_Init+0xa0>)
 8001d4a:	f000 febd 	bl	8002ac8 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20003224 	.word	0x20003224
 8001d5c:	40010000 	.word	0x40010000

08001d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001da6:	223b      	movs	r2, #59	; 0x3b
 8001da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001db8:	f004 ff90 	bl	8006cdc <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001dc2:	f000 fb81 	bl	80024c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001dd4:	f005 fac6 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001dde:	f000 fb73 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de2:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001de4:	f004 ffc9 	bl	8006d7a <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001dee:	f000 fb6b 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4810      	ldr	r0, [pc, #64]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001e02:	f005 feaf 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e0c:	f000 fb5c 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e10:	2360      	movs	r3, #96	; 0x60
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001e28:	f005 f9da 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e32:	f000 fb49 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM2_Init+0xe4>)
 8001e38:	f000 feb6 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3738      	adds	r7, #56	; 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000326c 	.word	0x2000326c

08001e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <MX_USART1_UART_Init+0x50>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART1_UART_Init+0x4c>)
 8001e80:	f005 ff00 	bl	8007c84 <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e8a:	f000 fb1d 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20003314 	.word	0x20003314
 8001e98:	40011000 	.word	0x40011000

08001e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_USART2_UART_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ea8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ed4:	f005 fed6 	bl	8007c84 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 faf3 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20003358 	.word	0x20003358
 8001eec:	40004400 	.word	0x40004400

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2010      	movs	r0, #16
 8001f18:	f001 f941 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f001 f95a 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	4bb2      	ldr	r3, [pc, #712]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4ab1      	ldr	r2, [pc, #708]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4baf      	ldr	r3, [pc, #700]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	4bab      	ldr	r3, [pc, #684]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4aaa      	ldr	r2, [pc, #680]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4ba8      	ldr	r3, [pc, #672]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4ba4      	ldr	r3, [pc, #656]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4aa3      	ldr	r2, [pc, #652]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a9c      	ldr	r2, [pc, #624]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b9a      	ldr	r3, [pc, #616]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b96      	ldr	r3, [pc, #600]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a95      	ldr	r2, [pc, #596]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b93      	ldr	r3, [pc, #588]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a8e      	ldr	r2, [pc, #568]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a87      	ldr	r2, [pc, #540]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b85      	ldr	r3, [pc, #532]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b81      	ldr	r3, [pc, #516]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a80      	ldr	r2, [pc, #512]	; (8002214 <MX_GPIO_Init+0x2e4>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <MX_GPIO_Init+0x2e4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2116      	movs	r1, #22
 800202a:	487b      	ldr	r0, [pc, #492]	; (8002218 <MX_GPIO_Init+0x2e8>)
 800202c:	f001 fe32 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	4879      	ldr	r0, [pc, #484]	; (800221c <MX_GPIO_Init+0x2ec>)
 8002036:	f001 fe2d 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f243 0104 	movw	r1, #12292	; 0x3004
 8002040:	4877      	ldr	r0, [pc, #476]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8002042:	f001 fe27 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800204c:	4875      	ldr	r0, [pc, #468]	; (8002224 <MX_GPIO_Init+0x2f4>)
 800204e:	f001 fe21 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002064:	230c      	movs	r3, #12
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	486e      	ldr	r0, [pc, #440]	; (8002228 <MX_GPIO_Init+0x2f8>)
 8002070:	f001 fc64 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002086:	230e      	movs	r3, #14
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	4865      	ldr	r0, [pc, #404]	; (8002228 <MX_GPIO_Init+0x2f8>)
 8002092:	f001 fc53 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002096:	2301      	movs	r3, #1
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020a6:	230c      	movs	r3, #12
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4859      	ldr	r0, [pc, #356]	; (8002218 <MX_GPIO_Init+0x2e8>)
 80020b2:	f001 fc43 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80020b6:	2316      	movs	r3, #22
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4852      	ldr	r0, [pc, #328]	; (8002218 <MX_GPIO_Init+0x2e8>)
 80020ce:	f001 fc35 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80020d2:	2307      	movs	r3, #7
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	484d      	ldr	r0, [pc, #308]	; (800221c <MX_GPIO_Init+0x2ec>)
 80020e8:	f001 fc28 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020ec:	f641 0358 	movw	r3, #6232	; 0x1858
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fe:	230e      	movs	r3, #14
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002106:	4619      	mov	r1, r3
 8002108:	4844      	ldr	r0, [pc, #272]	; (800221c <MX_GPIO_Init+0x2ec>)
 800210a:	f001 fc17 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	483d      	ldr	r0, [pc, #244]	; (800221c <MX_GPIO_Init+0x2ec>)
 8002126:	f001 fc09 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800212a:	2320      	movs	r3, #32
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800212e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4836      	ldr	r0, [pc, #216]	; (8002218 <MX_GPIO_Init+0x2e8>)
 8002140:	f001 fbfc 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002144:	2303      	movs	r3, #3
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002154:	2309      	movs	r3, #9
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4833      	ldr	r0, [pc, #204]	; (800222c <MX_GPIO_Init+0x2fc>)
 8002160:	f001 fbec 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002164:	2304      	movs	r3, #4
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <MX_GPIO_Init+0x2fc>)
 8002178:	f001 fbe0 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800217c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800218e:	230c      	movs	r3, #12
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	4619      	mov	r1, r3
 8002198:	4822      	ldr	r0, [pc, #136]	; (8002224 <MX_GPIO_Init+0x2f4>)
 800219a:	f001 fbcf 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800219e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021b0:	230c      	movs	r3, #12
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	481d      	ldr	r0, [pc, #116]	; (8002230 <MX_GPIO_Init+0x300>)
 80021bc:	f001 fbbe 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80021c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d2:	230e      	movs	r3, #14
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <MX_GPIO_Init+0x2fc>)
 80021de:	f001 fbad 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80021e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021f4:	230c      	movs	r3, #12
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8002200:	f001 fb9c 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	e010      	b.n	8002234 <MX_GPIO_Init+0x304>
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40020800 	.word	0x40020800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021800 	.word	0x40021800
 8002228:	40021400 	.word	0x40021400
 800222c:	40020400 	.word	0x40020400
 8002230:	40021000 	.word	0x40021000
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223a:	4619      	mov	r1, r3
 800223c:	483b      	ldr	r0, [pc, #236]	; (800232c <MX_GPIO_Init+0x3fc>)
 800223e:	f001 fb7d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 8002242:	f243 0304 	movw	r3, #12292	; 0x3004
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	4834      	ldr	r0, [pc, #208]	; (800232c <MX_GPIO_Init+0x3fc>)
 800225c:	f001 fb6e 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002260:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002272:	230e      	movs	r3, #14
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4619      	mov	r1, r3
 800227c:	482c      	ldr	r0, [pc, #176]	; (8002330 <MX_GPIO_Init+0x400>)
 800227e:	f001 fb5d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8002282:	23c0      	movs	r3, #192	; 0xc0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002292:	230e      	movs	r3, #14
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4825      	ldr	r0, [pc, #148]	; (8002334 <MX_GPIO_Init+0x404>)
 800229e:	f001 fb4d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 80022a2:	2308      	movs	r3, #8
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b2:	230e      	movs	r3, #14
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	4619      	mov	r1, r3
 80022bc:	481b      	ldr	r0, [pc, #108]	; (800232c <MX_GPIO_Init+0x3fc>)
 80022be:	f001 fb3d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80022c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022d4:	2309      	movs	r3, #9
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	4619      	mov	r1, r3
 80022de:	4814      	ldr	r0, [pc, #80]	; (8002330 <MX_GPIO_Init+0x400>)
 80022e0:	f001 fb2c 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80022e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MX_GPIO_Init+0x400>)
 80022fe:	f001 fb1d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002302:	2360      	movs	r3, #96	; 0x60
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002312:	230c      	movs	r3, #12
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <MX_GPIO_Init+0x408>)
 800231e:	f001 fb0d 	bl	800393c <HAL_GPIO_Init>

}
 8002322:	bf00      	nop
 8002324:	3738      	adds	r7, #56	; 0x38
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021800 	.word	0x40021800
 8002334:	40020800 	.word	0x40020800
 8002338:	40020400 	.word	0x40020400

0800233c <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800234e:	797b      	ldrb	r3, [r7, #5]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <hsl_to_rgb+0x1c>
 8002354:	2300      	movs	r3, #0
 8002356:	e0b1      	b.n	80024bc <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002358:	797b      	ldrb	r3, [r7, #5]
 800235a:	b29b      	uxth	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8002362:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db09      	blt.n	800237e <hsl_to_rgb+0x42>
 800236a:	89bb      	ldrh	r3, [r7, #12]
 800236c:	b29b      	uxth	r3, r3
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	79ba      	ldrb	r2, [r7, #6]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	121b      	asrs	r3, r3, #8
 8002378:	b2db      	uxtb	r3, r3
 800237a:	74fb      	strb	r3, [r7, #19]
 800237c:	e00a      	b.n	8002394 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800237e:	89bb      	ldrh	r3, [r7, #12]
 8002380:	b29b      	uxth	r3, r3
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002388:	79ba      	ldrb	r2, [r7, #6]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	121b      	asrs	r3, r3, #8
 8002390:	b2db      	uxtb	r3, r3
 8002392:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	0052      	lsls	r2, r2, #1
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80023a4:	897b      	ldrh	r3, [r7, #10]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80023ac:	7d3b      	ldrb	r3, [r7, #20]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80023b8:	897b      	ldrh	r3, [r7, #10]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <hsl_to_rgb+0x9c>
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	7cfa      	ldrb	r2, [r7, #19]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	121b      	asrs	r3, r3, #8
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	74bb      	strb	r3, [r7, #18]
 80023d6:	e00a      	b.n	80023ee <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80023d8:	89fb      	ldrh	r3, [r7, #14]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80023e0:	7cfa      	ldrb	r2, [r7, #19]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	121b      	asrs	r3, r3, #8
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	797a      	ldrb	r2, [r7, #5]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	b29b      	uxth	r3, r3
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b04      	cmp	r3, #4
 8002408:	d839      	bhi.n	800247e <hsl_to_rgb+0x142>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <hsl_to_rgb+0xd4>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002425 	.word	0x08002425
 8002414:	08002437 	.word	0x08002437
 8002418:	08002449 	.word	0x08002449
 800241c:	0800245b 	.word	0x0800245b
 8002420:	0800246d 	.word	0x0800246d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	75fb      	strb	r3, [r7, #23]
 800242a:	7cbb      	ldrb	r3, [r7, #18]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	75bb      	strb	r3, [r7, #22]
 8002430:	2300      	movs	r3, #0
 8002432:	757b      	strb	r3, [r7, #21]
 8002434:	e02c      	b.n	8002490 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002436:	7cbb      	ldrb	r3, [r7, #18]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	75fb      	strb	r3, [r7, #23]
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	75bb      	strb	r3, [r7, #22]
 8002442:	2300      	movs	r3, #0
 8002444:	757b      	strb	r3, [r7, #21]
 8002446:	e023      	b.n	8002490 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	75bb      	strb	r3, [r7, #22]
 8002452:	7cbb      	ldrb	r3, [r7, #18]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	757b      	strb	r3, [r7, #21]
 8002458:	e01a      	b.n	8002490 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	7cbb      	ldrb	r3, [r7, #18]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	75bb      	strb	r3, [r7, #22]
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	757b      	strb	r3, [r7, #21]
 800246a:	e011      	b.n	8002490 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800246c:	7cbb      	ldrb	r3, [r7, #18]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	75fb      	strb	r3, [r7, #23]
 8002472:	2300      	movs	r3, #0
 8002474:	75bb      	strb	r3, [r7, #22]
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	757b      	strb	r3, [r7, #21]
 800247c:	e008      	b.n	8002490 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	75fb      	strb	r3, [r7, #23]
 8002484:	2300      	movs	r3, #0
 8002486:	75bb      	strb	r3, [r7, #22]
 8002488:	7cbb      	ldrb	r3, [r7, #18]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	757b      	strb	r3, [r7, #21]
 800248e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	7c7b      	ldrb	r3, [r7, #17]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4413      	add	r3, r2
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	7c7b      	ldrb	r3, [r7, #17]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	440b      	add	r3, r1
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	431a      	orrs	r2, r3
 80024ae:	7d7b      	ldrb	r3, [r7, #21]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	7c7b      	ldrb	r3, [r7, #17]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	440b      	add	r3, r1
 80024ba:	4313      	orrs	r3, r2
}
 80024bc:	4618      	mov	r0, r3
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <RetargetInit+0x28>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <RetargetInit+0x2c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6898      	ldr	r0, [r3, #8]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2202      	movs	r2, #2
 80024ec:	2100      	movs	r1, #0
 80024ee:	f00b fad7 	bl	800daa0 <setvbuf>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000339c 	.word	0x2000339c
 8002500:	20000030 	.word	0x20000030

08002504 <_isatty>:

int _isatty(int fd) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db04      	blt.n	800251c <_isatty+0x18>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	dc01      	bgt.n	800251c <_isatty+0x18>
    return 1;
 8002518:	2301      	movs	r3, #1
 800251a:	e005      	b.n	8002528 <_isatty+0x24>

  errno = EBADF;
 800251c:	f00b f968 	bl	800d7f0 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	2209      	movs	r2, #9
 8002524:	601a      	str	r2, [r3, #0]
  return 0;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_write>:

int _write(int fd, char* ptr, int len) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d002      	beq.n	8002548 <_write+0x18>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d111      	bne.n	800256c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <_write+0x54>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	b29a      	uxth	r2, r3
 8002550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	f005 fbe2 	bl	8007d1e <HAL_UART_Transmit>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <_write+0x38>
      return len;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	e008      	b.n	800257a <_write+0x4a>
    else
      return EIO;
 8002568:	2305      	movs	r3, #5
 800256a:	e006      	b.n	800257a <_write+0x4a>
  }
  errno = EBADF;
 800256c:	f00b f940 	bl	800d7f0 <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	2209      	movs	r2, #9
 8002574:	601a      	str	r2, [r3, #0]
  return -1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000339c 	.word	0x2000339c

08002588 <_close>:

int _close(int fd) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db04      	blt.n	80025a0 <_close+0x18>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b02      	cmp	r3, #2
 800259a:	dc01      	bgt.n	80025a0 <_close+0x18>
    return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e006      	b.n	80025ae <_close+0x26>

  errno = EBADF;
 80025a0:	f00b f926 	bl	800d7f0 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2209      	movs	r2, #9
 80025a8:	601a      	str	r2, [r3, #0]
  return -1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80025c2:	f00b f915 	bl	800d7f0 <__errno>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2209      	movs	r2, #9
 80025ca:	601a      	str	r2, [r3, #0]
  return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_read>:

int _read(int fd, char* ptr, int len) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d110      	bne.n	800260c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <_read+0x4c>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f2:	2201      	movs	r2, #1
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	f005 fc24 	bl	8007e42 <HAL_UART_Receive>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <_read+0x30>
      return 1;
 8002604:	2301      	movs	r3, #1
 8002606:	e008      	b.n	800261a <_read+0x42>
    else
      return EIO;
 8002608:	2305      	movs	r3, #5
 800260a:	e006      	b.n	800261a <_read+0x42>
  }
  errno = EBADF;
 800260c:	f00b f8f0 	bl	800d7f0 <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	2209      	movs	r2, #9
 8002614:	601a      	str	r2, [r3, #0]
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000339c 	.word	0x2000339c

08002628 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db08      	blt.n	800264a <_fstat+0x22>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	dc05      	bgt.n	800264a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002644:	605a      	str	r2, [r3, #4]
    return 0;
 8002646:	2300      	movs	r3, #0
 8002648:	e005      	b.n	8002656 <_fstat+0x2e>
  }

  errno = EBADF;
 800264a:	f00b f8d1 	bl	800d7f0 <__errno>
 800264e:	4603      	mov	r3, r0
 8002650:	2209      	movs	r2, #9
 8002652:	601a      	str	r2, [r3, #0]
  return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	460a      	mov	r2, r1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	4613      	mov	r3, r2
 800266c:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	79ba      	ldrb	r2, [r7, #6]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	121b      	asrs	r3, r3, #8
 8002678:	b2db      	uxtb	r3, r3
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	4603      	mov	r3, r0
 800269c:	71bb      	strb	r3, [r7, #6]
 800269e:	460b      	mov	r3, r1
 80026a0:	717b      	strb	r3, [r7, #5]
 80026a2:	4613      	mov	r3, r2
 80026a4:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	189c      	adds	r4, r3, r2
 80026ae:	797b      	ldrb	r3, [r7, #5]
 80026b0:	21b0      	movs	r1, #176	; 0xb0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ffd3 	bl	800265e <scale8>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <led_set_RGB+0x6c>)
 80026be:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3301      	adds	r3, #1
 80026ca:	490a      	ldr	r1, [pc, #40]	; (80026f4 <led_set_RGB+0x6c>)
 80026cc:	79ba      	ldrb	r2, [r7, #6]
 80026ce:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	1c9c      	adds	r4, r3, #2
 80026da:	793b      	ldrb	r3, [r7, #4]
 80026dc:	21f0      	movs	r1, #240	; 0xf0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffbd 	bl	800265e <scale8>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <led_set_RGB+0x6c>)
 80026ea:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	200033a0 	.word	0x200033a0

080026f8 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002700:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d852      	bhi.n	80027ae <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e046      	b.n	800279c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	4a37      	ldr	r2, [pc, #220]	; (80027f8 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	461a      	mov	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	dd01      	ble.n	8002730 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 800272c:	2126      	movs	r1, #38	; 0x26
 800272e:	e000      	b.n	8002732 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002730:	2113      	movs	r1, #19
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3318      	adds	r3, #24
 8002736:	4a31      	ldr	r2, [pc, #196]	; (80027fc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002738:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3301      	adds	r3, #1
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	dd01      	ble.n	800275e <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 800275a:	2126      	movs	r1, #38	; 0x26
 800275c:	e000      	b.n	8002760 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800275e:	2113      	movs	r1, #19
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3320      	adds	r3, #32
 8002764:	4a25      	ldr	r2, [pc, #148]	; (80027fc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002766:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002768:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3302      	adds	r3, #2
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	dd01      	ble.n	800278c <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002788:	2126      	movs	r1, #38	; 0x26
 800278a:	e000      	b.n	800278e <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 800278c:	2113      	movs	r1, #19
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3328      	adds	r3, #40	; 0x28
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002794:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d9b5      	bls.n	800270e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027aa:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80027ac:	e01d      	b.n	80027ea <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d812      	bhi.n	80027dc <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80027b6:	2318      	movs	r3, #24
 80027b8:	72fb      	strb	r3, [r7, #11]
 80027ba:	e006      	b.n	80027ca <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80027bc:	7afb      	ldrb	r3, [r7, #11]
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80027c0:	2100      	movs	r1, #0
 80027c2:	54d1      	strb	r1, [r2, r3]
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	3301      	adds	r3, #1
 80027c8:	72fb      	strb	r3, [r7, #11]
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	2b2f      	cmp	r3, #47	; 0x2f
 80027ce:	d9f5      	bls.n	80027bc <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027d8:	6013      	str	r3, [r2, #0]
}
 80027da:	e006      	b.n	80027ea <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80027e2:	2100      	movs	r1, #0
 80027e4:	4806      	ldr	r0, [pc, #24]	; (8002800 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80027e6:	f004 fb21 	bl	8006e2c <HAL_TIM_PWM_Stop_DMA>
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200033e4 	.word	0x200033e4
 80027f8:	200033a0 	.word	0x200033a0
 80027fc:	200033b4 	.word	0x200033b4
 8002800:	2000326c 	.word	0x2000326c

08002804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_MspInit+0x68>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_MspInit+0x68>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_MspInit+0x68>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_MspInit+0x68>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_MspInit+0x68>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_MspInit+0x68>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2005      	movs	r0, #5
 8002848:	f000 fca9 	bl	800319e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800284c:	2005      	movs	r0, #5
 800284e:	f000 fcc2 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	2005      	movs	r0, #5
 8002858:	f000 fca1 	bl	800319e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800285c:	2005      	movs	r0, #5
 800285e:	f000 fcba 	bl	80031d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <HAL_CRC_MspInit+0x3c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10d      	bne.n	800289e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_CRC_MspInit+0x40>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_CRC_MspInit+0x40>)
 800288c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_CRC_MspInit+0x40>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023000 	.word	0x40023000
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a29      	ldr	r2, [pc, #164]	; (8002978 <HAL_I2C_MspInit+0xc4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d14b      	bne.n	800296e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_I2C_MspInit+0xc8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_I2C_MspInit+0xc8>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_I2C_MspInit+0xc8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_I2C_MspInit+0xc8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_I2C_MspInit+0xc8>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_I2C_MspInit+0xc8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800290e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002920:	2304      	movs	r3, #4
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4619      	mov	r1, r3
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <HAL_I2C_MspInit+0xcc>)
 800292c:	f001 f806 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002936:	2312      	movs	r3, #18
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293a:	2301      	movs	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002942:	2304      	movs	r3, #4
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <HAL_I2C_MspInit+0xd0>)
 800294e:	f000 fff5 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_I2C_MspInit+0xc8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_I2C_MspInit+0xc8>)
 800295c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_I2C_MspInit+0xc8>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3728      	adds	r7, #40	; 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40005c00 	.word	0x40005c00
 800297c:	40023800 	.word	0x40023800
 8002980:	40020800 	.word	0x40020800
 8002984:	40020000 	.word	0x40020000

08002988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <HAL_SPI_MspInit+0x128>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d14c      	bne.n	8002a44 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a40      	ldr	r2, [pc, #256]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a39      	ldr	r2, [pc, #228]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a10:	2306      	movs	r3, #6
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4827      	ldr	r0, [pc, #156]	; (8002ab8 <HAL_SPI_MspInit+0x130>)
 8002a1c:	f000 ff8e 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a32:	2306      	movs	r3, #6
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481f      	ldr	r0, [pc, #124]	; (8002abc <HAL_SPI_MspInit+0x134>)
 8002a3e:	f000 ff7d 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002a42:	e031      	b.n	8002aa8 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_SPI_MspInit+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d12c      	bne.n	8002aa8 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_SPI_MspInit+0x12c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a86:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a98:	2305      	movs	r3, #5
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <HAL_SPI_MspInit+0x13c>)
 8002aa4:	f000 ff4a 	bl	800393c <HAL_GPIO_Init>
}
 8002aa8:	bf00      	nop
 8002aaa:	3730      	adds	r7, #48	; 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40003c00 	.word	0x40003c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40015000 	.word	0x40015000
 8002ac4:	40021400 	.word	0x40021400

08002ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <HAL_TIM_Base_MspInit+0xd0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002af6:	e04a      	b.n	8002b8e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d145      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_TIM_Base_MspInit+0xd4>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_TIM_Base_MspInit+0xdc>)
 8002b22:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b26:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b2a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b52:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b62:	480f      	ldr	r0, [pc, #60]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b64:	f000 fb6e 	bl	8003244 <HAL_DMA_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002b6e:	f7ff fcab 	bl	80024c8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_TIM_Base_MspInit+0xd8>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	201c      	movs	r0, #28
 8002b84:	f000 fb0b 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b88:	201c      	movs	r0, #28
 8002b8a:	f000 fb24 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	200032b4 	.word	0x200032b4
 8002ba4:	40026088 	.word	0x40026088

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d11d      	bne.n	8002c06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_TIM_MspPostInit+0x68>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_TIM_MspPostInit+0x68>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_TIM_MspPostInit+0x68>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002be6:	2320      	movs	r3, #32
 8002be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002c02:	f000 fe9b 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c06:	bf00      	nop
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000

08002c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_UART_MspInit+0xf8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d135      	bne.n	8002ca6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c44:	f043 0310 	orr.w	r3, r3, #16
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c84:	2307      	movs	r3, #7
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4822      	ldr	r0, [pc, #136]	; (8002d18 <HAL_UART_MspInit+0x100>)
 8002c90:	f000 fe54 	bl	800393c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2025      	movs	r0, #37	; 0x25
 8002c9a:	f000 fa80 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c9e:	2025      	movs	r0, #37	; 0x25
 8002ca0:	f000 fa99 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ca4:	e030      	b.n	8002d08 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_UART_MspInit+0x104>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d12b      	bne.n	8002d08 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cd6:	f043 0308 	orr.w	r3, r3, #8
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_UART_MspInit+0xfc>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ce8:	2360      	movs	r3, #96	; 0x60
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	4619      	mov	r1, r3
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <HAL_UART_MspInit+0x108>)
 8002d04:	f000 fe1a 	bl	800393c <HAL_GPIO_Init>
}
 8002d08:	bf00      	nop
 8002d0a:	3730      	adds	r7, #48	; 0x30
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	40020c00 	.word	0x40020c00

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <NMI_Handler+0x4>

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d70:	f000 f8f6 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Stream5_IRQHandler+0x10>)
 8002d8e:	f000 fb99 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200032b4 	.word	0x200032b4

08002d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <TIM2_IRQHandler+0x10>)
 8002da2:	f004 f915 	bl	8006fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000326c 	.word	0x2000326c

08002db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART1_IRQHandler+0x10>)
 8002db6:	f005 f917 	bl	8007fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20003314 	.word	0x20003314

08002dc4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <OTG_HS_IRQHandler+0x10>)
 8002dca:	f001 f9e7 	bl	800419c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200037e0 	.word	0x200037e0

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f00a fcf2 	bl	800d7f0 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20030000 	.word	0x20030000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	200033e8 	.word	0x200033e8
 8002e40:	20003af8 	.word	0x20003af8

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <SystemInit+0x20>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <SystemInit+0x20>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e6c:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e6e:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e70:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e74:	e002      	b.n	8002e7c <LoopCopyDataInit>

08002e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7a:	3304      	adds	r3, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e80:	d3f9      	bcc.n	8002e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e84:	4c0b      	ldr	r4, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e88:	e001      	b.n	8002e8e <LoopFillZerobss>

08002e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e8c:	3204      	adds	r2, #4

08002e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e90:	d3fb      	bcc.n	8002e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e92:	f7ff ffd7 	bl	8002e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e96:	f00a fcb1 	bl	800d7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9a:	f7fe fd85 	bl	80019a8 <main>
  bx  lr    
 8002e9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ea0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002eac:	0800efe0 	.word	0x0800efe0
  ldr r2, =_sbss
 8002eb0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002eb4:	20003af4 	.word	0x20003af4

08002eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_Init+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_Init+0x40>)
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_Init+0x40>)
 8002ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_Init+0x40>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 f94f 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eea:	200f      	movs	r0, #15
 8002eec:	f000 f808 	bl	8002f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef0:	f7ff fc88 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x54>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x58>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f967 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3c:	f000 f92f 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <HAL_InitTick+0x5c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000004 	.word	0x20000004
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	20000008 	.word	0x20000008

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	200033ec 	.word	0x200033ec

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	200033ec 	.word	0x200033ec

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e00e      	b.n	800323a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	795b      	ldrb	r3, [r3, #5]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fb1f 	bl	8002870 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff fe9a 	bl	8002f88 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e099      	b.n	8003394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	e00f      	b.n	80032a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003282:	f7ff fe81 	bl	8002f88 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b05      	cmp	r3, #5
 800328e:	d908      	bls.n	80032a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2203      	movs	r2, #3
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e078      	b.n	8003394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e8      	bne.n	8003282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_DMA_Init+0x158>)
 80032bc:	4013      	ands	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d107      	bne.n	800330c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4313      	orrs	r3, r2
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0307 	bic.w	r3, r3, #7
 8003322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b04      	cmp	r3, #4
 8003334:	d117      	bne.n	8003366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa7b 	bl	8003844 <DMA_CheckFifoParam>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003362:	2301      	movs	r3, #1
 8003364:	e016      	b.n	8003394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa32 	bl	80037d8 <DMA_CalcBaseAndBitshift>
 8003374:	4603      	mov	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	223f      	movs	r2, #63	; 0x3f
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f010803f 	.word	0xf010803f

080033a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ae:	f7ff fdeb 	bl	8002f88 <HAL_GetTick>
 80033b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d008      	beq.n	80033d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e052      	b.n	8003478 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0216 	bic.w	r2, r2, #22
 80033e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_DMA_Abort+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0208 	bic.w	r2, r2, #8
 8003410:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	e013      	b.n	800344c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003424:	f7ff fdb0 	bl	8002f88 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d90c      	bls.n	800344c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e015      	b.n	8003478 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e4      	bne.n	8003424 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	223f      	movs	r2, #63	; 0x3f
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d004      	beq.n	800349e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00c      	b.n	80034b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034d0:	4b8e      	ldr	r3, [pc, #568]	; (800370c <HAL_DMA_IRQHandler+0x248>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <HAL_DMA_IRQHandler+0x24c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2208      	movs	r2, #8
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2208      	movs	r2, #8
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2204      	movs	r2, #4
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2204      	movs	r2, #4
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2210      	movs	r2, #16
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d043      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2210      	movs	r2, #16
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e01f      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e016      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2220      	movs	r2, #32
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 808f 	beq.w	8003764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8087 	beq.w	8003764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b05      	cmp	r3, #5
 800366c:	d136      	bne.n	80036dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0216 	bic.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_DMA_IRQHandler+0x1da>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0208 	bic.w	r2, r2, #8
 80036ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	223f      	movs	r2, #63	; 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
        }
        return;
 80036da:	e079      	b.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d031      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e02c      	b.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
 800370a:	bf00      	nop
 800370c:	20000004 	.word	0x20000004
 8003710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d023      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e01e      	b.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	2b00      	cmp	r3, #0
 800376a:	d032      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2205      	movs	r2, #5
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	3301      	adds	r3, #1
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d307      	bcc.n	80037ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f2      	bne.n	8003790 <HAL_DMA_IRQHandler+0x2cc>
 80037aa:	e000      	b.n	80037ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037d0:	bf00      	nop
    }
  }
}
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3b10      	subs	r3, #16
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <DMA_CalcBaseAndBitshift+0x64>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <DMA_CalcBaseAndBitshift+0x68>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d909      	bls.n	800381a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	1d1a      	adds	r2, r3, #4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	659a      	str	r2, [r3, #88]	; 0x58
 8003818:	e007      	b.n	800382a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	aaaaaaab 	.word	0xaaaaaaab
 8003840:	0800ee18 	.word	0x0800ee18

08003844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11f      	bne.n	800389e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d856      	bhi.n	8003912 <DMA_CheckFifoParam+0xce>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <DMA_CheckFifoParam+0x28>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388f 	.word	0x0800388f
 8003874:	0800387d 	.word	0x0800387d
 8003878:	08003913 	.word	0x08003913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d046      	beq.n	8003916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388c:	e043      	b.n	8003916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003896:	d140      	bne.n	800391a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389c:	e03d      	b.n	800391a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	d121      	bne.n	80038ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d837      	bhi.n	800391e <DMA_CheckFifoParam+0xda>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <DMA_CheckFifoParam+0x70>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038cb 	.word	0x080038cb
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	080038dd 	.word	0x080038dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e030      	b.n	800392c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d025      	beq.n	8003922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038da:	e022      	b.n	8003922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ea:	e01c      	b.n	8003926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d903      	bls.n	80038fa <DMA_CheckFifoParam+0xb6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d003      	beq.n	8003900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038f8:	e018      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      break;
 80038fe:	e015      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e00b      	b.n	800392a <DMA_CheckFifoParam+0xe6>
      break;
 8003912:	bf00      	nop
 8003914:	e00a      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e008      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e006      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;   
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
    }
  } 
  
  return status; 
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e177      	b.n	8003c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	f040 8166 	bne.w	8003c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d005      	beq.n	800398e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398a:	2b02      	cmp	r3, #2
 800398c:	d130      	bne.n	80039f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c4:	2201      	movs	r2, #1
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 0201 	and.w	r2, r3, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d017      	beq.n	8003a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d123      	bne.n	8003a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80c0 	beq.w	8003c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_GPIO_Init+0x324>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_GPIO_Init+0x324>)
 8003acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad2:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_GPIO_Init+0x324>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ade:	4a61      	ldr	r2, [pc, #388]	; (8003c64 <HAL_GPIO_Init+0x328>)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <HAL_GPIO_Init+0x32c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d037      	beq.n	8003b7a <HAL_GPIO_Init+0x23e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_GPIO_Init+0x23a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a56      	ldr	r2, [pc, #344]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02b      	beq.n	8003b72 <HAL_GPIO_Init+0x236>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a55      	ldr	r2, [pc, #340]	; (8003c74 <HAL_GPIO_Init+0x338>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d025      	beq.n	8003b6e <HAL_GPIO_Init+0x232>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a54      	ldr	r2, [pc, #336]	; (8003c78 <HAL_GPIO_Init+0x33c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01f      	beq.n	8003b6a <HAL_GPIO_Init+0x22e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a53      	ldr	r2, [pc, #332]	; (8003c7c <HAL_GPIO_Init+0x340>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d019      	beq.n	8003b66 <HAL_GPIO_Init+0x22a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_GPIO_Init+0x344>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_GPIO_Init+0x226>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_GPIO_Init+0x348>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00d      	beq.n	8003b5e <HAL_GPIO_Init+0x222>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <HAL_GPIO_Init+0x21e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4f      	ldr	r2, [pc, #316]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_GPIO_Init+0x21a>
 8003b52:	2309      	movs	r3, #9
 8003b54:	e012      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b56:	230a      	movs	r3, #10
 8003b58:	e010      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	e00e      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b5e:	2307      	movs	r3, #7
 8003b60:	e00c      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b62:	2306      	movs	r3, #6
 8003b64:	e00a      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e008      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e004      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_GPIO_Init+0x240>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	f002 0203 	and.w	r2, r2, #3
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	4093      	lsls	r3, r2
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b8c:	4935      	ldr	r1, [pc, #212]	; (8003c64 <HAL_GPIO_Init+0x328>)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bbe:	4a34      	ldr	r2, [pc, #208]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be8:	4a29      	ldr	r2, [pc, #164]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <HAL_GPIO_Init+0x354>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	f67f ae84 	bls.w	8003958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	40020400 	.word	0x40020400
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40020c00 	.word	0x40020c00
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40021400 	.word	0x40021400
 8003c80:	40021800 	.word	0x40021800
 8003c84:	40021c00 	.word	0x40021c00
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022400 	.word	0x40022400
 8003c90:	40013c00 	.word	0x40013c00

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	041a      	lsls	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc8:	b08f      	sub	sp, #60	; 0x3c
 8003cca:	af0a      	add	r7, sp, #40	; 0x28
 8003ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e054      	b.n	8003d82 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f009 fa98 	bl	800d228 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f005 f940 	bl	8008f9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	687e      	ldr	r6, [r7, #4]
 8003d24:	466d      	mov	r5, sp
 8003d26:	f106 0410 	add.w	r4, r6, #16
 8003d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d3a:	1d33      	adds	r3, r6, #4
 8003d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f005 f8ba 	bl	8008eb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f005 f937 	bl	8008fbe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	687e      	ldr	r6, [r7, #4]
 8003d58:	466d      	mov	r5, sp
 8003d5a:	f106 0410 	add.w	r4, r6, #16
 8003d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d6e:	1d33      	adds	r3, r6, #4
 8003d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d72:	6838      	ldr	r0, [r7, #0]
 8003d74:	f005 fac0 	bl	80092f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d8a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d8a:	b590      	push	{r4, r7, lr}
 8003d8c:	b089      	sub	sp, #36	; 0x24
 8003d8e:	af04      	add	r7, sp, #16
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	4608      	mov	r0, r1
 8003d94:	4611      	mov	r1, r2
 8003d96:	461a      	mov	r2, r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	70fb      	strb	r3, [r7, #3]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70bb      	strb	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_HCD_HC_Init+0x28>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e076      	b.n	8003ea0 <HAL_HCD_HC_Init+0x116>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	333d      	adds	r3, #61	; 0x3d
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	212c      	movs	r1, #44	; 0x2c
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3338      	adds	r3, #56	; 0x38
 8003dda:	787a      	ldrb	r2, [r7, #1]
 8003ddc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3340      	adds	r3, #64	; 0x40
 8003dec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003dee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3339      	adds	r3, #57	; 0x39
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	333f      	adds	r3, #63	; 0x3f
 8003e10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	78ba      	ldrb	r2, [r7, #2]
 8003e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e1e:	b2d0      	uxtb	r0, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	333a      	adds	r3, #58	; 0x3a
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da09      	bge.n	8003e4c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	333b      	adds	r3, #59	; 0x3b
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e008      	b.n	8003e5e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	333b      	adds	r3, #59	; 0x3b
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	333c      	adds	r3, #60	; 0x3c
 8003e6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e70:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	787c      	ldrb	r4, [r7, #1]
 8003e78:	78ba      	ldrb	r2, [r7, #2]
 8003e7a:	78f9      	ldrb	r1, [r7, #3]
 8003e7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	f005 fbb9 	bl	8009604 <USB_HC_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd90      	pop	{r4, r7, pc}

08003ea8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_HCD_HC_Halt+0x1e>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e00f      	b.n	8003ee6 <HAL_HCD_HC_Halt+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f005 fe09 	bl	8009aee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	70fb      	strb	r3, [r7, #3]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70bb      	strb	r3, [r7, #2]
 8003f06:	4613      	mov	r3, r2
 8003f08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	333b      	adds	r3, #59	; 0x3b
 8003f18:	78ba      	ldrb	r2, [r7, #2]
 8003f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	333f      	adds	r3, #63	; 0x3f
 8003f2a:	787a      	ldrb	r2, [r7, #1]
 8003f2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f2e:	7c3b      	ldrb	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d112      	bne.n	8003f5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3342      	adds	r3, #66	; 0x42
 8003f42:	2203      	movs	r2, #3
 8003f44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	333d      	adds	r3, #61	; 0x3d
 8003f54:	7f3a      	ldrb	r2, [r7, #28]
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e008      	b.n	8003f6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3342      	adds	r3, #66	; 0x42
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f6c:	787b      	ldrb	r3, [r7, #1]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	f200 80c6 	bhi.w	8004100 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	080040ed 	.word	0x080040ed
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	0800406f 	.word	0x0800406f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f8c:	7c3b      	ldrb	r3, [r7, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 80b8 	bne.w	8004104 <HAL_HCD_HC_SubmitRequest+0x214>
 8003f94:	78bb      	ldrb	r3, [r7, #2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80b4 	bne.w	8004104 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003f9c:	8b3b      	ldrh	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	3355      	adds	r3, #85	; 0x55
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3355      	adds	r3, #85	; 0x55
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3342      	adds	r3, #66	; 0x42
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fda:	e093      	b.n	8004104 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3342      	adds	r3, #66	; 0x42
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e089      	b.n	8004104 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	3355      	adds	r3, #85	; 0x55
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3342      	adds	r3, #66	; 0x42
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800401c:	e073      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3342      	adds	r3, #66	; 0x42
 800402c:	2202      	movs	r2, #2
 800402e:	701a      	strb	r2, [r3, #0]
      break;
 8004030:	e069      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3354      	adds	r3, #84	; 0x54
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3342      	adds	r3, #66	; 0x42
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
      break;
 8004058:	e055      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3342      	adds	r3, #66	; 0x42
 8004068:	2202      	movs	r2, #2
 800406a:	701a      	strb	r2, [r3, #0]
      break;
 800406c:	e04b      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800406e:	78bb      	ldrb	r3, [r7, #2]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3355      	adds	r3, #85	; 0x55
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	3342      	adds	r3, #66	; 0x42
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800409a:	e034      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	3342      	adds	r3, #66	; 0x42
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
      break;
 80040ae:	e02a      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3354      	adds	r3, #84	; 0x54
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3342      	adds	r3, #66	; 0x42
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
      break;
 80040d6:	e016      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3342      	adds	r3, #66	; 0x42
 80040e6:	2202      	movs	r2, #2
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e00c      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3342      	adds	r3, #66	; 0x42
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e002      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004100:	bf00      	nop
 8004102:	e000      	b.n	8004106 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004104:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3344      	adds	r3, #68	; 0x44
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	8b3a      	ldrh	r2, [r7, #24]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	202c      	movs	r0, #44	; 0x2c
 8004120:	fb00 f303 	mul.w	r3, r0, r3
 8004124:	440b      	add	r3, r1
 8004126:	334c      	adds	r3, #76	; 0x4c
 8004128:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3360      	adds	r3, #96	; 0x60
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3350      	adds	r3, #80	; 0x50
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3339      	adds	r3, #57	; 0x39
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3361      	adds	r3, #97	; 0x61
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	222c      	movs	r2, #44	; 0x2c
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	3338      	adds	r3, #56	; 0x38
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	18d1      	adds	r1, r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	f005 fb5c 	bl	8009848 <USB_HC_StartXfer>
 8004190:	4603      	mov	r3, r0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop

0800419c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f005 f85d 	bl	8009272 <USB_GetMode>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	f040 80f6 	bne.w	80043ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 f841 	bl	800924c <USB_ReadInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80ec 	beq.w	80043aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 f838 	bl	800924c <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d104      	bne.n	80041f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 f828 	bl	800924c <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004206:	d104      	bne.n	8004212 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004210:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f005 f818 	bl	800924c <USB_ReadInterrupts>
 800421c:	4603      	mov	r3, r0
 800421e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004226:	d104      	bne.n	8004232 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004230:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f005 f808 	bl	800924c <USB_ReadInterrupts>
 800423c:	4603      	mov	r3, r0
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d103      	bne.n	800424e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fffa 	bl	800924c <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800425e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004262:	d11c      	bne.n	800429e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800426c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800427e:	2110      	movs	r1, #16
 8004280:	6938      	ldr	r0, [r7, #16]
 8004282:	f004 fee9 	bl	8009058 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f004 ff1a 	bl	80090c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f005 f8f0 	bl	8009478 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f009 f83f 	bl	800d31c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 ffd2 	bl	800924c <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b2:	d102      	bne.n	80042ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 f89e 	bl	80053f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 ffc4 	bl	800924c <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d106      	bne.n	80042dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f009 f808 	bl	800d2e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 ffb3 	bl	800924c <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d101      	bne.n	80042f4 <HAL_HCD_IRQHandler+0x158>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_HCD_IRQHandler+0x15a>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0210 	bic.w	r2, r2, #16
 8004308:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 ffa1 	bl	8005252 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0210 	orr.w	r2, r2, #16
 800431e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 ff91 	bl	800924c <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004334:	d13a      	bne.n	80043ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f005 fbc6 	bl	8009acc <USB_HC_ReadInterrupt>
 8004340:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e025      	b.n	8004394 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d018      	beq.n	800438e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	d106      	bne.n	8004382 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8ab 	bl	80044d6 <HCD_HC_IN_IRQHandler>
 8004380:	e005      	b.n	800438e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fbf9 	bl	8004b80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	429a      	cmp	r2, r3
 800439c:	d3d4      	bcc.n	8004348 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	e000      	b.n	80043ac <HAL_HCD_IRQHandler+0x210>
      return;
 80043aa:	bf00      	nop
    }
  }
}
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_HCD_Start+0x16>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e013      	b.n	80043f0 <HAL_HCD_Start+0x3e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 f8b2 	bl	8009540 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f004 fdca 	bl	8008f7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_HCD_Stop+0x16>
 800440a:	2302      	movs	r3, #2
 800440c:	e00d      	b.n	800442a <HAL_HCD_Stop+0x32>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f005 fca0 	bl	8009d60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f005 f854 	bl	80094ec <USB_ResetPort>
 8004444:	4603      	mov	r3, r0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	3360      	adds	r3, #96	; 0x60
 8004468:	781b      	ldrb	r3, [r3, #0]
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3350      	adds	r3, #80	; 0x50
 8004490:	681b      	ldr	r3, [r3, #0]
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f005 f898 	bl	80095e0 <USB_GetCurrentFrame>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f005 f873 	bl	80095b2 <USB_GetHostSpeed>
 80044cc:	4603      	mov	r3, r0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d11a      	bne.n	800453c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	2304      	movs	r3, #4
 8004516:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3361      	adds	r3, #97	; 0x61
 8004526:	2206      	movs	r2, #6
 8004528:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f005 fada 	bl	8009aee <USB_HC_Halt>
 800453a:	e0af      	b.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004552:	d11b      	bne.n	800458c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	461a      	mov	r2, r3
 8004562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004566:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3361      	adds	r3, #97	; 0x61
 8004576:	2207      	movs	r2, #7
 8004578:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f005 fab2 	bl	8009aee <USB_HC_Halt>
 800458a:	e087      	b.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d109      	bne.n	80045b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2320      	movs	r3, #32
 80045b2:	6093      	str	r3, [r2, #8]
 80045b4:	e072      	b.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d11a      	bne.n	8004602 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	461a      	mov	r2, r3
 80045da:	2308      	movs	r3, #8
 80045dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3361      	adds	r3, #97	; 0x61
 80045ec:	2205      	movs	r2, #5
 80045ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f005 fa77 	bl	8009aee <USB_HC_Halt>
 8004600:	e04c      	b.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d11b      	bne.n	8004652 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	461a      	mov	r2, r3
 8004628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3361      	adds	r3, #97	; 0x61
 800463c:	2208      	movs	r2, #8
 800463e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f005 fa4f 	bl	8009aee <USB_HC_Halt>
 8004650:	e024      	b.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d119      	bne.n	800469c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	461a      	mov	r2, r3
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	212c      	movs	r1, #44	; 0x2c
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	3361      	adds	r3, #97	; 0x61
 8004688:	2206      	movs	r2, #6
 800468a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f005 fa29 	bl	8009aee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d112      	bne.n	80046da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f005 fa15 	bl	8009aee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80046d8:	e24e      	b.n	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80df 	bne.w	80048b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d019      	beq.n	800472e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3348      	adds	r3, #72	; 0x48
 8004708:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	0159      	lsls	r1, r3, #5
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	440b      	add	r3, r1
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	202c      	movs	r0, #44	; 0x2c
 8004724:	fb00 f303 	mul.w	r3, r0, r3
 8004728:	440b      	add	r3, r1
 800472a:	3350      	adds	r3, #80	; 0x50
 800472c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3361      	adds	r3, #97	; 0x61
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	335c      	adds	r3, #92	; 0x5c
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	461a      	mov	r2, r3
 8004760:	2301      	movs	r3, #1
 8004762:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	333f      	adds	r3, #63	; 0x3f
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	333f      	adds	r3, #63	; 0x3f
 8004786:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004788:	2b02      	cmp	r3, #2
 800478a:	d111      	bne.n	80047b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f005 f9a9 	bl	8009aee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a8:	461a      	mov	r2, r3
 80047aa:	2310      	movs	r3, #16
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	e03a      	b.n	8004826 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	333f      	adds	r3, #63	; 0x3f
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d009      	beq.n	80047d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	333f      	adds	r3, #63	; 0x3f
 80047d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d126      	bne.n	8004826 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3360      	adds	r3, #96	; 0x60
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	b2d9      	uxtb	r1, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	202c      	movs	r0, #44	; 0x2c
 8004814:	fb00 f303 	mul.w	r3, r0, r3
 8004818:	4413      	add	r3, r2
 800481a:	3360      	adds	r3, #96	; 0x60
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f008 fd89 	bl	800d338 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d12b      	bne.n	8004886 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	3348      	adds	r3, #72	; 0x48
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	202c      	movs	r0, #44	; 0x2c
 8004844:	fb00 f202 	mul.w	r2, r0, r2
 8004848:	440a      	add	r2, r1
 800484a:	3240      	adds	r2, #64	; 0x40
 800484c:	8812      	ldrh	r2, [r2, #0]
 800484e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 818e 	beq.w	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3354      	adds	r3, #84	; 0x54
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f083 0301 	eor.w	r3, r3, #1
 8004870:	b2d8      	uxtb	r0, r3
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3354      	adds	r3, #84	; 0x54
 8004880:	4602      	mov	r2, r0
 8004882:	701a      	strb	r2, [r3, #0]
}
 8004884:	e178      	b.n	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3354      	adds	r3, #84	; 0x54
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f083 0301 	eor.w	r3, r3, #1
 800489a:	b2d8      	uxtb	r0, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3354      	adds	r3, #84	; 0x54
 80048aa:	4602      	mov	r2, r0
 80048ac:	701a      	strb	r2, [r3, #0]
}
 80048ae:	e163      	b.n	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	f040 80f6 	bne.w	8004ab4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3361      	adds	r3, #97	; 0x61
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d109      	bne.n	80048f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3360      	adds	r3, #96	; 0x60
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e0c9      	b.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3361      	adds	r3, #97	; 0x61
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b05      	cmp	r3, #5
 8004902:	d109      	bne.n	8004918 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	3360      	adds	r3, #96	; 0x60
 8004912:	2205      	movs	r2, #5
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e0b5      	b.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3361      	adds	r3, #97	; 0x61
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b06      	cmp	r3, #6
 800492a:	d009      	beq.n	8004940 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3361      	adds	r3, #97	; 0x61
 800493a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800493c:	2b08      	cmp	r3, #8
 800493e:	d150      	bne.n	80049e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	335c      	adds	r3, #92	; 0x5c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	202c      	movs	r0, #44	; 0x2c
 8004958:	fb00 f303 	mul.w	r3, r0, r3
 800495c:	440b      	add	r3, r1
 800495e:	335c      	adds	r3, #92	; 0x5c
 8004960:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	335c      	adds	r3, #92	; 0x5c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d912      	bls.n	800499c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3360      	adds	r3, #96	; 0x60
 8004996:	2204      	movs	r2, #4
 8004998:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800499a:	e073      	b.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3360      	adds	r3, #96	; 0x60
 80049aa:	2202      	movs	r2, #2
 80049ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	461a      	mov	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049e0:	e050      	b.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3361      	adds	r3, #97	; 0x61
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d122      	bne.n	8004a3c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3360      	adds	r3, #96	; 0x60
 8004a04:	2202      	movs	r2, #2
 8004a06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e023      	b.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3361      	adds	r3, #97	; 0x61
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b07      	cmp	r3, #7
 8004a4e:	d119      	bne.n	8004a84 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	335c      	adds	r3, #92	; 0x5c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	202c      	movs	r0, #44	; 0x2c
 8004a68:	fb00 f303 	mul.w	r3, r0, r3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	335c      	adds	r3, #92	; 0x5c
 8004a70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3360      	adds	r3, #96	; 0x60
 8004a80:	2204      	movs	r2, #4
 8004a82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	2302      	movs	r3, #2
 8004a94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	b2d9      	uxtb	r1, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	202c      	movs	r0, #44	; 0x2c
 8004aa0:	fb00 f303 	mul.w	r3, r0, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3360      	adds	r3, #96	; 0x60
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f008 fc43 	bl	800d338 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ab2:	e061      	b.n	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d156      	bne.n	8004b78 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	333f      	adds	r3, #63	; 0x3f
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d111      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	335c      	adds	r3, #92	; 0x5c
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fff7 	bl	8009aee <USB_HC_Halt>
 8004b00:	e031      	b.n	8004b66 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	333f      	adds	r3, #63	; 0x3f
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333f      	adds	r3, #63	; 0x3f
 8004b24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d11d      	bne.n	8004b66 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	335c      	adds	r3, #92	; 0x5c
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d110      	bne.n	8004b66 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3361      	adds	r3, #97	; 0x61
 8004b52:	2203      	movs	r2, #3
 8004b54:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f004 ffc4 	bl	8009aee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b72:	461a      	mov	r2, r3
 8004b74:	2310      	movs	r3, #16
 8004b76:	6093      	str	r3, [r2, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d11a      	bne.n	8004be6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	212c      	movs	r1, #44	; 0x2c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	3361      	adds	r3, #97	; 0x61
 8004bd0:	2206      	movs	r2, #6
 8004bd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 ff85 	bl	8009aee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004be4:	e331      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d12e      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	333d      	adds	r3, #61	; 0x3d
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	f040 8313 	bne.w	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	333d      	adds	r3, #61	; 0x3d
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3360      	adds	r3, #96	; 0x60
 8004c44:	2202      	movs	r2, #2
 8004c46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f004 ff4b 	bl	8009aee <USB_HC_Halt>
}
 8004c58:	e2f7      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c70:	d112      	bne.n	8004c98 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f004 ff2c 	bl	8009aee <USB_HC_Halt>
}
 8004c96:	e2d8      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d140      	bne.n	8004d30 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	212c      	movs	r1, #44	; 0x2c
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	335c      	adds	r3, #92	; 0x5c
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d111      	bne.n	8004cfa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	333d      	adds	r3, #61	; 0x3d
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	2301      	movs	r3, #1
 8004d0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	212c      	movs	r1, #44	; 0x2c
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	3361      	adds	r3, #97	; 0x61
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f004 fee0 	bl	8009aee <USB_HC_Halt>
}
 8004d2e:	e28c      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d12c      	bne.n	8004da0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3361      	adds	r3, #97	; 0x61
 8004d54:	2204      	movs	r2, #4
 8004d56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	333d      	adds	r3, #61	; 0x3d
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	335c      	adds	r3, #92	; 0x5c
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 feb1 	bl	8009aee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	6093      	str	r3, [r2, #8]
}
 8004d9e:	e254      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11a      	bne.n	8004dec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	212c      	movs	r1, #44	; 0x2c
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3361      	adds	r3, #97	; 0x61
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f004 fe82 	bl	8009aee <USB_HC_Halt>
}
 8004dea:	e22e      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d140      	bne.n	8004e84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	212c      	movs	r1, #44	; 0x2c
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	335c      	adds	r3, #92	; 0x5c
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	212c      	movs	r1, #44	; 0x2c
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	3361      	adds	r3, #97	; 0x61
 8004e22:	2203      	movs	r2, #3
 8004e24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	333d      	adds	r3, #61	; 0x3d
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d112      	bne.n	8004e60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	333c      	adds	r3, #60	; 0x3c
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d108      	bne.n	8004e60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	333d      	adds	r3, #61	; 0x3d
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f004 fe3f 	bl	8009aee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2310      	movs	r3, #16
 8004e80:	6093      	str	r3, [r2, #8]
}
 8004e82:	e1e2      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d164      	bne.n	8004f64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d111      	bne.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3361      	adds	r3, #97	; 0x61
 8004eb0:	2206      	movs	r2, #6
 8004eb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 fe15 	bl	8009aee <USB_HC_Halt>
 8004ec4:	e044      	b.n	8004f50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	335c      	adds	r3, #92	; 0x5c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	202c      	movs	r0, #44	; 0x2c
 8004ede:	fb00 f303 	mul.w	r3, r0, r3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	335c      	adds	r3, #92	; 0x5c
 8004ee6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	212c      	movs	r1, #44	; 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	335c      	adds	r3, #92	; 0x5c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d920      	bls.n	8004f3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	335c      	adds	r3, #92	; 0x5c
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	212c      	movs	r1, #44	; 0x2c
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	3360      	adds	r3, #96	; 0x60
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	202c      	movs	r0, #44	; 0x2c
 8004f2a:	fb00 f303 	mul.w	r3, r0, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3360      	adds	r3, #96	; 0x60
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f008 f9fe 	bl	800d338 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f3c:	e008      	b.n	8004f50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	212c      	movs	r1, #44	; 0x2c
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	3360      	adds	r3, #96	; 0x60
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	6093      	str	r3, [r2, #8]
}
 8004f62:	e172      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d11b      	bne.n	8004fb4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3361      	adds	r3, #97	; 0x61
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f004 fda8 	bl	8009aee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb0:	6093      	str	r3, [r2, #8]
}
 8004fb2:	e14a      	b.n	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f040 813f 	bne.w	800524a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3361      	adds	r3, #97	; 0x61
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d17d      	bne.n	80050dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	3360      	adds	r3, #96	; 0x60
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	212c      	movs	r1, #44	; 0x2c
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	333f      	adds	r3, #63	; 0x3f
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d00a      	beq.n	800501c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	212c      	movs	r1, #44	; 0x2c
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	4413      	add	r3, r2
 8005012:	333f      	adds	r3, #63	; 0x3f
 8005014:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005016:	2b03      	cmp	r3, #3
 8005018:	f040 8100 	bne.w	800521c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d113      	bne.n	800504c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3355      	adds	r3, #85	; 0x55
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f083 0301 	eor.w	r3, r3, #1
 8005038:	b2d8      	uxtb	r0, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	3355      	adds	r3, #85	; 0x55
 8005048:	4602      	mov	r2, r0
 800504a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b01      	cmp	r3, #1
 8005052:	f040 80e3 	bne.w	800521c <HCD_HC_OUT_IRQHandler+0x69c>
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	334c      	adds	r3, #76	; 0x4c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80d8 	beq.w	800521c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	212c      	movs	r1, #44	; 0x2c
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	334c      	adds	r3, #76	; 0x4c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	202c      	movs	r0, #44	; 0x2c
 8005082:	fb00 f202 	mul.w	r2, r0, r2
 8005086:	440a      	add	r2, r1
 8005088:	3240      	adds	r2, #64	; 0x40
 800508a:	8812      	ldrh	r2, [r2, #0]
 800508c:	4413      	add	r3, r2
 800508e:	3b01      	subs	r3, #1
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	202c      	movs	r0, #44	; 0x2c
 8005096:	fb00 f202 	mul.w	r2, r0, r2
 800509a:	440a      	add	r2, r1
 800509c:	3240      	adds	r2, #64	; 0x40
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80b5 	beq.w	800521c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	212c      	movs	r1, #44	; 0x2c
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	3355      	adds	r3, #85	; 0x55
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f083 0301 	eor.w	r3, r3, #1
 80050c6:	b2d8      	uxtb	r0, r3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	3355      	adds	r3, #85	; 0x55
 80050d6:	4602      	mov	r2, r0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e09f      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	212c      	movs	r1, #44	; 0x2c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	3361      	adds	r3, #97	; 0x61
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d109      	bne.n	8005104 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3360      	adds	r3, #96	; 0x60
 80050fe:	2202      	movs	r2, #2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e08b      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3361      	adds	r3, #97	; 0x61
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d109      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3360      	adds	r3, #96	; 0x60
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e077      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	212c      	movs	r1, #44	; 0x2c
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	4413      	add	r3, r2
 8005138:	3361      	adds	r3, #97	; 0x61
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d109      	bne.n	8005154 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3360      	adds	r3, #96	; 0x60
 800514e:	2205      	movs	r2, #5
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e063      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3361      	adds	r3, #97	; 0x61
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b06      	cmp	r3, #6
 8005166:	d009      	beq.n	800517c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3361      	adds	r3, #97	; 0x61
 8005176:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005178:	2b08      	cmp	r3, #8
 800517a:	d14f      	bne.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	335c      	adds	r3, #92	; 0x5c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	202c      	movs	r0, #44	; 0x2c
 8005194:	fb00 f303 	mul.w	r3, r0, r3
 8005198:	440b      	add	r3, r1
 800519a:	335c      	adds	r3, #92	; 0x5c
 800519c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	212c      	movs	r1, #44	; 0x2c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	335c      	adds	r3, #92	; 0x5c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d912      	bls.n	80051d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	335c      	adds	r3, #92	; 0x5c
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	3360      	adds	r3, #96	; 0x60
 80051d2:	2204      	movs	r2, #4
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e021      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	3360      	adds	r3, #96	; 0x60
 80051e6:	2202      	movs	r2, #2
 80051e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005200:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005208:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	461a      	mov	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	2302      	movs	r3, #2
 800522c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	b2d9      	uxtb	r1, r3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	202c      	movs	r0, #44	; 0x2c
 8005238:	fb00 f303 	mul.w	r3, r0, r3
 800523c:	4413      	add	r3, r2
 800523e:	3360      	adds	r3, #96	; 0x60
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f008 f877 	bl	800d338 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b08a      	sub	sp, #40	; 0x28
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	0c5b      	lsrs	r3, r3, #17
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005286:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d004      	beq.n	8005298 <HCD_RXQLVL_IRQHandler+0x46>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b05      	cmp	r3, #5
 8005292:	f000 80a9 	beq.w	80053e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005296:	e0aa      	b.n	80053ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80a6 	beq.w	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3344      	adds	r3, #68	; 0x44
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 809b 	beq.w	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	212c      	movs	r1, #44	; 0x2c
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	3350      	adds	r3, #80	; 0x50
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	441a      	add	r2, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	202c      	movs	r0, #44	; 0x2c
 80052d0:	fb00 f303 	mul.w	r3, r0, r3
 80052d4:	440b      	add	r3, r1
 80052d6:	334c      	adds	r3, #76	; 0x4c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d87a      	bhi.n	80053d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	212c      	movs	r1, #44	; 0x2c
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	3344      	adds	r3, #68	; 0x44
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	b292      	uxth	r2, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	f003 ff50 	bl	800919c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3344      	adds	r3, #68	; 0x44
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	441a      	add	r2, r3
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	202c      	movs	r0, #44	; 0x2c
 8005316:	fb00 f303 	mul.w	r3, r0, r3
 800531a:	440b      	add	r3, r1
 800531c:	3344      	adds	r3, #68	; 0x44
 800531e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	212c      	movs	r1, #44	; 0x2c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3350      	adds	r3, #80	; 0x50
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	441a      	add	r2, r3
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	202c      	movs	r0, #44	; 0x2c
 800533a:	fb00 f303 	mul.w	r3, r0, r3
 800533e:	440b      	add	r3, r1
 8005340:	3350      	adds	r3, #80	; 0x50
 8005342:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	0cdb      	lsrs	r3, r3, #19
 8005354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005358:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	3340      	adds	r3, #64	; 0x40
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4293      	cmp	r3, r2
 8005370:	d13c      	bne.n	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d039      	beq.n	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800538e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005396:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3354      	adds	r3, #84	; 0x54
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2d8      	uxtb	r0, r3
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	212c      	movs	r1, #44	; 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	3354      	adds	r3, #84	; 0x54
 80053ce:	4602      	mov	r2, r0
 80053d0:	701a      	strb	r2, [r3, #0]
      break;
 80053d2:	e00b      	b.n	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	212c      	movs	r1, #44	; 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	3360      	adds	r3, #96	; 0x60
 80053e2:	2204      	movs	r2, #4
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e001      	b.n	80053ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80053ec:	bf00      	nop
  }
}
 80053ee:	bf00      	nop
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005422:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d10b      	bne.n	8005446 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d102      	bne.n	800543e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f007 ff61 	bl	800d300 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d132      	bne.n	80054b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f043 0308 	orr.w	r3, r3, #8
 8005456:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d126      	bne.n	80054b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d113      	bne.n	8005492 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005474:	d106      	bne.n	8005484 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f003 fffb 	bl	8009478 <USB_InitFSLSPClkSel>
 8005482:	e011      	b.n	80054a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	4618      	mov	r0, r3
 800548c:	f003 fff4 	bl	8009478 <USB_InitFSLSPClkSel>
 8005490:	e00a      	b.n	80054a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d106      	bne.n	80054a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a0:	461a      	mov	r2, r3
 80054a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f007 ff53 	bl	800d354 <HAL_HCD_PortEnabled_Callback>
 80054ae:	e002      	b.n	80054b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f007 ff5d 	bl	800d370 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d103      	bne.n	80054c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f043 0320 	orr.w	r3, r3, #32
 80054c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e12b      	b.n	8005746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fd f9d6 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800553e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005540:	f000 fdfc 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 8005544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4a81      	ldr	r2, [pc, #516]	; (8005750 <HAL_I2C_Init+0x274>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d807      	bhi.n	8005560 <HAL_I2C_Init+0x84>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a80      	ldr	r2, [pc, #512]	; (8005754 <HAL_I2C_Init+0x278>)
 8005554:	4293      	cmp	r3, r2
 8005556:	bf94      	ite	ls
 8005558:	2301      	movls	r3, #1
 800555a:	2300      	movhi	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e006      	b.n	800556e <HAL_I2C_Init+0x92>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a7d      	ldr	r2, [pc, #500]	; (8005758 <HAL_I2C_Init+0x27c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	bf94      	ite	ls
 8005568:	2301      	movls	r3, #1
 800556a:	2300      	movhi	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0e7      	b.n	8005746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a78      	ldr	r2, [pc, #480]	; (800575c <HAL_I2C_Init+0x280>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0c9b      	lsrs	r3, r3, #18
 8005580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a6a      	ldr	r2, [pc, #424]	; (8005750 <HAL_I2C_Init+0x274>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d802      	bhi.n	80055b0 <HAL_I2C_Init+0xd4>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	3301      	adds	r3, #1
 80055ae:	e009      	b.n	80055c4 <HAL_I2C_Init+0xe8>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	4a69      	ldr	r2, [pc, #420]	; (8005760 <HAL_I2C_Init+0x284>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	3301      	adds	r3, #1
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	495c      	ldr	r1, [pc, #368]	; (8005750 <HAL_I2C_Init+0x274>)
 80055e0:	428b      	cmp	r3, r1
 80055e2:	d819      	bhi.n	8005618 <HAL_I2C_Init+0x13c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e59      	subs	r1, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055f8:	400b      	ands	r3, r1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_I2C_Init+0x138>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1e59      	subs	r1, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fbb1 f3f3 	udiv	r3, r1, r3
 800560c:	3301      	adds	r3, #1
 800560e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005612:	e051      	b.n	80056b8 <HAL_I2C_Init+0x1dc>
 8005614:	2304      	movs	r3, #4
 8005616:	e04f      	b.n	80056b8 <HAL_I2C_Init+0x1dc>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d111      	bne.n	8005644 <HAL_I2C_Init+0x168>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1e58      	subs	r0, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	440b      	add	r3, r1
 800562e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005632:	3301      	adds	r3, #1
 8005634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e012      	b.n	800566a <HAL_I2C_Init+0x18e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1e58      	subs	r0, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	0099      	lsls	r1, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	fbb0 f3f3 	udiv	r3, r0, r3
 800565a:	3301      	adds	r3, #1
 800565c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Init+0x196>
 800566e:	2301      	movs	r3, #1
 8005670:	e022      	b.n	80056b8 <HAL_I2C_Init+0x1dc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <HAL_I2C_Init+0x1bc>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1e58      	subs	r0, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	440b      	add	r3, r1
 8005688:	fbb0 f3f3 	udiv	r3, r0, r3
 800568c:	3301      	adds	r3, #1
 800568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	e00f      	b.n	80056b8 <HAL_I2C_Init+0x1dc>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1e58      	subs	r0, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	0099      	lsls	r1, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ae:	3301      	adds	r3, #1
 80056b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	6809      	ldr	r1, [r1, #0]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6911      	ldr	r1, [r2, #16]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68d2      	ldr	r2, [r2, #12]
 80056f2:	4311      	orrs	r1, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	000186a0 	.word	0x000186a0
 8005754:	001e847f 	.word	0x001e847f
 8005758:	003d08ff 	.word	0x003d08ff
 800575c:	431bde83 	.word	0x431bde83
 8005760:	10624dd3 	.word	0x10624dd3

08005764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	d129      	bne.n	80057ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2224      	movs	r2, #36	; 0x24
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0210 	bic.w	r2, r2, #16
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d12a      	bne.n	800584c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2224      	movs	r2, #36	; 0x24
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005816:	89fb      	ldrh	r3, [r7, #14]
 8005818:	f023 030f 	bic.w	r3, r3, #15
 800581c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b29a      	uxth	r2, r3
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	4313      	orrs	r3, r2
 8005826:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	89fa      	ldrh	r2, [r7, #14]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e267      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d075      	beq.n	8005966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587a:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b04      	cmp	r3, #4
 8005884:	d00c      	beq.n	80058a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005886:	4b85      	ldr	r3, [pc, #532]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588e:	2b08      	cmp	r3, #8
 8005890:	d112      	bne.n	80058b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005892:	4b82      	ldr	r3, [pc, #520]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800589e:	d10b      	bne.n	80058b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a0:	4b7e      	ldr	r3, [pc, #504]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d05b      	beq.n	8005964 <HAL_RCC_OscConfig+0x108>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d157      	bne.n	8005964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e242      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d106      	bne.n	80058d0 <HAL_RCC_OscConfig+0x74>
 80058c2:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a75      	ldr	r2, [pc, #468]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e01d      	b.n	800590c <HAL_RCC_OscConfig+0xb0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x98>
 80058da:	4b70      	ldr	r3, [pc, #448]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6f      	ldr	r2, [pc, #444]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b6d      	ldr	r3, [pc, #436]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a6c      	ldr	r2, [pc, #432]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e00b      	b.n	800590c <HAL_RCC_OscConfig+0xb0>
 80058f4:	4b69      	ldr	r3, [pc, #420]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a68      	ldr	r2, [pc, #416]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80058fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4b66      	ldr	r3, [pc, #408]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005914:	f7fd fb38 	bl	8002f88 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591c:	f7fd fb34 	bl	8002f88 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e207      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592e:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0xc0>
 800593a:	e014      	b.n	8005966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fd fb24 	bl	8002f88 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005944:	f7fd fb20 	bl	8002f88 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b64      	cmp	r3, #100	; 0x64
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e1f3      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005956:	4b51      	ldr	r3, [pc, #324]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0xe8>
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d063      	beq.n	8005a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005972:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005986:	2b08      	cmp	r3, #8
 8005988:	d11c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598a:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d116      	bne.n	80059c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005996:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_RCC_OscConfig+0x152>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e1c7      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4937      	ldr	r1, [pc, #220]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c2:	e03a      	b.n	8005a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d020      	beq.n	8005a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059cc:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_RCC_OscConfig+0x244>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fd fad9 	bl	8002f88 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059da:	f7fd fad5 	bl	8002f88 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e1a8      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4925      	ldr	r1, [pc, #148]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	600b      	str	r3, [r1, #0]
 8005a0c:	e015      	b.n	8005a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_OscConfig+0x244>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fd fab8 	bl	8002f88 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1c:	f7fd fab4 	bl	8002f88 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e187      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d036      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <HAL_RCC_OscConfig+0x248>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fd fa98 	bl	8002f88 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5c:	f7fd fa94 	bl	8002f88 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e167      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_RCC_OscConfig+0x240>)
 8005a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x200>
 8005a7a:	e01b      	b.n	8005ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCC_OscConfig+0x248>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a82:	f7fd fa81 	bl	8002f88 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a88:	e00e      	b.n	8005aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a8a:	f7fd fa7d 	bl	8002f88 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d907      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e150      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	42470000 	.word	0x42470000
 8005aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa8:	4b88      	ldr	r3, [pc, #544]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ea      	bne.n	8005a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8097 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac6:	4b81      	ldr	r3, [pc, #516]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	4b7d      	ldr	r3, [pc, #500]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	4a7c      	ldr	r2, [pc, #496]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae2:	4b7a      	ldr	r3, [pc, #488]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af2:	4b77      	ldr	r3, [pc, #476]	; (8005cd0 <HAL_RCC_OscConfig+0x474>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d118      	bne.n	8005b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afe:	4b74      	ldr	r3, [pc, #464]	; (8005cd0 <HAL_RCC_OscConfig+0x474>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a73      	ldr	r2, [pc, #460]	; (8005cd0 <HAL_RCC_OscConfig+0x474>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fd fa3d 	bl	8002f88 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fd fa39 	bl	8002f88 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e10c      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_RCC_OscConfig+0x474>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x2ea>
 8005b38:	4b64      	ldr	r3, [pc, #400]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a63      	ldr	r2, [pc, #396]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	e01c      	b.n	8005b80 <HAL_RCC_OscConfig+0x324>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x30c>
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a5e      	ldr	r2, [pc, #376]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
 8005b66:	e00b      	b.n	8005b80 <HAL_RCC_OscConfig+0x324>
 8005b68:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6713      	str	r3, [r2, #112]	; 0x70
 8005b74:	4b55      	ldr	r3, [pc, #340]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	4a54      	ldr	r2, [pc, #336]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005b7a:	f023 0304 	bic.w	r3, r3, #4
 8005b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fd f9fe 	bl	8002f88 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fd f9fa 	bl	8002f88 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0cb      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	4b49      	ldr	r3, [pc, #292]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ee      	beq.n	8005b90 <HAL_RCC_OscConfig+0x334>
 8005bb2:	e014      	b.n	8005bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb4:	f7fd f9e8 	bl	8002f88 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bba:	e00a      	b.n	8005bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bbc:	f7fd f9e4 	bl	8002f88 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e0b5      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd2:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ee      	bne.n	8005bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be4:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	4a38      	ldr	r2, [pc, #224]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80a1 	beq.w	8005d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bfa:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d05c      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d141      	bne.n	8005c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <HAL_RCC_OscConfig+0x478>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fd f9b8 	bl	8002f88 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fd f9b4 	bl	8002f88 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e087      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	3b01      	subs	r3, #1
 8005c54:	041b      	lsls	r3, r3, #16
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	061b      	lsls	r3, r3, #24
 8005c5e:	491b      	ldr	r1, [pc, #108]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x478>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fd f98d 	bl	8002f88 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c72:	f7fd f989 	bl	8002f88 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e05c      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x416>
 8005c90:	e054      	b.n	8005d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <HAL_RCC_OscConfig+0x478>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd f976 	bl	8002f88 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fd f972 	bl	8002f88 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e045      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_RCC_OscConfig+0x470>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x444>
 8005cbe:	e03d      	b.n	8005d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e038      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40007000 	.word	0x40007000
 8005cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <HAL_RCC_OscConfig+0x4ec>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d028      	beq.n	8005d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d121      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d11a      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d111      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	3b01      	subs	r3, #1
 8005d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d107      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800

08005d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0cc      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b68      	ldr	r3, [pc, #416]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90c      	bls.n	8005d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b65      	ldr	r3, [pc, #404]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	4b63      	ldr	r3, [pc, #396]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d001      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0b8      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005da0:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4a58      	ldr	r2, [pc, #352]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db8:	4b53      	ldr	r3, [pc, #332]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a52      	ldr	r2, [pc, #328]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc4:	4b50      	ldr	r3, [pc, #320]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	494d      	ldr	r1, [pc, #308]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d044      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dea:	4b47      	ldr	r3, [pc, #284]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d119      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e07f      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d003      	beq.n	8005e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d107      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0a:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e06f      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1a:	4b3b      	ldr	r3, [pc, #236]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e067      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e2a:	4b37      	ldr	r3, [pc, #220]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f023 0203 	bic.w	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4934      	ldr	r1, [pc, #208]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e3c:	f7fd f8a4 	bl	8002f88 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e42:	e00a      	b.n	8005e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e44:	f7fd f8a0 	bl	8002f88 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e04f      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 020c 	and.w	r2, r3, #12
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d1eb      	bne.n	8005e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b25      	ldr	r3, [pc, #148]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d20c      	bcs.n	8005e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <HAL_RCC_ClockConfig+0x1b8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e032      	b.n	8005efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea0:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4916      	ldr	r1, [pc, #88]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	490e      	ldr	r1, [pc, #56]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ed2:	f000 f821 	bl	8005f18 <HAL_RCC_GetSysClockFreq>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	091b      	lsrs	r3, r3, #4
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	490a      	ldr	r1, [pc, #40]	; (8005f0c <HAL_RCC_ClockConfig+0x1c0>)
 8005ee4:	5ccb      	ldrb	r3, [r1, r3]
 8005ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eea:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1c4>)
 8005eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd f804 	bl	8002f00 <HAL_InitTick>

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40023c00 	.word	0x40023c00
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	0800ee00 	.word	0x0800ee00
 8005f10:	20000004 	.word	0x20000004
 8005f14:	20000008 	.word	0x20000008

08005f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f1c:	b094      	sub	sp, #80	; 0x50
 8005f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	647b      	str	r3, [r7, #68]	; 0x44
 8005f24:	2300      	movs	r3, #0
 8005f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f28:	2300      	movs	r3, #0
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f30:	4b79      	ldr	r3, [pc, #484]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d00d      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x40>
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	f200 80e1 	bhi.w	8006104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_RCC_GetSysClockFreq+0x34>
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d003      	beq.n	8005f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f4a:	e0db      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f4c:	4b73      	ldr	r3, [pc, #460]	; (800611c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f50:	e0db      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f52:	4b73      	ldr	r3, [pc, #460]	; (8006120 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f56:	e0d8      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f58:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f62:	4b6d      	ldr	r3, [pc, #436]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d063      	beq.n	8006036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6e:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	099b      	lsrs	r3, r3, #6
 8005f74:	2200      	movs	r2, #0
 8005f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
 8005f82:	2300      	movs	r3, #0
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
 8005f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f8a:	4622      	mov	r2, r4
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	f04f 0000 	mov.w	r0, #0
 8005f92:	f04f 0100 	mov.w	r1, #0
 8005f96:	0159      	lsls	r1, r3, #5
 8005f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f9c:	0150      	lsls	r0, r2, #5
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	1a51      	subs	r1, r2, r1
 8005fa6:	6139      	str	r1, [r7, #16]
 8005fa8:	4629      	mov	r1, r5
 8005faa:	eb63 0301 	sbc.w	r3, r3, r1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	018b      	lsls	r3, r1, #6
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	018a      	lsls	r2, r1, #6
 8005fca:	4651      	mov	r1, sl
 8005fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fea:	4690      	mov	r8, r2
 8005fec:	4699      	mov	r9, r3
 8005fee:	4623      	mov	r3, r4
 8005ff0:	eb18 0303 	adds.w	r3, r8, r3
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	eb49 0303 	adc.w	r3, r9, r3
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800600a:	4629      	mov	r1, r5
 800600c:	024b      	lsls	r3, r1, #9
 800600e:	4621      	mov	r1, r4
 8006010:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006014:	4621      	mov	r1, r4
 8006016:	024a      	lsls	r2, r1, #9
 8006018:	4610      	mov	r0, r2
 800601a:	4619      	mov	r1, r3
 800601c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601e:	2200      	movs	r2, #0
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006028:	f7fa f932 	bl	8000290 <__aeabi_uldivmod>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4613      	mov	r3, r2
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006034:	e058      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006036:	4b38      	ldr	r3, [pc, #224]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	2200      	movs	r2, #0
 800603e:	4618      	mov	r0, r3
 8006040:	4611      	mov	r1, r2
 8006042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006046:	623b      	str	r3, [r7, #32]
 8006048:	2300      	movs	r3, #0
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	0159      	lsls	r1, r3, #5
 800605e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006062:	0150      	lsls	r0, r2, #5
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4641      	mov	r1, r8
 800606a:	ebb2 0a01 	subs.w	sl, r2, r1
 800606e:	4649      	mov	r1, r9
 8006070:	eb63 0b01 	sbc.w	fp, r3, r1
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006088:	ebb2 040a 	subs.w	r4, r2, sl
 800608c:	eb63 050b 	sbc.w	r5, r3, fp
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	00eb      	lsls	r3, r5, #3
 800609a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609e:	00e2      	lsls	r2, r4, #3
 80060a0:	4614      	mov	r4, r2
 80060a2:	461d      	mov	r5, r3
 80060a4:	4643      	mov	r3, r8
 80060a6:	18e3      	adds	r3, r4, r3
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	464b      	mov	r3, r9
 80060ac:	eb45 0303 	adc.w	r3, r5, r3
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060be:	4629      	mov	r1, r5
 80060c0:	028b      	lsls	r3, r1, #10
 80060c2:	4621      	mov	r1, r4
 80060c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c8:	4621      	mov	r1, r4
 80060ca:	028a      	lsls	r2, r1, #10
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d2:	2200      	movs	r2, #0
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	61fa      	str	r2, [r7, #28]
 80060d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060dc:	f7fa f8d8 	bl	8000290 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4613      	mov	r3, r2
 80060e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e8:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	3301      	adds	r3, #1
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006102:	e002      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCC_GetSysClockFreq+0x204>)
 8006106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800610a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800610c:	4618      	mov	r0, r3
 800610e:	3750      	adds	r7, #80	; 0x50
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800
 800611c:	00f42400 	.word	0x00f42400
 8006120:	007a1200 	.word	0x007a1200

08006124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006128:	4b03      	ldr	r3, [pc, #12]	; (8006138 <HAL_RCC_GetHCLKFreq+0x14>)
 800612a:	681b      	ldr	r3, [r3, #0]
}
 800612c:	4618      	mov	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000004 	.word	0x20000004

0800613c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006140:	f7ff fff0 	bl	8006124 <HAL_RCC_GetHCLKFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	0a9b      	lsrs	r3, r3, #10
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	4903      	ldr	r1, [pc, #12]	; (8006160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006152:	5ccb      	ldrb	r3, [r1, r3]
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40023800 	.word	0x40023800
 8006160:	0800ee10 	.word	0x0800ee10

08006164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006168:	f7ff ffdc 	bl	8006124 <HAL_RCC_GetHCLKFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	0b5b      	lsrs	r3, r3, #13
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	4903      	ldr	r1, [pc, #12]	; (8006188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40023800 	.word	0x40023800
 8006188:	0800ee10 	.word	0x0800ee10

0800618c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e07b      	b.n	8006296 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ae:	d009      	beq.n	80061c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	61da      	str	r2, [r3, #28]
 80061b6:	e005      	b.n	80061c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fc fbd2 	bl	8002988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	ea42 0103 	orr.w	r1, r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	f003 0104 	and.w	r1, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	f003 0210 	and.w	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_SPI_Transmit+0x22>
 80062bc:	2302      	movs	r3, #2
 80062be:	e126      	b.n	800650e <HAL_SPI_Transmit+0x270>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c8:	f7fc fe5e 	bl	8002f88 <HAL_GetTick>
 80062cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062e2:	e10b      	b.n	80064fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x52>
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062f4:	e102      	b.n	80064fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2203      	movs	r2, #3
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633c:	d10f      	bne.n	800635e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800635c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d007      	beq.n	800637c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800637a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	d14b      	bne.n	800641e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_SPI_Transmit+0xf6>
 800638e:	8afb      	ldrh	r3, [r7, #22]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d13e      	bne.n	8006412 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	1c9a      	adds	r2, r3, #2
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063b8:	e02b      	b.n	8006412 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d112      	bne.n	80063ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	881a      	ldrh	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80063ec:	e011      	b.n	8006412 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ee:	f7fc fdcb 	bl	8002f88 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d803      	bhi.n	8006406 <HAL_SPI_Transmit+0x168>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006404:	d102      	bne.n	800640c <HAL_SPI_Transmit+0x16e>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006410:	e074      	b.n	80064fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ce      	bne.n	80063ba <HAL_SPI_Transmit+0x11c>
 800641c:	e04c      	b.n	80064b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0x18e>
 8006426:	8afb      	ldrh	r3, [r7, #22]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d140      	bne.n	80064ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006452:	e02c      	b.n	80064ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b02      	cmp	r3, #2
 8006460:	d113      	bne.n	800648a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	86da      	strh	r2, [r3, #54]	; 0x36
 8006488:	e011      	b.n	80064ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800648a:	f7fc fd7d 	bl	8002f88 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d803      	bhi.n	80064a2 <HAL_SPI_Transmit+0x204>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Transmit+0x20a>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064ac:	e026      	b.n	80064fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1cd      	bne.n	8006454 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fbcb 	bl	8006c58 <SPI_EndRxTxTransaction>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d6:	2300      	movs	r3, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e000      	b.n	80064fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80064fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800650c:	7ffb      	ldrb	r3, [r7, #31]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b088      	sub	sp, #32
 800651a:	af02      	add	r7, sp, #8
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006532:	d112      	bne.n	800655a <HAL_SPI_Receive+0x44>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10e      	bne.n	800655a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2204      	movs	r2, #4
 8006540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f8f1 	bl	8006738 <HAL_SPI_TransmitReceive>
 8006556:	4603      	mov	r3, r0
 8006558:	e0ea      	b.n	8006730 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_SPI_Receive+0x52>
 8006564:	2302      	movs	r3, #2
 8006566:	e0e3      	b.n	8006730 <HAL_SPI_Receive+0x21a>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006570:	f7fc fd0a 	bl	8002f88 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006586:	e0ca      	b.n	800671e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_SPI_Receive+0x7e>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006598:	e0c1      	b.n	800671e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2204      	movs	r2, #4
 800659e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e0:	d10f      	bne.n	8006602 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006600:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d007      	beq.n	8006620 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d162      	bne.n	80066ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006628:	e02e      	b.n	8006688 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d115      	bne.n	8006664 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f103 020c 	add.w	r2, r3, #12
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006662:	e011      	b.n	8006688 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006664:	f7fc fc90 	bl	8002f88 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d803      	bhi.n	800667c <HAL_SPI_Receive+0x166>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667a:	d102      	bne.n	8006682 <HAL_SPI_Receive+0x16c>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006686:	e04a      	b.n	800671e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1cb      	bne.n	800662a <HAL_SPI_Receive+0x114>
 8006692:	e031      	b.n	80066f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d113      	bne.n	80066ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	b292      	uxth	r2, r2
 80066ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	1c9a      	adds	r2, r3, #2
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066c8:	e011      	b.n	80066ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ca:	f7fc fc5d 	bl	8002f88 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d803      	bhi.n	80066e2 <HAL_SPI_Receive+0x1cc>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e0:	d102      	bne.n	80066e8 <HAL_SPI_Receive+0x1d2>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066ec:	e017      	b.n	800671e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1cd      	bne.n	8006694 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fa45 	bl	8006b8c <SPI_EndRxTransaction>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
 800671a:	e000      	b.n	800671e <HAL_SPI_Receive+0x208>
  }

error :
 800671c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	; 0x30
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006746:	2301      	movs	r3, #1
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_SPI_TransmitReceive+0x26>
 800675a:	2302      	movs	r3, #2
 800675c:	e18a      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x33c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006766:	f7fc fc0f 	bl	8002f88 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006784:	2b01      	cmp	r3, #1
 8006786:	d00f      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x70>
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678e:	d107      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x68>
 8006798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800679c:	2b04      	cmp	r3, #4
 800679e:	d003      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067a6:	e15b      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x82>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x82>
 80067b4:	887b      	ldrh	r3, [r7, #2]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067c0:	e14e      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d003      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2205      	movs	r2, #5
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	887a      	ldrh	r2, [r7, #2]
 80067f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	887a      	ldrh	r2, [r7, #2]
 80067fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d007      	beq.n	800682a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006832:	d178      	bne.n	8006926 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x10a>
 800683c:	8b7b      	ldrh	r3, [r7, #26]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d166      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006866:	e053      	b.n	8006910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d11b      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x176>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d016      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x176>
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d113      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	1c9a      	adds	r2, r3, #2
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d119      	bne.n	80068f0 <HAL_SPI_TransmitReceive+0x1b8>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d014      	beq.n	80068f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	b292      	uxth	r2, r2
 80068d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	1c9a      	adds	r2, r3, #2
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068ec:	2301      	movs	r3, #1
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068f0:	f7fc fb4a 	bl	8002f88 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d807      	bhi.n	8006910 <HAL_SPI_TransmitReceive+0x1d8>
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006906:	d003      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800690e:	e0a7      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1a6      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x130>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1a1      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x130>
 8006924:	e07c      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x1fc>
 800692e:	8b7b      	ldrh	r3, [r7, #26]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d16b      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695a:	e057      	b.n	8006a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d11c      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x26c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x26c>
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d114      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d119      	bne.n	80069e6 <HAL_SPI_TransmitReceive+0x2ae>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d014      	beq.n	80069e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e2:	2301      	movs	r3, #1
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069e6:	f7fc facf 	bl	8002f88 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d803      	bhi.n	80069fe <HAL_SPI_TransmitReceive+0x2c6>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d102      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x2cc>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a0a:	e029      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1a2      	bne.n	800695c <HAL_SPI_TransmitReceive+0x224>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d19d      	bne.n	800695c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f917 	bl	8006c58 <SPI_EndRxTxTransaction>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a3c:	e010      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	e000      	b.n	8006a60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3730      	adds	r7, #48	; 0x30
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a8c:	f7fc fa7c 	bl	8002f88 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4413      	add	r3, r2
 8006a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a9c:	f7fc fa74 	bl	8002f88 <HAL_GetTick>
 8006aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aa2:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	015b      	lsls	r3, r3, #5
 8006aa8:	0d1b      	lsrs	r3, r3, #20
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab2:	e054      	b.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aba:	d050      	beq.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006abc:	f7fc fa64 	bl	8002f88 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d902      	bls.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d13d      	bne.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aea:	d111      	bne.n	8006b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af4:	d004      	beq.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afe:	d107      	bne.n	8006b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b18:	d10f      	bne.n	8006b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e017      	b.n	8006b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	bf0c      	ite	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	2300      	movne	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d19b      	bne.n	8006ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000004 	.word	0x20000004

08006b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba0:	d111      	bne.n	8006bc6 <SPI_EndRxTransaction+0x3a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006baa:	d004      	beq.n	8006bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb4:	d107      	bne.n	8006bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d12a      	bne.n	8006c26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd8:	d012      	beq.n	8006c00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2180      	movs	r1, #128	; 0x80
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff ff49 	bl	8006a7c <SPI_WaitFlagStateUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02d      	beq.n	8006c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e026      	b.n	8006c4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	2101      	movs	r1, #1
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff ff36 	bl	8006a7c <SPI_WaitFlagStateUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01a      	beq.n	8006c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e013      	b.n	8006c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2101      	movs	r1, #1
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ff23 	bl	8006a7c <SPI_WaitFlagStateUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e000      	b.n	8006c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c64:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <SPI_EndRxTxTransaction+0x7c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <SPI_EndRxTxTransaction+0x80>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	0d5b      	lsrs	r3, r3, #21
 8006c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c82:	d112      	bne.n	8006caa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fef4 	bl	8006a7c <SPI_WaitFlagStateUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e00f      	b.n	8006cca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc0:	2b80      	cmp	r3, #128	; 0x80
 8006cc2:	d0f2      	beq.n	8006caa <SPI_EndRxTxTransaction+0x52>
 8006cc4:	e000      	b.n	8006cc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006cc6:	bf00      	nop
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000004 	.word	0x20000004
 8006cd8:	165e9f81 	.word	0x165e9f81

08006cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e041      	b.n	8006d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb fee0 	bl	8002ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f000 fc12 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e041      	b.n	8006e10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f839 	bl	8006e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 fbc3 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d855      	bhi.n	8006eec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e7d 	.word	0x08006e7d
 8006e4c:	08006eed 	.word	0x08006eed
 8006e50:	08006eed 	.word	0x08006eed
 8006e54:	08006eed 	.word	0x08006eed
 8006e58:	08006e99 	.word	0x08006e99
 8006e5c:	08006eed 	.word	0x08006eed
 8006e60:	08006eed 	.word	0x08006eed
 8006e64:	08006eed 	.word	0x08006eed
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006eed 	.word	0x08006eed
 8006e70:	08006eed 	.word	0x08006eed
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006ed1 	.word	0x08006ed1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fc faf5 	bl	8003480 <HAL_DMA_Abort_IT>
      break;
 8006e96:	e02c      	b.n	8006ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fc fae7 	bl	8003480 <HAL_DMA_Abort_IT>
      break;
 8006eb2:	e01e      	b.n	8006ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fc fad9 	bl	8003480 <HAL_DMA_Abort_IT>
      break;
 8006ece:	e010      	b.n	8006ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ede:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fc facb 	bl	8003480 <HAL_DMA_Abort_IT>
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d161      	bne.n	8006fbc <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fe09 	bl	8007b18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2f      	ldr	r2, [pc, #188]	; (8006fc8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIM_PWM_Stop_DMA+0xee>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_PWM_Stop_DMA+0xf2>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d017      	beq.n	8006f54 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f5e:	4013      	ands	r3, r2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10f      	bne.n	8006f84 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d107      	bne.n	8006f84 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <HAL_TIM_PWM_Stop_DMA+0x168>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f92:	e013      	b.n	8006fbc <HAL_TIM_PWM_Stop_DMA+0x190>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d104      	bne.n	8006fa4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa2:	e00b      	b.n	8006fbc <HAL_TIM_PWM_Stop_DMA+0x190>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d104      	bne.n	8006fb4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb2:	e003      	b.n	8006fbc <HAL_TIM_PWM_Stop_DMA+0x190>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d122      	bne.n	800702c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d11b      	bne.n	800702c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0202 	mvn.w	r2, #2
 8006ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa81 	bl	800751a <HAL_TIM_IC_CaptureCallback>
 8007018:	e005      	b.n	8007026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa73 	bl	8007506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fb fb69 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b04      	cmp	r3, #4
 8007038:	d122      	bne.n	8007080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d11b      	bne.n	8007080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0204 	mvn.w	r2, #4
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa57 	bl	800751a <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa49 	bl	8007506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fb fb3f 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b08      	cmp	r3, #8
 800708c:	d122      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d11b      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0208 	mvn.w	r2, #8
 80070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2204      	movs	r2, #4
 80070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa2d 	bl	800751a <HAL_TIM_IC_CaptureCallback>
 80070c0:	e005      	b.n	80070ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa1f 	bl	8007506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fb fb15 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0210 	mvn.w	r2, #16
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2208      	movs	r2, #8
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa03 	bl	800751a <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9f5 	bl	8007506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fb faeb 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b01      	cmp	r3, #1
 8007142:	d107      	bne.n	8007154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0201 	mvn.w	r2, #1
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9cf 	bl	80074f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d10e      	bne.n	8007180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d107      	bne.n	8007180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd78 	bl	8007c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d10e      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d107      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9c1 	bl	800752e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d10e      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d107      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0220 	mvn.w	r2, #32
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd42 	bl	8007c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0ae      	b.n	800735c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b0c      	cmp	r3, #12
 800720a:	f200 809f 	bhi.w	800734c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007249 	.word	0x08007249
 8007218:	0800734d 	.word	0x0800734d
 800721c:	0800734d 	.word	0x0800734d
 8007220:	0800734d 	.word	0x0800734d
 8007224:	08007289 	.word	0x08007289
 8007228:	0800734d 	.word	0x0800734d
 800722c:	0800734d 	.word	0x0800734d
 8007230:	0800734d 	.word	0x0800734d
 8007234:	080072cb 	.word	0x080072cb
 8007238:	0800734d 	.word	0x0800734d
 800723c:	0800734d 	.word	0x0800734d
 8007240:	0800734d 	.word	0x0800734d
 8007244:	0800730b 	.word	0x0800730b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fa18 	bl	8007684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e064      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fa68 	bl	8007764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e043      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fabd 	bl	8007850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e023      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fb11 	bl	8007938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e002      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0b4      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x186>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800739e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d03e      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0xd4>
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073be:	f200 8087 	bhi.w	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	f000 8086 	beq.w	80074d6 <HAL_TIM_ConfigClockSource+0x172>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	d87f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b70      	cmp	r3, #112	; 0x70
 80073d2:	d01a      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xa6>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d87b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b60      	cmp	r3, #96	; 0x60
 80073da:	d050      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x11a>
 80073dc:	2b60      	cmp	r3, #96	; 0x60
 80073de:	d877      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b50      	cmp	r3, #80	; 0x50
 80073e2:	d03c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xfa>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d873      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d058      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x13a>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d86f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b30      	cmp	r3, #48	; 0x30
 80073f2:	d064      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d86b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d060      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d867      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d05c      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b10      	cmp	r3, #16
 8007406:	d05a      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	e062      	b.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f000 fb5d 	bl	8007ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800742c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	609a      	str	r2, [r3, #8]
      break;
 8007436:	e04f      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f000 fb46 	bl	8007ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745a:	609a      	str	r2, [r3, #8]
      break;
 800745c:	e03c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	f000 faba 	bl	80079e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2150      	movs	r1, #80	; 0x50
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fb13 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 800747c:	e02c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fad9 	bl	8007a42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2160      	movs	r1, #96	; 0x60
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fb03 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 800749c:	e01c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fa9a 	bl	80079e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 faf3 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f000 faea 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a40      	ldr	r2, [pc, #256]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d00f      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3d      	ldr	r2, [pc, #244]	; (800765c <TIM_Base_SetConfig+0x118>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00b      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3c      	ldr	r2, [pc, #240]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <TIM_Base_SetConfig+0x120>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d108      	bne.n	8007596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <TIM_Base_SetConfig+0x114>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a4:	d027      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2c      	ldr	r2, [pc, #176]	; (800765c <TIM_Base_SetConfig+0x118>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d023      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2b      	ldr	r2, [pc, #172]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <TIM_Base_SetConfig+0x120>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a29      	ldr	r2, [pc, #164]	; (8007668 <TIM_Base_SetConfig+0x124>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d017      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a28      	ldr	r2, [pc, #160]	; (800766c <TIM_Base_SetConfig+0x128>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <TIM_Base_SetConfig+0x12c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a26      	ldr	r2, [pc, #152]	; (8007674 <TIM_Base_SetConfig+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a25      	ldr	r2, [pc, #148]	; (8007678 <TIM_Base_SetConfig+0x134>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a24      	ldr	r2, [pc, #144]	; (800767c <TIM_Base_SetConfig+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a23      	ldr	r2, [pc, #140]	; (8007680 <TIM_Base_SetConfig+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d108      	bne.n	8007608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d003      	beq.n	800763c <TIM_Base_SetConfig+0xf8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d103      	bne.n	8007644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	615a      	str	r2, [r3, #20]
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40010400 	.word	0x40010400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	40001800 	.word	0x40001800
 800767c:	40001c00 	.word	0x40001c00
 8007680:	40002000 	.word	0x40002000

08007684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0302 	bic.w	r3, r3, #2
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a20      	ldr	r2, [pc, #128]	; (800775c <TIM_OC1_SetConfig+0xd8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x64>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <TIM_OC1_SetConfig+0xdc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10c      	bne.n	8007702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0308 	bic.w	r3, r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a15      	ldr	r2, [pc, #84]	; (800775c <TIM_OC1_SetConfig+0xd8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_OC1_SetConfig+0x8e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a14      	ldr	r2, [pc, #80]	; (8007760 <TIM_OC1_SetConfig+0xdc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d111      	bne.n	8007736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	40010000 	.word	0x40010000
 8007760:	40010400 	.word	0x40010400

08007764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0210 	bic.w	r2, r3, #16
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0320 	bic.w	r3, r3, #32
 80077ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a22      	ldr	r2, [pc, #136]	; (8007848 <TIM_OC2_SetConfig+0xe4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x68>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a21      	ldr	r2, [pc, #132]	; (800784c <TIM_OC2_SetConfig+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <TIM_OC2_SetConfig+0xe4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC2_SetConfig+0x94>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <TIM_OC2_SetConfig+0xe8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d113      	bne.n	8007820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40010400 	.word	0x40010400

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a21      	ldr	r2, [pc, #132]	; (8007930 <TIM_OC3_SetConfig+0xe0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x66>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a20      	ldr	r2, [pc, #128]	; (8007934 <TIM_OC3_SetConfig+0xe4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10d      	bne.n	80078d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC3_SetConfig+0xe0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC3_SetConfig+0x92>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a15      	ldr	r2, [pc, #84]	; (8007934 <TIM_OC3_SetConfig+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d113      	bne.n	800790a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	621a      	str	r2, [r3, #32]
}
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a12      	ldr	r2, [pc, #72]	; (80079dc <TIM_OC4_SetConfig+0xa4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC4_SetConfig+0x68>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a11      	ldr	r2, [pc, #68]	; (80079e0 <TIM_OC4_SetConfig+0xa8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400

080079e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0201 	bic.w	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 030a 	bic.w	r3, r3, #10
 8007a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	f023 0210 	bic.w	r2, r3, #16
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f043 0307 	orr.w	r3, r3, #7
 8007ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	021a      	lsls	r2, r3, #8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	609a      	str	r2, [r3, #8]
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1a      	ldr	r2, [r3, #32]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	401a      	ands	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e05a      	b.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a21      	ldr	r2, [pc, #132]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d01d      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10c      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40001800 	.word	0x40001800

08007c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e03f      	b.n	8007d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fa ffb4 	bl	8002c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fe81 	bl	80089d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b08a      	sub	sp, #40	; 0x28
 8007d22:	af02      	add	r7, sp, #8
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d17c      	bne.n	8007e38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_UART_Transmit+0x2c>
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e075      	b.n	8007e3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_UART_Transmit+0x3e>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e06e      	b.n	8007e3a <HAL_UART_Transmit+0x11c>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2221      	movs	r2, #33	; 0x21
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d72:	f7fb f909 	bl	8002f88 <HAL_GetTick>
 8007d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8c:	d108      	bne.n	8007da0 <HAL_UART_Transmit+0x82>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e003      	b.n	8007da8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007db0:	e02a      	b.n	8007e08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2200      	movs	r2, #0
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fbc1 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e036      	b.n	8007e3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	3302      	adds	r3, #2
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	e007      	b.n	8007dfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1cf      	bne.n	8007db2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2140      	movs	r1, #64	; 0x40
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fb91 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b08a      	sub	sp, #40	; 0x28
 8007e46:	af02      	add	r7, sp, #8
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	f040 808c 	bne.w	8007f7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_UART_Receive+0x2e>
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e084      	b.n	8007f7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Receive+0x40>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e07d      	b.n	8007f7e <HAL_UART_Receive+0x13c>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2222      	movs	r2, #34	; 0x22
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e9e:	f7fb f873 	bl	8002f88 <HAL_GetTick>
 8007ea2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	88fa      	ldrh	r2, [r7, #6]
 8007eae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb8:	d108      	bne.n	8007ecc <HAL_UART_Receive+0x8a>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	e003      	b.n	8007ed4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007edc:	e043      	b.n	8007f66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2120      	movs	r1, #32
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 fb2b 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e042      	b.n	8007f7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	3302      	adds	r3, #2
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	e01f      	b.n	8007f58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f20:	d007      	beq.n	8007f32 <HAL_UART_Receive+0xf0>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <HAL_UART_Receive+0xfe>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e008      	b.n	8007f52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3301      	adds	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1b6      	bne.n	8007ede <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e000      	b.n	8007f7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	4613      	mov	r3, r2
 8007f92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d11d      	bne.n	8007fdc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_UART_Receive_IT+0x26>
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e016      	b.n	8007fde <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Receive_IT+0x38>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e00f      	b.n	8007fde <HAL_UART_Receive_IT+0x58>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fb24 	bl	8008620 <UART_Start_Receive_IT>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b0ba      	sub	sp, #232	; 0xe8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008014:	2300      	movs	r3, #0
 8008016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10f      	bne.n	800804e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_UART_IRQHandler+0x66>
 800803a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fc07 	bl	800885a <UART_Receive_IT>
      return;
 800804c:	e256      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800804e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80de 	beq.w	8008214 <HAL_UART_IRQHandler+0x22c>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d106      	bne.n	8008072 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80d1 	beq.w	8008214 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <HAL_UART_IRQHandler+0xae>
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	f043 0201 	orr.w	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00b      	beq.n	80080ba <HAL_UART_IRQHandler+0xd2>
 80080a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	f043 0202 	orr.w	r2, r3, #2
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <HAL_UART_IRQHandler+0xf6>
 80080c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f043 0204 	orr.w	r2, r3, #4
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d011      	beq.n	800810e <HAL_UART_IRQHandler+0x126>
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0208 	orr.w	r2, r3, #8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 81ed 	beq.w	80084f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_UART_IRQHandler+0x14e>
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fb92 	bl	800885a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_UART_IRQHandler+0x17a>
 800815a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04f      	beq.n	8008202 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa9a 	bl	800869c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d141      	bne.n	80081fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3314      	adds	r3, #20
 800817c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800818c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1d9      	bne.n	8008176 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d013      	beq.n	80081f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	4a7d      	ldr	r2, [pc, #500]	; (80083c4 <HAL_UART_IRQHandler+0x3dc>)
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb f952 	bl	8003480 <HAL_DMA_Abort_IT>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	e00e      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f990 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e00a      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f98c 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008200:	e006      	b.n	8008210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f988 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800820e:	e170      	b.n	80084f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008210:	bf00      	nop
    return;
 8008212:	e16e      	b.n	80084f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	2b01      	cmp	r3, #1
 800821a:	f040 814a 	bne.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8143 	beq.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 813c 	beq.w	80084b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800823a:	2300      	movs	r3, #0
 800823c:	60bb      	str	r3, [r7, #8]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	f040 80b4 	bne.w	80083c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800826c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8140 	beq.w	80084f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800827a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800827e:	429a      	cmp	r2, r3
 8008280:	f080 8139 	bcs.w	80084f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800828a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008296:	f000 8088 	beq.w	80083aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d9      	bne.n	800829a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3314      	adds	r3, #20
 80082ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3314      	adds	r3, #20
 8008306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800830a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800830e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800831c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e1      	bne.n	80082e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3314      	adds	r3, #20
 8008342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008346:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008348:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800834c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	330c      	adds	r3, #12
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837a:	f023 0310 	bic.w	r3, r3, #16
 800837e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800838c:	65ba      	str	r2, [r7, #88]	; 0x58
 800838e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800839a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e3      	bne.n	8008368 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fa fffb 	bl	80033a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8b6 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083c0:	e099      	b.n	80084f6 <HAL_UART_IRQHandler+0x50e>
 80083c2:	bf00      	nop
 80083c4:	08008763 	.word	0x08008763
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 808b 	beq.w	80084fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80083e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8086 	beq.w	80084fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008412:	647a      	str	r2, [r7, #68]	; 0x44
 8008414:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e3      	bne.n	80083ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	623b      	str	r3, [r7, #32]
   return(result);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3314      	adds	r3, #20
 8008446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800844a:	633a      	str	r2, [r7, #48]	; 0x30
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e3      	bne.n	8008426 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	60fb      	str	r3, [r7, #12]
   return(result);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0310 	bic.w	r3, r3, #16
 8008482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008490:	61fa      	str	r2, [r7, #28]
 8008492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	69b9      	ldr	r1, [r7, #24]
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	617b      	str	r3, [r7, #20]
   return(result);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e3      	bne.n	800846c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f83e 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084b0:	e023      	b.n	80084fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_UART_IRQHandler+0x4ea>
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f95d 	bl	800878a <UART_Transmit_IT>
    return;
 80084d0:	e014      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <HAL_UART_IRQHandler+0x514>
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f99d 	bl	800882a <UART_EndTransmit_IT>
    return;
 80084f0:	e004      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
    return;
 80084f2:	bf00      	nop
 80084f4:	e002      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
      return;
 80084f6:	bf00      	nop
 80084f8:	e000      	b.n	80084fc <HAL_UART_IRQHandler+0x514>
      return;
 80084fa:	bf00      	nop
  }
}
 80084fc:	37e8      	adds	r7, #232	; 0xe8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b090      	sub	sp, #64	; 0x40
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008554:	e050      	b.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800855c:	d04c      	beq.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800855e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
 8008564:	f7fa fd10 	bl	8002f88 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008570:	429a      	cmp	r2, r3
 8008572:	d241      	bcs.n	80085f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	330c      	adds	r3, #12
 8008592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008594:	637a      	str	r2, [r7, #52]	; 0x34
 8008596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800859a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3314      	adds	r3, #20
 80085ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	613b      	str	r3, [r7, #16]
   return(result);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3314      	adds	r3, #20
 80085c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c8:	623a      	str	r2, [r7, #32]
 80085ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e00f      	b.n	8008618 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	429a      	cmp	r2, r3
 8008614:	d09f      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3740      	adds	r7, #64	; 0x40
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	88fa      	ldrh	r2, [r7, #6]
 8008638:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	88fa      	ldrh	r2, [r7, #6]
 800863e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2222      	movs	r2, #34	; 0x22
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800866c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	695a      	ldr	r2, [r3, #20]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0220 	orr.w	r2, r2, #32
 800868c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b095      	sub	sp, #84	; 0x54
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c4:	643a      	str	r2, [r7, #64]	; 0x40
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e5      	bne.n	80086a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3314      	adds	r3, #20
 80086de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e5      	bne.n	80086d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	2b01      	cmp	r3, #1
 8008712:	d119      	bne.n	8008748 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	60bb      	str	r3, [r7, #8]
   return(result);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f023 0310 	bic.w	r3, r3, #16
 800872a:	647b      	str	r3, [r7, #68]	; 0x44
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008734:	61ba      	str	r2, [r7, #24]
 8008736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6979      	ldr	r1, [r7, #20]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	613b      	str	r3, [r7, #16]
   return(result);
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008756:	bf00      	nop
 8008758:	3754      	adds	r7, #84	; 0x54
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff fecb 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b21      	cmp	r3, #33	; 0x21
 800879c:	d13e      	bne.n	800881c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a6:	d114      	bne.n	80087d2 <UART_Transmit_IT+0x48>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d110      	bne.n	80087d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	1c9a      	adds	r2, r3, #2
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]
 80087d0:	e008      	b.n	80087e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6211      	str	r1, [r2, #32]
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4619      	mov	r1, r3
 80087f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10f      	bne.n	8008818 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	e000      	b.n	800881e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fe5a 	bl	8008504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b08c      	sub	sp, #48	; 0x30
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b22      	cmp	r3, #34	; 0x22
 800886c:	f040 80ab 	bne.w	80089c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d117      	bne.n	80088aa <UART_Receive_IT+0x50>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d113      	bne.n	80088aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008898:	b29a      	uxth	r2, r3
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	629a      	str	r2, [r3, #40]	; 0x28
 80088a8:	e026      	b.n	80088f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088bc:	d007      	beq.n	80088ce <UART_Receive_IT+0x74>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <UART_Receive_IT+0x82>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	e008      	b.n	80088ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4619      	mov	r1, r3
 8008906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008908:	2b00      	cmp	r3, #0
 800890a:	d15a      	bne.n	80089c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0220 	bic.w	r2, r2, #32
 800891a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	2b01      	cmp	r3, #1
 800894a:	d135      	bne.n	80089b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	613b      	str	r3, [r7, #16]
   return(result);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f023 0310 	bic.w	r3, r3, #16
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	623a      	str	r2, [r7, #32]
 8008974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e5      	bne.n	8008952 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b10      	cmp	r3, #16
 8008992:	d10a      	bne.n	80089aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fdbb 	bl	800852c <HAL_UARTEx_RxEventCallback>
 80089b6:	e002      	b.n	80089be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7f8 fac1 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e002      	b.n	80089c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e000      	b.n	80089c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089c6:	2302      	movs	r3, #2
  }
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3730      	adds	r7, #48	; 0x30
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d4:	b0c0      	sub	sp, #256	; 0x100
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	68d9      	ldr	r1, [r3, #12]
 80089ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	ea40 0301 	orr.w	r3, r0, r1
 80089f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a28:	f021 010c 	bic.w	r1, r1, #12
 8008a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a36:	430b      	orrs	r3, r1
 8008a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4a:	6999      	ldr	r1, [r3, #24]
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	ea40 0301 	orr.w	r3, r0, r1
 8008a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4b8f      	ldr	r3, [pc, #572]	; (8008c9c <UART_SetConfig+0x2cc>)
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d005      	beq.n	8008a70 <UART_SetConfig+0xa0>
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b8d      	ldr	r3, [pc, #564]	; (8008ca0 <UART_SetConfig+0x2d0>)
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d104      	bne.n	8008a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a70:	f7fd fb78 	bl	8006164 <HAL_RCC_GetPCLK2Freq>
 8008a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a78:	e003      	b.n	8008a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a7a:	f7fd fb5f 	bl	800613c <HAL_RCC_GetPCLK1Freq>
 8008a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a8c:	f040 810c 	bne.w	8008ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	1891      	adds	r1, r2, r2
 8008aa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008aaa:	415b      	adcs	r3, r3
 8008aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	eb12 0801 	adds.w	r8, r2, r1
 8008ab8:	4629      	mov	r1, r5
 8008aba:	eb43 0901 	adc.w	r9, r3, r1
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ad2:	4690      	mov	r8, r2
 8008ad4:	4699      	mov	r9, r3
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	eb18 0303 	adds.w	r3, r8, r3
 8008adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	eb49 0303 	adc.w	r3, r9, r3
 8008ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008af6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008afe:	460b      	mov	r3, r1
 8008b00:	18db      	adds	r3, r3, r3
 8008b02:	653b      	str	r3, [r7, #80]	; 0x50
 8008b04:	4613      	mov	r3, r2
 8008b06:	eb42 0303 	adc.w	r3, r2, r3
 8008b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b14:	f7f7 fbbc 	bl	8000290 <__aeabi_uldivmod>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4b61      	ldr	r3, [pc, #388]	; (8008ca4 <UART_SetConfig+0x2d4>)
 8008b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b22:	095b      	lsrs	r3, r3, #5
 8008b24:	011c      	lsls	r4, r3, #4
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	1891      	adds	r1, r2, r2
 8008b3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b40:	415b      	adcs	r3, r3
 8008b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b48:	4641      	mov	r1, r8
 8008b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8008b4e:	4649      	mov	r1, r9
 8008b50:	eb43 0b01 	adc.w	fp, r3, r1
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b68:	4692      	mov	sl, r2
 8008b6a:	469b      	mov	fp, r3
 8008b6c:	4643      	mov	r3, r8
 8008b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8008b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b76:	464b      	mov	r3, r9
 8008b78:	eb4b 0303 	adc.w	r3, fp, r3
 8008b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b94:	460b      	mov	r3, r1
 8008b96:	18db      	adds	r3, r3, r3
 8008b98:	643b      	str	r3, [r7, #64]	; 0x40
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008baa:	f7f7 fb71 	bl	8000290 <__aeabi_uldivmod>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <UART_SetConfig+0x2d4>)
 8008bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	2264      	movs	r2, #100	; 0x64
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	1acb      	subs	r3, r1, r3
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008bca:	4b36      	ldr	r3, [pc, #216]	; (8008ca4 <UART_SetConfig+0x2d4>)
 8008bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd0:	095b      	lsrs	r3, r3, #5
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bd8:	441c      	add	r4, r3
 8008bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008be4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008bec:	4642      	mov	r2, r8
 8008bee:	464b      	mov	r3, r9
 8008bf0:	1891      	adds	r1, r2, r2
 8008bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bf4:	415b      	adcs	r3, r3
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	1851      	adds	r1, r2, r1
 8008c00:	6339      	str	r1, [r7, #48]	; 0x30
 8008c02:	4649      	mov	r1, r9
 8008c04:	414b      	adcs	r3, r1
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	f04f 0300 	mov.w	r3, #0
 8008c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c14:	4659      	mov	r1, fp
 8008c16:	00cb      	lsls	r3, r1, #3
 8008c18:	4651      	mov	r1, sl
 8008c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1e:	4651      	mov	r1, sl
 8008c20:	00ca      	lsls	r2, r1, #3
 8008c22:	4610      	mov	r0, r2
 8008c24:	4619      	mov	r1, r3
 8008c26:	4603      	mov	r3, r0
 8008c28:	4642      	mov	r2, r8
 8008c2a:	189b      	adds	r3, r3, r2
 8008c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c30:	464b      	mov	r3, r9
 8008c32:	460a      	mov	r2, r1
 8008c34:	eb42 0303 	adc.w	r3, r2, r3
 8008c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c50:	460b      	mov	r3, r1
 8008c52:	18db      	adds	r3, r3, r3
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c56:	4613      	mov	r3, r2
 8008c58:	eb42 0303 	adc.w	r3, r2, r3
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c66:	f7f7 fb13 	bl	8000290 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <UART_SetConfig+0x2d4>)
 8008c70:	fba3 1302 	umull	r1, r3, r3, r2
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	2164      	movs	r1, #100	; 0x64
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	3332      	adds	r3, #50	; 0x32
 8008c82:	4a08      	ldr	r2, [pc, #32]	; (8008ca4 <UART_SetConfig+0x2d4>)
 8008c84:	fba2 2303 	umull	r2, r3, r2, r3
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	f003 0207 	and.w	r2, r3, #7
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4422      	add	r2, r4
 8008c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c98:	e105      	b.n	8008ea6 <UART_SetConfig+0x4d6>
 8008c9a:	bf00      	nop
 8008c9c:	40011000 	.word	0x40011000
 8008ca0:	40011400 	.word	0x40011400
 8008ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008cba:	4642      	mov	r2, r8
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	1891      	adds	r1, r2, r2
 8008cc0:	6239      	str	r1, [r7, #32]
 8008cc2:	415b      	adcs	r3, r3
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cca:	4641      	mov	r1, r8
 8008ccc:	1854      	adds	r4, r2, r1
 8008cce:	4649      	mov	r1, r9
 8008cd0:	eb43 0501 	adc.w	r5, r3, r1
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	00eb      	lsls	r3, r5, #3
 8008cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ce2:	00e2      	lsls	r2, r4, #3
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	4643      	mov	r3, r8
 8008cea:	18e3      	adds	r3, r4, r3
 8008cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	eb45 0303 	adc.w	r3, r5, r3
 8008cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d16:	4629      	mov	r1, r5
 8008d18:	008b      	lsls	r3, r1, #2
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d20:	4621      	mov	r1, r4
 8008d22:	008a      	lsls	r2, r1, #2
 8008d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d28:	f7f7 fab2 	bl	8000290 <__aeabi_uldivmod>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4b60      	ldr	r3, [pc, #384]	; (8008eb4 <UART_SetConfig+0x4e4>)
 8008d32:	fba3 2302 	umull	r2, r3, r3, r2
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	011c      	lsls	r4, r3, #4
 8008d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	464b      	mov	r3, r9
 8008d50:	1891      	adds	r1, r2, r2
 8008d52:	61b9      	str	r1, [r7, #24]
 8008d54:	415b      	adcs	r3, r3
 8008d56:	61fb      	str	r3, [r7, #28]
 8008d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	1851      	adds	r1, r2, r1
 8008d60:	6139      	str	r1, [r7, #16]
 8008d62:	4649      	mov	r1, r9
 8008d64:	414b      	adcs	r3, r1
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d74:	4659      	mov	r1, fp
 8008d76:	00cb      	lsls	r3, r1, #3
 8008d78:	4651      	mov	r1, sl
 8008d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d7e:	4651      	mov	r1, sl
 8008d80:	00ca      	lsls	r2, r1, #3
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	4642      	mov	r2, r8
 8008d8a:	189b      	adds	r3, r3, r2
 8008d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d90:	464b      	mov	r3, r9
 8008d92:	460a      	mov	r2, r1
 8008d94:	eb42 0303 	adc.w	r3, r2, r3
 8008d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008db4:	4649      	mov	r1, r9
 8008db6:	008b      	lsls	r3, r1, #2
 8008db8:	4641      	mov	r1, r8
 8008dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dbe:	4641      	mov	r1, r8
 8008dc0:	008a      	lsls	r2, r1, #2
 8008dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008dc6:	f7f7 fa63 	bl	8000290 <__aeabi_uldivmod>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4b39      	ldr	r3, [pc, #228]	; (8008eb4 <UART_SetConfig+0x4e4>)
 8008dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd4:	095b      	lsrs	r3, r3, #5
 8008dd6:	2164      	movs	r1, #100	; 0x64
 8008dd8:	fb01 f303 	mul.w	r3, r1, r3
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	3332      	adds	r3, #50	; 0x32
 8008de2:	4a34      	ldr	r2, [pc, #208]	; (8008eb4 <UART_SetConfig+0x4e4>)
 8008de4:	fba2 2303 	umull	r2, r3, r2, r3
 8008de8:	095b      	lsrs	r3, r3, #5
 8008dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dee:	441c      	add	r4, r3
 8008df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df4:	2200      	movs	r2, #0
 8008df6:	673b      	str	r3, [r7, #112]	; 0x70
 8008df8:	677a      	str	r2, [r7, #116]	; 0x74
 8008dfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008dfe:	4642      	mov	r2, r8
 8008e00:	464b      	mov	r3, r9
 8008e02:	1891      	adds	r1, r2, r2
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	415b      	adcs	r3, r3
 8008e08:	60fb      	str	r3, [r7, #12]
 8008e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e0e:	4641      	mov	r1, r8
 8008e10:	1851      	adds	r1, r2, r1
 8008e12:	6039      	str	r1, [r7, #0]
 8008e14:	4649      	mov	r1, r9
 8008e16:	414b      	adcs	r3, r1
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e26:	4659      	mov	r1, fp
 8008e28:	00cb      	lsls	r3, r1, #3
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e30:	4651      	mov	r1, sl
 8008e32:	00ca      	lsls	r2, r1, #3
 8008e34:	4610      	mov	r0, r2
 8008e36:	4619      	mov	r1, r3
 8008e38:	4603      	mov	r3, r0
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	189b      	adds	r3, r3, r2
 8008e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e40:	464b      	mov	r3, r9
 8008e42:	460a      	mov	r2, r1
 8008e44:	eb42 0303 	adc.w	r3, r2, r3
 8008e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	663b      	str	r3, [r7, #96]	; 0x60
 8008e54:	667a      	str	r2, [r7, #100]	; 0x64
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e62:	4649      	mov	r1, r9
 8008e64:	008b      	lsls	r3, r1, #2
 8008e66:	4641      	mov	r1, r8
 8008e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	008a      	lsls	r2, r1, #2
 8008e70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e74:	f7f7 fa0c 	bl	8000290 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <UART_SetConfig+0x4e4>)
 8008e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2164      	movs	r1, #100	; 0x64
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	3332      	adds	r3, #50	; 0x32
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <UART_SetConfig+0x4e4>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	f003 020f 	and.w	r2, r3, #15
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4422      	add	r2, r4
 8008ea4:	609a      	str	r2, [r3, #8]
}
 8008ea6:	bf00      	nop
 8008ea8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008eac:	46bd      	mov	sp, r7
 8008eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eb2:	bf00      	nop
 8008eb4:	51eb851f 	.word	0x51eb851f

08008eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb8:	b084      	sub	sp, #16
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	f107 001c 	add.w	r0, r7, #28
 8008ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d122      	bne.n	8008f16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d105      	bne.n	8008f0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9c0 	bl	8009290 <USB_CoreReset>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e01a      	b.n	8008f4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f9b4 	bl	8009290 <USB_CoreReset>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f3e:	e005      	b.n	8008f4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10b      	bne.n	8008f6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f043 0206 	orr.w	r2, r3, #6
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f76:	b004      	add	sp, #16
 8008f78:	4770      	bx	lr

08008f7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f023 0201 	bic.w	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d115      	bne.n	800900c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fec:	2001      	movs	r0, #1
 8008fee:	f7f9 ffd7 	bl	8002fa0 <HAL_Delay>
      ms++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f93a 	bl	8009272 <USB_GetMode>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b01      	cmp	r3, #1
 8009002:	d01e      	beq.n	8009042 <USB_SetCurrentMode+0x84>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b31      	cmp	r3, #49	; 0x31
 8009008:	d9f0      	bls.n	8008fec <USB_SetCurrentMode+0x2e>
 800900a:	e01a      	b.n	8009042 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d115      	bne.n	800903e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800901e:	2001      	movs	r0, #1
 8009020:	f7f9 ffbe 	bl	8002fa0 <HAL_Delay>
      ms++;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f921 	bl	8009272 <USB_GetMode>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <USB_SetCurrentMode+0x84>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b31      	cmp	r3, #49	; 0x31
 800903a:	d9f0      	bls.n	800901e <USB_SetCurrentMode+0x60>
 800903c:	e001      	b.n	8009042 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e005      	b.n	800904e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b32      	cmp	r3, #50	; 0x32
 8009046:	d101      	bne.n	800904c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e000      	b.n	800904e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3301      	adds	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a13      	ldr	r2, [pc, #76]	; (80090bc <USB_FlushTxFifo+0x64>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d901      	bls.n	8009078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e01b      	b.n	80090b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	daf2      	bge.n	8009066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	019b      	lsls	r3, r3, #6
 8009088:	f043 0220 	orr.w	r2, r3, #32
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3301      	adds	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4a08      	ldr	r2, [pc, #32]	; (80090bc <USB_FlushTxFifo+0x64>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d901      	bls.n	80090a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e006      	b.n	80090b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b20      	cmp	r3, #32
 80090ac:	d0f0      	beq.n	8009090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	00030d40 	.word	0x00030d40

080090c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4a11      	ldr	r2, [pc, #68]	; (800911c <USB_FlushRxFifo+0x5c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e018      	b.n	8009110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	daf2      	bge.n	80090cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2210      	movs	r2, #16
 80090ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <USB_FlushRxFifo+0x5c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e006      	b.n	8009110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	2b10      	cmp	r3, #16
 800910c:	d0f0      	beq.n	80090f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	00030d40 	.word	0x00030d40

08009120 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009120:	b480      	push	{r7}
 8009122:	b089      	sub	sp, #36	; 0x24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4611      	mov	r1, r2
 800912c:	461a      	mov	r2, r3
 800912e:	460b      	mov	r3, r1
 8009130:	71fb      	strb	r3, [r7, #7]
 8009132:	4613      	mov	r3, r2
 8009134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800913e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d123      	bne.n	800918e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009146:	88bb      	ldrh	r3, [r7, #4]
 8009148:	3303      	adds	r3, #3
 800914a:	089b      	lsrs	r3, r3, #2
 800914c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800914e:	2300      	movs	r3, #0
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e018      	b.n	8009186 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	031a      	lsls	r2, r3, #12
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009160:	461a      	mov	r2, r3
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	3301      	adds	r3, #1
 800916c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3301      	adds	r3, #1
 8009172:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	3301      	adds	r3, #1
 8009178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3301      	adds	r3, #1
 800917e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	3301      	adds	r3, #1
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	429a      	cmp	r2, r3
 800918c:	d3e2      	bcc.n	8009154 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3724      	adds	r7, #36	; 0x24
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800919c:	b480      	push	{r7}
 800919e:	b08b      	sub	sp, #44	; 0x2c
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091b2:	88fb      	ldrh	r3, [r7, #6]
 80091b4:	089b      	lsrs	r3, r3, #2
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	623b      	str	r3, [r7, #32]
 80091c6:	e014      	b.n	80091f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	3301      	adds	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	3301      	adds	r3, #1
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	3301      	adds	r3, #1
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	3301      	adds	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	3301      	adds	r3, #1
 80091f0:	623b      	str	r3, [r7, #32]
 80091f2:	6a3a      	ldr	r2, [r7, #32]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d3e6      	bcc.n	80091c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091fa:	8bfb      	ldrh	r3, [r7, #30]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01e      	beq.n	800923e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920a:	461a      	mov	r2, r3
 800920c:	f107 0310 	add.w	r3, r7, #16
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	fa22 f303 	lsr.w	r3, r2, r3
 8009220:	b2da      	uxtb	r2, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	701a      	strb	r2, [r3, #0]
      i++;
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	3301      	adds	r3, #1
 800922a:	623b      	str	r3, [r7, #32]
      pDest++;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	3301      	adds	r3, #1
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009232:	8bfb      	ldrh	r3, [r7, #30]
 8009234:	3b01      	subs	r3, #1
 8009236:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009238:	8bfb      	ldrh	r3, [r7, #30]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1ea      	bne.n	8009214 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009240:	4618      	mov	r0, r3
 8009242:	372c      	adds	r7, #44	; 0x2c
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4013      	ands	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009264:	68fb      	ldr	r3, [r7, #12]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	f003 0301 	and.w	r3, r3, #1
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a13      	ldr	r2, [pc, #76]	; (80092f4 <USB_CoreReset+0x64>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e01b      	b.n	80092e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	daf2      	bge.n	800929c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f043 0201 	orr.w	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <USB_CoreReset+0x64>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e006      	b.n	80092e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d0f0      	beq.n	80092c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	00030d40 	.word	0x00030d40

080092f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092f8:	b084      	sub	sp, #16
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b086      	sub	sp, #24
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009318:	461a      	mov	r2, r3
 800931a:	2300      	movs	r3, #0
 800931c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d018      	beq.n	8009380 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d10a      	bne.n	800936a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009362:	f043 0304 	orr.w	r3, r3, #4
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	e014      	b.n	8009394 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009378:	f023 0304 	bic.w	r3, r3, #4
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	e009      	b.n	8009394 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800938e:	f023 0304 	bic.w	r3, r3, #4
 8009392:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009394:	2110      	movs	r1, #16
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fe5e 	bl	8009058 <USB_FlushTxFifo>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff fe8a 	bl	80090c0 <USB_FlushRxFifo>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
 80093ba:	e015      	b.n	80093e8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	461a      	mov	r2, r3
 80093ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093dc:	461a      	mov	r2, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3301      	adds	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3e5      	bcc.n	80093bc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009410:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a13      	ldr	r2, [pc, #76]	; (8009464 <USB_HostInit+0x16c>)
 8009416:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a13      	ldr	r2, [pc, #76]	; (8009468 <USB_HostInit+0x170>)
 800941c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009420:	e009      	b.n	8009436 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2280      	movs	r2, #128	; 0x80
 8009426:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <USB_HostInit+0x174>)
 800942c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <USB_HostInit+0x178>)
 8009432:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	f043 0210 	orr.w	r2, r3, #16
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <USB_HostInit+0x17c>)
 800944e:	4313      	orrs	r3, r2
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009460:	b004      	add	sp, #16
 8009462:	4770      	bx	lr
 8009464:	01000200 	.word	0x01000200
 8009468:	00e00300 	.word	0x00e00300
 800946c:	00600080 	.word	0x00600080
 8009470:	004000e0 	.word	0x004000e0
 8009474:	a3200008 	.word	0xa3200008

08009478 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80094b0:	4313      	orrs	r3, r2
 80094b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d107      	bne.n	80094ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094c0:	461a      	mov	r2, r3
 80094c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80094c6:	6053      	str	r3, [r2, #4]
 80094c8:	e009      	b.n	80094de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d106      	bne.n	80094de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094d6:	461a      	mov	r2, r3
 80094d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80094dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800950c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800951a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800951c:	2064      	movs	r0, #100	; 0x64
 800951e:	f7f9 fd3f 	bl	8002fa0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800952a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800952e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009530:	200a      	movs	r0, #10
 8009532:	f7f9 fd35 	bl	8002fa0 <HAL_Delay>

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009564:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <USB_DriveVbus+0x44>
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d106      	bne.n	8009584 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800957e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009582:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800958a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800958e:	d109      	bne.n	80095a4 <USB_DriveVbus+0x64>
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800959e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0c5b      	lsrs	r3, r3, #17
 80095d0:	f003 0303 	and.w	r3, r3, #3
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	b29b      	uxth	r3, r3
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	461a      	mov	r2, r3
 8009612:	4603      	mov	r3, r0
 8009614:	70fb      	strb	r3, [r7, #3]
 8009616:	460b      	mov	r3, r1
 8009618:	70bb      	strb	r3, [r7, #2]
 800961a:	4613      	mov	r3, r2
 800961c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	461a      	mov	r2, r3
 8009634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009638:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800963a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800963e:	2b03      	cmp	r3, #3
 8009640:	d87e      	bhi.n	8009740 <USB_HC_Init+0x13c>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USB_HC_Init+0x44>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009659 	.word	0x08009659
 800964c:	08009703 	.word	0x08009703
 8009650:	08009659 	.word	0x08009659
 8009654:	080096c5 	.word	0x080096c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	4413      	add	r3, r2
 8009660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009664:	461a      	mov	r2, r3
 8009666:	f240 439d 	movw	r3, #1181	; 0x49d
 800966a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800966c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009670:	2b00      	cmp	r3, #0
 8009672:	da10      	bge.n	8009696 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	4413      	add	r3, r2
 800967c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	0151      	lsls	r1, r2, #5
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	440a      	add	r2, r1
 800968a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800968e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009692:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009694:	e057      	b.n	8009746 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d051      	beq.n	8009746 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80096c0:	60d3      	str	r3, [r2, #12]
      break;
 80096c2:	e040      	b.n	8009746 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d0:	461a      	mov	r2, r3
 80096d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80096d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80096d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da34      	bge.n	800974a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009700:	e023      	b.n	800974a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	4413      	add	r3, r2
 800970a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970e:	461a      	mov	r2, r3
 8009710:	f240 2325 	movw	r3, #549	; 0x225
 8009714:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009716:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800971a:	2b00      	cmp	r3, #0
 800971c:	da17      	bge.n	800974e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4413      	add	r3, r2
 8009726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	440a      	add	r2, r1
 8009734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009738:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800973c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800973e:	e006      	b.n	800974e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	77fb      	strb	r3, [r7, #31]
      break;
 8009744:	e004      	b.n	8009750 <USB_HC_Init+0x14c>
      break;
 8009746:	bf00      	nop
 8009748:	e002      	b.n	8009750 <USB_HC_Init+0x14c>
      break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <USB_HC_Init+0x14c>
      break;
 800974e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	4413      	add	r3, r2
 8009758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	440a      	add	r2, r1
 8009766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800976a:	f043 0302 	orr.w	r3, r3, #2
 800976e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009776:	699a      	ldr	r2, [r3, #24]
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	2101      	movs	r1, #1
 8009780:	fa01 f303 	lsl.w	r3, r1, r3
 8009784:	6939      	ldr	r1, [r7, #16]
 8009786:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800978a:	4313      	orrs	r3, r2
 800978c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800979a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	da03      	bge.n	80097aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80097a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097a6:	61bb      	str	r3, [r7, #24]
 80097a8:	e001      	b.n	80097ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff feff 	bl	80095b2 <USB_GetHostSpeed>
 80097b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80097b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d106      	bne.n	80097cc <USB_HC_Init+0x1c8>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d003      	beq.n	80097cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80097c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	e001      	b.n	80097d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097d0:	787b      	ldrb	r3, [r7, #1]
 80097d2:	059b      	lsls	r3, r3, #22
 80097d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80097d8:	78bb      	ldrb	r3, [r7, #2]
 80097da:	02db      	lsls	r3, r3, #11
 80097dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80097e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097e6:	049b      	lsls	r3, r3, #18
 80097e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80097ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80097f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	0159      	lsls	r1, r3, #5
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	440b      	add	r3, r1
 8009802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009806:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800980c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800980e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009812:	2b03      	cmp	r3, #3
 8009814:	d003      	beq.n	800981e <USB_HC_Init+0x21a>
 8009816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d10f      	bne.n	800983e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	440a      	add	r2, r1
 8009834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800983c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800983e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08c      	sub	sp, #48	; 0x30
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	785b      	ldrb	r3, [r3, #1]
 800985e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009864:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986e:	2b00      	cmp	r3, #0
 8009870:	d02d      	beq.n	80098ce <USB_HC_StartXfer+0x86>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d129      	bne.n	80098ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d117      	bne.n	80098b0 <USB_HC_StartXfer+0x68>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	79db      	ldrb	r3, [r3, #7]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <USB_HC_StartXfer+0x48>
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	79db      	ldrb	r3, [r3, #7]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d10f      	bne.n	80098b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	4413      	add	r3, r2
 8009898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	0151      	lsls	r1, r2, #5
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	440a      	add	r2, r1
 80098a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <USB_HC_StartXfer+0x86>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	795b      	ldrb	r3, [r3, #5]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d107      	bne.n	80098ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	4619      	mov	r1, r3
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fa0f 	bl	8009ce8 <USB_DoPing>
      return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e0f8      	b.n	8009ac0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d018      	beq.n	8009908 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	8912      	ldrh	r2, [r2, #8]
 80098de:	4413      	add	r3, r2
 80098e0:	3b01      	subs	r3, #1
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	8912      	ldrh	r2, [r2, #8]
 80098e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80098ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80098ee:	8b7b      	ldrh	r3, [r7, #26]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d90b      	bls.n	800990c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80098f4:	8b7b      	ldrh	r3, [r7, #26]
 80098f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80098f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	8912      	ldrh	r2, [r2, #8]
 80098fe:	fb03 f202 	mul.w	r2, r3, r2
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	611a      	str	r2, [r3, #16]
 8009906:	e001      	b.n	800990c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009908:	2301      	movs	r3, #1
 800990a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	78db      	ldrb	r3, [r3, #3]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	8912      	ldrh	r2, [r2, #8]
 800991a:	fb03 f202 	mul.w	r2, r3, r2
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	611a      	str	r2, [r3, #16]
 8009922:	e003      	b.n	800992c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	695a      	ldr	r2, [r3, #20]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009934:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009936:	04d9      	lsls	r1, r3, #19
 8009938:	4b63      	ldr	r3, [pc, #396]	; (8009ac8 <USB_HC_StartXfer+0x280>)
 800993a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800993c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	7a9b      	ldrb	r3, [r3, #10]
 8009942:	075b      	lsls	r3, r3, #29
 8009944:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009948:	69f9      	ldr	r1, [r7, #28]
 800994a:	0148      	lsls	r0, r1, #5
 800994c:	6a39      	ldr	r1, [r7, #32]
 800994e:	4401      	add	r1, r0
 8009950:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009954:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009956:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	68d9      	ldr	r1, [r3, #12]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	4413      	add	r3, r2
 800996a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996e:	460a      	mov	r2, r1
 8009970:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	4413      	add	r3, r2
 8009992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	6a3a      	ldr	r2, [r7, #32]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	7e7b      	ldrb	r3, [r7, #25]
 80099ba:	075b      	lsls	r3, r3, #29
 80099bc:	69f9      	ldr	r1, [r7, #28]
 80099be:	0148      	lsls	r0, r1, #5
 80099c0:	6a39      	ldr	r1, [r7, #32]
 80099c2:	4401      	add	r1, r0
 80099c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80099c8:	4313      	orrs	r3, r2
 80099ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	78db      	ldrb	r3, [r3, #3]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	e003      	b.n	80099fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a04:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a12:	461a      	mov	r2, r3
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e04e      	b.n	8009ac0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	78db      	ldrb	r3, [r3, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d149      	bne.n	8009abe <USB_HC_StartXfer+0x276>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d045      	beq.n	8009abe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	79db      	ldrb	r3, [r3, #7]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d830      	bhi.n	8009a9c <USB_HC_StartXfer+0x254>
 8009a3a:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USB_HC_StartXfer+0x1f8>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009a51 	.word	0x08009a51
 8009a44:	08009a75 	.word	0x08009a75
 8009a48:	08009a51 	.word	0x08009a51
 8009a4c:	08009a75 	.word	0x08009a75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	3303      	adds	r3, #3
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009a5a:	8afa      	ldrh	r2, [r7, #22]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d91c      	bls.n	8009aa0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f043 0220 	orr.w	r2, r3, #32
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a72:	e015      	b.n	8009aa0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	3303      	adds	r3, #3
 8009a7a:	089b      	lsrs	r3, r3, #2
 8009a7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009a7e:	8afa      	ldrh	r2, [r7, #22]
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d90a      	bls.n	8009aa4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a9a:	e003      	b.n	8009aa4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009a9c:	bf00      	nop
 8009a9e:	e002      	b.n	8009aa6 <USB_HC_StartXfer+0x25e>
        break;
 8009aa0:	bf00      	nop
 8009aa2:	e000      	b.n	8009aa6 <USB_HC_StartXfer+0x25e>
        break;
 8009aa4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	68d9      	ldr	r1, [r3, #12]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	785a      	ldrb	r2, [r3, #1]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	9000      	str	r0, [sp, #0]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fb31 	bl	8009120 <USB_WritePacket>
  }

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3728      	adds	r7, #40	; 0x28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	1ff80000 	.word	0x1ff80000

08009acc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	b29b      	uxth	r3, r3
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b089      	sub	sp, #36	; 0x24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	0c9b      	lsrs	r3, r3, #18
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	0fdb      	lsrs	r3, r3, #31
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d104      	bne.n	8009b48 <USB_HC_Halt+0x5a>
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	e0c8      	b.n	8009cda <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <USB_HC_Halt+0x66>
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d163      	bne.n	8009c1c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 80ab 	bne.w	8009cd8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d133      	bne.n	8009bf6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bcc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bda:	d81d      	bhi.n	8009c18 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf2:	d0ec      	beq.n	8009bce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009bf4:	e070      	b.n	8009cd8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c16:	e05f      	b.n	8009cd8 <USB_HC_Halt+0x1ea>
            break;
 8009c18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c1a:	e05d      	b.n	8009cd8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d133      	bne.n	8009cb4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	0151      	lsls	r1, r2, #5
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	440a      	add	r2, r1
 8009c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c8a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c98:	d81d      	bhi.n	8009cd6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cb0:	d0ec      	beq.n	8009c8c <USB_HC_Halt+0x19e>
 8009cb2:	e011      	b.n	8009cd8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	0151      	lsls	r1, r2, #5
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	440a      	add	r2, r1
 8009cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e000      	b.n	8009cd8 <USB_HC_Halt+0x1ea>
          break;
 8009cd6:	bf00      	nop
    }
  }

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3724      	adds	r7, #36	; 0x24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	04da      	lsls	r2, r3, #19
 8009d04:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <USB_DoPing+0x74>)
 8009d06:	4013      	ands	r3, r2
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	461a      	mov	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	1ff80000 	.word	0x1ff80000

08009d60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff f911 	bl	8008f9c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d7a:	2110      	movs	r1, #16
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff f96b 	bl	8009058 <USB_FlushTxFifo>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff f997 	bl	80090c0 <USB_FlushRxFifo>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	e01f      	b.n	8009de2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009db8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	3301      	adds	r3, #1
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b0f      	cmp	r3, #15
 8009de6:	d9dc      	bls.n	8009da2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009de8:	2300      	movs	r3, #0
 8009dea:	61bb      	str	r3, [r7, #24]
 8009dec:	e034      	b.n	8009e58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e22:	461a      	mov	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e34:	d80c      	bhi.n	8009e50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e4c:	d0ec      	beq.n	8009e28 <USB_StopHost+0xc8>
 8009e4e:	e000      	b.n	8009e52 <USB_StopHost+0xf2>
        break;
 8009e50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	3301      	adds	r3, #1
 8009e56:	61bb      	str	r3, [r7, #24]
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b0f      	cmp	r3, #15
 8009e5c:	d9c7      	bls.n	8009dee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e64:	461a      	mov	r2, r3
 8009e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff f880 	bl	8008f7a <USB_EnableGlobalInt>

  return ret;
 8009e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009e88:	4904      	ldr	r1, [pc, #16]	; (8009e9c <MX_FATFS_Init+0x18>)
 8009e8a:	4805      	ldr	r0, [pc, #20]	; (8009ea0 <MX_FATFS_Init+0x1c>)
 8009e8c:	f003 f95e 	bl	800d14c <FATFS_LinkDriver>
 8009e90:	4603      	mov	r3, r0
 8009e92:	461a      	mov	r2, r3
 8009e94:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <MX_FATFS_Init+0x20>)
 8009e96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e98:	bf00      	nop
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	200033f4 	.word	0x200033f4
 8009ea0:	0800ee20 	.word	0x0800ee20
 8009ea4:	200033f0 	.word	0x200033f0

08009ea8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4808      	ldr	r0, [pc, #32]	; (8009ef4 <USBH_status+0x34>)
 8009ed4:	f000 fe32 	bl	800ab3c <USBH_MSC_UnitIsReady>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <USBH_status+0x24>
  {
    res = RES_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]
 8009ee2:	e001      	b.n	8009ee8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20003404 	.word	0x20003404

08009ef8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b094      	sub	sp, #80	; 0x50
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009f0e:	7bf9      	ldrb	r1, [r7, #15]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	4813      	ldr	r0, [pc, #76]	; (8009f68 <USBH_read+0x70>)
 8009f1a:	f000 fe59 	bl	800abd0 <USBH_MSC_Read>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <USBH_read+0x34>
  {
    res = RES_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f2a:	e017      	b.n	8009f5c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009f2c:	f107 0210 	add.w	r2, r7, #16
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4619      	mov	r1, r3
 8009f34:	480c      	ldr	r0, [pc, #48]	; (8009f68 <USBH_read+0x70>)
 8009f36:	f000 fe27 	bl	800ab88 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009f3a:	7f7b      	ldrb	r3, [r7, #29]
 8009f3c:	2b3a      	cmp	r3, #58	; 0x3a
 8009f3e:	d005      	beq.n	8009f4c <USBH_read+0x54>
 8009f40:	2b3a      	cmp	r3, #58	; 0x3a
 8009f42:	dc07      	bgt.n	8009f54 <USBH_read+0x5c>
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d001      	beq.n	8009f4c <USBH_read+0x54>
 8009f48:	2b28      	cmp	r3, #40	; 0x28
 8009f4a:	d103      	bne.n	8009f54 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f52:	e003      	b.n	8009f5c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f5a:	bf00      	nop
    }
  }

  return res;
 8009f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3748      	adds	r7, #72	; 0x48
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20003404 	.word	0x20003404

08009f6c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b094      	sub	sp, #80	; 0x50
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009f82:	7bf9      	ldrb	r1, [r7, #15]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4817      	ldr	r0, [pc, #92]	; (8009fec <USBH_write+0x80>)
 8009f8e:	f000 fe88 	bl	800aca2 <USBH_MSC_Write>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d103      	bne.n	8009fa0 <USBH_write+0x34>
  {
    res = RES_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f9e:	e01f      	b.n	8009fe0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009fa0:	f107 0210 	add.w	r2, r7, #16
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4810      	ldr	r0, [pc, #64]	; (8009fec <USBH_write+0x80>)
 8009faa:	f000 fded 	bl	800ab88 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009fae:	7f7b      	ldrb	r3, [r7, #29]
 8009fb0:	2b3a      	cmp	r3, #58	; 0x3a
 8009fb2:	d00d      	beq.n	8009fd0 <USBH_write+0x64>
 8009fb4:	2b3a      	cmp	r3, #58	; 0x3a
 8009fb6:	dc0f      	bgt.n	8009fd8 <USBH_write+0x6c>
 8009fb8:	2b28      	cmp	r3, #40	; 0x28
 8009fba:	d009      	beq.n	8009fd0 <USBH_write+0x64>
 8009fbc:	2b28      	cmp	r3, #40	; 0x28
 8009fbe:	dc0b      	bgt.n	8009fd8 <USBH_write+0x6c>
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d005      	beq.n	8009fd0 <USBH_write+0x64>
 8009fc4:	2b27      	cmp	r3, #39	; 0x27
 8009fc6:	d107      	bne.n	8009fd8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009fce:	e007      	b.n	8009fe0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009fd6:	e003      	b.n	8009fe0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009fde:	bf00      	nop
    }
  }

  return res;
 8009fe0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3748      	adds	r7, #72	; 0x48
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20003404 	.word	0x20003404

08009ff0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b090      	sub	sp, #64	; 0x40
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	603a      	str	r2, [r7, #0]
 8009ffa:	71fb      	strb	r3, [r7, #7]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a006:	79bb      	ldrb	r3, [r7, #6]
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d852      	bhi.n	800a0b2 <USBH_ioctl+0xc2>
 800a00c:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBH_ioctl+0x24>)
 800a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a012:	bf00      	nop
 800a014:	0800a025 	.word	0x0800a025
 800a018:	0800a02d 	.word	0x0800a02d
 800a01c:	0800a057 	.word	0x0800a057
 800a020:	0800a083 	.word	0x0800a083
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a02a:	e045      	b.n	800a0b8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a02c:	f107 0208 	add.w	r2, r7, #8
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	4619      	mov	r1, r3
 800a034:	4823      	ldr	r0, [pc, #140]	; (800a0c4 <USBH_ioctl+0xd4>)
 800a036:	f000 fda7 	bl	800ab88 <USBH_MSC_GetLUNInfo>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a04c:	e034      	b.n	800a0b8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a054:	e030      	b.n	800a0b8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	4619      	mov	r1, r3
 800a05e:	4819      	ldr	r0, [pc, #100]	; (800a0c4 <USBH_ioctl+0xd4>)
 800a060:	f000 fd92 	bl	800ab88 <USBH_MSC_GetLUNInfo>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a06a:	8a3b      	ldrh	r3, [r7, #16]
 800a06c:	461a      	mov	r2, r3
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a078:	e01e      	b.n	800a0b8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a080:	e01a      	b.n	800a0b8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a082:	f107 0208 	add.w	r2, r7, #8
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	4619      	mov	r1, r3
 800a08a:	480e      	ldr	r0, [pc, #56]	; (800a0c4 <USBH_ioctl+0xd4>)
 800a08c:	f000 fd7c 	bl	800ab88 <USBH_MSC_GetLUNInfo>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a096:	8a3b      	ldrh	r3, [r7, #16]
 800a098:	0a5b      	lsrs	r3, r3, #9
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a0a8:	e006      	b.n	800a0b8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a0b0:	e002      	b.n	800a0b8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a0b2:	2304      	movs	r3, #4
 800a0b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a0b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3740      	adds	r7, #64	; 0x40
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20003404 	.word	0x20003404

0800a0c8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b089      	sub	sp, #36	; 0x24
 800a0cc:	af04      	add	r7, sp, #16
 800a0ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d6:	7919      	ldrb	r1, [r3, #4]
 800a0d8:	2350      	movs	r3, #80	; 0x50
 800a0da:	2206      	movs	r2, #6
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 fc6b 	bl	800b9b8 <USBH_FindInterface>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	2bff      	cmp	r3, #255	; 0xff
 800a0ea:	d002      	beq.n	800a0f2 <USBH_MSC_InterfaceInit+0x2a>
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d901      	bls.n	800a0f6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e106      	b.n	800a304 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 fc40 	bl	800b980 <USBH_SelectInterface>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a104:	7bbb      	ldrb	r3, [r7, #14]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a10a:	2302      	movs	r3, #2
 800a10c:	e0fa      	b.n	800a304 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a114:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a118:	f003 fb94 	bl	800d844 <malloc>
 800a11c:	4603      	mov	r3, r0
 800a11e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a130:	2302      	movs	r3, #2
 800a132:	e0e7      	b.n	800a304 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a134:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a138:	2100      	movs	r1, #0
 800a13a:	68b8      	ldr	r0, [r7, #8]
 800a13c:	f003 fba0 	bl	800d880 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	211a      	movs	r1, #26
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	4413      	add	r3, r2
 800a14c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b25b      	sxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	da16      	bge.n	800a186 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	211a      	movs	r1, #26
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	211a      	movs	r1, #26
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	4413      	add	r3, r2
 800a17a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a17e:	881a      	ldrh	r2, [r3, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	815a      	strh	r2, [r3, #10]
 800a184:	e015      	b.n	800a1b2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	211a      	movs	r1, #26
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	4413      	add	r3, r2
 800a192:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	211a      	movs	r1, #26
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1ac:	881a      	ldrh	r2, [r3, #0]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	211a      	movs	r1, #26
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b25b      	sxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da16      	bge.n	800a1f8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	211a      	movs	r1, #26
 800a1d0:	fb01 f303 	mul.w	r3, r1, r3
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	211a      	movs	r1, #26
 800a1e6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a1f0:	881a      	ldrh	r2, [r3, #0]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	815a      	strh	r2, [r3, #10]
 800a1f6:	e015      	b.n	800a224 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	211a      	movs	r1, #26
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	4413      	add	r3, r2
 800a204:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	211a      	movs	r1, #26
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	4413      	add	r3, r2
 800a21a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2200      	movs	r2, #0
 800a228:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2200      	movs	r2, #0
 800a22e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2200      	movs	r2, #0
 800a234:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	799b      	ldrb	r3, [r3, #6]
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f002 fed6 	bl	800cfee <USBH_AllocPipe>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	79db      	ldrb	r3, [r3, #7]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f002 fecc 	bl	800cfee <USBH_AllocPipe>
 800a256:	4603      	mov	r3, r0
 800a258:	461a      	mov	r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fdc4 	bl	800adec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	799b      	ldrb	r3, [r3, #6]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01e      	beq.n	800a2aa <USBH_MSC_InterfaceInit+0x1e2>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	891b      	ldrh	r3, [r3, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01a      	beq.n	800a2aa <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	7959      	ldrb	r1, [r3, #5]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	7998      	ldrb	r0, [r3, #6]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	8912      	ldrh	r2, [r2, #8]
 800a28c:	9202      	str	r2, [sp, #8]
 800a28e:	2202      	movs	r2, #2
 800a290:	9201      	str	r2, [sp, #4]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4623      	mov	r3, r4
 800a296:	4602      	mov	r2, r0
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f002 fe79 	bl	800cf90 <USBH_OpenPipe>
 800a29e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	79db      	ldrb	r3, [r3, #7]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d02c      	beq.n	800a302 <USBH_MSC_InterfaceInit+0x23a>
 800a2a8:	e001      	b.n	800a2ae <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e02a      	b.n	800a304 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	895b      	ldrh	r3, [r3, #10]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d025      	beq.n	800a302 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	7919      	ldrb	r1, [r3, #4]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	79d8      	ldrb	r0, [r3, #7]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	8952      	ldrh	r2, [r2, #10]
 800a2ce:	9202      	str	r2, [sp, #8]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	9201      	str	r2, [sp, #4]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f002 fe58 	bl	800cf90 <USBH_OpenPipe>
 800a2e0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	791b      	ldrb	r3, [r3, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f003 f9c8 	bl	800d680 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	795b      	ldrb	r3, [r3, #5]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f003 f9c1 	bl	800d680 <USBH_LL_SetToggle>

  return USBH_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a302:	2303      	movs	r3, #3
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd90      	pop	{r4, r7, pc}

0800a30c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	795b      	ldrb	r3, [r3, #5]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00e      	beq.n	800a344 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	795b      	ldrb	r3, [r3, #5]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f002 fe4e 	bl	800cfce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	795b      	ldrb	r3, [r3, #5]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f002 fe79 	bl	800d030 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	791b      	ldrb	r3, [r3, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00e      	beq.n	800a36a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	791b      	ldrb	r3, [r3, #4]
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f002 fe3b 	bl	800cfce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	791b      	ldrb	r3, [r3, #4]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f002 fe66 	bl	800d030 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	4618      	mov	r0, r3
 800a380:	f003 fa68 	bl	800d854 <free>
    phost->pActiveClass->pData = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a38a:	2200      	movs	r2, #0
 800a38c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	7b9b      	ldrb	r3, [r3, #14]
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d041      	beq.n	800a43a <USBH_MSC_ClassRequest+0xa2>
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	dc4b      	bgt.n	800a452 <USBH_MSC_ClassRequest+0xba>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <USBH_MSC_ClassRequest+0x2a>
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d147      	bne.n	800a452 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fcf1 	bl	800adae <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d104      	bne.n	800a3e0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d137      	bne.n	800a456 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d804      	bhi.n	800a3f8 <USBH_MSC_ClassRequest+0x60>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	e000      	b.n	800a3fa <USBH_MSC_ClassRequest+0x62>
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a3fe:	2300      	movs	r3, #0
 800a400:	73bb      	strb	r3, [r7, #14]
 800a402:	e014      	b.n	800a42e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a404:	7bbb      	ldrb	r3, [r7, #14]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	2134      	movs	r1, #52	; 0x34
 800a40a:	fb01 f303 	mul.w	r3, r1, r3
 800a40e:	4413      	add	r3, r2
 800a410:	3392      	adds	r3, #146	; 0x92
 800a412:	2202      	movs	r2, #2
 800a414:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	2134      	movs	r1, #52	; 0x34
 800a41c:	fb01 f303 	mul.w	r3, r1, r3
 800a420:	4413      	add	r3, r2
 800a422:	33c1      	adds	r3, #193	; 0xc1
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	3301      	adds	r3, #1
 800a42c:	73bb      	strb	r3, [r7, #14]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	7bba      	ldrb	r2, [r7, #14]
 800a434:	429a      	cmp	r2, r3
 800a436:	d3e5      	bcc.n	800a404 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a438:	e00d      	b.n	800a456 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a43a:	2100      	movs	r1, #0
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f002 f888 	bl	800c552 <USBH_ClrFeature>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	7bda      	ldrb	r2, [r3, #15]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a450:	e003      	b.n	800a45a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a452:	bf00      	nop
 800a454:	e002      	b.n	800a45c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a456:	bf00      	nop
 800a458:	e000      	b.n	800a45c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a45a:	bf00      	nop
  }

  return status;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a47a:	2301      	movs	r3, #1
 800a47c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a482:	2301      	movs	r3, #1
 800a484:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	7b1b      	ldrb	r3, [r3, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <USBH_MSC_Process+0x2e>
 800a48e:	2b01      	cmp	r3, #1
 800a490:	f000 8271 	beq.w	800a976 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a494:	e272      	b.n	800a97c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f080 824f 	bcs.w	800a946 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	2334      	movs	r3, #52	; 0x34
 800a4b4:	fb01 f303 	mul.w	r3, r1, r3
 800a4b8:	4413      	add	r3, r2
 800a4ba:	3391      	adds	r3, #145	; 0x91
 800a4bc:	2201      	movs	r2, #1
 800a4be:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	2334      	movs	r3, #52	; 0x34
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	4413      	add	r3, r2
 800a4d2:	3390      	adds	r3, #144	; 0x90
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b08      	cmp	r3, #8
 800a4d8:	f200 8243 	bhi.w	800a962 <USBH_MSC_Process+0x4fa>
 800a4dc:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <USBH_MSC_Process+0x7c>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a963 	.word	0x0800a963
 800a4ec:	0800a5d1 	.word	0x0800a5d1
 800a4f0:	0800a755 	.word	0x0800a755
 800a4f4:	0800a52f 	.word	0x0800a52f
 800a4f8:	0800a821 	.word	0x0800a821
 800a4fc:	0800a963 	.word	0x0800a963
 800a500:	0800a963 	.word	0x0800a963
 800a504:	0800a935 	.word	0x0800a935
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a50e:	4619      	mov	r1, r3
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	2334      	movs	r3, #52	; 0x34
 800a514:	fb01 f303 	mul.w	r3, r1, r3
 800a518:	4413      	add	r3, r2
 800a51a:	3390      	adds	r3, #144	; 0x90
 800a51c:	2204      	movs	r2, #4
 800a51e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a52c:	e222      	b.n	800a974 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a534:	b2d9      	uxtb	r1, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a53c:	461a      	mov	r2, r3
 800a53e:	2334      	movs	r3, #52	; 0x34
 800a540:	fb02 f303 	mul.w	r3, r2, r3
 800a544:	3398      	adds	r3, #152	; 0x98
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4413      	add	r3, r2
 800a54a:	3307      	adds	r3, #7
 800a54c:	461a      	mov	r2, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 ff6a 	bl	800b428 <USBH_MSC_SCSI_Inquiry>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10b      	bne.n	800a576 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a564:	4619      	mov	r1, r3
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	2334      	movs	r3, #52	; 0x34
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	3390      	adds	r3, #144	; 0x90
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d10c      	bne.n	800a596 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a582:	4619      	mov	r1, r3
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	2334      	movs	r3, #52	; 0x34
 800a588:	fb01 f303 	mul.w	r3, r1, r3
 800a58c:	4413      	add	r3, r2
 800a58e:	3390      	adds	r3, #144	; 0x90
 800a590:	2205      	movs	r2, #5
 800a592:	701a      	strb	r2, [r3, #0]
            break;
 800a594:	e1e7      	b.n	800a966 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	2b04      	cmp	r3, #4
 800a59a:	f040 81e4 	bne.w	800a966 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	2334      	movs	r3, #52	; 0x34
 800a5aa:	fb01 f303 	mul.w	r3, r1, r3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3390      	adds	r3, #144	; 0x90
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5bc:	4619      	mov	r1, r3
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	2334      	movs	r3, #52	; 0x34
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3391      	adds	r3, #145	; 0x91
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	701a      	strb	r2, [r3, #0]
            break;
 800a5ce:	e1ca      	b.n	800a966 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fe66 	bl	800b2ac <USBH_MSC_SCSI_TestUnitReady>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d149      	bne.n	800a67e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	2334      	movs	r3, #52	; 0x34
 800a5f6:	fb01 f303 	mul.w	r3, r1, r3
 800a5fa:	4413      	add	r3, r2
 800a5fc:	3392      	adds	r3, #146	; 0x92
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00c      	beq.n	800a61e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a60a:	4619      	mov	r1, r3
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	2334      	movs	r3, #52	; 0x34
 800a610:	fb01 f303 	mul.w	r3, r1, r3
 800a614:	4413      	add	r3, r2
 800a616:	33c1      	adds	r3, #193	; 0xc1
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
 800a61c:	e00b      	b.n	800a636 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a624:	4619      	mov	r1, r3
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	2334      	movs	r3, #52	; 0x34
 800a62a:	fb01 f303 	mul.w	r3, r1, r3
 800a62e:	4413      	add	r3, r2
 800a630:	33c1      	adds	r3, #193	; 0xc1
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a63c:	4619      	mov	r1, r3
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	2334      	movs	r3, #52	; 0x34
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	4413      	add	r3, r2
 800a648:	3390      	adds	r3, #144	; 0x90
 800a64a:	2203      	movs	r2, #3
 800a64c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a654:	4619      	mov	r1, r3
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	2334      	movs	r3, #52	; 0x34
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	4413      	add	r3, r2
 800a660:	3391      	adds	r3, #145	; 0x91
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a66c:	4619      	mov	r1, r3
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	2334      	movs	r3, #52	; 0x34
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	4413      	add	r3, r2
 800a678:	3392      	adds	r3, #146	; 0x92
 800a67a:	2200      	movs	r2, #0
 800a67c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b02      	cmp	r3, #2
 800a682:	d14a      	bne.n	800a71a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a68a:	4619      	mov	r1, r3
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	2334      	movs	r3, #52	; 0x34
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	4413      	add	r3, r2
 800a696:	3392      	adds	r3, #146	; 0x92
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d00c      	beq.n	800a6b8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	2334      	movs	r3, #52	; 0x34
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	33c1      	adds	r3, #193	; 0xc1
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	e00b      	b.n	800a6d0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6be:	4619      	mov	r1, r3
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	2334      	movs	r3, #52	; 0x34
 800a6c4:	fb01 f303 	mul.w	r3, r1, r3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	33c1      	adds	r3, #193	; 0xc1
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	2334      	movs	r3, #52	; 0x34
 800a6dc:	fb01 f303 	mul.w	r3, r1, r3
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3390      	adds	r3, #144	; 0x90
 800a6e4:	2205      	movs	r2, #5
 800a6e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	2334      	movs	r3, #52	; 0x34
 800a6f4:	fb01 f303 	mul.w	r3, r1, r3
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3391      	adds	r3, #145	; 0x91
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a706:	4619      	mov	r1, r3
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	2334      	movs	r3, #52	; 0x34
 800a70c:	fb01 f303 	mul.w	r3, r1, r3
 800a710:	4413      	add	r3, r2
 800a712:	3392      	adds	r3, #146	; 0x92
 800a714:	2202      	movs	r2, #2
 800a716:	701a      	strb	r2, [r3, #0]
            break;
 800a718:	e127      	b.n	800a96a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	f040 8124 	bne.w	800a96a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a728:	4619      	mov	r1, r3
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	2334      	movs	r3, #52	; 0x34
 800a72e:	fb01 f303 	mul.w	r3, r1, r3
 800a732:	4413      	add	r3, r2
 800a734:	3390      	adds	r3, #144	; 0x90
 800a736:	2201      	movs	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a740:	4619      	mov	r1, r3
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	2334      	movs	r3, #52	; 0x34
 800a746:	fb01 f303 	mul.w	r3, r1, r3
 800a74a:	4413      	add	r3, r2
 800a74c:	3391      	adds	r3, #145	; 0x91
 800a74e:	2202      	movs	r2, #2
 800a750:	701a      	strb	r2, [r3, #0]
            break;
 800a752:	e10a      	b.n	800a96a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a75a:	b2d9      	uxtb	r1, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a762:	461a      	mov	r2, r3
 800a764:	2334      	movs	r3, #52	; 0x34
 800a766:	fb02 f303 	mul.w	r3, r2, r3
 800a76a:	3390      	adds	r3, #144	; 0x90
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4413      	add	r3, r2
 800a770:	3304      	adds	r3, #4
 800a772:	461a      	mov	r2, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fddc 	bl	800b332 <USBH_MSC_SCSI_ReadCapacity>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d120      	bne.n	800a7c6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a78a:	4619      	mov	r1, r3
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	2334      	movs	r3, #52	; 0x34
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	4413      	add	r3, r2
 800a796:	3390      	adds	r3, #144	; 0x90
 800a798:	2201      	movs	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	2334      	movs	r3, #52	; 0x34
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3391      	adds	r3, #145	; 0x91
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a7c4:	e0d3      	b.n	800a96e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d10c      	bne.n	800a7e6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	2334      	movs	r3, #52	; 0x34
 800a7d8:	fb01 f303 	mul.w	r3, r1, r3
 800a7dc:	4413      	add	r3, r2
 800a7de:	3390      	adds	r3, #144	; 0x90
 800a7e0:	2205      	movs	r2, #5
 800a7e2:	701a      	strb	r2, [r3, #0]
            break;
 800a7e4:	e0c3      	b.n	800a96e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	f040 80c0 	bne.w	800a96e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	2334      	movs	r3, #52	; 0x34
 800a7fa:	fb01 f303 	mul.w	r3, r1, r3
 800a7fe:	4413      	add	r3, r2
 800a800:	3390      	adds	r3, #144	; 0x90
 800a802:	2201      	movs	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a80c:	4619      	mov	r1, r3
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	2334      	movs	r3, #52	; 0x34
 800a812:	fb01 f303 	mul.w	r3, r1, r3
 800a816:	4413      	add	r3, r2
 800a818:	3391      	adds	r3, #145	; 0x91
 800a81a:	2202      	movs	r2, #2
 800a81c:	701a      	strb	r2, [r3, #0]
            break;
 800a81e:	e0a6      	b.n	800a96e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a826:	b2d9      	uxtb	r1, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a82e:	461a      	mov	r2, r3
 800a830:	2334      	movs	r3, #52	; 0x34
 800a832:	fb02 f303 	mul.w	r3, r2, r3
 800a836:	3398      	adds	r3, #152	; 0x98
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	4413      	add	r3, r2
 800a83c:	3304      	adds	r3, #4
 800a83e:	461a      	mov	r2, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fe96 	bl	800b572 <USBH_MSC_SCSI_RequestSense>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d145      	bne.n	800a8dc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a856:	4619      	mov	r1, r3
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	2334      	movs	r3, #52	; 0x34
 800a85c:	fb01 f303 	mul.w	r3, r1, r3
 800a860:	4413      	add	r3, r2
 800a862:	339c      	adds	r3, #156	; 0x9c
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b06      	cmp	r3, #6
 800a868:	d00c      	beq.n	800a884 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a870:	4619      	mov	r1, r3
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	2334      	movs	r3, #52	; 0x34
 800a876:	fb01 f303 	mul.w	r3, r1, r3
 800a87a:	4413      	add	r3, r2
 800a87c:	339c      	adds	r3, #156	; 0x9c
 800a87e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a880:	2b02      	cmp	r3, #2
 800a882:	d117      	bne.n	800a8b4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	f242 720f 	movw	r2, #9999	; 0x270f
 800a896:	4293      	cmp	r3, r2
 800a898:	d80c      	bhi.n	800a8b4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	2334      	movs	r3, #52	; 0x34
 800a8a6:	fb01 f303 	mul.w	r3, r1, r3
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3390      	adds	r3, #144	; 0x90
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	701a      	strb	r2, [r3, #0]
                  break;
 800a8b2:	e05f      	b.n	800a974 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	2334      	movs	r3, #52	; 0x34
 800a8c0:	fb01 f303 	mul.w	r3, r1, r3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	3390      	adds	r3, #144	; 0x90
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d10c      	bne.n	800a8fc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	2334      	movs	r3, #52	; 0x34
 800a8ee:	fb01 f303 	mul.w	r3, r1, r3
 800a8f2:	4413      	add	r3, r2
 800a8f4:	3390      	adds	r3, #144	; 0x90
 800a8f6:	2208      	movs	r2, #8
 800a8f8:	701a      	strb	r2, [r3, #0]
            break;
 800a8fa:	e03a      	b.n	800a972 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d137      	bne.n	800a972 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a908:	4619      	mov	r1, r3
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	2334      	movs	r3, #52	; 0x34
 800a90e:	fb01 f303 	mul.w	r3, r1, r3
 800a912:	4413      	add	r3, r2
 800a914:	3390      	adds	r3, #144	; 0x90
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a920:	4619      	mov	r1, r3
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	2334      	movs	r3, #52	; 0x34
 800a926:	fb01 f303 	mul.w	r3, r1, r3
 800a92a:	4413      	add	r3, r2
 800a92c:	3391      	adds	r3, #145	; 0x91
 800a92e:	2202      	movs	r2, #2
 800a930:	701a      	strb	r2, [r3, #0]
            break;
 800a932:	e01e      	b.n	800a972 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a93a:	3301      	adds	r3, #1
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a944:	e016      	b.n	800a974 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2201      	movs	r2, #1
 800a952:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a95a:	2102      	movs	r1, #2
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
      break;
 800a960:	e00c      	b.n	800a97c <USBH_MSC_Process+0x514>
            break;
 800a962:	bf00      	nop
 800a964:	e00a      	b.n	800a97c <USBH_MSC_Process+0x514>
            break;
 800a966:	bf00      	nop
 800a968:	e008      	b.n	800a97c <USBH_MSC_Process+0x514>
            break;
 800a96a:	bf00      	nop
 800a96c:	e006      	b.n	800a97c <USBH_MSC_Process+0x514>
            break;
 800a96e:	bf00      	nop
 800a970:	e004      	b.n	800a97c <USBH_MSC_Process+0x514>
            break;
 800a972:	bf00      	nop
      break;
 800a974:	e002      	b.n	800a97c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]
      break;
 800a97a:	bf00      	nop
  }
  return error;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop

0800a988 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b088      	sub	sp, #32
 800a9a2:	af02      	add	r7, sp, #8
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	2134      	movs	r1, #52	; 0x34
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3390      	adds	r3, #144	; 0x90
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b07      	cmp	r3, #7
 800a9ce:	d03c      	beq.n	800aa4a <USBH_MSC_RdWrProcess+0xac>
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	f300 80a7 	bgt.w	800ab24 <USBH_MSC_RdWrProcess+0x186>
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d06c      	beq.n	800aab4 <USBH_MSC_RdWrProcess+0x116>
 800a9da:	2b06      	cmp	r3, #6
 800a9dc:	f040 80a2 	bne.w	800ab24 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a9e0:	78f9      	ldrb	r1, [r7, #3]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fea5 	bl	800b73a <USBH_MSC_SCSI_Read>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	2134      	movs	r1, #52	; 0x34
 800aa00:	fb01 f303 	mul.w	r3, r1, r3
 800aa04:	4413      	add	r3, r2
 800aa06:	3390      	adds	r3, #144	; 0x90
 800aa08:	2201      	movs	r2, #1
 800aa0a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa10:	e08a      	b.n	800ab28 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d109      	bne.n	800aa2c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	2134      	movs	r1, #52	; 0x34
 800aa1e:	fb01 f303 	mul.w	r3, r1, r3
 800aa22:	4413      	add	r3, r2
 800aa24:	3390      	adds	r3, #144	; 0x90
 800aa26:	2205      	movs	r2, #5
 800aa28:	701a      	strb	r2, [r3, #0]
      break;
 800aa2a:	e07d      	b.n	800ab28 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	d17a      	bne.n	800ab28 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	2134      	movs	r1, #52	; 0x34
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	3390      	adds	r3, #144	; 0x90
 800aa40:	2208      	movs	r2, #8
 800aa42:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aa44:	2302      	movs	r3, #2
 800aa46:	75fb      	strb	r3, [r7, #23]
      break;
 800aa48:	e06e      	b.n	800ab28 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800aa4a:	78f9      	ldrb	r1, [r7, #3]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	2200      	movs	r2, #0
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fe05 	bl	800b664 <USBH_MSC_SCSI_Write>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10b      	bne.n	800aa7c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	2134      	movs	r1, #52	; 0x34
 800aa6a:	fb01 f303 	mul.w	r3, r1, r3
 800aa6e:	4413      	add	r3, r2
 800aa70:	3390      	adds	r3, #144	; 0x90
 800aa72:	2201      	movs	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa7a:	e057      	b.n	800ab2c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d109      	bne.n	800aa96 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	2134      	movs	r1, #52	; 0x34
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3390      	adds	r3, #144	; 0x90
 800aa90:	2205      	movs	r2, #5
 800aa92:	701a      	strb	r2, [r3, #0]
      break;
 800aa94:	e04a      	b.n	800ab2c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d147      	bne.n	800ab2c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa9c:	78fb      	ldrb	r3, [r7, #3]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	2134      	movs	r1, #52	; 0x34
 800aaa2:	fb01 f303 	mul.w	r3, r1, r3
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3390      	adds	r3, #144	; 0x90
 800aaaa:	2208      	movs	r2, #8
 800aaac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aaae:	2302      	movs	r3, #2
 800aab0:	75fb      	strb	r3, [r7, #23]
      break;
 800aab2:	e03b      	b.n	800ab2c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800aab4:	78fb      	ldrb	r3, [r7, #3]
 800aab6:	2234      	movs	r2, #52	; 0x34
 800aab8:	fb02 f303 	mul.w	r3, r2, r3
 800aabc:	3398      	adds	r3, #152	; 0x98
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4413      	add	r3, r2
 800aac2:	1d1a      	adds	r2, r3, #4
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fd52 	bl	800b572 <USBH_MSC_SCSI_RequestSense>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d113      	bne.n	800ab00 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	2134      	movs	r1, #52	; 0x34
 800aade:	fb01 f303 	mul.w	r3, r1, r3
 800aae2:	4413      	add	r3, r2
 800aae4:	3390      	adds	r3, #144	; 0x90
 800aae6:	2201      	movs	r2, #1
 800aae8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	2134      	movs	r1, #52	; 0x34
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	3391      	adds	r3, #145	; 0x91
 800aaf8:	2202      	movs	r2, #2
 800aafa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800aafc:	2302      	movs	r3, #2
 800aafe:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d014      	beq.n	800ab30 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d111      	bne.n	800ab30 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ab0c:	78fb      	ldrb	r3, [r7, #3]
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	2134      	movs	r1, #52	; 0x34
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	3390      	adds	r3, #144	; 0x90
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ab1e:	2302      	movs	r3, #2
 800ab20:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab22:	e005      	b.n	800ab30 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800ab24:	bf00      	nop
 800ab26:	e004      	b.n	800ab32 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e002      	b.n	800ab32 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e000      	b.n	800ab32 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ab30:	bf00      	nop

  }
  return error;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b0b      	cmp	r3, #11
 800ab5a:	d10c      	bne.n	800ab76 <USBH_MSC_UnitIsReady+0x3a>
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	2134      	movs	r1, #52	; 0x34
 800ab62:	fb01 f303 	mul.w	r3, r1, r3
 800ab66:	4413      	add	r3, r2
 800ab68:	3391      	adds	r3, #145	; 0x91
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ab70:	2301      	movs	r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e001      	b.n	800ab7a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	460b      	mov	r3, r1
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b0b      	cmp	r3, #11
 800aba8:	d10d      	bne.n	800abc6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800abaa:	7afb      	ldrb	r3, [r7, #11]
 800abac:	2234      	movs	r2, #52	; 0x34
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	3390      	adds	r3, #144	; 0x90
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4413      	add	r3, r2
 800abb8:	2234      	movs	r2, #52	; 0x34
 800abba:	4619      	mov	r1, r3
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 fe51 	bl	800d864 <memcpy>
    return USBH_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	e000      	b.n	800abc8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800abc6:	2302      	movs	r3, #2
  }
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	607a      	str	r2, [r7, #4]
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	460b      	mov	r3, r1
 800abde:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00e      	beq.n	800ac14 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800abfc:	2b0b      	cmp	r3, #11
 800abfe:	d109      	bne.n	800ac14 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	2134      	movs	r1, #52	; 0x34
 800ac06:	fb01 f303 	mul.w	r3, r1, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3390      	adds	r3, #144	; 0x90
 800ac0e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d001      	beq.n	800ac18 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ac14:	2302      	movs	r3, #2
 800ac16:	e040      	b.n	800ac9a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2206      	movs	r2, #6
 800ac1c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ac1e:	7afb      	ldrb	r3, [r7, #11]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	2134      	movs	r1, #52	; 0x34
 800ac24:	fb01 f303 	mul.w	r3, r1, r3
 800ac28:	4413      	add	r3, r2
 800ac2a:	3390      	adds	r3, #144	; 0x90
 800ac2c:	2206      	movs	r2, #6
 800ac2e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ac3a:	7af9      	ldrb	r1, [r7, #11]
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 fd78 	bl	800b73a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac50:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac52:	e016      	b.n	800ac82 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1ad2      	subs	r2, r2, r3
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	f242 7110 	movw	r1, #10000	; 0x2710
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d805      	bhi.n	800ac78 <USBH_MSC_Read+0xa8>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e00b      	b.n	800ac9a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac82:	7afb      	ldrb	r3, [r7, #11]
 800ac84:	4619      	mov	r1, r3
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff fe89 	bl	800a99e <USBH_MSC_RdWrProcess>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d0e0      	beq.n	800ac54 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2201      	movs	r2, #1
 800ac96:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b088      	sub	sp, #32
 800aca6:	af02      	add	r7, sp, #8
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
 800acae:	460b      	mov	r3, r1
 800acb0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800acce:	2b0b      	cmp	r3, #11
 800acd0:	d109      	bne.n	800ace6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	2134      	movs	r1, #52	; 0x34
 800acd8:	fb01 f303 	mul.w	r3, r1, r3
 800acdc:	4413      	add	r3, r2
 800acde:	3390      	adds	r3, #144	; 0x90
 800ace0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d001      	beq.n	800acea <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800ace6:	2302      	movs	r3, #2
 800ace8:	e040      	b.n	800ad6c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2207      	movs	r2, #7
 800acee:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	2134      	movs	r1, #52	; 0x34
 800acf6:	fb01 f303 	mul.w	r3, r1, r3
 800acfa:	4413      	add	r3, r2
 800acfc:	3390      	adds	r3, #144	; 0x90
 800acfe:	2207      	movs	r2, #7
 800ad00:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ad0c:	7af9      	ldrb	r1, [r7, #11]
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fca4 	bl	800b664 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad22:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ad24:	e016      	b.n	800ad54 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	f242 7110 	movw	r1, #10000	; 0x2710
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d805      	bhi.n	800ad4a <USBH_MSC_Write+0xa8>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d104      	bne.n	800ad54 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ad50:	2302      	movs	r3, #2
 800ad52:	e00b      	b.n	800ad6c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ad54:	7afb      	ldrb	r3, [r7, #11]
 800ad56:	4619      	mov	r1, r3
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7ff fe20 	bl	800a99e <USBH_MSC_RdWrProcess>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d0e0      	beq.n	800ad26 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2201      	movs	r2, #1
 800ad68:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2221      	movs	r2, #33	; 0x21
 800ad80:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f001 fea4 	bl	800caec <USBH_CtlReq>
 800ada4:	4603      	mov	r3, r0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	22a1      	movs	r2, #161	; 0xa1
 800adbc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	22fe      	movs	r2, #254	; 0xfe
 800adc2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800add6:	2201      	movs	r2, #1
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f001 fe86 	bl	800caec <USBH_CtlReq>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4a09      	ldr	r2, [pc, #36]	; (800ae28 <USBH_MSC_BOT_Init+0x3c>)
 800ae02:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <USBH_MSC_BOT_Init+0x40>)
 800ae08:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	43425355 	.word	0x43425355
 800ae2c:	20304050 	.word	0x20304050

0800ae30 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ae40:	2301      	movs	r3, #1
 800ae42:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ae44:	2301      	movs	r3, #1
 800ae46:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae52:	69db      	ldr	r3, [r3, #28]
 800ae54:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae60:	3b01      	subs	r3, #1
 800ae62:	2b0a      	cmp	r3, #10
 800ae64:	f200 819e 	bhi.w	800b1a4 <USBH_MSC_BOT_Process+0x374>
 800ae68:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <USBH_MSC_BOT_Process+0x40>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae9d 	.word	0x0800ae9d
 800ae74:	0800aec5 	.word	0x0800aec5
 800ae78:	0800af2f 	.word	0x0800af2f
 800ae7c:	0800af4d 	.word	0x0800af4d
 800ae80:	0800afd1 	.word	0x0800afd1
 800ae84:	0800aff3 	.word	0x0800aff3
 800ae88:	0800b08b 	.word	0x0800b08b
 800ae8c:	0800b0a7 	.word	0x0800b0a7
 800ae90:	0800b0f9 	.word	0x0800b0f9
 800ae94:	0800b129 	.word	0x0800b129
 800ae98:	0800b18b 	.word	0x0800b18b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	78fa      	ldrb	r2, [r7, #3]
 800aea0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	9200      	str	r2, [sp, #0]
 800aeba:	221f      	movs	r2, #31
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 f824 	bl	800cf0a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800aec2:	e17e      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	795b      	ldrb	r3, [r3, #5]
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f002 fbae 	bl	800d62c <USBH_LL_GetURBState>
 800aed0:	4603      	mov	r3, r0
 800aed2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aed4:	7d3b      	ldrb	r3, [r7, #20]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d118      	bne.n	800af0c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00f      	beq.n	800af02 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800aee8:	b25b      	sxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da04      	bge.n	800aef8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2203      	movs	r2, #3
 800aef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aef6:	e157      	b.n	800b1a8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	2205      	movs	r2, #5
 800aefc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af00:	e152      	b.n	800b1a8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2207      	movs	r2, #7
 800af06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af0a:	e14d      	b.n	800b1a8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af0c:	7d3b      	ldrb	r3, [r7, #20]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d104      	bne.n	800af1c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af1a:	e145      	b.n	800b1a8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800af1c:	7d3b      	ldrb	r3, [r7, #20]
 800af1e:	2b05      	cmp	r3, #5
 800af20:	f040 8142 	bne.w	800b1a8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	220a      	movs	r2, #10
 800af28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af2c:	e13c      	b.n	800b1a8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	895a      	ldrh	r2, [r3, #10]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	791b      	ldrb	r3, [r3, #4]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f002 f809 	bl	800cf54 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2204      	movs	r2, #4
 800af46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800af4a:	e13a      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	791b      	ldrb	r3, [r3, #4]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 fb6a 	bl	800d62c <USBH_LL_GetURBState>
 800af58:	4603      	mov	r3, r0
 800af5a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800af5c:	7d3b      	ldrb	r3, [r7, #20]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d12d      	bne.n	800afbe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	8952      	ldrh	r2, [r2, #10]
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d910      	bls.n	800af90 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	8952      	ldrh	r2, [r2, #10]
 800af78:	441a      	add	r2, r3
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	8952      	ldrh	r2, [r2, #10]
 800af88:	1a9a      	subs	r2, r3, r2
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	65da      	str	r2, [r3, #92]	; 0x5c
 800af8e:	e002      	b.n	800af96 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	2200      	movs	r2, #0
 800af94:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	895a      	ldrh	r2, [r3, #10]
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	791b      	ldrb	r3, [r3, #4]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 ffd1 	bl	800cf54 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800afb2:	e0fb      	b.n	800b1ac <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2207      	movs	r2, #7
 800afb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afbc:	e0f6      	b.n	800b1ac <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800afbe:	7d3b      	ldrb	r3, [r7, #20]
 800afc0:	2b05      	cmp	r3, #5
 800afc2:	f040 80f3 	bne.w	800b1ac <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	2209      	movs	r2, #9
 800afca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afce:	e0ed      	b.n	800b1ac <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	891a      	ldrh	r2, [r3, #8]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	795b      	ldrb	r3, [r3, #5]
 800afde:	2001      	movs	r0, #1
 800afe0:	9000      	str	r0, [sp, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 ff91 	bl	800cf0a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	2206      	movs	r2, #6
 800afec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aff0:	e0e7      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	795b      	ldrb	r3, [r3, #5]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fb17 	bl	800d62c <USBH_LL_GetURBState>
 800affe:	4603      	mov	r3, r0
 800b000:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b002:	7d3b      	ldrb	r3, [r7, #20]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d12f      	bne.n	800b068 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	8912      	ldrh	r2, [r2, #8]
 800b010:	4293      	cmp	r3, r2
 800b012:	d910      	bls.n	800b036 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	8912      	ldrh	r2, [r2, #8]
 800b01e:	441a      	add	r2, r3
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	8912      	ldrh	r2, [r2, #8]
 800b02e:	1a9a      	subs	r2, r3, r2
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	65da      	str	r2, [r3, #92]	; 0x5c
 800b034:	e002      	b.n	800b03c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2200      	movs	r2, #0
 800b03a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	891a      	ldrh	r2, [r3, #8]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	795b      	ldrb	r3, [r3, #5]
 800b052:	2001      	movs	r0, #1
 800b054:	9000      	str	r0, [sp, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 ff57 	bl	800cf0a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b05c:	e0a8      	b.n	800b1b0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2207      	movs	r2, #7
 800b062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b066:	e0a3      	b.n	800b1b0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b068:	7d3b      	ldrb	r3, [r7, #20]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d104      	bne.n	800b078 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2205      	movs	r2, #5
 800b072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b076:	e09b      	b.n	800b1b0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b078:	7d3b      	ldrb	r3, [r7, #20]
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	f040 8098 	bne.w	800b1b0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	220a      	movs	r2, #10
 800b084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b088:	e092      	b.n	800b1b0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	791b      	ldrb	r3, [r3, #4]
 800b094:	220d      	movs	r2, #13
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f001 ff5c 	bl	800cf54 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	2208      	movs	r2, #8
 800b0a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0a4:	e08d      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	791b      	ldrb	r3, [r3, #4]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f002 fabd 	bl	800d62c <USBH_LL_GetURBState>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b0b6:	7d3b      	ldrb	r3, [r7, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d115      	bne.n	800b0e8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f8a9 	bl	800b224 <USBH_MSC_DecodeCSW>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b0d6:	7d7b      	ldrb	r3, [r7, #21]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d102      	bne.n	800b0e2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b0e0:	e068      	b.n	800b1b4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0e6:	e065      	b.n	800b1b4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b0e8:	7d3b      	ldrb	r3, [r7, #20]
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	d162      	bne.n	800b1b4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2209      	movs	r2, #9
 800b0f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0f6:	e05d      	b.n	800b1b4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f864 	bl	800b1cc <USBH_MSC_BOT_Abort>
 800b104:	4603      	mov	r3, r0
 800b106:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b108:	7dbb      	ldrb	r3, [r7, #22]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d104      	bne.n	800b118 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2207      	movs	r2, #7
 800b112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b116:	e04f      	b.n	800b1b8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b118:	7dbb      	ldrb	r3, [r7, #22]
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d14c      	bne.n	800b1b8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	220b      	movs	r2, #11
 800b122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b126:	e047      	b.n	800b1b8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2201      	movs	r2, #1
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f84c 	bl	800b1cc <USBH_MSC_BOT_Abort>
 800b134:	4603      	mov	r3, r0
 800b136:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b138:	7dbb      	ldrb	r3, [r7, #22]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d11d      	bne.n	800b17a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	795b      	ldrb	r3, [r3, #5]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f002 facb 	bl	800d6e0 <USBH_LL_GetToggle>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	7959      	ldrb	r1, [r3, #5]
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	f1c3 0301 	rsb	r3, r3, #1
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	461a      	mov	r2, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f002 fa8f 	bl	800d680 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	791b      	ldrb	r3, [r3, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f002 fa88 	bl	800d680 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2209      	movs	r2, #9
 800b174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b178:	e020      	b.n	800b1bc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b17a:	7dbb      	ldrb	r3, [r7, #22]
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d11d      	bne.n	800b1bc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	220b      	movs	r2, #11
 800b184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b188:	e018      	b.n	800b1bc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff fdf2 	bl	800ad74 <USBH_MSC_BOT_REQ_Reset>
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d112      	bne.n	800b1c0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b1a2:	e00d      	b.n	800b1c0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b1a4:	bf00      	nop
 800b1a6:	e00c      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1a8:	bf00      	nop
 800b1aa:	e00a      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1ac:	bf00      	nop
 800b1ae:	e008      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1b0:	bf00      	nop
 800b1b2:	e006      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1b4:	bf00      	nop
 800b1b6:	e004      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1b8:	bf00      	nop
 800b1ba:	e002      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b1c0:	bf00      	nop
  }
  return status;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b1ea:	78bb      	ldrb	r3, [r7, #2]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <USBH_MSC_BOT_Abort+0x2a>
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d009      	beq.n	800b208 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b1f4:	e011      	b.n	800b21a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	79db      	ldrb	r3, [r3, #7]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f9a8 	bl	800c552 <USBH_ClrFeature>
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
      break;
 800b206:	e008      	b.n	800b21a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	799b      	ldrb	r3, [r3, #6]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 f99f 	bl	800c552 <USBH_ClrFeature>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
      break;
 800b218:	bf00      	nop
  }
  return status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b236:	2301      	movs	r3, #1
 800b238:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	791b      	ldrb	r3, [r3, #4]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f002 f961 	bl	800d508 <USBH_LL_GetLastXferSize>
 800b246:	4603      	mov	r3, r0
 800b248:	2b0d      	cmp	r3, #13
 800b24a:	d002      	beq.n	800b252 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b24c:	2302      	movs	r3, #2
 800b24e:	73fb      	strb	r3, [r7, #15]
 800b250:	e024      	b.n	800b29c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b256:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <USBH_MSC_DecodeCSW+0x84>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d11d      	bne.n	800b298 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b264:	429a      	cmp	r2, r3
 800b266:	d119      	bne.n	800b29c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
 800b276:	e011      	b.n	800b29c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d102      	bne.n	800b288 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b282:	2301      	movs	r3, #1
 800b284:	73fb      	strb	r3, [r7, #15]
 800b286:	e009      	b.n	800b29c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d104      	bne.n	800b29c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b292:	2302      	movs	r3, #2
 800b294:	73fb      	strb	r3, [r7, #15]
 800b296:	e001      	b.n	800b29c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b298:	2302      	movs	r3, #2
 800b29a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	53425355 	.word	0x53425355

0800b2ac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d002      	beq.n	800b2d6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d021      	beq.n	800b318 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b2d4:	e028      	b.n	800b328 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	220a      	movs	r2, #10
 800b2e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	3363      	adds	r3, #99	; 0x63
 800b2f0:	2210      	movs	r2, #16
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f002 fac3 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b312:	2301      	movs	r3, #1
 800b314:	73fb      	strb	r3, [r7, #15]
      break;
 800b316:	e007      	b.n	800b328 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff fd87 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b322:	4603      	mov	r3, r0
 800b324:	73fb      	strb	r3, [r7, #15]
      break;
 800b326:	bf00      	nop
  }

  return error;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b086      	sub	sp, #24
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	460b      	mov	r3, r1
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b340:	2301      	movs	r3, #1
 800b342:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b354:	2b01      	cmp	r3, #1
 800b356:	d002      	beq.n	800b35e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d027      	beq.n	800b3ac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b35c:	e05f      	b.n	800b41e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	2208      	movs	r2, #8
 800b362:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2280      	movs	r2, #128	; 0x80
 800b368:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	220a      	movs	r2, #10
 800b370:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	3363      	adds	r3, #99	; 0x63
 800b378:	2210      	movs	r2, #16
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f002 fa7f 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2225      	movs	r2, #37	; 0x25
 800b386:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2202      	movs	r2, #2
 800b396:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	f103 0210 	add.w	r2, r3, #16
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3aa:	e038      	b.n	800b41e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7ff fd3d 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d12d      	bne.n	800b41c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c6:	3303      	adds	r3, #3
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	021b      	lsls	r3, r3, #8
 800b3d8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b3e6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	061b      	lsls	r3, r3, #24
 800b3f2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3fe:	3307      	adds	r3, #7
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b29a      	uxth	r2, r3
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40a:	3306      	adds	r3, #6
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	b29b      	uxth	r3, r3
 800b414:	4313      	orrs	r3, r2
 800b416:	b29a      	uxth	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	809a      	strh	r2, [r3, #4]
      break;
 800b41c:	bf00      	nop
  }

  return error;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	460b      	mov	r3, r1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b436:	2302      	movs	r3, #2
 800b438:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d002      	beq.n	800b454 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d03d      	beq.n	800b4ce <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b452:	e089      	b.n	800b568 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2224      	movs	r2, #36	; 0x24
 800b458:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2280      	movs	r2, #128	; 0x80
 800b45e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	220a      	movs	r2, #10
 800b466:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	3363      	adds	r3, #99	; 0x63
 800b46e:	220a      	movs	r2, #10
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fa04 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2212      	movs	r2, #18
 800b47c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	015b      	lsls	r3, r3, #5
 800b484:	b2da      	uxtb	r2, r3
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	2224      	movs	r2, #36	; 0x24
 800b4a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f103 0210 	add.w	r2, r3, #16
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b4cc:	e04c      	b.n	800b568 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fcac 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d141      	bne.n	800b566 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b4e2:	2222      	movs	r2, #34	; 0x22
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f002 f9ca 	bl	800d880 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 031f 	and.w	r3, r3, #31
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	095b      	lsrs	r3, r3, #5
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b514:	3301      	adds	r3, #1
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	b25b      	sxtb	r3, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	da03      	bge.n	800b526 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	709a      	strb	r2, [r3, #2]
 800b524:	e002      	b.n	800b52c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	1cd8      	adds	r0, r3, #3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b536:	3308      	adds	r3, #8
 800b538:	2208      	movs	r2, #8
 800b53a:	4619      	mov	r1, r3
 800b53c:	f002 f992 	bl	800d864 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f103 000c 	add.w	r0, r3, #12
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b54c:	3310      	adds	r3, #16
 800b54e:	2210      	movs	r2, #16
 800b550:	4619      	mov	r1, r3
 800b552:	f002 f987 	bl	800d864 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	331d      	adds	r3, #29
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b560:	3220      	adds	r2, #32
 800b562:	6812      	ldr	r2, [r2, #0]
 800b564:	601a      	str	r2, [r3, #0]
      break;
 800b566:	bf00      	nop
  }

  return error;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b086      	sub	sp, #24
 800b576:	af00      	add	r7, sp, #0
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	460b      	mov	r3, r1
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b580:	2302      	movs	r3, #2
 800b582:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b594:	2b01      	cmp	r3, #1
 800b596:	d002      	beq.n	800b59e <USBH_MSC_SCSI_RequestSense+0x2c>
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d03d      	beq.n	800b618 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b59c:	e05d      	b.n	800b65a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	220e      	movs	r2, #14
 800b5a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2280      	movs	r2, #128	; 0x80
 800b5a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	220a      	movs	r2, #10
 800b5b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	3363      	adds	r3, #99	; 0x63
 800b5b8:	2210      	movs	r2, #16
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f002 f95f 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	015b      	lsls	r3, r3, #5
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	220e      	movs	r2, #14
 800b5ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2202      	movs	r2, #2
 800b602:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f103 0210 	add.w	r2, r3, #16
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b612:	2301      	movs	r3, #1
 800b614:	75fb      	strb	r3, [r7, #23]
      break;
 800b616:	e020      	b.n	800b65a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	4619      	mov	r1, r3
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f7ff fc07 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b622:	4603      	mov	r3, r0
 800b624:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d115      	bne.n	800b658 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b632:	3302      	adds	r3, #2
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	f003 030f 	and.w	r3, r3, #15
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b646:	7b1a      	ldrb	r2, [r3, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b652:	7b5a      	ldrb	r2, [r3, #13]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	709a      	strb	r2, [r3, #2]
      break;
 800b658:	bf00      	nop
  }

  return error;
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	607a      	str	r2, [r7, #4]
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	460b      	mov	r3, r1
 800b672:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b674:	2302      	movs	r3, #2
 800b676:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d002      	beq.n	800b692 <USBH_MSC_SCSI_Write+0x2e>
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d047      	beq.n	800b720 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b690:	e04e      	b.n	800b730 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b698:	461a      	mov	r2, r3
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	fb03 f202 	mul.w	r2, r3, r2
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3363      	adds	r3, #99	; 0x63
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 f8df 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	222a      	movs	r2, #42	; 0x2a
 800b6c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b6ca:	79fa      	ldrb	r2, [r7, #7]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b6d2:	79ba      	ldrb	r2, [r7, #6]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b6da:	797a      	ldrb	r2, [r7, #5]
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b6e2:	1d3b      	adds	r3, r7, #4
 800b6e4:	781a      	ldrb	r2, [r3, #0]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b6ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b6f6:	f107 0320 	add.w	r3, r7, #32
 800b6fa:	781a      	ldrb	r2, [r3, #0]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2202      	movs	r2, #2
 800b70e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b71a:	2301      	movs	r3, #1
 800b71c:	75fb      	strb	r3, [r7, #23]
      break;
 800b71e:	e007      	b.n	800b730 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	4619      	mov	r1, r3
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f7ff fb83 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b72a:	4603      	mov	r3, r0
 800b72c:	75fb      	strb	r3, [r7, #23]
      break;
 800b72e:	bf00      	nop
  }

  return error;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b086      	sub	sp, #24
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
 800b746:	460b      	mov	r3, r1
 800b748:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b74a:	2302      	movs	r3, #2
 800b74c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b754:	69db      	ldr	r3, [r3, #28]
 800b756:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d002      	beq.n	800b768 <USBH_MSC_SCSI_Read+0x2e>
 800b762:	2b02      	cmp	r3, #2
 800b764:	d047      	beq.n	800b7f6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b766:	e04e      	b.n	800b806 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b76e:	461a      	mov	r2, r3
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	fb03 f202 	mul.w	r2, r3, r2
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	2280      	movs	r2, #128	; 0x80
 800b77e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	220a      	movs	r2, #10
 800b786:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	3363      	adds	r3, #99	; 0x63
 800b78e:	2210      	movs	r2, #16
 800b790:	2100      	movs	r1, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f002 f874 	bl	800d880 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	2228      	movs	r2, #40	; 0x28
 800b79c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b7a0:	79fa      	ldrb	r2, [r7, #7]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b7a8:	79ba      	ldrb	r2, [r7, #6]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b7b0:	797a      	ldrb	r2, [r7, #5]
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b7b8:	1d3b      	adds	r3, r7, #4
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b7c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b7cc:	f107 0320 	add.w	r3, r7, #32
 800b7d0:	781a      	ldrb	r2, [r3, #0]
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f4:	e007      	b.n	800b806 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b7f6:	7afb      	ldrb	r3, [r7, #11]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7ff fb18 	bl	800ae30 <USBH_MSC_BOT_Process>
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]
      break;
 800b804:	bf00      	nop
  }

  return error;
 800b806:	7dfb      	ldrb	r3, [r7, #23]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b824:	2302      	movs	r3, #2
 800b826:	e029      	b.n	800b87c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	79fa      	ldrb	r2, [r7, #7]
 800b82c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f81f 	bl	800b884 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f001 fd89 	bl	800d38c <USBH_LL_Init>

  return USBH_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e009      	b.n	800b8aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	33e0      	adds	r3, #224	; 0xe0
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b0f      	cmp	r3, #15
 800b8ae:	d9f2      	bls.n	800b896 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e009      	b.n	800b8ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8d0:	d3f1      	bcc.n	800b8b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2240      	movs	r2, #64	; 0x40
 800b8f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d016      	beq.n	800b96e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10e      	bne.n	800b968 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b950:	1c59      	adds	r1, r3, #1
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	33de      	adds	r3, #222	; 0xde
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
 800b966:	e004      	b.n	800b972 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b968:	2302      	movs	r3, #2
 800b96a:	73fb      	strb	r3, [r7, #15]
 800b96c:	e001      	b.n	800b972 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b96e:	2302      	movs	r3, #2
 800b970:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b972:	7bfb      	ldrb	r3, [r7, #15]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b996:	78fa      	ldrb	r2, [r7, #3]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d204      	bcs.n	800b9a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b9a4:	e001      	b.n	800b9aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	70fb      	strb	r3, [r7, #3]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70bb      	strb	r3, [r7, #2]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b9e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b9e2:	e025      	b.n	800ba30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
 800b9e6:	221a      	movs	r2, #26
 800b9e8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	3302      	adds	r3, #2
 800b9f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	795b      	ldrb	r3, [r3, #5]
 800b9fa:	78fa      	ldrb	r2, [r7, #3]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d002      	beq.n	800ba06 <USBH_FindInterface+0x4e>
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	2bff      	cmp	r3, #255	; 0xff
 800ba04:	d111      	bne.n	800ba2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba0a:	78ba      	ldrb	r2, [r7, #2]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d002      	beq.n	800ba16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba10:	78bb      	ldrb	r3, [r7, #2]
 800ba12:	2bff      	cmp	r3, #255	; 0xff
 800ba14:	d109      	bne.n	800ba2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba1a:	787a      	ldrb	r2, [r7, #1]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d002      	beq.n	800ba26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ba20:	787b      	ldrb	r3, [r7, #1]
 800ba22:	2bff      	cmp	r3, #255	; 0xff
 800ba24:	d101      	bne.n	800ba2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	e006      	b.n	800ba38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d9d6      	bls.n	800b9e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ba36:	23ff      	movs	r3, #255	; 0xff
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	371c      	adds	r7, #28
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fce3 	bl	800d418 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ba52:	2101      	movs	r1, #1
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f001 fdfc 	bl	800d652 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af04      	add	r7, sp, #16
 800ba6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d102      	bne.n	800ba86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2203      	movs	r2, #3
 800ba84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b0b      	cmp	r3, #11
 800ba8e:	f200 81be 	bhi.w	800be0e <USBH_Process+0x3aa>
 800ba92:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <USBH_Process+0x34>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800bac9 	.word	0x0800bac9
 800ba9c:	0800bafb 	.word	0x0800bafb
 800baa0:	0800bb63 	.word	0x0800bb63
 800baa4:	0800bda9 	.word	0x0800bda9
 800baa8:	0800be0f 	.word	0x0800be0f
 800baac:	0800bc07 	.word	0x0800bc07
 800bab0:	0800bd4f 	.word	0x0800bd4f
 800bab4:	0800bc3d 	.word	0x0800bc3d
 800bab8:	0800bc5d 	.word	0x0800bc5d
 800babc:	0800bc7d 	.word	0x0800bc7d
 800bac0:	0800bcc1 	.word	0x0800bcc1
 800bac4:	0800bd91 	.word	0x0800bd91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 819e 	beq.w	800be12 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800badc:	20c8      	movs	r0, #200	; 0xc8
 800bade:	f001 fe2f 	bl	800d740 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 fcf5 	bl	800d4d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800baf8:	e18b      	b.n	800be12 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d107      	bne.n	800bb14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb12:	e18d      	b.n	800be30 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb1e:	d914      	bls.n	800bb4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bb26:	3301      	adds	r3, #1
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d903      	bls.n	800bb42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	220d      	movs	r2, #13
 800bb3e:	701a      	strb	r2, [r3, #0]
      break;
 800bb40:	e176      	b.n	800be30 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	701a      	strb	r2, [r3, #0]
      break;
 800bb48:	e172      	b.n	800be30 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb50:	f103 020a 	add.w	r2, r3, #10
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bb5a:	200a      	movs	r0, #10
 800bb5c:	f001 fdf0 	bl	800d740 <USBH_Delay>
      break;
 800bb60:	e166      	b.n	800be30 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb72:	2104      	movs	r1, #4
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bb78:	2064      	movs	r0, #100	; 0x64
 800bb7a:	f001 fde1 	bl	800d740 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f001 fc80 	bl	800d484 <USBH_LL_GetSpeed>
 800bb84:	4603      	mov	r3, r0
 800bb86:	461a      	mov	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2205      	movs	r2, #5
 800bb92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bb94:	2100      	movs	r1, #0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fa29 	bl	800cfee <USBH_AllocPipe>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bba4:	2180      	movs	r1, #128	; 0x80
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fa21 	bl	800cfee <USBH_AllocPipe>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7919      	ldrb	r1, [r3, #4]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bbc8:	b292      	uxth	r2, r2
 800bbca:	9202      	str	r2, [sp, #8]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	9201      	str	r2, [sp, #4]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2280      	movs	r2, #128	; 0x80
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f001 f9da 	bl	800cf90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7959      	ldrb	r1, [r3, #5]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bbf0:	b292      	uxth	r2, r2
 800bbf2:	9202      	str	r2, [sp, #8]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	9201      	str	r2, [sp, #4]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 f9c6 	bl	800cf90 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc04:	e114      	b.n	800be30 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f918 	bl	800be3c <USBH_HandleEnum>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f040 80fe 	bne.w	800be16 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d103      	bne.n	800bc34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2208      	movs	r2, #8
 800bc30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc32:	e0f0      	b.n	800be16 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2207      	movs	r2, #7
 800bc38:	701a      	strb	r2, [r3, #0]
      break;
 800bc3a:	e0ec      	b.n	800be16 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 80e9 	beq.w	800be1a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc4e:	2101      	movs	r1, #1
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2208      	movs	r2, #8
 800bc58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bc5a:	e0de      	b.n	800be1a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fc2c 	bl	800c4c4 <USBH_SetCfg>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f040 80d5 	bne.w	800be1e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2209      	movs	r2, #9
 800bc78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc7a:	e0d0      	b.n	800be1e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bc82:	f003 0320 	and.w	r3, r3, #32
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d016      	beq.n	800bcb8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fc3c 	bl	800c50a <USBH_SetFeature>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d103      	bne.n	800bca6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	220a      	movs	r2, #10
 800bca2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bca4:	e0bd      	b.n	800be22 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	f040 80b9 	bne.w	800be22 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	220a      	movs	r2, #10
 800bcb4:	701a      	strb	r2, [r3, #0]
      break;
 800bcb6:	e0b4      	b.n	800be22 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	220a      	movs	r2, #10
 800bcbc:	701a      	strb	r2, [r3, #0]
      break;
 800bcbe:	e0b0      	b.n	800be22 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 80ad 	beq.w	800be26 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
 800bcd8:	e016      	b.n	800bd08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bcda:	7bfa      	ldrb	r2, [r7, #15]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	32de      	adds	r2, #222	; 0xde
 800bce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce4:	791a      	ldrb	r2, [r3, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d108      	bne.n	800bd02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bcf0:	7bfa      	ldrb	r2, [r7, #15]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	32de      	adds	r2, #222	; 0xde
 800bcf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bd00:	e005      	b.n	800bd0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	3301      	adds	r3, #1
 800bd06:	73fb      	strb	r3, [r7, #15]
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0e5      	beq.n	800bcda <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d016      	beq.n	800bd46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d109      	bne.n	800bd3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2206      	movs	r2, #6
 800bd2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd36:	2103      	movs	r1, #3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd3c:	e073      	b.n	800be26 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	220d      	movs	r2, #13
 800bd42:	701a      	strb	r2, [r3, #0]
      break;
 800bd44:	e06f      	b.n	800be26 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	220d      	movs	r2, #13
 800bd4a:	701a      	strb	r2, [r3, #0]
      break;
 800bd4c:	e06b      	b.n	800be26 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d017      	beq.n	800bd88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	4798      	blx	r3
 800bd64:	4603      	mov	r3, r0
 800bd66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	220b      	movs	r2, #11
 800bd74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd76:	e058      	b.n	800be2a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d154      	bne.n	800be2a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	220d      	movs	r2, #13
 800bd84:	701a      	strb	r2, [r3, #0]
      break;
 800bd86:	e050      	b.n	800be2a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	220d      	movs	r2, #13
 800bd8c:	701a      	strb	r2, [r3, #0]
      break;
 800bd8e:	e04c      	b.n	800be2a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d049      	beq.n	800be2e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	4798      	blx	r3
      }
      break;
 800bda6:	e042      	b.n	800be2e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff fd67 	bl	800b884 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d009      	beq.n	800bdd4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d005      	beq.n	800bdea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bde4:	2105      	movs	r1, #5
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d107      	bne.n	800be06 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff fe20 	bl	800ba44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be04:	e014      	b.n	800be30 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 fb06 	bl	800d418 <USBH_LL_Start>
      break;
 800be0c:	e010      	b.n	800be30 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800be0e:	bf00      	nop
 800be10:	e00e      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be12:	bf00      	nop
 800be14:	e00c      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be16:	bf00      	nop
 800be18:	e00a      	b.n	800be30 <USBH_Process+0x3cc>
    break;
 800be1a:	bf00      	nop
 800be1c:	e008      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be1e:	bf00      	nop
 800be20:	e006      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be22:	bf00      	nop
 800be24:	e004      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be26:	bf00      	nop
 800be28:	e002      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be2a:	bf00      	nop
 800be2c:	e000      	b.n	800be30 <USBH_Process+0x3cc>
      break;
 800be2e:	bf00      	nop
  }
  return USBH_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop

0800be3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af04      	add	r7, sp, #16
 800be42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800be44:	2301      	movs	r3, #1
 800be46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800be48:	2301      	movs	r3, #1
 800be4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	2b07      	cmp	r3, #7
 800be52:	f200 81c1 	bhi.w	800c1d8 <USBH_HandleEnum+0x39c>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <USBH_HandleEnum+0x20>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be7d 	.word	0x0800be7d
 800be60:	0800bf3b 	.word	0x0800bf3b
 800be64:	0800bfa5 	.word	0x0800bfa5
 800be68:	0800c033 	.word	0x0800c033
 800be6c:	0800c09d 	.word	0x0800c09d
 800be70:	0800c10d 	.word	0x0800c10d
 800be74:	0800c153 	.word	0x0800c153
 800be78:	0800c199 	.word	0x0800c199
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800be7c:	2108      	movs	r1, #8
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa50 	bl	800c324 <USBH_Get_DevDesc>
 800be84:	4603      	mov	r3, r0
 800be86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d130      	bne.n	800bef0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7919      	ldrb	r1, [r3, #4]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800beb2:	b292      	uxth	r2, r2
 800beb4:	9202      	str	r2, [sp, #8]
 800beb6:	2200      	movs	r2, #0
 800beb8:	9201      	str	r2, [sp, #4]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4603      	mov	r3, r0
 800bebe:	2280      	movs	r2, #128	; 0x80
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f001 f865 	bl	800cf90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	7959      	ldrb	r1, [r3, #5]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800beda:	b292      	uxth	r2, r2
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	2200      	movs	r2, #0
 800bee0:	9201      	str	r2, [sp, #4]
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	4603      	mov	r3, r0
 800bee6:	2200      	movs	r2, #0
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f001 f851 	bl	800cf90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800beee:	e175      	b.n	800c1dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	f040 8172 	bne.w	800c1dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800befe:	3301      	adds	r3, #1
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d903      	bls.n	800bf1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	220d      	movs	r2, #13
 800bf16:	701a      	strb	r2, [r3, #0]
      break;
 800bf18:	e160      	b.n	800c1dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	795b      	ldrb	r3, [r3, #5]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 f885 	bl	800d030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	791b      	ldrb	r3, [r3, #4]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 f87f 	bl	800d030 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	701a      	strb	r2, [r3, #0]
      break;
 800bf38:	e150      	b.n	800c1dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bf3a:	2112      	movs	r1, #18
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f9f1 	bl	800c324 <USBH_Get_DevDesc>
 800bf42:	4603      	mov	r3, r0
 800bf44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d103      	bne.n	800bf54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bf52:	e145      	b.n	800c1e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	f040 8142 	bne.w	800c1e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf62:	3301      	adds	r3, #1
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d903      	bls.n	800bf7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	220d      	movs	r2, #13
 800bf7a:	701a      	strb	r2, [r3, #0]
      break;
 800bf7c:	e130      	b.n	800c1e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	795b      	ldrb	r3, [r3, #5]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 f853 	bl	800d030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	791b      	ldrb	r3, [r3, #4]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f84d 	bl	800d030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
      break;
 800bfa2:	e11d      	b.n	800c1e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa68 	bl	800c47c <USBH_SetAddress>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d132      	bne.n	800c01c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bfb6:	2002      	movs	r0, #2
 800bfb8:	f001 fbc2 	bl	800d740 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	7919      	ldrb	r1, [r3, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bfde:	b292      	uxth	r2, r2
 800bfe0:	9202      	str	r2, [sp, #8]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	9201      	str	r2, [sp, #4]
 800bfe6:	9300      	str	r3, [sp, #0]
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2280      	movs	r2, #128	; 0x80
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 ffcf 	bl	800cf90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7959      	ldrb	r1, [r3, #5]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c006:	b292      	uxth	r2, r2
 800c008:	9202      	str	r2, [sp, #8]
 800c00a:	2200      	movs	r2, #0
 800c00c:	9201      	str	r2, [sp, #4]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	4603      	mov	r3, r0
 800c012:	2200      	movs	r2, #0
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 ffbb 	bl	800cf90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c01a:	e0e3      	b.n	800c1e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
 800c01e:	2b03      	cmp	r3, #3
 800c020:	f040 80e0 	bne.w	800c1e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	220d      	movs	r2, #13
 800c028:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	705a      	strb	r2, [r3, #1]
      break;
 800c030:	e0d8      	b.n	800c1e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c032:	2109      	movs	r1, #9
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f99d 	bl	800c374 <USBH_Get_CfgDesc>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2204      	movs	r2, #4
 800c048:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c04a:	e0cd      	b.n	800c1e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	f040 80ca 	bne.w	800c1e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c05a:	3301      	adds	r3, #1
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d903      	bls.n	800c076 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	220d      	movs	r2, #13
 800c072:	701a      	strb	r2, [r3, #0]
      break;
 800c074:	e0b8      	b.n	800c1e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	795b      	ldrb	r3, [r3, #5]
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 ffd7 	bl	800d030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	791b      	ldrb	r3, [r3, #4]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 ffd1 	bl	800d030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	701a      	strb	r2, [r3, #0]
      break;
 800c09a:	e0a5      	b.n	800c1e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f965 	bl	800c374 <USBH_Get_CfgDesc>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2205      	movs	r2, #5
 800c0b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c0ba:	e097      	b.n	800c1ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	f040 8094 	bne.w	800c1ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d903      	bls.n	800c0e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	220d      	movs	r2, #13
 800c0e2:	701a      	strb	r2, [r3, #0]
      break;
 800c0e4:	e082      	b.n	800c1ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	795b      	ldrb	r3, [r3, #5]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 ff9f 	bl	800d030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	791b      	ldrb	r3, [r3, #4]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 ff99 	bl	800d030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
      break;
 800c10a:	e06f      	b.n	800c1ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c112:	2b00      	cmp	r3, #0
 800c114:	d019      	beq.n	800c14a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c122:	23ff      	movs	r3, #255	; 0xff
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f949 	bl	800c3bc <USBH_Get_StringDesc>
 800c12a:	4603      	mov	r3, r0
 800c12c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d103      	bne.n	800c13c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2206      	movs	r2, #6
 800c138:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c13a:	e059      	b.n	800c1f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d156      	bne.n	800c1f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2206      	movs	r2, #6
 800c146:	705a      	strb	r2, [r3, #1]
      break;
 800c148:	e052      	b.n	800c1f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2206      	movs	r2, #6
 800c14e:	705a      	strb	r2, [r3, #1]
      break;
 800c150:	e04e      	b.n	800c1f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d019      	beq.n	800c190 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c168:	23ff      	movs	r3, #255	; 0xff
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f926 	bl	800c3bc <USBH_Get_StringDesc>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2207      	movs	r2, #7
 800c17e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c180:	e038      	b.n	800c1f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	2b03      	cmp	r3, #3
 800c186:	d135      	bne.n	800c1f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2207      	movs	r2, #7
 800c18c:	705a      	strb	r2, [r3, #1]
      break;
 800c18e:	e031      	b.n	800c1f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2207      	movs	r2, #7
 800c194:	705a      	strb	r2, [r3, #1]
      break;
 800c196:	e02d      	b.n	800c1f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d017      	beq.n	800c1d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c1ae:	23ff      	movs	r3, #255	; 0xff
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f903 	bl	800c3bc <USBH_Get_StringDesc>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d102      	bne.n	800c1c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c1c4:	e018      	b.n	800c1f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	d115      	bne.n	800c1f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d0:	e012      	b.n	800c1f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d6:	e00f      	b.n	800c1f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c1d8:	bf00      	nop
 800c1da:	e00e      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1dc:	bf00      	nop
 800c1de:	e00c      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1e0:	bf00      	nop
 800c1e2:	e00a      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1e4:	bf00      	nop
 800c1e6:	e008      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1e8:	bf00      	nop
 800c1ea:	e006      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1ec:	bf00      	nop
 800c1ee:	e004      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1f0:	bf00      	nop
 800c1f2:	e002      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1f4:	bf00      	nop
 800c1f6:	e000      	b.n	800c1fa <USBH_HandleEnum+0x3be>
      break;
 800c1f8:	bf00      	nop
  }
  return Status;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f804 	bl	800c246 <USBH_HandleSof>
}
 800c23e:	bf00      	nop
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b0b      	cmp	r3, #11
 800c256:	d10a      	bne.n	800c26e <USBH_HandleSof+0x28>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d005      	beq.n	800c26e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
  }
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c286:	bf00      	nop
}
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c2a2:	bf00      	nop
}
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 f8a6 	bl	800d44e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	791b      	ldrb	r3, [r3, #4]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fe91 	bl	800d030 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	795b      	ldrb	r3, [r3, #5]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fe8b 	bl	800d030 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	4613      	mov	r3, r2
 800c33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c342:	2100      	movs	r1, #0
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f864 	bl	800c412 <USBH_GetDescriptor>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10a      	bne.n	800c36a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c360:	78fa      	ldrb	r2, [r7, #3]
 800c362:	b292      	uxth	r2, r2
 800c364:	4619      	mov	r1, r3
 800c366:	f000 f918 	bl	800c59a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af02      	add	r7, sp, #8
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	331c      	adds	r3, #28
 800c384:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c386:	887b      	ldrh	r3, [r7, #2]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c390:	2100      	movs	r1, #0
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f83d 	bl	800c412 <USBH_GetDescriptor>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d107      	bne.n	800c3b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c3a2:	887b      	ldrh	r3, [r7, #2]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	68b9      	ldr	r1, [r7, #8]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 f987 	bl	800c6bc <USBH_ParseCfgDesc>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	607a      	str	r2, [r7, #4]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	72fb      	strb	r3, [r7, #11]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c3d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c3e0:	893b      	ldrh	r3, [r7, #8]
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f812 	bl	800c412 <USBH_GetDescriptor>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d107      	bne.n	800c408 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c3fe:	893a      	ldrh	r2, [r7, #8]
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fb24 	bl	800ca50 <USBH_ParseStringDesc>
  }

  return status;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	607b      	str	r3, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	72fb      	strb	r3, [r7, #11]
 800c420:	4613      	mov	r3, r2
 800c422:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	789b      	ldrb	r3, [r3, #2]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d11c      	bne.n	800c466 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c432:	b2da      	uxtb	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2206      	movs	r2, #6
 800c43c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	893a      	ldrh	r2, [r7, #8]
 800c442:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c444:	893b      	ldrh	r3, [r7, #8]
 800c446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c44e:	d104      	bne.n	800c45a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f240 4209 	movw	r2, #1033	; 0x409
 800c456:	829a      	strh	r2, [r3, #20]
 800c458:	e002      	b.n	800c460 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	8b3a      	ldrh	r2, [r7, #24]
 800c464:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c466:	8b3b      	ldrh	r3, [r7, #24]
 800c468:	461a      	mov	r2, r3
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 fb3d 	bl	800caec <USBH_CtlReq>
 800c472:	4603      	mov	r3, r0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	789b      	ldrb	r3, [r3, #2]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d10f      	bne.n	800c4b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2205      	movs	r2, #5
 800c49a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fb19 	bl	800caec <USBH_CtlReq>
 800c4ba:	4603      	mov	r3, r0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	789b      	ldrb	r3, [r3, #2]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d10e      	bne.n	800c4f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2209      	movs	r2, #9
 800c4e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	887a      	ldrh	r2, [r7, #2]
 800c4e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 faf6 	bl	800caec <USBH_CtlReq>
 800c500:	4603      	mov	r3, r0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	460b      	mov	r3, r1
 800c514:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	789b      	ldrb	r3, [r3, #2]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d10f      	bne.n	800c53e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2203      	movs	r2, #3
 800c528:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c53e:	2200      	movs	r2, #0
 800c540:	2100      	movs	r1, #0
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fad2 	bl	800caec <USBH_CtlReq>
 800c548:	4603      	mov	r3, r0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	789b      	ldrb	r3, [r3, #2]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d10f      	bne.n	800c586 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2202      	movs	r2, #2
 800c56a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c586:	2200      	movs	r2, #0
 800c588:	2100      	movs	r1, #0
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 faae 	bl	800caec <USBH_CtlReq>
 800c590:	4603      	mov	r3, r0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b085      	sub	sp, #20
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	781a      	ldrb	r2, [r3, #0]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	785a      	ldrb	r2, [r3, #1]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	3302      	adds	r3, #2
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	3303      	adds	r3, #3
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	791a      	ldrb	r2, [r3, #4]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	795a      	ldrb	r2, [r3, #5]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	799a      	ldrb	r2, [r3, #6]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	79da      	ldrb	r2, [r3, #7]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	79db      	ldrb	r3, [r3, #7]
 800c5f8:	2b20      	cmp	r3, #32
 800c5fa:	dc11      	bgt.n	800c620 <USBH_ParseDevDesc+0x86>
 800c5fc:	2b08      	cmp	r3, #8
 800c5fe:	db16      	blt.n	800c62e <USBH_ParseDevDesc+0x94>
 800c600:	3b08      	subs	r3, #8
 800c602:	2201      	movs	r2, #1
 800c604:	fa02 f303 	lsl.w	r3, r2, r3
 800c608:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c60c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c610:	2b00      	cmp	r3, #0
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <USBH_ParseDevDesc+0x8a>
 800c61e:	e006      	b.n	800c62e <USBH_ParseDevDesc+0x94>
 800c620:	2b40      	cmp	r3, #64	; 0x40
 800c622:	d104      	bne.n	800c62e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	79da      	ldrb	r2, [r3, #7]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	71da      	strb	r2, [r3, #7]
      break;
 800c62c:	e003      	b.n	800c636 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2240      	movs	r2, #64	; 0x40
 800c632:	71da      	strb	r2, [r3, #7]
      break;
 800c634:	bf00      	nop
  }

  if (length > 8U)
 800c636:	88fb      	ldrh	r3, [r7, #6]
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d939      	bls.n	800c6b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	3308      	adds	r3, #8
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	b29a      	uxth	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	3309      	adds	r3, #9
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b29a      	uxth	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	330a      	adds	r3, #10
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	b29a      	uxth	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	330b      	adds	r3, #11
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b29b      	uxth	r3, r3
 800c668:	021b      	lsls	r3, r3, #8
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	330c      	adds	r3, #12
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	330d      	adds	r3, #13
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	021b      	lsls	r3, r3, #8
 800c686:	b29b      	uxth	r3, r3
 800c688:	4313      	orrs	r3, r2
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	7b9a      	ldrb	r2, [r3, #14]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	7bda      	ldrb	r2, [r3, #15]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	7c1a      	ldrb	r2, [r3, #16]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	7c5a      	ldrb	r2, [r3, #17]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	745a      	strb	r2, [r3, #17]
  }
}
 800c6b0:	bf00      	nop
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08c      	sub	sp, #48	; 0x30
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	785a      	ldrb	r2, [r3, #1]
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3302      	adds	r3, #2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	b29a      	uxth	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	3303      	adds	r3, #3
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	021b      	lsls	r3, r3, #8
 800c70e:	b29b      	uxth	r3, r3
 800c710:	4313      	orrs	r3, r2
 800c712:	b29b      	uxth	r3, r3
 800c714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c718:	bf28      	it	cs
 800c71a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c71e:	b29a      	uxth	r2, r3
 800c720:	6a3b      	ldr	r3, [r7, #32]
 800c722:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	791a      	ldrb	r2, [r3, #4]
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	795a      	ldrb	r2, [r3, #5]
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	799a      	ldrb	r2, [r3, #6]
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	79da      	ldrb	r2, [r3, #7]
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	7a1a      	ldrb	r2, [r3, #8]
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b09      	cmp	r3, #9
 800c752:	d002      	beq.n	800c75a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	2209      	movs	r2, #9
 800c758:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c75a:	88fb      	ldrh	r3, [r7, #6]
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	f240 809d 	bls.w	800c89c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c762:	2309      	movs	r3, #9
 800c764:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c76a:	e081      	b.n	800c870 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c76c:	f107 0316 	add.w	r3, r7, #22
 800c770:	4619      	mov	r1, r3
 800c772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c774:	f000 f99f 	bl	800cab6 <USBH_GetNextDesc>
 800c778:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d176      	bne.n	800c870 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b09      	cmp	r3, #9
 800c788:	d002      	beq.n	800c790 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2209      	movs	r2, #9
 800c78e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c794:	221a      	movs	r2, #26
 800c796:	fb02 f303 	mul.w	r3, r2, r3
 800c79a:	3308      	adds	r3, #8
 800c79c:	6a3a      	ldr	r2, [r7, #32]
 800c79e:	4413      	add	r3, r2
 800c7a0:	3302      	adds	r3, #2
 800c7a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7a6:	69f8      	ldr	r0, [r7, #28]
 800c7a8:	f000 f87e 	bl	800c8a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c7b6:	e043      	b.n	800c840 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c7b8:	f107 0316 	add.w	r3, r7, #22
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c0:	f000 f979 	bl	800cab6 <USBH_GetNextDesc>
 800c7c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	785b      	ldrb	r3, [r3, #1]
 800c7ca:	2b05      	cmp	r3, #5
 800c7cc:	d138      	bne.n	800c840 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	795b      	ldrb	r3, [r3, #5]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10f      	bne.n	800c7f6 <USBH_ParseCfgDesc+0x13a>
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	799b      	ldrb	r3, [r3, #6]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d10b      	bne.n	800c7f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	79db      	ldrb	r3, [r3, #7]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10f      	bne.n	800c806 <USBH_ParseCfgDesc+0x14a>
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b09      	cmp	r3, #9
 800c7ec:	d00b      	beq.n	800c806 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	2209      	movs	r2, #9
 800c7f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c7f4:	e007      	b.n	800c806 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b07      	cmp	r3, #7
 800c7fc:	d004      	beq.n	800c808 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	2207      	movs	r2, #7
 800c802:	701a      	strb	r2, [r3, #0]
 800c804:	e000      	b.n	800c808 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c806:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c80c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c810:	3201      	adds	r2, #1
 800c812:	00d2      	lsls	r2, r2, #3
 800c814:	211a      	movs	r1, #26
 800c816:	fb01 f303 	mul.w	r3, r1, r3
 800c81a:	4413      	add	r3, r2
 800c81c:	3308      	adds	r3, #8
 800c81e:	6a3a      	ldr	r2, [r7, #32]
 800c820:	4413      	add	r3, r2
 800c822:	3304      	adds	r3, #4
 800c824:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c828:	69b9      	ldr	r1, [r7, #24]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f86b 	bl	800c906 <USBH_ParseEPDesc>
 800c830:	4603      	mov	r3, r0
 800c832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c83a:	3301      	adds	r3, #1
 800c83c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	791b      	ldrb	r3, [r3, #4]
 800c844:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c848:	429a      	cmp	r2, r3
 800c84a:	d204      	bcs.n	800c856 <USBH_ParseCfgDesc+0x19a>
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	885a      	ldrh	r2, [r3, #2]
 800c850:	8afb      	ldrh	r3, [r7, #22]
 800c852:	429a      	cmp	r2, r3
 800c854:	d8b0      	bhi.n	800c7b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	791b      	ldrb	r3, [r3, #4]
 800c85a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c85e:	429a      	cmp	r2, r3
 800c860:	d201      	bcs.n	800c866 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c862:	2303      	movs	r3, #3
 800c864:	e01c      	b.n	800c8a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c86a:	3301      	adds	r3, #1
 800c86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c874:	2b01      	cmp	r3, #1
 800c876:	d805      	bhi.n	800c884 <USBH_ParseCfgDesc+0x1c8>
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	885a      	ldrh	r2, [r3, #2]
 800c87c:	8afb      	ldrh	r3, [r7, #22]
 800c87e:	429a      	cmp	r2, r3
 800c880:	f63f af74 	bhi.w	800c76c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	791b      	ldrb	r3, [r3, #4]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	bf28      	it	cs
 800c88c:	2302      	movcs	r3, #2
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c894:	429a      	cmp	r2, r3
 800c896:	d201      	bcs.n	800c89c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c898:	2303      	movs	r3, #3
 800c89a:	e001      	b.n	800c8a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3730      	adds	r7, #48	; 0x30
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	781a      	ldrb	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	785a      	ldrb	r2, [r3, #1]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	789a      	ldrb	r2, [r3, #2]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	78da      	ldrb	r2, [r3, #3]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	791a      	ldrb	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	795a      	ldrb	r2, [r3, #5]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	799a      	ldrb	r2, [r3, #6]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	79da      	ldrb	r2, [r3, #7]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	7a1a      	ldrb	r2, [r3, #8]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	721a      	strb	r2, [r3, #8]
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c906:	b480      	push	{r7}
 800c908:	b087      	sub	sp, #28
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	785a      	ldrb	r2, [r3, #1]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	789a      	ldrb	r2, [r3, #2]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	78da      	ldrb	r2, [r3, #3]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3304      	adds	r3, #4
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	3305      	adds	r3, #5
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	b29b      	uxth	r3, r3
 800c946:	021b      	lsls	r3, r3, #8
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4313      	orrs	r3, r2
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	799a      	ldrb	r2, [r3, #6]
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	889b      	ldrh	r3, [r3, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c962:	2303      	movs	r3, #3
 800c964:	75fb      	strb	r3, [r7, #23]
 800c966:	e033      	b.n	800c9d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	889b      	ldrh	r3, [r3, #4]
 800c96c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c970:	f023 0307 	bic.w	r3, r3, #7
 800c974:	b29a      	uxth	r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	b21a      	sxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3304      	adds	r3, #4
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b299      	uxth	r1, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3305      	adds	r3, #5
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	b29b      	uxth	r3, r3
 800c994:	430b      	orrs	r3, r1
 800c996:	b29b      	uxth	r3, r3
 800c998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d110      	bne.n	800c9c2 <USBH_ParseEPDesc+0xbc>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b299      	uxth	r1, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3305      	adds	r3, #5
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	b21b      	sxth	r3, r3
 800c9ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	e001      	b.n	800c9c6 <USBH_ParseEPDesc+0xc0>
 800c9c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	b21b      	sxth	r3, r3
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d116      	bne.n	800ca08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	78db      	ldrb	r3, [r3, #3]
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d005      	beq.n	800c9f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	78db      	ldrb	r3, [r3, #3]
 800c9ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d127      	bne.n	800ca42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	799b      	ldrb	r3, [r3, #6]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d003      	beq.n	800ca02 <USBH_ParseEPDesc+0xfc>
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	799b      	ldrb	r3, [r3, #6]
 800c9fe:	2b10      	cmp	r3, #16
 800ca00:	d91f      	bls.n	800ca42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca02:	2303      	movs	r3, #3
 800ca04:	75fb      	strb	r3, [r7, #23]
 800ca06:	e01c      	b.n	800ca42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	78db      	ldrb	r3, [r3, #3]
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d10a      	bne.n	800ca2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	799b      	ldrb	r3, [r3, #6]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d003      	beq.n	800ca24 <USBH_ParseEPDesc+0x11e>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	799b      	ldrb	r3, [r3, #6]
 800ca20:	2b10      	cmp	r3, #16
 800ca22:	d90e      	bls.n	800ca42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca24:	2303      	movs	r3, #3
 800ca26:	75fb      	strb	r3, [r7, #23]
 800ca28:	e00b      	b.n	800ca42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	78db      	ldrb	r3, [r3, #3]
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d105      	bne.n	800ca42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	799b      	ldrb	r3, [r3, #6]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	371c      	adds	r7, #28
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b03      	cmp	r3, #3
 800ca66:	d120      	bne.n	800caaa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	1e9a      	subs	r2, r3, #2
 800ca6e:	88fb      	ldrh	r3, [r7, #6]
 800ca70:	4293      	cmp	r3, r2
 800ca72:	bf28      	it	cs
 800ca74:	4613      	movcs	r3, r2
 800ca76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ca7e:	2300      	movs	r3, #0
 800ca80:	82fb      	strh	r3, [r7, #22]
 800ca82:	e00b      	b.n	800ca9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ca84:	8afb      	ldrh	r3, [r7, #22]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	3301      	adds	r3, #1
 800ca94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ca96:	8afb      	ldrh	r3, [r7, #22]
 800ca98:	3302      	adds	r3, #2
 800ca9a:	82fb      	strh	r3, [r7, #22]
 800ca9c:	8afa      	ldrh	r2, [r7, #22]
 800ca9e:	8abb      	ldrh	r3, [r7, #20]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d3ef      	bcc.n	800ca84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	701a      	strb	r2, [r3, #0]
  }
}
 800caaa:	bf00      	nop
 800caac:	371c      	adds	r7, #28
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b085      	sub	sp, #20
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	881a      	ldrh	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	4413      	add	r3, r2
 800cacc:	b29a      	uxth	r2, r3
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cade:	68fb      	ldr	r3, [r7, #12]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	4613      	mov	r3, r2
 800caf8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cafa:	2301      	movs	r3, #1
 800cafc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	789b      	ldrb	r3, [r3, #2]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d002      	beq.n	800cb0c <USBH_CtlReq+0x20>
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d00f      	beq.n	800cb2a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cb0a:	e027      	b.n	800cb5c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	88fa      	ldrh	r2, [r7, #6]
 800cb16:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2202      	movs	r2, #2
 800cb22:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cb24:	2301      	movs	r3, #1
 800cb26:	75fb      	strb	r3, [r7, #23]
      break;
 800cb28:	e018      	b.n	800cb5c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 f81c 	bl	800cb68 <USBH_HandleControl>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <USBH_CtlReq+0x54>
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
 800cb3c:	2b03      	cmp	r3, #3
 800cb3e:	d106      	bne.n	800cb4e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2201      	movs	r2, #1
 800cb44:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	761a      	strb	r2, [r3, #24]
      break;
 800cb4c:	e005      	b.n	800cb5a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d102      	bne.n	800cb5a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2201      	movs	r2, #1
 800cb58:	709a      	strb	r2, [r3, #2]
      break;
 800cb5a:	bf00      	nop
  }
  return status;
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb70:	2301      	movs	r3, #1
 800cb72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	7e1b      	ldrb	r3, [r3, #24]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	2b0a      	cmp	r3, #10
 800cb80:	f200 8156 	bhi.w	800ce30 <USBH_HandleControl+0x2c8>
 800cb84:	a201      	add	r2, pc, #4	; (adr r2, 800cb8c <USBH_HandleControl+0x24>)
 800cb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8a:	bf00      	nop
 800cb8c:	0800cbb9 	.word	0x0800cbb9
 800cb90:	0800cbd3 	.word	0x0800cbd3
 800cb94:	0800cc3d 	.word	0x0800cc3d
 800cb98:	0800cc63 	.word	0x0800cc63
 800cb9c:	0800cc9b 	.word	0x0800cc9b
 800cba0:	0800ccc5 	.word	0x0800ccc5
 800cba4:	0800cd17 	.word	0x0800cd17
 800cba8:	0800cd39 	.word	0x0800cd39
 800cbac:	0800cd75 	.word	0x0800cd75
 800cbb0:	0800cd9b 	.word	0x0800cd9b
 800cbb4:	0800cdd9 	.word	0x0800cdd9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f103 0110 	add.w	r1, r3, #16
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	795b      	ldrb	r3, [r3, #5]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f943 	bl	800ce50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2202      	movs	r2, #2
 800cbce:	761a      	strb	r2, [r3, #24]
      break;
 800cbd0:	e139      	b.n	800ce46 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	795b      	ldrb	r3, [r3, #5]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fd27 	bl	800d62c <USBH_LL_GetURBState>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d11e      	bne.n	800cc26 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7c1b      	ldrb	r3, [r3, #16]
 800cbec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cbf0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8adb      	ldrh	r3, [r3, #22]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00a      	beq.n	800cc10 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cbfa:	7b7b      	ldrb	r3, [r7, #13]
 800cbfc:	2b80      	cmp	r3, #128	; 0x80
 800cbfe:	d103      	bne.n	800cc08 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2203      	movs	r2, #3
 800cc04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc06:	e115      	b.n	800ce34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2205      	movs	r2, #5
 800cc0c:	761a      	strb	r2, [r3, #24]
      break;
 800cc0e:	e111      	b.n	800ce34 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cc10:	7b7b      	ldrb	r3, [r7, #13]
 800cc12:	2b80      	cmp	r3, #128	; 0x80
 800cc14:	d103      	bne.n	800cc1e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2209      	movs	r2, #9
 800cc1a:	761a      	strb	r2, [r3, #24]
      break;
 800cc1c:	e10a      	b.n	800ce34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2207      	movs	r2, #7
 800cc22:	761a      	strb	r2, [r3, #24]
      break;
 800cc24:	e106      	b.n	800ce34 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b04      	cmp	r3, #4
 800cc2a:	d003      	beq.n	800cc34 <USBH_HandleControl+0xcc>
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	f040 8100 	bne.w	800ce34 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	220b      	movs	r2, #11
 800cc38:	761a      	strb	r2, [r3, #24]
      break;
 800cc3a:	e0fb      	b.n	800ce34 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6899      	ldr	r1, [r3, #8]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	899a      	ldrh	r2, [r3, #12]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	791b      	ldrb	r3, [r3, #4]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f93a 	bl	800cece <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2204      	movs	r2, #4
 800cc5e:	761a      	strb	r2, [r3, #24]
      break;
 800cc60:	e0f1      	b.n	800ce46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	791b      	ldrb	r3, [r3, #4]
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fcdf 	bl	800d62c <USBH_LL_GetURBState>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d102      	bne.n	800cc7e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2209      	movs	r2, #9
 800cc7c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cc7e:	7bbb      	ldrb	r3, [r7, #14]
 800cc80:	2b05      	cmp	r3, #5
 800cc82:	d102      	bne.n	800cc8a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cc84:	2303      	movs	r3, #3
 800cc86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc88:	e0d6      	b.n	800ce38 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	f040 80d3 	bne.w	800ce38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	220b      	movs	r2, #11
 800cc96:	761a      	strb	r2, [r3, #24]
      break;
 800cc98:	e0ce      	b.n	800ce38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6899      	ldr	r1, [r3, #8]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	899a      	ldrh	r2, [r3, #12]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	795b      	ldrb	r3, [r3, #5]
 800cca6:	2001      	movs	r0, #1
 800cca8:	9000      	str	r0, [sp, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f8ea 	bl	800ce84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2206      	movs	r2, #6
 800ccc0:	761a      	strb	r2, [r3, #24]
      break;
 800ccc2:	e0c0      	b.n	800ce46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	795b      	ldrb	r3, [r3, #5]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fcae 	bl	800d62c <USBH_LL_GetURBState>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d103      	bne.n	800cce2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2207      	movs	r2, #7
 800ccde:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cce0:	e0ac      	b.n	800ce3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b05      	cmp	r3, #5
 800cce6:	d105      	bne.n	800ccf4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	220c      	movs	r2, #12
 800ccec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf2:	e0a3      	b.n	800ce3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d103      	bne.n	800cd02 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2205      	movs	r2, #5
 800ccfe:	761a      	strb	r2, [r3, #24]
      break;
 800cd00:	e09c      	b.n	800ce3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cd02:	7bbb      	ldrb	r3, [r7, #14]
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	f040 8099 	bne.w	800ce3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	220b      	movs	r2, #11
 800cd0e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cd10:	2302      	movs	r3, #2
 800cd12:	73fb      	strb	r3, [r7, #15]
      break;
 800cd14:	e092      	b.n	800ce3c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	791b      	ldrb	r3, [r3, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f8d5 	bl	800cece <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2208      	movs	r2, #8
 800cd34:	761a      	strb	r2, [r3, #24]

      break;
 800cd36:	e086      	b.n	800ce46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	791b      	ldrb	r3, [r3, #4]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fc74 	bl	800d62c <USBH_LL_GetURBState>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d105      	bne.n	800cd5a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	220d      	movs	r2, #13
 800cd52:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd58:	e072      	b.n	800ce40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d103      	bne.n	800cd68 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	220b      	movs	r2, #11
 800cd64:	761a      	strb	r2, [r3, #24]
      break;
 800cd66:	e06b      	b.n	800ce40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	2b05      	cmp	r3, #5
 800cd6c:	d168      	bne.n	800ce40 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	73fb      	strb	r3, [r7, #15]
      break;
 800cd72:	e065      	b.n	800ce40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	795b      	ldrb	r3, [r3, #5]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	9200      	str	r2, [sp, #0]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2100      	movs	r1, #0
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f87f 	bl	800ce84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	220a      	movs	r2, #10
 800cd96:	761a      	strb	r2, [r3, #24]
      break;
 800cd98:	e055      	b.n	800ce46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	795b      	ldrb	r3, [r3, #5]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fc43 	bl	800d62c <USBH_LL_GetURBState>
 800cda6:	4603      	mov	r3, r0
 800cda8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cdaa:	7bbb      	ldrb	r3, [r7, #14]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d105      	bne.n	800cdbc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	220d      	movs	r2, #13
 800cdb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdba:	e043      	b.n	800ce44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d103      	bne.n	800cdca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2209      	movs	r2, #9
 800cdc6:	761a      	strb	r2, [r3, #24]
      break;
 800cdc8:	e03c      	b.n	800ce44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d139      	bne.n	800ce44 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	220b      	movs	r2, #11
 800cdd4:	761a      	strb	r2, [r3, #24]
      break;
 800cdd6:	e035      	b.n	800ce44 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	7e5b      	ldrb	r3, [r3, #25]
 800cddc:	3301      	adds	r3, #1
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	765a      	strb	r2, [r3, #25]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7e5b      	ldrb	r3, [r3, #25]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d806      	bhi.n	800cdfa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cdf8:	e025      	b.n	800ce46 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce00:	2106      	movs	r1, #6
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	795b      	ldrb	r3, [r3, #5]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f90c 	bl	800d030 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	791b      	ldrb	r3, [r3, #4]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f906 	bl	800d030 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2e:	e00a      	b.n	800ce46 <USBH_HandleControl+0x2de>

    default:
      break;
 800ce30:	bf00      	nop
 800ce32:	e008      	b.n	800ce46 <USBH_HandleControl+0x2de>
      break;
 800ce34:	bf00      	nop
 800ce36:	e006      	b.n	800ce46 <USBH_HandleControl+0x2de>
      break;
 800ce38:	bf00      	nop
 800ce3a:	e004      	b.n	800ce46 <USBH_HandleControl+0x2de>
      break;
 800ce3c:	bf00      	nop
 800ce3e:	e002      	b.n	800ce46 <USBH_HandleControl+0x2de>
      break;
 800ce40:	bf00      	nop
 800ce42:	e000      	b.n	800ce46 <USBH_HandleControl+0x2de>
      break;
 800ce44:	bf00      	nop
  }

  return status;
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af04      	add	r7, sp, #16
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ce5e:	79f9      	ldrb	r1, [r7, #7]
 800ce60:	2300      	movs	r3, #0
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	2308      	movs	r3, #8
 800ce66:	9302      	str	r3, [sp, #8]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	2300      	movs	r3, #0
 800ce72:	2200      	movs	r2, #0
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f000 fba8 	bl	800d5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af04      	add	r7, sp, #16
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	4611      	mov	r1, r2
 800ce90:	461a      	mov	r2, r3
 800ce92:	460b      	mov	r3, r1
 800ce94:	80fb      	strh	r3, [r7, #6]
 800ce96:	4613      	mov	r3, r2
 800ce98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cea4:	2300      	movs	r3, #0
 800cea6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cea8:	7979      	ldrb	r1, [r7, #5]
 800ceaa:	7e3b      	ldrb	r3, [r7, #24]
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	88fb      	ldrh	r3, [r7, #6]
 800ceb0:	9302      	str	r3, [sp, #8]
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	2300      	movs	r3, #0
 800cebc:	2200      	movs	r2, #0
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fb83 	bl	800d5ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b088      	sub	sp, #32
 800ced2:	af04      	add	r7, sp, #16
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	60b9      	str	r1, [r7, #8]
 800ced8:	4611      	mov	r1, r2
 800ceda:	461a      	mov	r2, r3
 800cedc:	460b      	mov	r3, r1
 800cede:	80fb      	strh	r3, [r7, #6]
 800cee0:	4613      	mov	r3, r2
 800cee2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cee4:	7979      	ldrb	r1, [r7, #5]
 800cee6:	2300      	movs	r3, #0
 800cee8:	9303      	str	r3, [sp, #12]
 800ceea:	88fb      	ldrh	r3, [r7, #6]
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	2301      	movs	r3, #1
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	2300      	movs	r3, #0
 800cef8:	2201      	movs	r2, #1
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 fb65 	bl	800d5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cf00:	2300      	movs	r3, #0

}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b088      	sub	sp, #32
 800cf0e:	af04      	add	r7, sp, #16
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	4611      	mov	r1, r2
 800cf16:	461a      	mov	r2, r3
 800cf18:	460b      	mov	r3, r1
 800cf1a:	80fb      	strh	r3, [r7, #6]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf2e:	7979      	ldrb	r1, [r7, #5]
 800cf30:	7e3b      	ldrb	r3, [r7, #24]
 800cf32:	9303      	str	r3, [sp, #12]
 800cf34:	88fb      	ldrh	r3, [r7, #6]
 800cf36:	9302      	str	r3, [sp, #8]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	9301      	str	r3, [sp, #4]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	2302      	movs	r3, #2
 800cf42:	2200      	movs	r2, #0
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f000 fb40 	bl	800d5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af04      	add	r7, sp, #16
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	4611      	mov	r1, r2
 800cf60:	461a      	mov	r2, r3
 800cf62:	460b      	mov	r3, r1
 800cf64:	80fb      	strh	r3, [r7, #6]
 800cf66:	4613      	mov	r3, r2
 800cf68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf6a:	7979      	ldrb	r1, [r7, #5]
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	9303      	str	r3, [sp, #12]
 800cf70:	88fb      	ldrh	r3, [r7, #6]
 800cf72:	9302      	str	r3, [sp, #8]
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	2301      	movs	r3, #1
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	2201      	movs	r2, #1
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 fb22 	bl	800d5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af04      	add	r7, sp, #16
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	4608      	mov	r0, r1
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	70fb      	strb	r3, [r7, #3]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70bb      	strb	r3, [r7, #2]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cfaa:	7878      	ldrb	r0, [r7, #1]
 800cfac:	78ba      	ldrb	r2, [r7, #2]
 800cfae:	78f9      	ldrb	r1, [r7, #3]
 800cfb0:	8b3b      	ldrh	r3, [r7, #24]
 800cfb2:	9302      	str	r3, [sp, #8]
 800cfb4:	7d3b      	ldrb	r3, [r7, #20]
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	7c3b      	ldrb	r3, [r7, #16]
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fab5 	bl	800d52e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fad4 	bl	800d58c <USBH_LL_ClosePipe>

  return USBH_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f836 	bl	800d06c <USBH_GetFreePipe>
 800d000:	4603      	mov	r3, r0
 800d002:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d004:	89fb      	ldrh	r3, [r7, #14]
 800d006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d00a      	beq.n	800d024 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d00e:	78fa      	ldrb	r2, [r7, #3]
 800d010:	89fb      	ldrh	r3, [r7, #14]
 800d012:	f003 030f 	and.w	r3, r3, #15
 800d016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	33e0      	adds	r3, #224	; 0xe0
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	440b      	add	r3, r1
 800d022:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d024:	89fb      	ldrh	r3, [r7, #14]
 800d026:	b2db      	uxtb	r3, r3
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d03c:	78fb      	ldrb	r3, [r7, #3]
 800d03e:	2b0f      	cmp	r3, #15
 800d040:	d80d      	bhi.n	800d05e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d042:	78fb      	ldrb	r3, [r7, #3]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	33e0      	adds	r3, #224	; 0xe0
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	33e0      	adds	r3, #224	; 0xe0
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	440b      	add	r3, r1
 800d05c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]
 800d07c:	e00f      	b.n	800d09e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	33e0      	adds	r3, #224	; 0xe0
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	b29b      	uxth	r3, r3
 800d096:	e007      	b.n	800d0a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	3301      	adds	r3, #1
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b0f      	cmp	r3, #15
 800d0a2:	d9ec      	bls.n	800d07e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b087      	sub	sp, #28
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d0ca:	4b1f      	ldr	r3, [pc, #124]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0cc:	7a5b      	ldrb	r3, [r3, #9]
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d131      	bne.n	800d138 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d0d4:	4b1c      	ldr	r3, [pc, #112]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0d6:	7a5b      	ldrb	r3, [r3, #9]
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	461a      	mov	r2, r3
 800d0dc:	4b1a      	ldr	r3, [pc, #104]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0de:	2100      	movs	r1, #0
 800d0e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d0e2:	4b19      	ldr	r3, [pc, #100]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0e4:	7a5b      	ldrb	r3, [r3, #9]
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	4a17      	ldr	r2, [pc, #92]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4413      	add	r3, r2
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d0f2:	4b15      	ldr	r3, [pc, #84]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0f4:	7a5b      	ldrb	r3, [r3, #9]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4b13      	ldr	r3, [pc, #76]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d0fc:	4413      	add	r3, r2
 800d0fe:	79fa      	ldrb	r2, [r7, #7]
 800d100:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d102:	4b11      	ldr	r3, [pc, #68]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d104:	7a5b      	ldrb	r3, [r3, #9]
 800d106:	b2db      	uxtb	r3, r3
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	b2d1      	uxtb	r1, r2
 800d10c:	4a0e      	ldr	r2, [pc, #56]	; (800d148 <FATFS_LinkDriverEx+0x94>)
 800d10e:	7251      	strb	r1, [r2, #9]
 800d110:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d112:	7dbb      	ldrb	r3, [r7, #22]
 800d114:	3330      	adds	r3, #48	; 0x30
 800d116:	b2da      	uxtb	r2, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	3301      	adds	r3, #1
 800d120:	223a      	movs	r2, #58	; 0x3a
 800d122:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	3302      	adds	r3, #2
 800d128:	222f      	movs	r2, #47	; 0x2f
 800d12a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	3303      	adds	r3, #3
 800d130:	2200      	movs	r2, #0
 800d132:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d138:	7dfb      	ldrb	r3, [r7, #23]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	371c      	adds	r7, #28
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	200033f8 	.word	0x200033f8

0800d14c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d156:	2200      	movs	r2, #0
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff ffaa 	bl	800d0b4 <FATFS_LinkDriverEx>
 800d160:	4603      	mov	r3, r0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d170:	2200      	movs	r2, #0
 800d172:	490e      	ldr	r1, [pc, #56]	; (800d1ac <MX_USB_HOST_Init+0x40>)
 800d174:	480e      	ldr	r0, [pc, #56]	; (800d1b0 <MX_USB_HOST_Init+0x44>)
 800d176:	f7fe fb4b 	bl	800b810 <USBH_Init>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d180:	f7f5 f9a2 	bl	80024c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800d184:	490b      	ldr	r1, [pc, #44]	; (800d1b4 <MX_USB_HOST_Init+0x48>)
 800d186:	480a      	ldr	r0, [pc, #40]	; (800d1b0 <MX_USB_HOST_Init+0x44>)
 800d188:	f7fe fbd0 	bl	800b92c <USBH_RegisterClass>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d192:	f7f5 f999 	bl	80024c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d196:	4806      	ldr	r0, [pc, #24]	; (800d1b0 <MX_USB_HOST_Init+0x44>)
 800d198:	f7fe fc54 	bl	800ba44 <USBH_Start>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d1a2:	f7f5 f991 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d1a6:	bf00      	nop
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	20003404 	.word	0x20003404
 800d1b4:	20000010 	.word	0x20000010

0800d1b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d1bc:	4802      	ldr	r0, [pc, #8]	; (800d1c8 <MX_USB_HOST_Process+0x10>)
 800d1be:	f7fe fc51 	bl	800ba64 <USBH_Process>
}
 800d1c2:	bf00      	nop
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20003404 	.word	0x20003404

0800d1cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	2b04      	cmp	r3, #4
 800d1de:	d819      	bhi.n	800d214 <USBH_UserProcess+0x48>
 800d1e0:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <USBH_UserProcess+0x1c>)
 800d1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e6:	bf00      	nop
 800d1e8:	0800d215 	.word	0x0800d215
 800d1ec:	0800d205 	.word	0x0800d205
 800d1f0:	0800d215 	.word	0x0800d215
 800d1f4:	0800d20d 	.word	0x0800d20d
 800d1f8:	0800d1fd 	.word	0x0800d1fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d1fc:	4b09      	ldr	r3, [pc, #36]	; (800d224 <USBH_UserProcess+0x58>)
 800d1fe:	2203      	movs	r2, #3
 800d200:	701a      	strb	r2, [r3, #0]
  break;
 800d202:	e008      	b.n	800d216 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d204:	4b07      	ldr	r3, [pc, #28]	; (800d224 <USBH_UserProcess+0x58>)
 800d206:	2202      	movs	r2, #2
 800d208:	701a      	strb	r2, [r3, #0]
  break;
 800d20a:	e004      	b.n	800d216 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <USBH_UserProcess+0x58>)
 800d20e:	2201      	movs	r2, #1
 800d210:	701a      	strb	r2, [r3, #0]
  break;
 800d212:	e000      	b.n	800d216 <USBH_UserProcess+0x4a>

  default:
  break;
 800d214:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d216:	bf00      	nop
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	200037dc 	.word	0x200037dc

0800d228 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b08a      	sub	sp, #40	; 0x28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d230:	f107 0314 	add.w	r3, r7, #20
 800d234:	2200      	movs	r2, #0
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	605a      	str	r2, [r3, #4]
 800d23a:	609a      	str	r2, [r3, #8]
 800d23c:	60da      	str	r2, [r3, #12]
 800d23e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a24      	ldr	r2, [pc, #144]	; (800d2d8 <HAL_HCD_MspInit+0xb0>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d141      	bne.n	800d2ce <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d24a:	2300      	movs	r3, #0
 800d24c:	613b      	str	r3, [r7, #16]
 800d24e:	4b23      	ldr	r3, [pc, #140]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	4a22      	ldr	r2, [pc, #136]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d254:	f043 0302 	orr.w	r3, r3, #2
 800d258:	6313      	str	r3, [r2, #48]	; 0x30
 800d25a:	4b20      	ldr	r3, [pc, #128]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d266:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d26a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d26c:	2302      	movs	r3, #2
 800d26e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d270:	2300      	movs	r3, #0
 800d272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d274:	2300      	movs	r3, #0
 800d276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d278:	230c      	movs	r3, #12
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d27c:	f107 0314 	add.w	r3, r7, #20
 800d280:	4619      	mov	r1, r3
 800d282:	4817      	ldr	r0, [pc, #92]	; (800d2e0 <HAL_HCD_MspInit+0xb8>)
 800d284:	f7f6 fb5a 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d28c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d28e:	2300      	movs	r3, #0
 800d290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d292:	2300      	movs	r3, #0
 800d294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d296:	f107 0314 	add.w	r3, r7, #20
 800d29a:	4619      	mov	r1, r3
 800d29c:	4810      	ldr	r0, [pc, #64]	; (800d2e0 <HAL_HCD_MspInit+0xb8>)
 800d29e:	f7f6 fb4d 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2aa:	4a0c      	ldr	r2, [pc, #48]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d2ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800d2b2:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <HAL_HCD_MspInit+0xb4>)
 800d2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800d2be:	2200      	movs	r2, #0
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	204d      	movs	r0, #77	; 0x4d
 800d2c4:	f7f5 ff6b 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d2c8:	204d      	movs	r0, #77	; 0x4d
 800d2ca:	f7f5 ff84 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d2ce:	bf00      	nop
 800d2d0:	3728      	adds	r7, #40	; 0x28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	40040000 	.word	0x40040000
 800d2dc:	40023800 	.word	0x40023800
 800d2e0:	40020400 	.word	0x40020400

0800d2e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe ff95 	bl	800c222 <USBH_LL_IncTimer>
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe ffcd 	bl	800c2ae <USBH_LL_Connect>
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe ffd6 	bl	800c2dc <USBH_LL_Disconnect>
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	70fb      	strb	r3, [r7, #3]
 800d344:	4613      	mov	r3, r2
 800d346:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe ff87 	bl	800c276 <USBH_LL_PortEnabled>
}
 800d368:	bf00      	nop
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe ff87 	bl	800c292 <USBH_LL_PortDisabled>
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d132      	bne.n	800d404 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d39e:	4a1c      	ldr	r2, [pc, #112]	; (800d410 <USBH_LL_Init+0x84>)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a19      	ldr	r2, [pc, #100]	; (800d410 <USBH_LL_Init+0x84>)
 800d3aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d3ae:	4b18      	ldr	r3, [pc, #96]	; (800d410 <USBH_LL_Init+0x84>)
 800d3b0:	4a18      	ldr	r2, [pc, #96]	; (800d414 <USBH_LL_Init+0x88>)
 800d3b2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d3b4:	4b16      	ldr	r3, [pc, #88]	; (800d410 <USBH_LL_Init+0x84>)
 800d3b6:	220c      	movs	r2, #12
 800d3b8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d3ba:	4b15      	ldr	r3, [pc, #84]	; (800d410 <USBH_LL_Init+0x84>)
 800d3bc:	2201      	movs	r2, #1
 800d3be:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d3c0:	4b13      	ldr	r3, [pc, #76]	; (800d410 <USBH_LL_Init+0x84>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d3c6:	4b12      	ldr	r3, [pc, #72]	; (800d410 <USBH_LL_Init+0x84>)
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d3cc:	4b10      	ldr	r3, [pc, #64]	; (800d410 <USBH_LL_Init+0x84>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d3d2:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <USBH_LL_Init+0x84>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d3d8:	4b0d      	ldr	r3, [pc, #52]	; (800d410 <USBH_LL_Init+0x84>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d3de:	4b0c      	ldr	r3, [pc, #48]	; (800d410 <USBH_LL_Init+0x84>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d3e4:	480a      	ldr	r0, [pc, #40]	; (800d410 <USBH_LL_Init+0x84>)
 800d3e6:	f7f6 fc6e 	bl	8003cc6 <HAL_HCD_Init>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d3f0:	f7f5 f86a 	bl	80024c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d3f4:	4806      	ldr	r0, [pc, #24]	; (800d410 <USBH_LL_Init+0x84>)
 800d3f6:	f7f7 f852 	bl	800449e <HAL_HCD_GetCurrentFrame>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7fe ff00 	bl	800c204 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	200037e0 	.word	0x200037e0
 800d414:	40040000 	.word	0x40040000

0800d418 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f6 ffbf 	bl	80043b2 <HAL_HCD_Start>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f98c 	bl	800d758 <USBH_Get_USB_Status>
 800d440:	4603      	mov	r3, r0
 800d442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d444:	7bbb      	ldrb	r3, [r7, #14]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b084      	sub	sp, #16
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d464:	4618      	mov	r0, r3
 800d466:	f7f6 ffc7 	bl	80043f8 <HAL_HCD_Stop>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	4618      	mov	r0, r3
 800d472:	f000 f971 	bl	800d758 <USBH_Get_USB_Status>
 800d476:	4603      	mov	r3, r0
 800d478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d48c:	2301      	movs	r3, #1
 800d48e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d496:	4618      	mov	r0, r3
 800d498:	f7f7 f80f 	bl	80044ba <HAL_HCD_GetCurrentSpeed>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d00c      	beq.n	800d4bc <USBH_LL_GetSpeed+0x38>
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d80d      	bhi.n	800d4c2 <USBH_LL_GetSpeed+0x3e>
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d002      	beq.n	800d4b0 <USBH_LL_GetSpeed+0x2c>
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d003      	beq.n	800d4b6 <USBH_LL_GetSpeed+0x32>
 800d4ae:	e008      	b.n	800d4c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4b4:	e008      	b.n	800d4c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ba:	e005      	b.n	800d4c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d4bc:	2302      	movs	r3, #2
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	e002      	b.n	800d4c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c6:	bf00      	nop
  }
  return  speed;
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f6 ffa2 	bl	8004432 <HAL_HCD_ResetPort>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 f92f 	bl	800d758 <USBH_Get_USB_Status>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d51a:	78fa      	ldrb	r2, [r7, #3]
 800d51c:	4611      	mov	r1, r2
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f6 ffa9 	bl	8004476 <HAL_HCD_HC_GetXferCount>
 800d524:	4603      	mov	r3, r0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d52e:	b590      	push	{r4, r7, lr}
 800d530:	b089      	sub	sp, #36	; 0x24
 800d532:	af04      	add	r7, sp, #16
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	4608      	mov	r0, r1
 800d538:	4611      	mov	r1, r2
 800d53a:	461a      	mov	r2, r3
 800d53c:	4603      	mov	r3, r0
 800d53e:	70fb      	strb	r3, [r7, #3]
 800d540:	460b      	mov	r3, r1
 800d542:	70bb      	strb	r3, [r7, #2]
 800d544:	4613      	mov	r3, r2
 800d546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d556:	787c      	ldrb	r4, [r7, #1]
 800d558:	78ba      	ldrb	r2, [r7, #2]
 800d55a:	78f9      	ldrb	r1, [r7, #3]
 800d55c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d55e:	9302      	str	r3, [sp, #8]
 800d560:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4623      	mov	r3, r4
 800d56e:	f7f6 fc0c 	bl	8003d8a <HAL_HCD_HC_Init>
 800d572:	4603      	mov	r3, r0
 800d574:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 f8ed 	bl	800d758 <USBH_Get_USB_Status>
 800d57e:	4603      	mov	r3, r0
 800d580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d582:	7bbb      	ldrb	r3, [r7, #14]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd90      	pop	{r4, r7, pc}

0800d58c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d598:	2300      	movs	r3, #0
 800d59a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f6 fc7c 	bl	8003ea8 <HAL_HCD_HC_Halt>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f8ce 	bl	800d758 <USBH_Get_USB_Status>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d5ca:	b590      	push	{r4, r7, lr}
 800d5cc:	b089      	sub	sp, #36	; 0x24
 800d5ce:	af04      	add	r7, sp, #16
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	4608      	mov	r0, r1
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	4603      	mov	r3, r0
 800d5da:	70fb      	strb	r3, [r7, #3]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70bb      	strb	r3, [r7, #2]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d5f2:	787c      	ldrb	r4, [r7, #1]
 800d5f4:	78ba      	ldrb	r2, [r7, #2]
 800d5f6:	78f9      	ldrb	r1, [r7, #3]
 800d5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d5fc:	9303      	str	r3, [sp, #12]
 800d5fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d600:	9302      	str	r3, [sp, #8]
 800d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	4623      	mov	r3, r4
 800d60e:	f7f6 fc6f 	bl	8003ef0 <HAL_HCD_HC_SubmitRequest>
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 f89d 	bl	800d758 <USBH_Get_USB_Status>
 800d61e:	4603      	mov	r3, r0
 800d620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d622:	7bbb      	ldrb	r3, [r7, #14]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd90      	pop	{r4, r7, pc}

0800d62c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d63e:	78fa      	ldrb	r2, [r7, #3]
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7f6 ff03 	bl	800444e <HAL_HCD_HC_GetURBState>
 800d648:	4603      	mov	r3, r0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	460b      	mov	r3, r1
 800d65c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d664:	2b00      	cmp	r3, #0
 800d666:	d103      	bne.n	800d670 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d668:	78fb      	ldrb	r3, [r7, #3]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 f8a0 	bl	800d7b0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d670:	20c8      	movs	r0, #200	; 0xc8
 800d672:	f7f5 fc95 	bl	8002fa0 <HAL_Delay>
  return USBH_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	70fb      	strb	r3, [r7, #3]
 800d68c:	4613      	mov	r3, r2
 800d68e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d696:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d698:	78fb      	ldrb	r3, [r7, #3]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	212c      	movs	r1, #44	; 0x2c
 800d69e:	fb01 f303 	mul.w	r3, r1, r3
 800d6a2:	4413      	add	r3, r2
 800d6a4:	333b      	adds	r3, #59	; 0x3b
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d009      	beq.n	800d6c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d6ac:	78fb      	ldrb	r3, [r7, #3]
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	212c      	movs	r1, #44	; 0x2c
 800d6b2:	fb01 f303 	mul.w	r3, r1, r3
 800d6b6:	4413      	add	r3, r2
 800d6b8:	3354      	adds	r3, #84	; 0x54
 800d6ba:	78ba      	ldrb	r2, [r7, #2]
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e008      	b.n	800d6d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d6c0:	78fb      	ldrb	r3, [r7, #3]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	212c      	movs	r1, #44	; 0x2c
 800d6c6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ca:	4413      	add	r3, r2
 800d6cc:	3355      	adds	r3, #85	; 0x55
 800d6ce:	78ba      	ldrb	r2, [r7, #2]
 800d6d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6f6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d6f8:	78fb      	ldrb	r3, [r7, #3]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	212c      	movs	r1, #44	; 0x2c
 800d6fe:	fb01 f303 	mul.w	r3, r1, r3
 800d702:	4413      	add	r3, r2
 800d704:	333b      	adds	r3, #59	; 0x3b
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d009      	beq.n	800d720 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d70c:	78fb      	ldrb	r3, [r7, #3]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	212c      	movs	r1, #44	; 0x2c
 800d712:	fb01 f303 	mul.w	r3, r1, r3
 800d716:	4413      	add	r3, r2
 800d718:	3354      	adds	r3, #84	; 0x54
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	73fb      	strb	r3, [r7, #15]
 800d71e:	e008      	b.n	800d732 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	212c      	movs	r1, #44	; 0x2c
 800d726:	fb01 f303 	mul.w	r3, r1, r3
 800d72a:	4413      	add	r3, r2
 800d72c:	3355      	adds	r3, #85	; 0x55
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d732:	7bfb      	ldrb	r3, [r7, #15]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7f5 fc29 	bl	8002fa0 <HAL_Delay>
}
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
	...

0800d758 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d817      	bhi.n	800d79c <USBH_Get_USB_Status+0x44>
 800d76c:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <USBH_Get_USB_Status+0x1c>)
 800d76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d772:	bf00      	nop
 800d774:	0800d785 	.word	0x0800d785
 800d778:	0800d78b 	.word	0x0800d78b
 800d77c:	0800d791 	.word	0x0800d791
 800d780:	0800d797 	.word	0x0800d797
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73fb      	strb	r3, [r7, #15]
    break;
 800d788:	e00b      	b.n	800d7a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d78a:	2302      	movs	r3, #2
 800d78c:	73fb      	strb	r3, [r7, #15]
    break;
 800d78e:	e008      	b.n	800d7a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d790:	2301      	movs	r3, #1
 800d792:	73fb      	strb	r3, [r7, #15]
    break;
 800d794:	e005      	b.n	800d7a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d796:	2302      	movs	r3, #2
 800d798:	73fb      	strb	r3, [r7, #15]
    break;
 800d79a:	e002      	b.n	800d7a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d79c:	2302      	movs	r3, #2
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	bf00      	nop
  }
  return usb_status;
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
 800d7c8:	e001      	b.n	800d7ce <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	2110      	movs	r1, #16
 800d7d4:	4803      	ldr	r0, [pc, #12]	; (800d7e4 <MX_DriverVbusHS+0x34>)
 800d7d6:	f7f6 fa5d 	bl	8003c94 <HAL_GPIO_WritePin>
}
 800d7da:	bf00      	nop
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	40020800 	.word	0x40020800

0800d7e8 <atoi>:
 800d7e8:	220a      	movs	r2, #10
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	f000 baa0 	b.w	800dd30 <strtol>

0800d7f0 <__errno>:
 800d7f0:	4b01      	ldr	r3, [pc, #4]	; (800d7f8 <__errno+0x8>)
 800d7f2:	6818      	ldr	r0, [r3, #0]
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20000030 	.word	0x20000030

0800d7fc <__libc_init_array>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	4d0d      	ldr	r5, [pc, #52]	; (800d834 <__libc_init_array+0x38>)
 800d800:	4c0d      	ldr	r4, [pc, #52]	; (800d838 <__libc_init_array+0x3c>)
 800d802:	1b64      	subs	r4, r4, r5
 800d804:	10a4      	asrs	r4, r4, #2
 800d806:	2600      	movs	r6, #0
 800d808:	42a6      	cmp	r6, r4
 800d80a:	d109      	bne.n	800d820 <__libc_init_array+0x24>
 800d80c:	4d0b      	ldr	r5, [pc, #44]	; (800d83c <__libc_init_array+0x40>)
 800d80e:	4c0c      	ldr	r4, [pc, #48]	; (800d840 <__libc_init_array+0x44>)
 800d810:	f001 f91e 	bl	800ea50 <_init>
 800d814:	1b64      	subs	r4, r4, r5
 800d816:	10a4      	asrs	r4, r4, #2
 800d818:	2600      	movs	r6, #0
 800d81a:	42a6      	cmp	r6, r4
 800d81c:	d105      	bne.n	800d82a <__libc_init_array+0x2e>
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	f855 3b04 	ldr.w	r3, [r5], #4
 800d824:	4798      	blx	r3
 800d826:	3601      	adds	r6, #1
 800d828:	e7ee      	b.n	800d808 <__libc_init_array+0xc>
 800d82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d82e:	4798      	blx	r3
 800d830:	3601      	adds	r6, #1
 800d832:	e7f2      	b.n	800d81a <__libc_init_array+0x1e>
 800d834:	0800efd8 	.word	0x0800efd8
 800d838:	0800efd8 	.word	0x0800efd8
 800d83c:	0800efd8 	.word	0x0800efd8
 800d840:	0800efdc 	.word	0x0800efdc

0800d844 <malloc>:
 800d844:	4b02      	ldr	r3, [pc, #8]	; (800d850 <malloc+0xc>)
 800d846:	4601      	mov	r1, r0
 800d848:	6818      	ldr	r0, [r3, #0]
 800d84a:	f000 b88d 	b.w	800d968 <_malloc_r>
 800d84e:	bf00      	nop
 800d850:	20000030 	.word	0x20000030

0800d854 <free>:
 800d854:	4b02      	ldr	r3, [pc, #8]	; (800d860 <free+0xc>)
 800d856:	4601      	mov	r1, r0
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	f000 b819 	b.w	800d890 <_free_r>
 800d85e:	bf00      	nop
 800d860:	20000030 	.word	0x20000030

0800d864 <memcpy>:
 800d864:	440a      	add	r2, r1
 800d866:	4291      	cmp	r1, r2
 800d868:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d86c:	d100      	bne.n	800d870 <memcpy+0xc>
 800d86e:	4770      	bx	lr
 800d870:	b510      	push	{r4, lr}
 800d872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d87a:	4291      	cmp	r1, r2
 800d87c:	d1f9      	bne.n	800d872 <memcpy+0xe>
 800d87e:	bd10      	pop	{r4, pc}

0800d880 <memset>:
 800d880:	4402      	add	r2, r0
 800d882:	4603      	mov	r3, r0
 800d884:	4293      	cmp	r3, r2
 800d886:	d100      	bne.n	800d88a <memset+0xa>
 800d888:	4770      	bx	lr
 800d88a:	f803 1b01 	strb.w	r1, [r3], #1
 800d88e:	e7f9      	b.n	800d884 <memset+0x4>

0800d890 <_free_r>:
 800d890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d892:	2900      	cmp	r1, #0
 800d894:	d044      	beq.n	800d920 <_free_r+0x90>
 800d896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d89a:	9001      	str	r0, [sp, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f1a1 0404 	sub.w	r4, r1, #4
 800d8a2:	bfb8      	it	lt
 800d8a4:	18e4      	addlt	r4, r4, r3
 800d8a6:	f000 fc6d 	bl	800e184 <__malloc_lock>
 800d8aa:	4a1e      	ldr	r2, [pc, #120]	; (800d924 <_free_r+0x94>)
 800d8ac:	9801      	ldr	r0, [sp, #4]
 800d8ae:	6813      	ldr	r3, [r2, #0]
 800d8b0:	b933      	cbnz	r3, 800d8c0 <_free_r+0x30>
 800d8b2:	6063      	str	r3, [r4, #4]
 800d8b4:	6014      	str	r4, [r2, #0]
 800d8b6:	b003      	add	sp, #12
 800d8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8bc:	f000 bc68 	b.w	800e190 <__malloc_unlock>
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	d908      	bls.n	800d8d6 <_free_r+0x46>
 800d8c4:	6825      	ldr	r5, [r4, #0]
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	bf01      	itttt	eq
 800d8cc:	6819      	ldreq	r1, [r3, #0]
 800d8ce:	685b      	ldreq	r3, [r3, #4]
 800d8d0:	1949      	addeq	r1, r1, r5
 800d8d2:	6021      	streq	r1, [r4, #0]
 800d8d4:	e7ed      	b.n	800d8b2 <_free_r+0x22>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	b10b      	cbz	r3, 800d8e0 <_free_r+0x50>
 800d8dc:	42a3      	cmp	r3, r4
 800d8de:	d9fa      	bls.n	800d8d6 <_free_r+0x46>
 800d8e0:	6811      	ldr	r1, [r2, #0]
 800d8e2:	1855      	adds	r5, r2, r1
 800d8e4:	42a5      	cmp	r5, r4
 800d8e6:	d10b      	bne.n	800d900 <_free_r+0x70>
 800d8e8:	6824      	ldr	r4, [r4, #0]
 800d8ea:	4421      	add	r1, r4
 800d8ec:	1854      	adds	r4, r2, r1
 800d8ee:	42a3      	cmp	r3, r4
 800d8f0:	6011      	str	r1, [r2, #0]
 800d8f2:	d1e0      	bne.n	800d8b6 <_free_r+0x26>
 800d8f4:	681c      	ldr	r4, [r3, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	6053      	str	r3, [r2, #4]
 800d8fa:	4421      	add	r1, r4
 800d8fc:	6011      	str	r1, [r2, #0]
 800d8fe:	e7da      	b.n	800d8b6 <_free_r+0x26>
 800d900:	d902      	bls.n	800d908 <_free_r+0x78>
 800d902:	230c      	movs	r3, #12
 800d904:	6003      	str	r3, [r0, #0]
 800d906:	e7d6      	b.n	800d8b6 <_free_r+0x26>
 800d908:	6825      	ldr	r5, [r4, #0]
 800d90a:	1961      	adds	r1, r4, r5
 800d90c:	428b      	cmp	r3, r1
 800d90e:	bf04      	itt	eq
 800d910:	6819      	ldreq	r1, [r3, #0]
 800d912:	685b      	ldreq	r3, [r3, #4]
 800d914:	6063      	str	r3, [r4, #4]
 800d916:	bf04      	itt	eq
 800d918:	1949      	addeq	r1, r1, r5
 800d91a:	6021      	streq	r1, [r4, #0]
 800d91c:	6054      	str	r4, [r2, #4]
 800d91e:	e7ca      	b.n	800d8b6 <_free_r+0x26>
 800d920:	b003      	add	sp, #12
 800d922:	bd30      	pop	{r4, r5, pc}
 800d924:	20003ae4 	.word	0x20003ae4

0800d928 <sbrk_aligned>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	4e0e      	ldr	r6, [pc, #56]	; (800d964 <sbrk_aligned+0x3c>)
 800d92c:	460c      	mov	r4, r1
 800d92e:	6831      	ldr	r1, [r6, #0]
 800d930:	4605      	mov	r5, r0
 800d932:	b911      	cbnz	r1, 800d93a <sbrk_aligned+0x12>
 800d934:	f000 f8a4 	bl	800da80 <_sbrk_r>
 800d938:	6030      	str	r0, [r6, #0]
 800d93a:	4621      	mov	r1, r4
 800d93c:	4628      	mov	r0, r5
 800d93e:	f000 f89f 	bl	800da80 <_sbrk_r>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	d00a      	beq.n	800d95c <sbrk_aligned+0x34>
 800d946:	1cc4      	adds	r4, r0, #3
 800d948:	f024 0403 	bic.w	r4, r4, #3
 800d94c:	42a0      	cmp	r0, r4
 800d94e:	d007      	beq.n	800d960 <sbrk_aligned+0x38>
 800d950:	1a21      	subs	r1, r4, r0
 800d952:	4628      	mov	r0, r5
 800d954:	f000 f894 	bl	800da80 <_sbrk_r>
 800d958:	3001      	adds	r0, #1
 800d95a:	d101      	bne.n	800d960 <sbrk_aligned+0x38>
 800d95c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d960:	4620      	mov	r0, r4
 800d962:	bd70      	pop	{r4, r5, r6, pc}
 800d964:	20003ae8 	.word	0x20003ae8

0800d968 <_malloc_r>:
 800d968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96c:	1ccd      	adds	r5, r1, #3
 800d96e:	f025 0503 	bic.w	r5, r5, #3
 800d972:	3508      	adds	r5, #8
 800d974:	2d0c      	cmp	r5, #12
 800d976:	bf38      	it	cc
 800d978:	250c      	movcc	r5, #12
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	4607      	mov	r7, r0
 800d97e:	db01      	blt.n	800d984 <_malloc_r+0x1c>
 800d980:	42a9      	cmp	r1, r5
 800d982:	d905      	bls.n	800d990 <_malloc_r+0x28>
 800d984:	230c      	movs	r3, #12
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	2600      	movs	r6, #0
 800d98a:	4630      	mov	r0, r6
 800d98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d990:	4e2e      	ldr	r6, [pc, #184]	; (800da4c <_malloc_r+0xe4>)
 800d992:	f000 fbf7 	bl	800e184 <__malloc_lock>
 800d996:	6833      	ldr	r3, [r6, #0]
 800d998:	461c      	mov	r4, r3
 800d99a:	bb34      	cbnz	r4, 800d9ea <_malloc_r+0x82>
 800d99c:	4629      	mov	r1, r5
 800d99e:	4638      	mov	r0, r7
 800d9a0:	f7ff ffc2 	bl	800d928 <sbrk_aligned>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	d14d      	bne.n	800da46 <_malloc_r+0xde>
 800d9aa:	6834      	ldr	r4, [r6, #0]
 800d9ac:	4626      	mov	r6, r4
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	d140      	bne.n	800da34 <_malloc_r+0xcc>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	eb04 0803 	add.w	r8, r4, r3
 800d9bc:	f000 f860 	bl	800da80 <_sbrk_r>
 800d9c0:	4580      	cmp	r8, r0
 800d9c2:	d13a      	bne.n	800da3a <_malloc_r+0xd2>
 800d9c4:	6821      	ldr	r1, [r4, #0]
 800d9c6:	3503      	adds	r5, #3
 800d9c8:	1a6d      	subs	r5, r5, r1
 800d9ca:	f025 0503 	bic.w	r5, r5, #3
 800d9ce:	3508      	adds	r5, #8
 800d9d0:	2d0c      	cmp	r5, #12
 800d9d2:	bf38      	it	cc
 800d9d4:	250c      	movcc	r5, #12
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f7ff ffa5 	bl	800d928 <sbrk_aligned>
 800d9de:	3001      	adds	r0, #1
 800d9e0:	d02b      	beq.n	800da3a <_malloc_r+0xd2>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	442b      	add	r3, r5
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	e00e      	b.n	800da08 <_malloc_r+0xa0>
 800d9ea:	6822      	ldr	r2, [r4, #0]
 800d9ec:	1b52      	subs	r2, r2, r5
 800d9ee:	d41e      	bmi.n	800da2e <_malloc_r+0xc6>
 800d9f0:	2a0b      	cmp	r2, #11
 800d9f2:	d916      	bls.n	800da22 <_malloc_r+0xba>
 800d9f4:	1961      	adds	r1, r4, r5
 800d9f6:	42a3      	cmp	r3, r4
 800d9f8:	6025      	str	r5, [r4, #0]
 800d9fa:	bf18      	it	ne
 800d9fc:	6059      	strne	r1, [r3, #4]
 800d9fe:	6863      	ldr	r3, [r4, #4]
 800da00:	bf08      	it	eq
 800da02:	6031      	streq	r1, [r6, #0]
 800da04:	5162      	str	r2, [r4, r5]
 800da06:	604b      	str	r3, [r1, #4]
 800da08:	4638      	mov	r0, r7
 800da0a:	f104 060b 	add.w	r6, r4, #11
 800da0e:	f000 fbbf 	bl	800e190 <__malloc_unlock>
 800da12:	f026 0607 	bic.w	r6, r6, #7
 800da16:	1d23      	adds	r3, r4, #4
 800da18:	1af2      	subs	r2, r6, r3
 800da1a:	d0b6      	beq.n	800d98a <_malloc_r+0x22>
 800da1c:	1b9b      	subs	r3, r3, r6
 800da1e:	50a3      	str	r3, [r4, r2]
 800da20:	e7b3      	b.n	800d98a <_malloc_r+0x22>
 800da22:	6862      	ldr	r2, [r4, #4]
 800da24:	42a3      	cmp	r3, r4
 800da26:	bf0c      	ite	eq
 800da28:	6032      	streq	r2, [r6, #0]
 800da2a:	605a      	strne	r2, [r3, #4]
 800da2c:	e7ec      	b.n	800da08 <_malloc_r+0xa0>
 800da2e:	4623      	mov	r3, r4
 800da30:	6864      	ldr	r4, [r4, #4]
 800da32:	e7b2      	b.n	800d99a <_malloc_r+0x32>
 800da34:	4634      	mov	r4, r6
 800da36:	6876      	ldr	r6, [r6, #4]
 800da38:	e7b9      	b.n	800d9ae <_malloc_r+0x46>
 800da3a:	230c      	movs	r3, #12
 800da3c:	603b      	str	r3, [r7, #0]
 800da3e:	4638      	mov	r0, r7
 800da40:	f000 fba6 	bl	800e190 <__malloc_unlock>
 800da44:	e7a1      	b.n	800d98a <_malloc_r+0x22>
 800da46:	6025      	str	r5, [r4, #0]
 800da48:	e7de      	b.n	800da08 <_malloc_r+0xa0>
 800da4a:	bf00      	nop
 800da4c:	20003ae4 	.word	0x20003ae4

0800da50 <iprintf>:
 800da50:	b40f      	push	{r0, r1, r2, r3}
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <iprintf+0x2c>)
 800da54:	b513      	push	{r0, r1, r4, lr}
 800da56:	681c      	ldr	r4, [r3, #0]
 800da58:	b124      	cbz	r4, 800da64 <iprintf+0x14>
 800da5a:	69a3      	ldr	r3, [r4, #24]
 800da5c:	b913      	cbnz	r3, 800da64 <iprintf+0x14>
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 fa8a 	bl	800df78 <__sinit>
 800da64:	ab05      	add	r3, sp, #20
 800da66:	9a04      	ldr	r2, [sp, #16]
 800da68:	68a1      	ldr	r1, [r4, #8]
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	4620      	mov	r0, r4
 800da6e:	f000 fbbf 	bl	800e1f0 <_vfiprintf_r>
 800da72:	b002      	add	sp, #8
 800da74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da78:	b004      	add	sp, #16
 800da7a:	4770      	bx	lr
 800da7c:	20000030 	.word	0x20000030

0800da80 <_sbrk_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d06      	ldr	r5, [pc, #24]	; (800da9c <_sbrk_r+0x1c>)
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	602b      	str	r3, [r5, #0]
 800da8c:	f7f5 f9a4 	bl	8002dd8 <_sbrk>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_sbrk_r+0x1a>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_sbrk_r+0x1a>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	20003af0 	.word	0x20003af0

0800daa0 <setvbuf>:
 800daa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daa4:	461d      	mov	r5, r3
 800daa6:	4b5d      	ldr	r3, [pc, #372]	; (800dc1c <setvbuf+0x17c>)
 800daa8:	681f      	ldr	r7, [r3, #0]
 800daaa:	4604      	mov	r4, r0
 800daac:	460e      	mov	r6, r1
 800daae:	4690      	mov	r8, r2
 800dab0:	b127      	cbz	r7, 800dabc <setvbuf+0x1c>
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	b913      	cbnz	r3, 800dabc <setvbuf+0x1c>
 800dab6:	4638      	mov	r0, r7
 800dab8:	f000 fa5e 	bl	800df78 <__sinit>
 800dabc:	4b58      	ldr	r3, [pc, #352]	; (800dc20 <setvbuf+0x180>)
 800dabe:	429c      	cmp	r4, r3
 800dac0:	d167      	bne.n	800db92 <setvbuf+0xf2>
 800dac2:	687c      	ldr	r4, [r7, #4]
 800dac4:	f1b8 0f02 	cmp.w	r8, #2
 800dac8:	d006      	beq.n	800dad8 <setvbuf+0x38>
 800daca:	f1b8 0f01 	cmp.w	r8, #1
 800dace:	f200 809f 	bhi.w	800dc10 <setvbuf+0x170>
 800dad2:	2d00      	cmp	r5, #0
 800dad4:	f2c0 809c 	blt.w	800dc10 <setvbuf+0x170>
 800dad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dada:	07db      	lsls	r3, r3, #31
 800dadc:	d405      	bmi.n	800daea <setvbuf+0x4a>
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	0598      	lsls	r0, r3, #22
 800dae2:	d402      	bmi.n	800daea <setvbuf+0x4a>
 800dae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dae6:	f000 fae5 	bl	800e0b4 <__retarget_lock_acquire_recursive>
 800daea:	4621      	mov	r1, r4
 800daec:	4638      	mov	r0, r7
 800daee:	f000 f9af 	bl	800de50 <_fflush_r>
 800daf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daf4:	b141      	cbz	r1, 800db08 <setvbuf+0x68>
 800daf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dafa:	4299      	cmp	r1, r3
 800dafc:	d002      	beq.n	800db04 <setvbuf+0x64>
 800dafe:	4638      	mov	r0, r7
 800db00:	f7ff fec6 	bl	800d890 <_free_r>
 800db04:	2300      	movs	r3, #0
 800db06:	6363      	str	r3, [r4, #52]	; 0x34
 800db08:	2300      	movs	r3, #0
 800db0a:	61a3      	str	r3, [r4, #24]
 800db0c:	6063      	str	r3, [r4, #4]
 800db0e:	89a3      	ldrh	r3, [r4, #12]
 800db10:	0619      	lsls	r1, r3, #24
 800db12:	d503      	bpl.n	800db1c <setvbuf+0x7c>
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	4638      	mov	r0, r7
 800db18:	f7ff feba 	bl	800d890 <_free_r>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800db22:	f023 0303 	bic.w	r3, r3, #3
 800db26:	f1b8 0f02 	cmp.w	r8, #2
 800db2a:	81a3      	strh	r3, [r4, #12]
 800db2c:	d06c      	beq.n	800dc08 <setvbuf+0x168>
 800db2e:	ab01      	add	r3, sp, #4
 800db30:	466a      	mov	r2, sp
 800db32:	4621      	mov	r1, r4
 800db34:	4638      	mov	r0, r7
 800db36:	f000 fabf 	bl	800e0b8 <__swhatbuf_r>
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	4318      	orrs	r0, r3
 800db3e:	81a0      	strh	r0, [r4, #12]
 800db40:	2d00      	cmp	r5, #0
 800db42:	d130      	bne.n	800dba6 <setvbuf+0x106>
 800db44:	9d00      	ldr	r5, [sp, #0]
 800db46:	4628      	mov	r0, r5
 800db48:	f7ff fe7c 	bl	800d844 <malloc>
 800db4c:	4606      	mov	r6, r0
 800db4e:	2800      	cmp	r0, #0
 800db50:	d155      	bne.n	800dbfe <setvbuf+0x15e>
 800db52:	f8dd 9000 	ldr.w	r9, [sp]
 800db56:	45a9      	cmp	r9, r5
 800db58:	d14a      	bne.n	800dbf0 <setvbuf+0x150>
 800db5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800db5e:	2200      	movs	r2, #0
 800db60:	60a2      	str	r2, [r4, #8]
 800db62:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800db66:	6022      	str	r2, [r4, #0]
 800db68:	6122      	str	r2, [r4, #16]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db70:	6162      	str	r2, [r4, #20]
 800db72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db74:	f043 0302 	orr.w	r3, r3, #2
 800db78:	07d2      	lsls	r2, r2, #31
 800db7a:	81a3      	strh	r3, [r4, #12]
 800db7c:	d405      	bmi.n	800db8a <setvbuf+0xea>
 800db7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800db82:	d102      	bne.n	800db8a <setvbuf+0xea>
 800db84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db86:	f000 fa96 	bl	800e0b6 <__retarget_lock_release_recursive>
 800db8a:	4628      	mov	r0, r5
 800db8c:	b003      	add	sp, #12
 800db8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db92:	4b24      	ldr	r3, [pc, #144]	; (800dc24 <setvbuf+0x184>)
 800db94:	429c      	cmp	r4, r3
 800db96:	d101      	bne.n	800db9c <setvbuf+0xfc>
 800db98:	68bc      	ldr	r4, [r7, #8]
 800db9a:	e793      	b.n	800dac4 <setvbuf+0x24>
 800db9c:	4b22      	ldr	r3, [pc, #136]	; (800dc28 <setvbuf+0x188>)
 800db9e:	429c      	cmp	r4, r3
 800dba0:	bf08      	it	eq
 800dba2:	68fc      	ldreq	r4, [r7, #12]
 800dba4:	e78e      	b.n	800dac4 <setvbuf+0x24>
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	d0cd      	beq.n	800db46 <setvbuf+0xa6>
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	b913      	cbnz	r3, 800dbb4 <setvbuf+0x114>
 800dbae:	4638      	mov	r0, r7
 800dbb0:	f000 f9e2 	bl	800df78 <__sinit>
 800dbb4:	f1b8 0f01 	cmp.w	r8, #1
 800dbb8:	bf08      	it	eq
 800dbba:	89a3      	ldrheq	r3, [r4, #12]
 800dbbc:	6026      	str	r6, [r4, #0]
 800dbbe:	bf04      	itt	eq
 800dbc0:	f043 0301 	orreq.w	r3, r3, #1
 800dbc4:	81a3      	strheq	r3, [r4, #12]
 800dbc6:	89a2      	ldrh	r2, [r4, #12]
 800dbc8:	f012 0308 	ands.w	r3, r2, #8
 800dbcc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dbd0:	d01c      	beq.n	800dc0c <setvbuf+0x16c>
 800dbd2:	07d3      	lsls	r3, r2, #31
 800dbd4:	bf41      	itttt	mi
 800dbd6:	2300      	movmi	r3, #0
 800dbd8:	426d      	negmi	r5, r5
 800dbda:	60a3      	strmi	r3, [r4, #8]
 800dbdc:	61a5      	strmi	r5, [r4, #24]
 800dbde:	bf58      	it	pl
 800dbe0:	60a5      	strpl	r5, [r4, #8]
 800dbe2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800dbe4:	f015 0501 	ands.w	r5, r5, #1
 800dbe8:	d115      	bne.n	800dc16 <setvbuf+0x176>
 800dbea:	f412 7f00 	tst.w	r2, #512	; 0x200
 800dbee:	e7c8      	b.n	800db82 <setvbuf+0xe2>
 800dbf0:	4648      	mov	r0, r9
 800dbf2:	f7ff fe27 	bl	800d844 <malloc>
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d0ae      	beq.n	800db5a <setvbuf+0xba>
 800dbfc:	464d      	mov	r5, r9
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	e7d0      	b.n	800dbaa <setvbuf+0x10a>
 800dc08:	2500      	movs	r5, #0
 800dc0a:	e7a8      	b.n	800db5e <setvbuf+0xbe>
 800dc0c:	60a3      	str	r3, [r4, #8]
 800dc0e:	e7e8      	b.n	800dbe2 <setvbuf+0x142>
 800dc10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc14:	e7b9      	b.n	800db8a <setvbuf+0xea>
 800dc16:	2500      	movs	r5, #0
 800dc18:	e7b7      	b.n	800db8a <setvbuf+0xea>
 800dc1a:	bf00      	nop
 800dc1c:	20000030 	.word	0x20000030
 800dc20:	0800ef5c 	.word	0x0800ef5c
 800dc24:	0800ef7c 	.word	0x0800ef7c
 800dc28:	0800ef3c 	.word	0x0800ef3c

0800dc2c <_strtol_l.constprop.0>:
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc32:	d001      	beq.n	800dc38 <_strtol_l.constprop.0+0xc>
 800dc34:	2b24      	cmp	r3, #36	; 0x24
 800dc36:	d906      	bls.n	800dc46 <_strtol_l.constprop.0+0x1a>
 800dc38:	f7ff fdda 	bl	800d7f0 <__errno>
 800dc3c:	2316      	movs	r3, #22
 800dc3e:	6003      	str	r3, [r0, #0]
 800dc40:	2000      	movs	r0, #0
 800dc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd2c <_strtol_l.constprop.0+0x100>
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	462e      	mov	r6, r5
 800dc4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc52:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dc56:	f017 0708 	ands.w	r7, r7, #8
 800dc5a:	d1f7      	bne.n	800dc4c <_strtol_l.constprop.0+0x20>
 800dc5c:	2c2d      	cmp	r4, #45	; 0x2d
 800dc5e:	d132      	bne.n	800dcc6 <_strtol_l.constprop.0+0x9a>
 800dc60:	782c      	ldrb	r4, [r5, #0]
 800dc62:	2701      	movs	r7, #1
 800dc64:	1cb5      	adds	r5, r6, #2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d05b      	beq.n	800dd22 <_strtol_l.constprop.0+0xf6>
 800dc6a:	2b10      	cmp	r3, #16
 800dc6c:	d109      	bne.n	800dc82 <_strtol_l.constprop.0+0x56>
 800dc6e:	2c30      	cmp	r4, #48	; 0x30
 800dc70:	d107      	bne.n	800dc82 <_strtol_l.constprop.0+0x56>
 800dc72:	782c      	ldrb	r4, [r5, #0]
 800dc74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc78:	2c58      	cmp	r4, #88	; 0x58
 800dc7a:	d14d      	bne.n	800dd18 <_strtol_l.constprop.0+0xec>
 800dc7c:	786c      	ldrb	r4, [r5, #1]
 800dc7e:	2310      	movs	r3, #16
 800dc80:	3502      	adds	r5, #2
 800dc82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dc86:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dc8a:	f04f 0c00 	mov.w	ip, #0
 800dc8e:	fbb8 f9f3 	udiv	r9, r8, r3
 800dc92:	4666      	mov	r6, ip
 800dc94:	fb03 8a19 	mls	sl, r3, r9, r8
 800dc98:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dc9c:	f1be 0f09 	cmp.w	lr, #9
 800dca0:	d816      	bhi.n	800dcd0 <_strtol_l.constprop.0+0xa4>
 800dca2:	4674      	mov	r4, lr
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	dd24      	ble.n	800dcf2 <_strtol_l.constprop.0+0xc6>
 800dca8:	f1bc 0f00 	cmp.w	ip, #0
 800dcac:	db1e      	blt.n	800dcec <_strtol_l.constprop.0+0xc0>
 800dcae:	45b1      	cmp	r9, r6
 800dcb0:	d31c      	bcc.n	800dcec <_strtol_l.constprop.0+0xc0>
 800dcb2:	d101      	bne.n	800dcb8 <_strtol_l.constprop.0+0x8c>
 800dcb4:	45a2      	cmp	sl, r4
 800dcb6:	db19      	blt.n	800dcec <_strtol_l.constprop.0+0xc0>
 800dcb8:	fb06 4603 	mla	r6, r6, r3, r4
 800dcbc:	f04f 0c01 	mov.w	ip, #1
 800dcc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcc4:	e7e8      	b.n	800dc98 <_strtol_l.constprop.0+0x6c>
 800dcc6:	2c2b      	cmp	r4, #43	; 0x2b
 800dcc8:	bf04      	itt	eq
 800dcca:	782c      	ldrbeq	r4, [r5, #0]
 800dccc:	1cb5      	addeq	r5, r6, #2
 800dcce:	e7ca      	b.n	800dc66 <_strtol_l.constprop.0+0x3a>
 800dcd0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dcd4:	f1be 0f19 	cmp.w	lr, #25
 800dcd8:	d801      	bhi.n	800dcde <_strtol_l.constprop.0+0xb2>
 800dcda:	3c37      	subs	r4, #55	; 0x37
 800dcdc:	e7e2      	b.n	800dca4 <_strtol_l.constprop.0+0x78>
 800dcde:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dce2:	f1be 0f19 	cmp.w	lr, #25
 800dce6:	d804      	bhi.n	800dcf2 <_strtol_l.constprop.0+0xc6>
 800dce8:	3c57      	subs	r4, #87	; 0x57
 800dcea:	e7db      	b.n	800dca4 <_strtol_l.constprop.0+0x78>
 800dcec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800dcf0:	e7e6      	b.n	800dcc0 <_strtol_l.constprop.0+0x94>
 800dcf2:	f1bc 0f00 	cmp.w	ip, #0
 800dcf6:	da05      	bge.n	800dd04 <_strtol_l.constprop.0+0xd8>
 800dcf8:	2322      	movs	r3, #34	; 0x22
 800dcfa:	6003      	str	r3, [r0, #0]
 800dcfc:	4646      	mov	r6, r8
 800dcfe:	b942      	cbnz	r2, 800dd12 <_strtol_l.constprop.0+0xe6>
 800dd00:	4630      	mov	r0, r6
 800dd02:	e79e      	b.n	800dc42 <_strtol_l.constprop.0+0x16>
 800dd04:	b107      	cbz	r7, 800dd08 <_strtol_l.constprop.0+0xdc>
 800dd06:	4276      	negs	r6, r6
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	d0f9      	beq.n	800dd00 <_strtol_l.constprop.0+0xd4>
 800dd0c:	f1bc 0f00 	cmp.w	ip, #0
 800dd10:	d000      	beq.n	800dd14 <_strtol_l.constprop.0+0xe8>
 800dd12:	1e69      	subs	r1, r5, #1
 800dd14:	6011      	str	r1, [r2, #0]
 800dd16:	e7f3      	b.n	800dd00 <_strtol_l.constprop.0+0xd4>
 800dd18:	2430      	movs	r4, #48	; 0x30
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1b1      	bne.n	800dc82 <_strtol_l.constprop.0+0x56>
 800dd1e:	2308      	movs	r3, #8
 800dd20:	e7af      	b.n	800dc82 <_strtol_l.constprop.0+0x56>
 800dd22:	2c30      	cmp	r4, #48	; 0x30
 800dd24:	d0a5      	beq.n	800dc72 <_strtol_l.constprop.0+0x46>
 800dd26:	230a      	movs	r3, #10
 800dd28:	e7ab      	b.n	800dc82 <_strtol_l.constprop.0+0x56>
 800dd2a:	bf00      	nop
 800dd2c:	0800ee39 	.word	0x0800ee39

0800dd30 <strtol>:
 800dd30:	4613      	mov	r3, r2
 800dd32:	460a      	mov	r2, r1
 800dd34:	4601      	mov	r1, r0
 800dd36:	4802      	ldr	r0, [pc, #8]	; (800dd40 <strtol+0x10>)
 800dd38:	6800      	ldr	r0, [r0, #0]
 800dd3a:	f7ff bf77 	b.w	800dc2c <_strtol_l.constprop.0>
 800dd3e:	bf00      	nop
 800dd40:	20000030 	.word	0x20000030

0800dd44 <__sflush_r>:
 800dd44:	898a      	ldrh	r2, [r1, #12]
 800dd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	0710      	lsls	r0, r2, #28
 800dd4e:	460c      	mov	r4, r1
 800dd50:	d458      	bmi.n	800de04 <__sflush_r+0xc0>
 800dd52:	684b      	ldr	r3, [r1, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dc05      	bgt.n	800dd64 <__sflush_r+0x20>
 800dd58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dc02      	bgt.n	800dd64 <__sflush_r+0x20>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	d0f9      	beq.n	800dd5e <__sflush_r+0x1a>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd70:	682f      	ldr	r7, [r5, #0]
 800dd72:	602b      	str	r3, [r5, #0]
 800dd74:	d032      	beq.n	800dddc <__sflush_r+0x98>
 800dd76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	075a      	lsls	r2, r3, #29
 800dd7c:	d505      	bpl.n	800dd8a <__sflush_r+0x46>
 800dd7e:	6863      	ldr	r3, [r4, #4]
 800dd80:	1ac0      	subs	r0, r0, r3
 800dd82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd84:	b10b      	cbz	r3, 800dd8a <__sflush_r+0x46>
 800dd86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd88:	1ac0      	subs	r0, r0, r3
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd90:	6a21      	ldr	r1, [r4, #32]
 800dd92:	4628      	mov	r0, r5
 800dd94:	47b0      	blx	r6
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	d106      	bne.n	800ddaa <__sflush_r+0x66>
 800dd9c:	6829      	ldr	r1, [r5, #0]
 800dd9e:	291d      	cmp	r1, #29
 800dda0:	d82c      	bhi.n	800ddfc <__sflush_r+0xb8>
 800dda2:	4a2a      	ldr	r2, [pc, #168]	; (800de4c <__sflush_r+0x108>)
 800dda4:	40ca      	lsrs	r2, r1
 800dda6:	07d6      	lsls	r6, r2, #31
 800dda8:	d528      	bpl.n	800ddfc <__sflush_r+0xb8>
 800ddaa:	2200      	movs	r2, #0
 800ddac:	6062      	str	r2, [r4, #4]
 800ddae:	04d9      	lsls	r1, r3, #19
 800ddb0:	6922      	ldr	r2, [r4, #16]
 800ddb2:	6022      	str	r2, [r4, #0]
 800ddb4:	d504      	bpl.n	800ddc0 <__sflush_r+0x7c>
 800ddb6:	1c42      	adds	r2, r0, #1
 800ddb8:	d101      	bne.n	800ddbe <__sflush_r+0x7a>
 800ddba:	682b      	ldr	r3, [r5, #0]
 800ddbc:	b903      	cbnz	r3, 800ddc0 <__sflush_r+0x7c>
 800ddbe:	6560      	str	r0, [r4, #84]	; 0x54
 800ddc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc2:	602f      	str	r7, [r5, #0]
 800ddc4:	2900      	cmp	r1, #0
 800ddc6:	d0ca      	beq.n	800dd5e <__sflush_r+0x1a>
 800ddc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddcc:	4299      	cmp	r1, r3
 800ddce:	d002      	beq.n	800ddd6 <__sflush_r+0x92>
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	f7ff fd5d 	bl	800d890 <_free_r>
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	6360      	str	r0, [r4, #52]	; 0x34
 800ddda:	e7c1      	b.n	800dd60 <__sflush_r+0x1c>
 800dddc:	6a21      	ldr	r1, [r4, #32]
 800ddde:	2301      	movs	r3, #1
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b0      	blx	r6
 800dde4:	1c41      	adds	r1, r0, #1
 800dde6:	d1c7      	bne.n	800dd78 <__sflush_r+0x34>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0c4      	beq.n	800dd78 <__sflush_r+0x34>
 800ddee:	2b1d      	cmp	r3, #29
 800ddf0:	d001      	beq.n	800ddf6 <__sflush_r+0xb2>
 800ddf2:	2b16      	cmp	r3, #22
 800ddf4:	d101      	bne.n	800ddfa <__sflush_r+0xb6>
 800ddf6:	602f      	str	r7, [r5, #0]
 800ddf8:	e7b1      	b.n	800dd5e <__sflush_r+0x1a>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	e7ad      	b.n	800dd60 <__sflush_r+0x1c>
 800de04:	690f      	ldr	r7, [r1, #16]
 800de06:	2f00      	cmp	r7, #0
 800de08:	d0a9      	beq.n	800dd5e <__sflush_r+0x1a>
 800de0a:	0793      	lsls	r3, r2, #30
 800de0c:	680e      	ldr	r6, [r1, #0]
 800de0e:	bf08      	it	eq
 800de10:	694b      	ldreq	r3, [r1, #20]
 800de12:	600f      	str	r7, [r1, #0]
 800de14:	bf18      	it	ne
 800de16:	2300      	movne	r3, #0
 800de18:	eba6 0807 	sub.w	r8, r6, r7
 800de1c:	608b      	str	r3, [r1, #8]
 800de1e:	f1b8 0f00 	cmp.w	r8, #0
 800de22:	dd9c      	ble.n	800dd5e <__sflush_r+0x1a>
 800de24:	6a21      	ldr	r1, [r4, #32]
 800de26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de28:	4643      	mov	r3, r8
 800de2a:	463a      	mov	r2, r7
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b0      	blx	r6
 800de30:	2800      	cmp	r0, #0
 800de32:	dc06      	bgt.n	800de42 <__sflush_r+0xfe>
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3a:	81a3      	strh	r3, [r4, #12]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de40:	e78e      	b.n	800dd60 <__sflush_r+0x1c>
 800de42:	4407      	add	r7, r0
 800de44:	eba8 0800 	sub.w	r8, r8, r0
 800de48:	e7e9      	b.n	800de1e <__sflush_r+0xda>
 800de4a:	bf00      	nop
 800de4c:	20400001 	.word	0x20400001

0800de50 <_fflush_r>:
 800de50:	b538      	push	{r3, r4, r5, lr}
 800de52:	690b      	ldr	r3, [r1, #16]
 800de54:	4605      	mov	r5, r0
 800de56:	460c      	mov	r4, r1
 800de58:	b913      	cbnz	r3, 800de60 <_fflush_r+0x10>
 800de5a:	2500      	movs	r5, #0
 800de5c:	4628      	mov	r0, r5
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	b118      	cbz	r0, 800de6a <_fflush_r+0x1a>
 800de62:	6983      	ldr	r3, [r0, #24]
 800de64:	b90b      	cbnz	r3, 800de6a <_fflush_r+0x1a>
 800de66:	f000 f887 	bl	800df78 <__sinit>
 800de6a:	4b14      	ldr	r3, [pc, #80]	; (800debc <_fflush_r+0x6c>)
 800de6c:	429c      	cmp	r4, r3
 800de6e:	d11b      	bne.n	800dea8 <_fflush_r+0x58>
 800de70:	686c      	ldr	r4, [r5, #4]
 800de72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0ef      	beq.n	800de5a <_fflush_r+0xa>
 800de7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de7c:	07d0      	lsls	r0, r2, #31
 800de7e:	d404      	bmi.n	800de8a <_fflush_r+0x3a>
 800de80:	0599      	lsls	r1, r3, #22
 800de82:	d402      	bmi.n	800de8a <_fflush_r+0x3a>
 800de84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de86:	f000 f915 	bl	800e0b4 <__retarget_lock_acquire_recursive>
 800de8a:	4628      	mov	r0, r5
 800de8c:	4621      	mov	r1, r4
 800de8e:	f7ff ff59 	bl	800dd44 <__sflush_r>
 800de92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de94:	07da      	lsls	r2, r3, #31
 800de96:	4605      	mov	r5, r0
 800de98:	d4e0      	bmi.n	800de5c <_fflush_r+0xc>
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	059b      	lsls	r3, r3, #22
 800de9e:	d4dd      	bmi.n	800de5c <_fflush_r+0xc>
 800dea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dea2:	f000 f908 	bl	800e0b6 <__retarget_lock_release_recursive>
 800dea6:	e7d9      	b.n	800de5c <_fflush_r+0xc>
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <_fflush_r+0x70>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	d101      	bne.n	800deb2 <_fflush_r+0x62>
 800deae:	68ac      	ldr	r4, [r5, #8]
 800deb0:	e7df      	b.n	800de72 <_fflush_r+0x22>
 800deb2:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <_fflush_r+0x74>)
 800deb4:	429c      	cmp	r4, r3
 800deb6:	bf08      	it	eq
 800deb8:	68ec      	ldreq	r4, [r5, #12]
 800deba:	e7da      	b.n	800de72 <_fflush_r+0x22>
 800debc:	0800ef5c 	.word	0x0800ef5c
 800dec0:	0800ef7c 	.word	0x0800ef7c
 800dec4:	0800ef3c 	.word	0x0800ef3c

0800dec8 <std>:
 800dec8:	2300      	movs	r3, #0
 800deca:	b510      	push	{r4, lr}
 800decc:	4604      	mov	r4, r0
 800dece:	e9c0 3300 	strd	r3, r3, [r0]
 800ded2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ded6:	6083      	str	r3, [r0, #8]
 800ded8:	8181      	strh	r1, [r0, #12]
 800deda:	6643      	str	r3, [r0, #100]	; 0x64
 800dedc:	81c2      	strh	r2, [r0, #14]
 800dede:	6183      	str	r3, [r0, #24]
 800dee0:	4619      	mov	r1, r3
 800dee2:	2208      	movs	r2, #8
 800dee4:	305c      	adds	r0, #92	; 0x5c
 800dee6:	f7ff fccb 	bl	800d880 <memset>
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <std+0x38>)
 800deec:	6263      	str	r3, [r4, #36]	; 0x24
 800deee:	4b05      	ldr	r3, [pc, #20]	; (800df04 <std+0x3c>)
 800def0:	62a3      	str	r3, [r4, #40]	; 0x28
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <std+0x40>)
 800def4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800def6:	4b05      	ldr	r3, [pc, #20]	; (800df0c <std+0x44>)
 800def8:	6224      	str	r4, [r4, #32]
 800defa:	6323      	str	r3, [r4, #48]	; 0x30
 800defc:	bd10      	pop	{r4, pc}
 800defe:	bf00      	nop
 800df00:	0800e779 	.word	0x0800e779
 800df04:	0800e79b 	.word	0x0800e79b
 800df08:	0800e7d3 	.word	0x0800e7d3
 800df0c:	0800e7f7 	.word	0x0800e7f7

0800df10 <_cleanup_r>:
 800df10:	4901      	ldr	r1, [pc, #4]	; (800df18 <_cleanup_r+0x8>)
 800df12:	f000 b8af 	b.w	800e074 <_fwalk_reent>
 800df16:	bf00      	nop
 800df18:	0800de51 	.word	0x0800de51

0800df1c <__sfmoreglue>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	2268      	movs	r2, #104	; 0x68
 800df20:	1e4d      	subs	r5, r1, #1
 800df22:	4355      	muls	r5, r2
 800df24:	460e      	mov	r6, r1
 800df26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df2a:	f7ff fd1d 	bl	800d968 <_malloc_r>
 800df2e:	4604      	mov	r4, r0
 800df30:	b140      	cbz	r0, 800df44 <__sfmoreglue+0x28>
 800df32:	2100      	movs	r1, #0
 800df34:	e9c0 1600 	strd	r1, r6, [r0]
 800df38:	300c      	adds	r0, #12
 800df3a:	60a0      	str	r0, [r4, #8]
 800df3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df40:	f7ff fc9e 	bl	800d880 <memset>
 800df44:	4620      	mov	r0, r4
 800df46:	bd70      	pop	{r4, r5, r6, pc}

0800df48 <__sfp_lock_acquire>:
 800df48:	4801      	ldr	r0, [pc, #4]	; (800df50 <__sfp_lock_acquire+0x8>)
 800df4a:	f000 b8b3 	b.w	800e0b4 <__retarget_lock_acquire_recursive>
 800df4e:	bf00      	nop
 800df50:	20003aed 	.word	0x20003aed

0800df54 <__sfp_lock_release>:
 800df54:	4801      	ldr	r0, [pc, #4]	; (800df5c <__sfp_lock_release+0x8>)
 800df56:	f000 b8ae 	b.w	800e0b6 <__retarget_lock_release_recursive>
 800df5a:	bf00      	nop
 800df5c:	20003aed 	.word	0x20003aed

0800df60 <__sinit_lock_acquire>:
 800df60:	4801      	ldr	r0, [pc, #4]	; (800df68 <__sinit_lock_acquire+0x8>)
 800df62:	f000 b8a7 	b.w	800e0b4 <__retarget_lock_acquire_recursive>
 800df66:	bf00      	nop
 800df68:	20003aee 	.word	0x20003aee

0800df6c <__sinit_lock_release>:
 800df6c:	4801      	ldr	r0, [pc, #4]	; (800df74 <__sinit_lock_release+0x8>)
 800df6e:	f000 b8a2 	b.w	800e0b6 <__retarget_lock_release_recursive>
 800df72:	bf00      	nop
 800df74:	20003aee 	.word	0x20003aee

0800df78 <__sinit>:
 800df78:	b510      	push	{r4, lr}
 800df7a:	4604      	mov	r4, r0
 800df7c:	f7ff fff0 	bl	800df60 <__sinit_lock_acquire>
 800df80:	69a3      	ldr	r3, [r4, #24]
 800df82:	b11b      	cbz	r3, 800df8c <__sinit+0x14>
 800df84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df88:	f7ff bff0 	b.w	800df6c <__sinit_lock_release>
 800df8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df90:	6523      	str	r3, [r4, #80]	; 0x50
 800df92:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <__sinit+0x68>)
 800df94:	4a13      	ldr	r2, [pc, #76]	; (800dfe4 <__sinit+0x6c>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	62a2      	str	r2, [r4, #40]	; 0x28
 800df9a:	42a3      	cmp	r3, r4
 800df9c:	bf04      	itt	eq
 800df9e:	2301      	moveq	r3, #1
 800dfa0:	61a3      	streq	r3, [r4, #24]
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 f820 	bl	800dfe8 <__sfp>
 800dfa8:	6060      	str	r0, [r4, #4]
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f000 f81c 	bl	800dfe8 <__sfp>
 800dfb0:	60a0      	str	r0, [r4, #8]
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f000 f818 	bl	800dfe8 <__sfp>
 800dfb8:	2200      	movs	r2, #0
 800dfba:	60e0      	str	r0, [r4, #12]
 800dfbc:	2104      	movs	r1, #4
 800dfbe:	6860      	ldr	r0, [r4, #4]
 800dfc0:	f7ff ff82 	bl	800dec8 <std>
 800dfc4:	68a0      	ldr	r0, [r4, #8]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	2109      	movs	r1, #9
 800dfca:	f7ff ff7d 	bl	800dec8 <std>
 800dfce:	68e0      	ldr	r0, [r4, #12]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	2112      	movs	r1, #18
 800dfd4:	f7ff ff78 	bl	800dec8 <std>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	61a3      	str	r3, [r4, #24]
 800dfdc:	e7d2      	b.n	800df84 <__sinit+0xc>
 800dfde:	bf00      	nop
 800dfe0:	0800ee34 	.word	0x0800ee34
 800dfe4:	0800df11 	.word	0x0800df11

0800dfe8 <__sfp>:
 800dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfea:	4607      	mov	r7, r0
 800dfec:	f7ff ffac 	bl	800df48 <__sfp_lock_acquire>
 800dff0:	4b1e      	ldr	r3, [pc, #120]	; (800e06c <__sfp+0x84>)
 800dff2:	681e      	ldr	r6, [r3, #0]
 800dff4:	69b3      	ldr	r3, [r6, #24]
 800dff6:	b913      	cbnz	r3, 800dffe <__sfp+0x16>
 800dff8:	4630      	mov	r0, r6
 800dffa:	f7ff ffbd 	bl	800df78 <__sinit>
 800dffe:	3648      	adds	r6, #72	; 0x48
 800e000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e004:	3b01      	subs	r3, #1
 800e006:	d503      	bpl.n	800e010 <__sfp+0x28>
 800e008:	6833      	ldr	r3, [r6, #0]
 800e00a:	b30b      	cbz	r3, 800e050 <__sfp+0x68>
 800e00c:	6836      	ldr	r6, [r6, #0]
 800e00e:	e7f7      	b.n	800e000 <__sfp+0x18>
 800e010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e014:	b9d5      	cbnz	r5, 800e04c <__sfp+0x64>
 800e016:	4b16      	ldr	r3, [pc, #88]	; (800e070 <__sfp+0x88>)
 800e018:	60e3      	str	r3, [r4, #12]
 800e01a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e01e:	6665      	str	r5, [r4, #100]	; 0x64
 800e020:	f000 f847 	bl	800e0b2 <__retarget_lock_init_recursive>
 800e024:	f7ff ff96 	bl	800df54 <__sfp_lock_release>
 800e028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e02c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e030:	6025      	str	r5, [r4, #0]
 800e032:	61a5      	str	r5, [r4, #24]
 800e034:	2208      	movs	r2, #8
 800e036:	4629      	mov	r1, r5
 800e038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e03c:	f7ff fc20 	bl	800d880 <memset>
 800e040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e048:	4620      	mov	r0, r4
 800e04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e04c:	3468      	adds	r4, #104	; 0x68
 800e04e:	e7d9      	b.n	800e004 <__sfp+0x1c>
 800e050:	2104      	movs	r1, #4
 800e052:	4638      	mov	r0, r7
 800e054:	f7ff ff62 	bl	800df1c <__sfmoreglue>
 800e058:	4604      	mov	r4, r0
 800e05a:	6030      	str	r0, [r6, #0]
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d1d5      	bne.n	800e00c <__sfp+0x24>
 800e060:	f7ff ff78 	bl	800df54 <__sfp_lock_release>
 800e064:	230c      	movs	r3, #12
 800e066:	603b      	str	r3, [r7, #0]
 800e068:	e7ee      	b.n	800e048 <__sfp+0x60>
 800e06a:	bf00      	nop
 800e06c:	0800ee34 	.word	0x0800ee34
 800e070:	ffff0001 	.word	0xffff0001

0800e074 <_fwalk_reent>:
 800e074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e078:	4606      	mov	r6, r0
 800e07a:	4688      	mov	r8, r1
 800e07c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e080:	2700      	movs	r7, #0
 800e082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e086:	f1b9 0901 	subs.w	r9, r9, #1
 800e08a:	d505      	bpl.n	800e098 <_fwalk_reent+0x24>
 800e08c:	6824      	ldr	r4, [r4, #0]
 800e08e:	2c00      	cmp	r4, #0
 800e090:	d1f7      	bne.n	800e082 <_fwalk_reent+0xe>
 800e092:	4638      	mov	r0, r7
 800e094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e098:	89ab      	ldrh	r3, [r5, #12]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d907      	bls.n	800e0ae <_fwalk_reent+0x3a>
 800e09e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	d003      	beq.n	800e0ae <_fwalk_reent+0x3a>
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	47c0      	blx	r8
 800e0ac:	4307      	orrs	r7, r0
 800e0ae:	3568      	adds	r5, #104	; 0x68
 800e0b0:	e7e9      	b.n	800e086 <_fwalk_reent+0x12>

0800e0b2 <__retarget_lock_init_recursive>:
 800e0b2:	4770      	bx	lr

0800e0b4 <__retarget_lock_acquire_recursive>:
 800e0b4:	4770      	bx	lr

0800e0b6 <__retarget_lock_release_recursive>:
 800e0b6:	4770      	bx	lr

0800e0b8 <__swhatbuf_r>:
 800e0b8:	b570      	push	{r4, r5, r6, lr}
 800e0ba:	460e      	mov	r6, r1
 800e0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c0:	2900      	cmp	r1, #0
 800e0c2:	b096      	sub	sp, #88	; 0x58
 800e0c4:	4614      	mov	r4, r2
 800e0c6:	461d      	mov	r5, r3
 800e0c8:	da08      	bge.n	800e0dc <__swhatbuf_r+0x24>
 800e0ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	602a      	str	r2, [r5, #0]
 800e0d2:	061a      	lsls	r2, r3, #24
 800e0d4:	d410      	bmi.n	800e0f8 <__swhatbuf_r+0x40>
 800e0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0da:	e00e      	b.n	800e0fa <__swhatbuf_r+0x42>
 800e0dc:	466a      	mov	r2, sp
 800e0de:	f000 fc71 	bl	800e9c4 <_fstat_r>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	dbf1      	blt.n	800e0ca <__swhatbuf_r+0x12>
 800e0e6:	9a01      	ldr	r2, [sp, #4]
 800e0e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0f0:	425a      	negs	r2, r3
 800e0f2:	415a      	adcs	r2, r3
 800e0f4:	602a      	str	r2, [r5, #0]
 800e0f6:	e7ee      	b.n	800e0d6 <__swhatbuf_r+0x1e>
 800e0f8:	2340      	movs	r3, #64	; 0x40
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	b016      	add	sp, #88	; 0x58
 800e100:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e104 <__smakebuf_r>:
 800e104:	898b      	ldrh	r3, [r1, #12]
 800e106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e108:	079d      	lsls	r5, r3, #30
 800e10a:	4606      	mov	r6, r0
 800e10c:	460c      	mov	r4, r1
 800e10e:	d507      	bpl.n	800e120 <__smakebuf_r+0x1c>
 800e110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e114:	6023      	str	r3, [r4, #0]
 800e116:	6123      	str	r3, [r4, #16]
 800e118:	2301      	movs	r3, #1
 800e11a:	6163      	str	r3, [r4, #20]
 800e11c:	b002      	add	sp, #8
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	ab01      	add	r3, sp, #4
 800e122:	466a      	mov	r2, sp
 800e124:	f7ff ffc8 	bl	800e0b8 <__swhatbuf_r>
 800e128:	9900      	ldr	r1, [sp, #0]
 800e12a:	4605      	mov	r5, r0
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7ff fc1b 	bl	800d968 <_malloc_r>
 800e132:	b948      	cbnz	r0, 800e148 <__smakebuf_r+0x44>
 800e134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e138:	059a      	lsls	r2, r3, #22
 800e13a:	d4ef      	bmi.n	800e11c <__smakebuf_r+0x18>
 800e13c:	f023 0303 	bic.w	r3, r3, #3
 800e140:	f043 0302 	orr.w	r3, r3, #2
 800e144:	81a3      	strh	r3, [r4, #12]
 800e146:	e7e3      	b.n	800e110 <__smakebuf_r+0xc>
 800e148:	4b0d      	ldr	r3, [pc, #52]	; (800e180 <__smakebuf_r+0x7c>)
 800e14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e14c:	89a3      	ldrh	r3, [r4, #12]
 800e14e:	6020      	str	r0, [r4, #0]
 800e150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	9b00      	ldr	r3, [sp, #0]
 800e158:	6163      	str	r3, [r4, #20]
 800e15a:	9b01      	ldr	r3, [sp, #4]
 800e15c:	6120      	str	r0, [r4, #16]
 800e15e:	b15b      	cbz	r3, 800e178 <__smakebuf_r+0x74>
 800e160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e164:	4630      	mov	r0, r6
 800e166:	f000 fc3f 	bl	800e9e8 <_isatty_r>
 800e16a:	b128      	cbz	r0, 800e178 <__smakebuf_r+0x74>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f023 0303 	bic.w	r3, r3, #3
 800e172:	f043 0301 	orr.w	r3, r3, #1
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	89a0      	ldrh	r0, [r4, #12]
 800e17a:	4305      	orrs	r5, r0
 800e17c:	81a5      	strh	r5, [r4, #12]
 800e17e:	e7cd      	b.n	800e11c <__smakebuf_r+0x18>
 800e180:	0800df11 	.word	0x0800df11

0800e184 <__malloc_lock>:
 800e184:	4801      	ldr	r0, [pc, #4]	; (800e18c <__malloc_lock+0x8>)
 800e186:	f7ff bf95 	b.w	800e0b4 <__retarget_lock_acquire_recursive>
 800e18a:	bf00      	nop
 800e18c:	20003aec 	.word	0x20003aec

0800e190 <__malloc_unlock>:
 800e190:	4801      	ldr	r0, [pc, #4]	; (800e198 <__malloc_unlock+0x8>)
 800e192:	f7ff bf90 	b.w	800e0b6 <__retarget_lock_release_recursive>
 800e196:	bf00      	nop
 800e198:	20003aec 	.word	0x20003aec

0800e19c <__sfputc_r>:
 800e19c:	6893      	ldr	r3, [r2, #8]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	b410      	push	{r4}
 800e1a4:	6093      	str	r3, [r2, #8]
 800e1a6:	da08      	bge.n	800e1ba <__sfputc_r+0x1e>
 800e1a8:	6994      	ldr	r4, [r2, #24]
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	db01      	blt.n	800e1b2 <__sfputc_r+0x16>
 800e1ae:	290a      	cmp	r1, #10
 800e1b0:	d103      	bne.n	800e1ba <__sfputc_r+0x1e>
 800e1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1b6:	f000 bb23 	b.w	800e800 <__swbuf_r>
 800e1ba:	6813      	ldr	r3, [r2, #0]
 800e1bc:	1c58      	adds	r0, r3, #1
 800e1be:	6010      	str	r0, [r2, #0]
 800e1c0:	7019      	strb	r1, [r3, #0]
 800e1c2:	4608      	mov	r0, r1
 800e1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <__sfputs_r>:
 800e1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	460f      	mov	r7, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	18d5      	adds	r5, r2, r3
 800e1d4:	42ac      	cmp	r4, r5
 800e1d6:	d101      	bne.n	800e1dc <__sfputs_r+0x12>
 800e1d8:	2000      	movs	r0, #0
 800e1da:	e007      	b.n	800e1ec <__sfputs_r+0x22>
 800e1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e0:	463a      	mov	r2, r7
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffda 	bl	800e19c <__sfputc_r>
 800e1e8:	1c43      	adds	r3, r0, #1
 800e1ea:	d1f3      	bne.n	800e1d4 <__sfputs_r+0xa>
 800e1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1f0 <_vfiprintf_r>:
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	b09d      	sub	sp, #116	; 0x74
 800e1f8:	4614      	mov	r4, r2
 800e1fa:	4698      	mov	r8, r3
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	b118      	cbz	r0, 800e208 <_vfiprintf_r+0x18>
 800e200:	6983      	ldr	r3, [r0, #24]
 800e202:	b90b      	cbnz	r3, 800e208 <_vfiprintf_r+0x18>
 800e204:	f7ff feb8 	bl	800df78 <__sinit>
 800e208:	4b89      	ldr	r3, [pc, #548]	; (800e430 <_vfiprintf_r+0x240>)
 800e20a:	429d      	cmp	r5, r3
 800e20c:	d11b      	bne.n	800e246 <_vfiprintf_r+0x56>
 800e20e:	6875      	ldr	r5, [r6, #4]
 800e210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e212:	07d9      	lsls	r1, r3, #31
 800e214:	d405      	bmi.n	800e222 <_vfiprintf_r+0x32>
 800e216:	89ab      	ldrh	r3, [r5, #12]
 800e218:	059a      	lsls	r2, r3, #22
 800e21a:	d402      	bmi.n	800e222 <_vfiprintf_r+0x32>
 800e21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e21e:	f7ff ff49 	bl	800e0b4 <__retarget_lock_acquire_recursive>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	071b      	lsls	r3, r3, #28
 800e226:	d501      	bpl.n	800e22c <_vfiprintf_r+0x3c>
 800e228:	692b      	ldr	r3, [r5, #16]
 800e22a:	b9eb      	cbnz	r3, 800e268 <_vfiprintf_r+0x78>
 800e22c:	4629      	mov	r1, r5
 800e22e:	4630      	mov	r0, r6
 800e230:	f000 fb4a 	bl	800e8c8 <__swsetup_r>
 800e234:	b1c0      	cbz	r0, 800e268 <_vfiprintf_r+0x78>
 800e236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e238:	07dc      	lsls	r4, r3, #31
 800e23a:	d50e      	bpl.n	800e25a <_vfiprintf_r+0x6a>
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e240:	b01d      	add	sp, #116	; 0x74
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	4b7b      	ldr	r3, [pc, #492]	; (800e434 <_vfiprintf_r+0x244>)
 800e248:	429d      	cmp	r5, r3
 800e24a:	d101      	bne.n	800e250 <_vfiprintf_r+0x60>
 800e24c:	68b5      	ldr	r5, [r6, #8]
 800e24e:	e7df      	b.n	800e210 <_vfiprintf_r+0x20>
 800e250:	4b79      	ldr	r3, [pc, #484]	; (800e438 <_vfiprintf_r+0x248>)
 800e252:	429d      	cmp	r5, r3
 800e254:	bf08      	it	eq
 800e256:	68f5      	ldreq	r5, [r6, #12]
 800e258:	e7da      	b.n	800e210 <_vfiprintf_r+0x20>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	0598      	lsls	r0, r3, #22
 800e25e:	d4ed      	bmi.n	800e23c <_vfiprintf_r+0x4c>
 800e260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e262:	f7ff ff28 	bl	800e0b6 <__retarget_lock_release_recursive>
 800e266:	e7e9      	b.n	800e23c <_vfiprintf_r+0x4c>
 800e268:	2300      	movs	r3, #0
 800e26a:	9309      	str	r3, [sp, #36]	; 0x24
 800e26c:	2320      	movs	r3, #32
 800e26e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e272:	f8cd 800c 	str.w	r8, [sp, #12]
 800e276:	2330      	movs	r3, #48	; 0x30
 800e278:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e43c <_vfiprintf_r+0x24c>
 800e27c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e280:	f04f 0901 	mov.w	r9, #1
 800e284:	4623      	mov	r3, r4
 800e286:	469a      	mov	sl, r3
 800e288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e28c:	b10a      	cbz	r2, 800e292 <_vfiprintf_r+0xa2>
 800e28e:	2a25      	cmp	r2, #37	; 0x25
 800e290:	d1f9      	bne.n	800e286 <_vfiprintf_r+0x96>
 800e292:	ebba 0b04 	subs.w	fp, sl, r4
 800e296:	d00b      	beq.n	800e2b0 <_vfiprintf_r+0xc0>
 800e298:	465b      	mov	r3, fp
 800e29a:	4622      	mov	r2, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f7ff ff93 	bl	800e1ca <__sfputs_r>
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	f000 80aa 	beq.w	800e3fe <_vfiprintf_r+0x20e>
 800e2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ac:	445a      	add	r2, fp
 800e2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80a2 	beq.w	800e3fe <_vfiprintf_r+0x20e>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2c4:	f10a 0a01 	add.w	sl, sl, #1
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	9307      	str	r3, [sp, #28]
 800e2cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2d2:	4654      	mov	r4, sl
 800e2d4:	2205      	movs	r2, #5
 800e2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2da:	4858      	ldr	r0, [pc, #352]	; (800e43c <_vfiprintf_r+0x24c>)
 800e2dc:	f7f1 ff88 	bl	80001f0 <memchr>
 800e2e0:	9a04      	ldr	r2, [sp, #16]
 800e2e2:	b9d8      	cbnz	r0, 800e31c <_vfiprintf_r+0x12c>
 800e2e4:	06d1      	lsls	r1, r2, #27
 800e2e6:	bf44      	itt	mi
 800e2e8:	2320      	movmi	r3, #32
 800e2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ee:	0713      	lsls	r3, r2, #28
 800e2f0:	bf44      	itt	mi
 800e2f2:	232b      	movmi	r3, #43	; 0x2b
 800e2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2fe:	d015      	beq.n	800e32c <_vfiprintf_r+0x13c>
 800e300:	9a07      	ldr	r2, [sp, #28]
 800e302:	4654      	mov	r4, sl
 800e304:	2000      	movs	r0, #0
 800e306:	f04f 0c0a 	mov.w	ip, #10
 800e30a:	4621      	mov	r1, r4
 800e30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e310:	3b30      	subs	r3, #48	; 0x30
 800e312:	2b09      	cmp	r3, #9
 800e314:	d94e      	bls.n	800e3b4 <_vfiprintf_r+0x1c4>
 800e316:	b1b0      	cbz	r0, 800e346 <_vfiprintf_r+0x156>
 800e318:	9207      	str	r2, [sp, #28]
 800e31a:	e014      	b.n	800e346 <_vfiprintf_r+0x156>
 800e31c:	eba0 0308 	sub.w	r3, r0, r8
 800e320:	fa09 f303 	lsl.w	r3, r9, r3
 800e324:	4313      	orrs	r3, r2
 800e326:	9304      	str	r3, [sp, #16]
 800e328:	46a2      	mov	sl, r4
 800e32a:	e7d2      	b.n	800e2d2 <_vfiprintf_r+0xe2>
 800e32c:	9b03      	ldr	r3, [sp, #12]
 800e32e:	1d19      	adds	r1, r3, #4
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	9103      	str	r1, [sp, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	bfbb      	ittet	lt
 800e338:	425b      	neglt	r3, r3
 800e33a:	f042 0202 	orrlt.w	r2, r2, #2
 800e33e:	9307      	strge	r3, [sp, #28]
 800e340:	9307      	strlt	r3, [sp, #28]
 800e342:	bfb8      	it	lt
 800e344:	9204      	strlt	r2, [sp, #16]
 800e346:	7823      	ldrb	r3, [r4, #0]
 800e348:	2b2e      	cmp	r3, #46	; 0x2e
 800e34a:	d10c      	bne.n	800e366 <_vfiprintf_r+0x176>
 800e34c:	7863      	ldrb	r3, [r4, #1]
 800e34e:	2b2a      	cmp	r3, #42	; 0x2a
 800e350:	d135      	bne.n	800e3be <_vfiprintf_r+0x1ce>
 800e352:	9b03      	ldr	r3, [sp, #12]
 800e354:	1d1a      	adds	r2, r3, #4
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	9203      	str	r2, [sp, #12]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bfb8      	it	lt
 800e35e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e362:	3402      	adds	r4, #2
 800e364:	9305      	str	r3, [sp, #20]
 800e366:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e44c <_vfiprintf_r+0x25c>
 800e36a:	7821      	ldrb	r1, [r4, #0]
 800e36c:	2203      	movs	r2, #3
 800e36e:	4650      	mov	r0, sl
 800e370:	f7f1 ff3e 	bl	80001f0 <memchr>
 800e374:	b140      	cbz	r0, 800e388 <_vfiprintf_r+0x198>
 800e376:	2340      	movs	r3, #64	; 0x40
 800e378:	eba0 000a 	sub.w	r0, r0, sl
 800e37c:	fa03 f000 	lsl.w	r0, r3, r0
 800e380:	9b04      	ldr	r3, [sp, #16]
 800e382:	4303      	orrs	r3, r0
 800e384:	3401      	adds	r4, #1
 800e386:	9304      	str	r3, [sp, #16]
 800e388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38c:	482c      	ldr	r0, [pc, #176]	; (800e440 <_vfiprintf_r+0x250>)
 800e38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e392:	2206      	movs	r2, #6
 800e394:	f7f1 ff2c 	bl	80001f0 <memchr>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d03f      	beq.n	800e41c <_vfiprintf_r+0x22c>
 800e39c:	4b29      	ldr	r3, [pc, #164]	; (800e444 <_vfiprintf_r+0x254>)
 800e39e:	bb1b      	cbnz	r3, 800e3e8 <_vfiprintf_r+0x1f8>
 800e3a0:	9b03      	ldr	r3, [sp, #12]
 800e3a2:	3307      	adds	r3, #7
 800e3a4:	f023 0307 	bic.w	r3, r3, #7
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	9303      	str	r3, [sp, #12]
 800e3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ae:	443b      	add	r3, r7
 800e3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b2:	e767      	b.n	800e284 <_vfiprintf_r+0x94>
 800e3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	e7a5      	b.n	800e30a <_vfiprintf_r+0x11a>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	3401      	adds	r4, #1
 800e3c2:	9305      	str	r3, [sp, #20]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	f04f 0c0a 	mov.w	ip, #10
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d0:	3a30      	subs	r2, #48	; 0x30
 800e3d2:	2a09      	cmp	r2, #9
 800e3d4:	d903      	bls.n	800e3de <_vfiprintf_r+0x1ee>
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d0c5      	beq.n	800e366 <_vfiprintf_r+0x176>
 800e3da:	9105      	str	r1, [sp, #20]
 800e3dc:	e7c3      	b.n	800e366 <_vfiprintf_r+0x176>
 800e3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e7f0      	b.n	800e3ca <_vfiprintf_r+0x1da>
 800e3e8:	ab03      	add	r3, sp, #12
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	4b16      	ldr	r3, [pc, #88]	; (800e448 <_vfiprintf_r+0x258>)
 800e3f0:	a904      	add	r1, sp, #16
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	1c78      	adds	r0, r7, #1
 800e3fc:	d1d6      	bne.n	800e3ac <_vfiprintf_r+0x1bc>
 800e3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e400:	07d9      	lsls	r1, r3, #31
 800e402:	d405      	bmi.n	800e410 <_vfiprintf_r+0x220>
 800e404:	89ab      	ldrh	r3, [r5, #12]
 800e406:	059a      	lsls	r2, r3, #22
 800e408:	d402      	bmi.n	800e410 <_vfiprintf_r+0x220>
 800e40a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e40c:	f7ff fe53 	bl	800e0b6 <__retarget_lock_release_recursive>
 800e410:	89ab      	ldrh	r3, [r5, #12]
 800e412:	065b      	lsls	r3, r3, #25
 800e414:	f53f af12 	bmi.w	800e23c <_vfiprintf_r+0x4c>
 800e418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e41a:	e711      	b.n	800e240 <_vfiprintf_r+0x50>
 800e41c:	ab03      	add	r3, sp, #12
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	462a      	mov	r2, r5
 800e422:	4b09      	ldr	r3, [pc, #36]	; (800e448 <_vfiprintf_r+0x258>)
 800e424:	a904      	add	r1, sp, #16
 800e426:	4630      	mov	r0, r6
 800e428:	f000 f880 	bl	800e52c <_printf_i>
 800e42c:	e7e4      	b.n	800e3f8 <_vfiprintf_r+0x208>
 800e42e:	bf00      	nop
 800e430:	0800ef5c 	.word	0x0800ef5c
 800e434:	0800ef7c 	.word	0x0800ef7c
 800e438:	0800ef3c 	.word	0x0800ef3c
 800e43c:	0800ef9c 	.word	0x0800ef9c
 800e440:	0800efa6 	.word	0x0800efa6
 800e444:	00000000 	.word	0x00000000
 800e448:	0800e1cb 	.word	0x0800e1cb
 800e44c:	0800efa2 	.word	0x0800efa2

0800e450 <_printf_common>:
 800e450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e454:	4616      	mov	r6, r2
 800e456:	4699      	mov	r9, r3
 800e458:	688a      	ldr	r2, [r1, #8]
 800e45a:	690b      	ldr	r3, [r1, #16]
 800e45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e460:	4293      	cmp	r3, r2
 800e462:	bfb8      	it	lt
 800e464:	4613      	movlt	r3, r2
 800e466:	6033      	str	r3, [r6, #0]
 800e468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e46c:	4607      	mov	r7, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	b10a      	cbz	r2, 800e476 <_printf_common+0x26>
 800e472:	3301      	adds	r3, #1
 800e474:	6033      	str	r3, [r6, #0]
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	0699      	lsls	r1, r3, #26
 800e47a:	bf42      	ittt	mi
 800e47c:	6833      	ldrmi	r3, [r6, #0]
 800e47e:	3302      	addmi	r3, #2
 800e480:	6033      	strmi	r3, [r6, #0]
 800e482:	6825      	ldr	r5, [r4, #0]
 800e484:	f015 0506 	ands.w	r5, r5, #6
 800e488:	d106      	bne.n	800e498 <_printf_common+0x48>
 800e48a:	f104 0a19 	add.w	sl, r4, #25
 800e48e:	68e3      	ldr	r3, [r4, #12]
 800e490:	6832      	ldr	r2, [r6, #0]
 800e492:	1a9b      	subs	r3, r3, r2
 800e494:	42ab      	cmp	r3, r5
 800e496:	dc26      	bgt.n	800e4e6 <_printf_common+0x96>
 800e498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e49c:	1e13      	subs	r3, r2, #0
 800e49e:	6822      	ldr	r2, [r4, #0]
 800e4a0:	bf18      	it	ne
 800e4a2:	2301      	movne	r3, #1
 800e4a4:	0692      	lsls	r2, r2, #26
 800e4a6:	d42b      	bmi.n	800e500 <_printf_common+0xb0>
 800e4a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	47c0      	blx	r8
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d01e      	beq.n	800e4f4 <_printf_common+0xa4>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	68e5      	ldr	r5, [r4, #12]
 800e4ba:	6832      	ldr	r2, [r6, #0]
 800e4bc:	f003 0306 	and.w	r3, r3, #6
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	bf08      	it	eq
 800e4c4:	1aad      	subeq	r5, r5, r2
 800e4c6:	68a3      	ldr	r3, [r4, #8]
 800e4c8:	6922      	ldr	r2, [r4, #16]
 800e4ca:	bf0c      	ite	eq
 800e4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4d0:	2500      	movne	r5, #0
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	bfc4      	itt	gt
 800e4d6:	1a9b      	subgt	r3, r3, r2
 800e4d8:	18ed      	addgt	r5, r5, r3
 800e4da:	2600      	movs	r6, #0
 800e4dc:	341a      	adds	r4, #26
 800e4de:	42b5      	cmp	r5, r6
 800e4e0:	d11a      	bne.n	800e518 <_printf_common+0xc8>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e008      	b.n	800e4f8 <_printf_common+0xa8>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	4652      	mov	r2, sl
 800e4ea:	4649      	mov	r1, r9
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	47c0      	blx	r8
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d103      	bne.n	800e4fc <_printf_common+0xac>
 800e4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4fc:	3501      	adds	r5, #1
 800e4fe:	e7c6      	b.n	800e48e <_printf_common+0x3e>
 800e500:	18e1      	adds	r1, r4, r3
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	2030      	movs	r0, #48	; 0x30
 800e506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e50a:	4422      	add	r2, r4
 800e50c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e514:	3302      	adds	r3, #2
 800e516:	e7c7      	b.n	800e4a8 <_printf_common+0x58>
 800e518:	2301      	movs	r3, #1
 800e51a:	4622      	mov	r2, r4
 800e51c:	4649      	mov	r1, r9
 800e51e:	4638      	mov	r0, r7
 800e520:	47c0      	blx	r8
 800e522:	3001      	adds	r0, #1
 800e524:	d0e6      	beq.n	800e4f4 <_printf_common+0xa4>
 800e526:	3601      	adds	r6, #1
 800e528:	e7d9      	b.n	800e4de <_printf_common+0x8e>
	...

0800e52c <_printf_i>:
 800e52c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e530:	7e0f      	ldrb	r7, [r1, #24]
 800e532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e534:	2f78      	cmp	r7, #120	; 0x78
 800e536:	4691      	mov	r9, r2
 800e538:	4680      	mov	r8, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	469a      	mov	sl, r3
 800e53e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e542:	d807      	bhi.n	800e554 <_printf_i+0x28>
 800e544:	2f62      	cmp	r7, #98	; 0x62
 800e546:	d80a      	bhi.n	800e55e <_printf_i+0x32>
 800e548:	2f00      	cmp	r7, #0
 800e54a:	f000 80d8 	beq.w	800e6fe <_printf_i+0x1d2>
 800e54e:	2f58      	cmp	r7, #88	; 0x58
 800e550:	f000 80a3 	beq.w	800e69a <_printf_i+0x16e>
 800e554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e55c:	e03a      	b.n	800e5d4 <_printf_i+0xa8>
 800e55e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e562:	2b15      	cmp	r3, #21
 800e564:	d8f6      	bhi.n	800e554 <_printf_i+0x28>
 800e566:	a101      	add	r1, pc, #4	; (adr r1, 800e56c <_printf_i+0x40>)
 800e568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e56c:	0800e5c5 	.word	0x0800e5c5
 800e570:	0800e5d9 	.word	0x0800e5d9
 800e574:	0800e555 	.word	0x0800e555
 800e578:	0800e555 	.word	0x0800e555
 800e57c:	0800e555 	.word	0x0800e555
 800e580:	0800e555 	.word	0x0800e555
 800e584:	0800e5d9 	.word	0x0800e5d9
 800e588:	0800e555 	.word	0x0800e555
 800e58c:	0800e555 	.word	0x0800e555
 800e590:	0800e555 	.word	0x0800e555
 800e594:	0800e555 	.word	0x0800e555
 800e598:	0800e6e5 	.word	0x0800e6e5
 800e59c:	0800e609 	.word	0x0800e609
 800e5a0:	0800e6c7 	.word	0x0800e6c7
 800e5a4:	0800e555 	.word	0x0800e555
 800e5a8:	0800e555 	.word	0x0800e555
 800e5ac:	0800e707 	.word	0x0800e707
 800e5b0:	0800e555 	.word	0x0800e555
 800e5b4:	0800e609 	.word	0x0800e609
 800e5b8:	0800e555 	.word	0x0800e555
 800e5bc:	0800e555 	.word	0x0800e555
 800e5c0:	0800e6cf 	.word	0x0800e6cf
 800e5c4:	682b      	ldr	r3, [r5, #0]
 800e5c6:	1d1a      	adds	r2, r3, #4
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	602a      	str	r2, [r5, #0]
 800e5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e0a3      	b.n	800e720 <_printf_i+0x1f4>
 800e5d8:	6820      	ldr	r0, [r4, #0]
 800e5da:	6829      	ldr	r1, [r5, #0]
 800e5dc:	0606      	lsls	r6, r0, #24
 800e5de:	f101 0304 	add.w	r3, r1, #4
 800e5e2:	d50a      	bpl.n	800e5fa <_printf_i+0xce>
 800e5e4:	680e      	ldr	r6, [r1, #0]
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	2e00      	cmp	r6, #0
 800e5ea:	da03      	bge.n	800e5f4 <_printf_i+0xc8>
 800e5ec:	232d      	movs	r3, #45	; 0x2d
 800e5ee:	4276      	negs	r6, r6
 800e5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5f4:	485e      	ldr	r0, [pc, #376]	; (800e770 <_printf_i+0x244>)
 800e5f6:	230a      	movs	r3, #10
 800e5f8:	e019      	b.n	800e62e <_printf_i+0x102>
 800e5fa:	680e      	ldr	r6, [r1, #0]
 800e5fc:	602b      	str	r3, [r5, #0]
 800e5fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e602:	bf18      	it	ne
 800e604:	b236      	sxthne	r6, r6
 800e606:	e7ef      	b.n	800e5e8 <_printf_i+0xbc>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	6820      	ldr	r0, [r4, #0]
 800e60c:	1d19      	adds	r1, r3, #4
 800e60e:	6029      	str	r1, [r5, #0]
 800e610:	0601      	lsls	r1, r0, #24
 800e612:	d501      	bpl.n	800e618 <_printf_i+0xec>
 800e614:	681e      	ldr	r6, [r3, #0]
 800e616:	e002      	b.n	800e61e <_printf_i+0xf2>
 800e618:	0646      	lsls	r6, r0, #25
 800e61a:	d5fb      	bpl.n	800e614 <_printf_i+0xe8>
 800e61c:	881e      	ldrh	r6, [r3, #0]
 800e61e:	4854      	ldr	r0, [pc, #336]	; (800e770 <_printf_i+0x244>)
 800e620:	2f6f      	cmp	r7, #111	; 0x6f
 800e622:	bf0c      	ite	eq
 800e624:	2308      	moveq	r3, #8
 800e626:	230a      	movne	r3, #10
 800e628:	2100      	movs	r1, #0
 800e62a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e62e:	6865      	ldr	r5, [r4, #4]
 800e630:	60a5      	str	r5, [r4, #8]
 800e632:	2d00      	cmp	r5, #0
 800e634:	bfa2      	ittt	ge
 800e636:	6821      	ldrge	r1, [r4, #0]
 800e638:	f021 0104 	bicge.w	r1, r1, #4
 800e63c:	6021      	strge	r1, [r4, #0]
 800e63e:	b90e      	cbnz	r6, 800e644 <_printf_i+0x118>
 800e640:	2d00      	cmp	r5, #0
 800e642:	d04d      	beq.n	800e6e0 <_printf_i+0x1b4>
 800e644:	4615      	mov	r5, r2
 800e646:	fbb6 f1f3 	udiv	r1, r6, r3
 800e64a:	fb03 6711 	mls	r7, r3, r1, r6
 800e64e:	5dc7      	ldrb	r7, [r0, r7]
 800e650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e654:	4637      	mov	r7, r6
 800e656:	42bb      	cmp	r3, r7
 800e658:	460e      	mov	r6, r1
 800e65a:	d9f4      	bls.n	800e646 <_printf_i+0x11a>
 800e65c:	2b08      	cmp	r3, #8
 800e65e:	d10b      	bne.n	800e678 <_printf_i+0x14c>
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	07de      	lsls	r6, r3, #31
 800e664:	d508      	bpl.n	800e678 <_printf_i+0x14c>
 800e666:	6923      	ldr	r3, [r4, #16]
 800e668:	6861      	ldr	r1, [r4, #4]
 800e66a:	4299      	cmp	r1, r3
 800e66c:	bfde      	ittt	le
 800e66e:	2330      	movle	r3, #48	; 0x30
 800e670:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e674:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e678:	1b52      	subs	r2, r2, r5
 800e67a:	6122      	str	r2, [r4, #16]
 800e67c:	f8cd a000 	str.w	sl, [sp]
 800e680:	464b      	mov	r3, r9
 800e682:	aa03      	add	r2, sp, #12
 800e684:	4621      	mov	r1, r4
 800e686:	4640      	mov	r0, r8
 800e688:	f7ff fee2 	bl	800e450 <_printf_common>
 800e68c:	3001      	adds	r0, #1
 800e68e:	d14c      	bne.n	800e72a <_printf_i+0x1fe>
 800e690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e694:	b004      	add	sp, #16
 800e696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69a:	4835      	ldr	r0, [pc, #212]	; (800e770 <_printf_i+0x244>)
 800e69c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6a0:	6829      	ldr	r1, [r5, #0]
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6a8:	6029      	str	r1, [r5, #0]
 800e6aa:	061d      	lsls	r5, r3, #24
 800e6ac:	d514      	bpl.n	800e6d8 <_printf_i+0x1ac>
 800e6ae:	07df      	lsls	r7, r3, #31
 800e6b0:	bf44      	itt	mi
 800e6b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e6b6:	6023      	strmi	r3, [r4, #0]
 800e6b8:	b91e      	cbnz	r6, 800e6c2 <_printf_i+0x196>
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	f023 0320 	bic.w	r3, r3, #32
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	2310      	movs	r3, #16
 800e6c4:	e7b0      	b.n	800e628 <_printf_i+0xfc>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	f043 0320 	orr.w	r3, r3, #32
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	2378      	movs	r3, #120	; 0x78
 800e6d0:	4828      	ldr	r0, [pc, #160]	; (800e774 <_printf_i+0x248>)
 800e6d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6d6:	e7e3      	b.n	800e6a0 <_printf_i+0x174>
 800e6d8:	0659      	lsls	r1, r3, #25
 800e6da:	bf48      	it	mi
 800e6dc:	b2b6      	uxthmi	r6, r6
 800e6de:	e7e6      	b.n	800e6ae <_printf_i+0x182>
 800e6e0:	4615      	mov	r5, r2
 800e6e2:	e7bb      	b.n	800e65c <_printf_i+0x130>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	6826      	ldr	r6, [r4, #0]
 800e6e8:	6961      	ldr	r1, [r4, #20]
 800e6ea:	1d18      	adds	r0, r3, #4
 800e6ec:	6028      	str	r0, [r5, #0]
 800e6ee:	0635      	lsls	r5, r6, #24
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	d501      	bpl.n	800e6f8 <_printf_i+0x1cc>
 800e6f4:	6019      	str	r1, [r3, #0]
 800e6f6:	e002      	b.n	800e6fe <_printf_i+0x1d2>
 800e6f8:	0670      	lsls	r0, r6, #25
 800e6fa:	d5fb      	bpl.n	800e6f4 <_printf_i+0x1c8>
 800e6fc:	8019      	strh	r1, [r3, #0]
 800e6fe:	2300      	movs	r3, #0
 800e700:	6123      	str	r3, [r4, #16]
 800e702:	4615      	mov	r5, r2
 800e704:	e7ba      	b.n	800e67c <_printf_i+0x150>
 800e706:	682b      	ldr	r3, [r5, #0]
 800e708:	1d1a      	adds	r2, r3, #4
 800e70a:	602a      	str	r2, [r5, #0]
 800e70c:	681d      	ldr	r5, [r3, #0]
 800e70e:	6862      	ldr	r2, [r4, #4]
 800e710:	2100      	movs	r1, #0
 800e712:	4628      	mov	r0, r5
 800e714:	f7f1 fd6c 	bl	80001f0 <memchr>
 800e718:	b108      	cbz	r0, 800e71e <_printf_i+0x1f2>
 800e71a:	1b40      	subs	r0, r0, r5
 800e71c:	6060      	str	r0, [r4, #4]
 800e71e:	6863      	ldr	r3, [r4, #4]
 800e720:	6123      	str	r3, [r4, #16]
 800e722:	2300      	movs	r3, #0
 800e724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e728:	e7a8      	b.n	800e67c <_printf_i+0x150>
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	462a      	mov	r2, r5
 800e72e:	4649      	mov	r1, r9
 800e730:	4640      	mov	r0, r8
 800e732:	47d0      	blx	sl
 800e734:	3001      	adds	r0, #1
 800e736:	d0ab      	beq.n	800e690 <_printf_i+0x164>
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	079b      	lsls	r3, r3, #30
 800e73c:	d413      	bmi.n	800e766 <_printf_i+0x23a>
 800e73e:	68e0      	ldr	r0, [r4, #12]
 800e740:	9b03      	ldr	r3, [sp, #12]
 800e742:	4298      	cmp	r0, r3
 800e744:	bfb8      	it	lt
 800e746:	4618      	movlt	r0, r3
 800e748:	e7a4      	b.n	800e694 <_printf_i+0x168>
 800e74a:	2301      	movs	r3, #1
 800e74c:	4632      	mov	r2, r6
 800e74e:	4649      	mov	r1, r9
 800e750:	4640      	mov	r0, r8
 800e752:	47d0      	blx	sl
 800e754:	3001      	adds	r0, #1
 800e756:	d09b      	beq.n	800e690 <_printf_i+0x164>
 800e758:	3501      	adds	r5, #1
 800e75a:	68e3      	ldr	r3, [r4, #12]
 800e75c:	9903      	ldr	r1, [sp, #12]
 800e75e:	1a5b      	subs	r3, r3, r1
 800e760:	42ab      	cmp	r3, r5
 800e762:	dcf2      	bgt.n	800e74a <_printf_i+0x21e>
 800e764:	e7eb      	b.n	800e73e <_printf_i+0x212>
 800e766:	2500      	movs	r5, #0
 800e768:	f104 0619 	add.w	r6, r4, #25
 800e76c:	e7f5      	b.n	800e75a <_printf_i+0x22e>
 800e76e:	bf00      	nop
 800e770:	0800efad 	.word	0x0800efad
 800e774:	0800efbe 	.word	0x0800efbe

0800e778 <__sread>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	460c      	mov	r4, r1
 800e77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e780:	f000 f954 	bl	800ea2c <_read_r>
 800e784:	2800      	cmp	r0, #0
 800e786:	bfab      	itete	ge
 800e788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e78a:	89a3      	ldrhlt	r3, [r4, #12]
 800e78c:	181b      	addge	r3, r3, r0
 800e78e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e792:	bfac      	ite	ge
 800e794:	6563      	strge	r3, [r4, #84]	; 0x54
 800e796:	81a3      	strhlt	r3, [r4, #12]
 800e798:	bd10      	pop	{r4, pc}

0800e79a <__swrite>:
 800e79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e79e:	461f      	mov	r7, r3
 800e7a0:	898b      	ldrh	r3, [r1, #12]
 800e7a2:	05db      	lsls	r3, r3, #23
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	4616      	mov	r6, r2
 800e7aa:	d505      	bpl.n	800e7b8 <__swrite+0x1e>
 800e7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f000 f928 	bl	800ea08 <_lseek_r>
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7c2:	81a3      	strh	r3, [r4, #12]
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	f000 b869 	b.w	800e8a4 <_write_r>

0800e7d2 <__sseek>:
 800e7d2:	b510      	push	{r4, lr}
 800e7d4:	460c      	mov	r4, r1
 800e7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7da:	f000 f915 	bl	800ea08 <_lseek_r>
 800e7de:	1c43      	adds	r3, r0, #1
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	bf15      	itete	ne
 800e7e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7ee:	81a3      	strheq	r3, [r4, #12]
 800e7f0:	bf18      	it	ne
 800e7f2:	81a3      	strhne	r3, [r4, #12]
 800e7f4:	bd10      	pop	{r4, pc}

0800e7f6 <__sclose>:
 800e7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7fa:	f000 b8d3 	b.w	800e9a4 <_close_r>
	...

0800e800 <__swbuf_r>:
 800e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e802:	460e      	mov	r6, r1
 800e804:	4614      	mov	r4, r2
 800e806:	4605      	mov	r5, r0
 800e808:	b118      	cbz	r0, 800e812 <__swbuf_r+0x12>
 800e80a:	6983      	ldr	r3, [r0, #24]
 800e80c:	b90b      	cbnz	r3, 800e812 <__swbuf_r+0x12>
 800e80e:	f7ff fbb3 	bl	800df78 <__sinit>
 800e812:	4b21      	ldr	r3, [pc, #132]	; (800e898 <__swbuf_r+0x98>)
 800e814:	429c      	cmp	r4, r3
 800e816:	d12b      	bne.n	800e870 <__swbuf_r+0x70>
 800e818:	686c      	ldr	r4, [r5, #4]
 800e81a:	69a3      	ldr	r3, [r4, #24]
 800e81c:	60a3      	str	r3, [r4, #8]
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	071a      	lsls	r2, r3, #28
 800e822:	d52f      	bpl.n	800e884 <__swbuf_r+0x84>
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	b36b      	cbz	r3, 800e884 <__swbuf_r+0x84>
 800e828:	6923      	ldr	r3, [r4, #16]
 800e82a:	6820      	ldr	r0, [r4, #0]
 800e82c:	1ac0      	subs	r0, r0, r3
 800e82e:	6963      	ldr	r3, [r4, #20]
 800e830:	b2f6      	uxtb	r6, r6
 800e832:	4283      	cmp	r3, r0
 800e834:	4637      	mov	r7, r6
 800e836:	dc04      	bgt.n	800e842 <__swbuf_r+0x42>
 800e838:	4621      	mov	r1, r4
 800e83a:	4628      	mov	r0, r5
 800e83c:	f7ff fb08 	bl	800de50 <_fflush_r>
 800e840:	bb30      	cbnz	r0, 800e890 <__swbuf_r+0x90>
 800e842:	68a3      	ldr	r3, [r4, #8]
 800e844:	3b01      	subs	r3, #1
 800e846:	60a3      	str	r3, [r4, #8]
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	1c5a      	adds	r2, r3, #1
 800e84c:	6022      	str	r2, [r4, #0]
 800e84e:	701e      	strb	r6, [r3, #0]
 800e850:	6963      	ldr	r3, [r4, #20]
 800e852:	3001      	adds	r0, #1
 800e854:	4283      	cmp	r3, r0
 800e856:	d004      	beq.n	800e862 <__swbuf_r+0x62>
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	07db      	lsls	r3, r3, #31
 800e85c:	d506      	bpl.n	800e86c <__swbuf_r+0x6c>
 800e85e:	2e0a      	cmp	r6, #10
 800e860:	d104      	bne.n	800e86c <__swbuf_r+0x6c>
 800e862:	4621      	mov	r1, r4
 800e864:	4628      	mov	r0, r5
 800e866:	f7ff faf3 	bl	800de50 <_fflush_r>
 800e86a:	b988      	cbnz	r0, 800e890 <__swbuf_r+0x90>
 800e86c:	4638      	mov	r0, r7
 800e86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e870:	4b0a      	ldr	r3, [pc, #40]	; (800e89c <__swbuf_r+0x9c>)
 800e872:	429c      	cmp	r4, r3
 800e874:	d101      	bne.n	800e87a <__swbuf_r+0x7a>
 800e876:	68ac      	ldr	r4, [r5, #8]
 800e878:	e7cf      	b.n	800e81a <__swbuf_r+0x1a>
 800e87a:	4b09      	ldr	r3, [pc, #36]	; (800e8a0 <__swbuf_r+0xa0>)
 800e87c:	429c      	cmp	r4, r3
 800e87e:	bf08      	it	eq
 800e880:	68ec      	ldreq	r4, [r5, #12]
 800e882:	e7ca      	b.n	800e81a <__swbuf_r+0x1a>
 800e884:	4621      	mov	r1, r4
 800e886:	4628      	mov	r0, r5
 800e888:	f000 f81e 	bl	800e8c8 <__swsetup_r>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d0cb      	beq.n	800e828 <__swbuf_r+0x28>
 800e890:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e894:	e7ea      	b.n	800e86c <__swbuf_r+0x6c>
 800e896:	bf00      	nop
 800e898:	0800ef5c 	.word	0x0800ef5c
 800e89c:	0800ef7c 	.word	0x0800ef7c
 800e8a0:	0800ef3c 	.word	0x0800ef3c

0800e8a4 <_write_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d07      	ldr	r5, [pc, #28]	; (800e8c4 <_write_r+0x20>)
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	4608      	mov	r0, r1
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	602a      	str	r2, [r5, #0]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	f7f3 fe3c 	bl	8002530 <_write>
 800e8b8:	1c43      	adds	r3, r0, #1
 800e8ba:	d102      	bne.n	800e8c2 <_write_r+0x1e>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	b103      	cbz	r3, 800e8c2 <_write_r+0x1e>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	20003af0 	.word	0x20003af0

0800e8c8 <__swsetup_r>:
 800e8c8:	4b32      	ldr	r3, [pc, #200]	; (800e994 <__swsetup_r+0xcc>)
 800e8ca:	b570      	push	{r4, r5, r6, lr}
 800e8cc:	681d      	ldr	r5, [r3, #0]
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	460c      	mov	r4, r1
 800e8d2:	b125      	cbz	r5, 800e8de <__swsetup_r+0x16>
 800e8d4:	69ab      	ldr	r3, [r5, #24]
 800e8d6:	b913      	cbnz	r3, 800e8de <__swsetup_r+0x16>
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f7ff fb4d 	bl	800df78 <__sinit>
 800e8de:	4b2e      	ldr	r3, [pc, #184]	; (800e998 <__swsetup_r+0xd0>)
 800e8e0:	429c      	cmp	r4, r3
 800e8e2:	d10f      	bne.n	800e904 <__swsetup_r+0x3c>
 800e8e4:	686c      	ldr	r4, [r5, #4]
 800e8e6:	89a3      	ldrh	r3, [r4, #12]
 800e8e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8ec:	0719      	lsls	r1, r3, #28
 800e8ee:	d42c      	bmi.n	800e94a <__swsetup_r+0x82>
 800e8f0:	06dd      	lsls	r5, r3, #27
 800e8f2:	d411      	bmi.n	800e918 <__swsetup_r+0x50>
 800e8f4:	2309      	movs	r3, #9
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8fc:	81a3      	strh	r3, [r4, #12]
 800e8fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e902:	e03e      	b.n	800e982 <__swsetup_r+0xba>
 800e904:	4b25      	ldr	r3, [pc, #148]	; (800e99c <__swsetup_r+0xd4>)
 800e906:	429c      	cmp	r4, r3
 800e908:	d101      	bne.n	800e90e <__swsetup_r+0x46>
 800e90a:	68ac      	ldr	r4, [r5, #8]
 800e90c:	e7eb      	b.n	800e8e6 <__swsetup_r+0x1e>
 800e90e:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <__swsetup_r+0xd8>)
 800e910:	429c      	cmp	r4, r3
 800e912:	bf08      	it	eq
 800e914:	68ec      	ldreq	r4, [r5, #12]
 800e916:	e7e6      	b.n	800e8e6 <__swsetup_r+0x1e>
 800e918:	0758      	lsls	r0, r3, #29
 800e91a:	d512      	bpl.n	800e942 <__swsetup_r+0x7a>
 800e91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e91e:	b141      	cbz	r1, 800e932 <__swsetup_r+0x6a>
 800e920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e924:	4299      	cmp	r1, r3
 800e926:	d002      	beq.n	800e92e <__swsetup_r+0x66>
 800e928:	4630      	mov	r0, r6
 800e92a:	f7fe ffb1 	bl	800d890 <_free_r>
 800e92e:	2300      	movs	r3, #0
 800e930:	6363      	str	r3, [r4, #52]	; 0x34
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	2300      	movs	r3, #0
 800e93c:	6063      	str	r3, [r4, #4]
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f043 0308 	orr.w	r3, r3, #8
 800e948:	81a3      	strh	r3, [r4, #12]
 800e94a:	6923      	ldr	r3, [r4, #16]
 800e94c:	b94b      	cbnz	r3, 800e962 <__swsetup_r+0x9a>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e958:	d003      	beq.n	800e962 <__swsetup_r+0x9a>
 800e95a:	4621      	mov	r1, r4
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7ff fbd1 	bl	800e104 <__smakebuf_r>
 800e962:	89a0      	ldrh	r0, [r4, #12]
 800e964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e968:	f010 0301 	ands.w	r3, r0, #1
 800e96c:	d00a      	beq.n	800e984 <__swsetup_r+0xbc>
 800e96e:	2300      	movs	r3, #0
 800e970:	60a3      	str	r3, [r4, #8]
 800e972:	6963      	ldr	r3, [r4, #20]
 800e974:	425b      	negs	r3, r3
 800e976:	61a3      	str	r3, [r4, #24]
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	b943      	cbnz	r3, 800e98e <__swsetup_r+0xc6>
 800e97c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e980:	d1ba      	bne.n	800e8f8 <__swsetup_r+0x30>
 800e982:	bd70      	pop	{r4, r5, r6, pc}
 800e984:	0781      	lsls	r1, r0, #30
 800e986:	bf58      	it	pl
 800e988:	6963      	ldrpl	r3, [r4, #20]
 800e98a:	60a3      	str	r3, [r4, #8]
 800e98c:	e7f4      	b.n	800e978 <__swsetup_r+0xb0>
 800e98e:	2000      	movs	r0, #0
 800e990:	e7f7      	b.n	800e982 <__swsetup_r+0xba>
 800e992:	bf00      	nop
 800e994:	20000030 	.word	0x20000030
 800e998:	0800ef5c 	.word	0x0800ef5c
 800e99c:	0800ef7c 	.word	0x0800ef7c
 800e9a0:	0800ef3c 	.word	0x0800ef3c

0800e9a4 <_close_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4d06      	ldr	r5, [pc, #24]	; (800e9c0 <_close_r+0x1c>)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	602b      	str	r3, [r5, #0]
 800e9b0:	f7f3 fdea 	bl	8002588 <_close>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d102      	bne.n	800e9be <_close_r+0x1a>
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	b103      	cbz	r3, 800e9be <_close_r+0x1a>
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	bd38      	pop	{r3, r4, r5, pc}
 800e9c0:	20003af0 	.word	0x20003af0

0800e9c4 <_fstat_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4d07      	ldr	r5, [pc, #28]	; (800e9e4 <_fstat_r+0x20>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	602b      	str	r3, [r5, #0]
 800e9d2:	f7f3 fe29 	bl	8002628 <_fstat>
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	d102      	bne.n	800e9e0 <_fstat_r+0x1c>
 800e9da:	682b      	ldr	r3, [r5, #0]
 800e9dc:	b103      	cbz	r3, 800e9e0 <_fstat_r+0x1c>
 800e9de:	6023      	str	r3, [r4, #0]
 800e9e0:	bd38      	pop	{r3, r4, r5, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20003af0 	.word	0x20003af0

0800e9e8 <_isatty_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d06      	ldr	r5, [pc, #24]	; (800ea04 <_isatty_r+0x1c>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	602b      	str	r3, [r5, #0]
 800e9f4:	f7f3 fd86 	bl	8002504 <_isatty>
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	d102      	bne.n	800ea02 <_isatty_r+0x1a>
 800e9fc:	682b      	ldr	r3, [r5, #0]
 800e9fe:	b103      	cbz	r3, 800ea02 <_isatty_r+0x1a>
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	bd38      	pop	{r3, r4, r5, pc}
 800ea04:	20003af0 	.word	0x20003af0

0800ea08 <_lseek_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d07      	ldr	r5, [pc, #28]	; (800ea28 <_lseek_r+0x20>)
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	4608      	mov	r0, r1
 800ea10:	4611      	mov	r1, r2
 800ea12:	2200      	movs	r2, #0
 800ea14:	602a      	str	r2, [r5, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	f7f3 fdcd 	bl	80025b6 <_lseek>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_lseek_r+0x1e>
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_lseek_r+0x1e>
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	20003af0 	.word	0x20003af0

0800ea2c <_read_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d07      	ldr	r5, [pc, #28]	; (800ea4c <_read_r+0x20>)
 800ea30:	4604      	mov	r4, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	4611      	mov	r1, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f7f3 fdcc 	bl	80025d8 <_read>
 800ea40:	1c43      	adds	r3, r0, #1
 800ea42:	d102      	bne.n	800ea4a <_read_r+0x1e>
 800ea44:	682b      	ldr	r3, [r5, #0]
 800ea46:	b103      	cbz	r3, 800ea4a <_read_r+0x1e>
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	bd38      	pop	{r3, r4, r5, pc}
 800ea4c:	20003af0 	.word	0x20003af0

0800ea50 <_init>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	bf00      	nop
 800ea54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea56:	bc08      	pop	{r3}
 800ea58:	469e      	mov	lr, r3
 800ea5a:	4770      	bx	lr

0800ea5c <_fini>:
 800ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5e:	bf00      	nop
 800ea60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea62:	bc08      	pop	{r3}
 800ea64:	469e      	mov	lr, r3
 800ea66:	4770      	bx	lr
