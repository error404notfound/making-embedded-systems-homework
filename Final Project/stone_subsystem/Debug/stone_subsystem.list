
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a0  080094a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a8  080094a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080094b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00003310  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003384  20003384  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001763e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000307c  00000000  00000000  000376e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268b7  00000000  00000000  0003cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019510  00000000  00000000  00063627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1dfe  00000000  00000000  0007cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015e935  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b5c  00000000  00000000  0015e988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f38 	.word	0x08008f38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008f38 	.word	0x08008f38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08008f50 	.word	0x08008f50
 8000738:	08008f9c 	.word	0x08008f9c
 800073c:	08008fa0 	.word	0x08008fa0
 8000740:	20000190 	.word	0x20000190
 8000744:	20000090 	.word	0x20000090

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000190 	.word	0x20000190
 80008a4:	20000090 	.word	0x20000090
 80008a8:	20000194 	.word	0x20000194
 80008ac:	08008fa4 	.word	0x08008fa4
 80008b0:	08008fac 	.word	0x08008fac
 80008b4:	08008f9c 	.word	0x08008f9c
 80008b8:	08008fb4 	.word	0x08008fb4
 80008bc:	08008fa0 	.word	0x08008fa0

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 f998 	bl	8007cfc <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800905c 	.word	0x0800905c
 8000d0c:	08009010 	.word	0x08009010
 8000d10:	08009014 	.word	0x08009014

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	08009018 	.word	0x08009018
 8000dc0:	08009028 	.word	0x08009028
 8000dc4:	08009030 	.word	0x08009030
 8000dc8:	08009014 	.word	0x08009014

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08009034 	.word	0x08009034
 8000e10:	08009014 	.word	0x08009014

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	08009044 	.word	0x08009044
 8000e3c:	08009014 	.word	0x08009014

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800905c 	.word	0x0800905c

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001a0 	.word	0x200001a0
 8000e74:	2000019c 	.word	0x2000019c

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 ff9b 	bl	8006dca <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000198 	.word	0x20000198
 8000ea4:	200001ae 	.word	0x200001ae

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f006 ff38 	bl	8007d68 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000019c 	.word	0x2000019c
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	200001a0 	.word	0x200001a0
 8000f1c:	08009058 	.word	0x08009058

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f006 ff1c 	bl	8007d68 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	08009058 	.word	0x08009058

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 ff28 	bl	8006dca <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001a0 	.word	0x200001a0
 8000f88:	200001ae 	.word	0x200001ae
 8000f8c:	200001a4 	.word	0x200001a4
 8000f90:	2000019c 	.word	0x2000019c
 8000f94:	20000198 	.word	0x20000198

08000f98 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4849      	ldr	r0, [pc, #292]	; (80010c8 <I3G450D_Init+0x130>)
 8000fa2:	f002 ff01 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 fffe 	bl	8002fa8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4845      	ldr	r0, [pc, #276]	; (80010c8 <I3G450D_Init+0x130>)
 8000fb2:	f002 fef9 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f001 fff6 	bl	8002fa8 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <I3G450D_Init+0x134>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <I3G450D_Init+0x134>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	2202      	movs	r2, #2
 8000fcc:	493f      	ldr	r1, [pc, #252]	; (80010cc <I3G450D_Init+0x134>)
 8000fce:	4840      	ldr	r0, [pc, #256]	; (80010d0 <I3G450D_Init+0x138>)
 8000fd0:	f003 fde5 	bl	8004b9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	483b      	ldr	r0, [pc, #236]	; (80010c8 <I3G450D_Init+0x130>)
 8000fda:	f002 fee5 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 ffe2 	bl	8002fa8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4837      	ldr	r0, [pc, #220]	; (80010c8 <I3G450D_Init+0x130>)
 8000fea:	f002 fedd 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 ffda 	bl	8002fa8 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <I3G450D_Init+0x134>)
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <I3G450D_Init+0x134>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	2202      	movs	r2, #2
 8001004:	4931      	ldr	r1, [pc, #196]	; (80010cc <I3G450D_Init+0x134>)
 8001006:	4832      	ldr	r0, [pc, #200]	; (80010d0 <I3G450D_Init+0x138>)
 8001008:	f003 fdc9 	bl	8004b9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	482d      	ldr	r0, [pc, #180]	; (80010c8 <I3G450D_Init+0x130>)
 8001012:	f002 fec9 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f001 ffc6 	bl	8002fa8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4829      	ldr	r0, [pc, #164]	; (80010c8 <I3G450D_Init+0x130>)
 8001022:	f002 fec1 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f001 ffbe 	bl	8002fa8 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <I3G450D_Init+0x134>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <I3G450D_Init+0x134>)
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	2202      	movs	r2, #2
 800103c:	4923      	ldr	r1, [pc, #140]	; (80010cc <I3G450D_Init+0x134>)
 800103e:	4824      	ldr	r0, [pc, #144]	; (80010d0 <I3G450D_Init+0x138>)
 8001040:	f003 fdad 	bl	8004b9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <I3G450D_Init+0x130>)
 800104a:	f002 fead 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f001 ffaa 	bl	8002fa8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	481b      	ldr	r0, [pc, #108]	; (80010c8 <I3G450D_Init+0x130>)
 800105a:	f002 fea5 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 ffa2 	bl	8002fa8 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <I3G450D_Init+0x134>)
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <I3G450D_Init+0x134>)
 800106c:	2220      	movs	r2, #32
 800106e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2202      	movs	r2, #2
 8001074:	4915      	ldr	r1, [pc, #84]	; (80010cc <I3G450D_Init+0x134>)
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <I3G450D_Init+0x138>)
 8001078:	f003 fd91 	bl	8004b9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	4811      	ldr	r0, [pc, #68]	; (80010c8 <I3G450D_Init+0x130>)
 8001082:	f002 fe91 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 ff8e 	bl	8002fa8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <I3G450D_Init+0x130>)
 8001092:	f002 fe89 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 ff86 	bl	8002fa8 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <I3G450D_Init+0x134>)
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <I3G450D_Init+0x134>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2202      	movs	r2, #2
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <I3G450D_Init+0x134>)
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <I3G450D_Init+0x138>)
 80010b0:	f003 fd75 	bl	8004b9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <I3G450D_Init+0x130>)
 80010ba:	f002 fe75 	bl	8003da8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f001 ff72 	bl	8002fa8 <HAL_Delay>

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020800 	.word	0x40020800
 80010cc:	200030e8 	.word	0x200030e8
 80010d0:	20003150 	.word	0x20003150

080010d4 <I3G450D_loop>:

void I3G450D_loop(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b098      	sub	sp, #96	; 0x60
 80010d8:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <I3G450D_loop+0x1b0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <I3G450D_loop+0x6a>
 8001136:	2b01      	cmp	r3, #1
 8001138:	f000 80ba 	beq.w	80012b0 <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 800113c:	e36d      	b.n	800181a <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 800113e:	4b52      	ldr	r3, [pc, #328]	; (8001288 <I3G450D_loop+0x1b4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	f040 8368 	bne.w	8001818 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2102      	movs	r1, #2
 800114c:	484f      	ldr	r0, [pc, #316]	; (800128c <I3G450D_loop+0x1b8>)
 800114e:	f002 fe2b 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <I3G450D_loop+0x1bc>)
 8001154:	22a8      	movs	r2, #168	; 0xa8
 8001156:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001158:	2332      	movs	r3, #50	; 0x32
 800115a:	2201      	movs	r2, #1
 800115c:	494c      	ldr	r1, [pc, #304]	; (8001290 <I3G450D_loop+0x1bc>)
 800115e:	484d      	ldr	r0, [pc, #308]	; (8001294 <I3G450D_loop+0x1c0>)
 8001160:	f003 fd1d 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8001164:	2332      	movs	r3, #50	; 0x32
 8001166:	2201      	movs	r2, #1
 8001168:	494b      	ldr	r1, [pc, #300]	; (8001298 <I3G450D_loop+0x1c4>)
 800116a:	484a      	ldr	r0, [pc, #296]	; (8001294 <I3G450D_loop+0x1c0>)
 800116c:	f003 fe53 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2102      	movs	r1, #2
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <I3G450D_loop+0x1b8>)
 8001176:	f002 fe17 	bl	8003da8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4843      	ldr	r0, [pc, #268]	; (800128c <I3G450D_loop+0x1b8>)
 8001180:	f002 fe12 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8001184:	4b42      	ldr	r3, [pc, #264]	; (8001290 <I3G450D_loop+0x1bc>)
 8001186:	22a9      	movs	r2, #169	; 0xa9
 8001188:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800118a:	2332      	movs	r3, #50	; 0x32
 800118c:	2201      	movs	r2, #1
 800118e:	4940      	ldr	r1, [pc, #256]	; (8001290 <I3G450D_loop+0x1bc>)
 8001190:	4840      	ldr	r0, [pc, #256]	; (8001294 <I3G450D_loop+0x1c0>)
 8001192:	f003 fd04 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 8001196:	2332      	movs	r3, #50	; 0x32
 8001198:	2201      	movs	r2, #1
 800119a:	4940      	ldr	r1, [pc, #256]	; (800129c <I3G450D_loop+0x1c8>)
 800119c:	483d      	ldr	r0, [pc, #244]	; (8001294 <I3G450D_loop+0x1c0>)
 800119e:	f003 fe3a 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2102      	movs	r1, #2
 80011a6:	4839      	ldr	r0, [pc, #228]	; (800128c <I3G450D_loop+0x1b8>)
 80011a8:	f002 fdfe 	bl	8003da8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <I3G450D_loop+0x1b8>)
 80011b2:	f002 fdf9 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <I3G450D_loop+0x1bc>)
 80011b8:	22aa      	movs	r2, #170	; 0xaa
 80011ba:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011bc:	2332      	movs	r3, #50	; 0x32
 80011be:	2201      	movs	r2, #1
 80011c0:	4933      	ldr	r1, [pc, #204]	; (8001290 <I3G450D_loop+0x1bc>)
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <I3G450D_loop+0x1c0>)
 80011c4:	f003 fceb 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 80011c8:	2332      	movs	r3, #50	; 0x32
 80011ca:	2201      	movs	r2, #1
 80011cc:	4934      	ldr	r1, [pc, #208]	; (80012a0 <I3G450D_loop+0x1cc>)
 80011ce:	4831      	ldr	r0, [pc, #196]	; (8001294 <I3G450D_loop+0x1c0>)
 80011d0:	f003 fe21 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <I3G450D_loop+0x1b8>)
 80011da:	f002 fde5 	bl	8003da8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2102      	movs	r1, #2
 80011e2:	482a      	ldr	r0, [pc, #168]	; (800128c <I3G450D_loop+0x1b8>)
 80011e4:	f002 fde0 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <I3G450D_loop+0x1bc>)
 80011ea:	22ab      	movs	r2, #171	; 0xab
 80011ec:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80011ee:	2332      	movs	r3, #50	; 0x32
 80011f0:	2201      	movs	r2, #1
 80011f2:	4927      	ldr	r1, [pc, #156]	; (8001290 <I3G450D_loop+0x1bc>)
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <I3G450D_loop+0x1c0>)
 80011f6:	f003 fcd2 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 80011fa:	2332      	movs	r3, #50	; 0x32
 80011fc:	2201      	movs	r2, #1
 80011fe:	4929      	ldr	r1, [pc, #164]	; (80012a4 <I3G450D_loop+0x1d0>)
 8001200:	4824      	ldr	r0, [pc, #144]	; (8001294 <I3G450D_loop+0x1c0>)
 8001202:	f003 fe08 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2102      	movs	r1, #2
 800120a:	4820      	ldr	r0, [pc, #128]	; (800128c <I3G450D_loop+0x1b8>)
 800120c:	f002 fdcc 	bl	8003da8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	481d      	ldr	r0, [pc, #116]	; (800128c <I3G450D_loop+0x1b8>)
 8001216:	f002 fdc7 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <I3G450D_loop+0x1bc>)
 800121c:	22ac      	movs	r2, #172	; 0xac
 800121e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001220:	2332      	movs	r3, #50	; 0x32
 8001222:	2201      	movs	r2, #1
 8001224:	491a      	ldr	r1, [pc, #104]	; (8001290 <I3G450D_loop+0x1bc>)
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <I3G450D_loop+0x1c0>)
 8001228:	f003 fcb9 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	2201      	movs	r2, #1
 8001230:	491d      	ldr	r1, [pc, #116]	; (80012a8 <I3G450D_loop+0x1d4>)
 8001232:	4818      	ldr	r0, [pc, #96]	; (8001294 <I3G450D_loop+0x1c0>)
 8001234:	f003 fdef 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2102      	movs	r1, #2
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <I3G450D_loop+0x1b8>)
 800123e:	f002 fdb3 	bl	8003da8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	4811      	ldr	r0, [pc, #68]	; (800128c <I3G450D_loop+0x1b8>)
 8001248:	f002 fdae 	bl	8003da8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <I3G450D_loop+0x1bc>)
 800124e:	22ad      	movs	r2, #173	; 0xad
 8001250:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001252:	2332      	movs	r3, #50	; 0x32
 8001254:	2201      	movs	r2, #1
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <I3G450D_loop+0x1bc>)
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <I3G450D_loop+0x1c0>)
 800125a:	f003 fca0 	bl	8004b9e <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 800125e:	2332      	movs	r3, #50	; 0x32
 8001260:	2201      	movs	r2, #1
 8001262:	4912      	ldr	r1, [pc, #72]	; (80012ac <I3G450D_loop+0x1d8>)
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <I3G450D_loop+0x1c0>)
 8001266:	f003 fdd6 	bl	8004e16 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <I3G450D_loop+0x1b8>)
 8001270:	f002 fd9a 	bl	8003da8 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <I3G450D_loop+0x1b0>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <I3G450D_loop+0x1b4>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
				break;
 8001280:	e2ca      	b.n	8001818 <I3G450D_loop+0x744>
 8001282:	bf00      	nop
 8001284:	200001b0 	.word	0x200001b0
 8001288:	20000000 	.word	0x20000000
 800128c:	40020800 	.word	0x40020800
 8001290:	200030e8 	.word	0x200030e8
 8001294:	20003150 	.word	0x20003150
 8001298:	200030ed 	.word	0x200030ed
 800129c:	200030ee 	.word	0x200030ee
 80012a0:	200030ef 	.word	0x200030ef
 80012a4:	200030f0 	.word	0x200030f0
 80012a8:	200030f1 	.word	0x200030f1
 80012ac:	200030f2 	.word	0x200030f2
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80012b0:	4ba0      	ldr	r3, [pc, #640]	; (8001534 <I3G450D_loop+0x460>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <I3G450D_loop+0x460>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 80012c6:	4b9b      	ldr	r3, [pc, #620]	; (8001534 <I3G450D_loop+0x460>)
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b99      	ldr	r3, [pc, #612]	; (8001534 <I3G450D_loop+0x460>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 80012dc:	4b95      	ldr	r3, [pc, #596]	; (8001534 <I3G450D_loop+0x460>)
 80012de:	799b      	ldrb	r3, [r3, #6]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b93      	ldr	r3, [pc, #588]	; (8001534 <I3G450D_loop+0x460>)
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 80012f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b90      	ldr	r3, [pc, #576]	; (8001538 <I3G450D_loop+0x464>)
 80012f8:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 80012fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b8e      	ldr	r3, [pc, #568]	; (800153c <I3G450D_loop+0x468>)
 8001302:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8001304:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b8d      	ldr	r3, [pc, #564]	; (8001540 <I3G450D_loop+0x46c>)
 800130a:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <I3G450D_loop+0x470>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 80d5 	bne.w	80014c0 <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8001316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800131a:	b21b      	sxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4b8a      	ldr	r3, [pc, #552]	; (8001548 <I3G450D_loop+0x474>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800154c <I3G450D_loop+0x478>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	4b86      	ldr	r3, [pc, #536]	; (8001550 <I3G450D_loop+0x47c>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 800133a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800133e:	b21b      	sxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4b84      	ldr	r3, [pc, #528]	; (8001554 <I3G450D_loop+0x480>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800154c <I3G450D_loop+0x478>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <I3G450D_loop+0x484>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 800135e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001360:	b21b      	sxth	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	4b7d      	ldr	r3, [pc, #500]	; (800155c <I3G450D_loop+0x488>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800154c <I3G450D_loop+0x478>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	4b79      	ldr	r3, [pc, #484]	; (8001560 <I3G450D_loop+0x48c>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8001380:	4b78      	ldr	r3, [pc, #480]	; (8001564 <I3G450D_loop+0x490>)
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8001384:	4b72      	ldr	r3, [pc, #456]	; (8001550 <I3G450D_loop+0x47c>)
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <I3G450D_loop+0x494>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	dc0c      	bgt.n	80013b4 <I3G450D_loop+0x2e0>
 800139a:	4b73      	ldr	r3, [pc, #460]	; (8001568 <I3G450D_loop+0x494>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb1 7a67 	vneg.f32	s14, s15
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <I3G450D_loop+0x47c>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	dd1b      	ble.n	80013ec <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <I3G450D_loop+0x47c>)
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	4b6c      	ldr	r3, [pc, #432]	; (800156c <I3G450D_loop+0x498>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <I3G450D_loop+0x49c>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <I3G450D_loop+0x49c>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <I3G450D_loop+0x47c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a60      	ldr	r2, [pc, #384]	; (800156c <I3G450D_loop+0x498>)
 80013ea:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 80013ec:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <I3G450D_loop+0x484>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b60      	ldr	r3, [pc, #384]	; (8001574 <I3G450D_loop+0x4a0>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	dc0c      	bgt.n	800141c <I3G450D_loop+0x348>
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <I3G450D_loop+0x4a0>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eeb1 7a67 	vneg.f32	s14, s15
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <I3G450D_loop+0x484>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	dd1b      	ble.n	8001454 <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <I3G450D_loop+0x484>)
 800141e:	ed93 7a00 	vldr	s14, [r3]
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <I3G450D_loop+0x4a4>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001438:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <I3G450D_loop+0x4a8>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	4b4d      	ldr	r3, [pc, #308]	; (800157c <I3G450D_loop+0x4a8>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <I3G450D_loop+0x484>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a49      	ldr	r2, [pc, #292]	; (8001578 <I3G450D_loop+0x4a4>)
 8001452:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <I3G450D_loop+0x48c>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <I3G450D_loop+0x4ac>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	dc0d      	bgt.n	8001486 <I3G450D_loop+0x3b2>
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <I3G450D_loop+0x4ac>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb1 7a67 	vneg.f32	s14, s15
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <I3G450D_loop+0x48c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	f340 81c2 	ble.w	800180a <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <I3G450D_loop+0x48c>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <I3G450D_loop+0x4b0>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001496:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <I3G450D_loop+0x4b4>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <I3G450D_loop+0x4b4>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <I3G450D_loop+0x48c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <I3G450D_loop+0x4b0>)
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e1a4      	b.n	800180a <I3G450D_loop+0x736>
				switch(currentcalistate)
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <I3G450D_loop+0x470>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f000 819b 	beq.w	8001800 <I3G450D_loop+0x72c>
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	f300 819a 	bgt.w	8001804 <I3G450D_loop+0x730>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <I3G450D_loop+0x406>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d029      	beq.n	800152c <I3G450D_loop+0x458>
						break;
 80014d8:	e194      	b.n	8001804 <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <I3G450D_loop+0x4b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80014e2:	b211      	sxth	r1, r2
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <I3G450D_loop+0x4bc>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <I3G450D_loop+0x4b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80014f2:	b211      	sxth	r1, r2
 80014f4:	4a27      	ldr	r2, [pc, #156]	; (8001594 <I3G450D_loop+0x4c0>)
 80014f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <I3G450D_loop+0x4b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001500:	b211      	sxth	r1, r2
 8001502:	4a25      	ldr	r2, [pc, #148]	; (8001598 <I3G450D_loop+0x4c4>)
 8001504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <I3G450D_loop+0x4b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <I3G450D_loop+0x4b8>)
 8001510:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <I3G450D_loop+0x4b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800151a:	f0c0 8175 	bcc.w	8001808 <I3G450D_loop+0x734>
							caliCounter=0;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <I3G450D_loop+0x4b8>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <I3G450D_loop+0x470>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
						break;
 800152a:	e16d      	b.n	8001808 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001530:	e0a5      	b.n	800167e <I3G450D_loop+0x5aa>
 8001532:	bf00      	nop
 8001534:	200030ec 	.word	0x200030ec
 8001538:	200001fc 	.word	0x200001fc
 800153c:	200001fe 	.word	0x200001fe
 8001540:	20000200 	.word	0x20000200
 8001544:	200001af 	.word	0x200001af
 8001548:	200001c0 	.word	0x200001c0
 800154c:	3d8f5c29 	.word	0x3d8f5c29
 8001550:	200001b4 	.word	0x200001b4
 8001554:	200001c4 	.word	0x200001c4
 8001558:	200001b8 	.word	0x200001b8
 800155c:	200001c8 	.word	0x200001c8
 8001560:	200001bc 	.word	0x200001bc
 8001564:	3b449ba6 	.word	0x3b449ba6
 8001568:	200001cc 	.word	0x200001cc
 800156c:	200001e4 	.word	0x200001e4
 8001570:	200001d8 	.word	0x200001d8
 8001574:	200001d0 	.word	0x200001d0
 8001578:	200001e8 	.word	0x200001e8
 800157c:	200001dc 	.word	0x200001dc
 8001580:	200001d4 	.word	0x200001d4
 8001584:	200001ec 	.word	0x200001ec
 8001588:	200001e0 	.word	0x200001e0
 800158c:	20000204 	.word	0x20000204
 8001590:	20000208 	.word	0x20000208
 8001594:	200011a8 	.word	0x200011a8
 8001598:	20002148 	.word	0x20002148
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 800159c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3360      	adds	r3, #96	; 0x60
 80015a2:	443b      	add	r3, r7
 80015a4:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015a8:	461a      	mov	r2, r3
 80015aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	499d      	ldr	r1, [pc, #628]	; (8001824 <I3G450D_loop+0x750>)
 80015b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015b2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015b6:	4413      	add	r3, r2
 80015b8:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80015ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	3360      	adds	r3, #96	; 0x60
 80015c0:	443b      	add	r3, r7
 80015c2:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80015c6:	461a      	mov	r2, r3
 80015c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	4996      	ldr	r1, [pc, #600]	; (8001828 <I3G450D_loop+0x754>)
 80015ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015d0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015d4:	4413      	add	r3, r2
 80015d6:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 80015d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	3360      	adds	r3, #96	; 0x60
 80015de:	443b      	add	r3, r7
 80015e0:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 80015e4:	461a      	mov	r2, r3
 80015e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	4990      	ldr	r1, [pc, #576]	; (800182c <I3G450D_loop+0x758>)
 80015ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ee:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80015f2:	4413      	add	r3, r2
 80015f4:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 80015f6:	4a8b      	ldr	r2, [pc, #556]	; (8001824 <I3G450D_loop+0x750>)
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80015fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3360      	adds	r3, #96	; 0x60
 8001604:	443b      	add	r3, r7
 8001606:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 800160a:	4a87      	ldr	r2, [pc, #540]	; (8001828 <I3G450D_loop+0x754>)
 800160c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3360      	adds	r3, #96	; 0x60
 8001618:	443b      	add	r3, r7
 800161a:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 800161e:	4a83      	ldr	r2, [pc, #524]	; (800182c <I3G450D_loop+0x758>)
 8001620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001622:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	3360      	adds	r3, #96	; 0x60
 800162c:	443b      	add	r3, r7
 800162e:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8001632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001634:	4a7e      	ldr	r2, [pc, #504]	; (8001830 <I3G450D_loop+0x75c>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1092      	asrs	r2, r2, #2
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a7c      	ldr	r2, [pc, #496]	; (8001834 <I3G450D_loop+0x760>)
 8001642:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8001644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001646:	4a7a      	ldr	r2, [pc, #488]	; (8001830 <I3G450D_loop+0x75c>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	1092      	asrs	r2, r2, #2
 800164e:	17db      	asrs	r3, r3, #31
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a79      	ldr	r2, [pc, #484]	; (8001838 <I3G450D_loop+0x764>)
 8001654:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8001656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001658:	4a75      	ldr	r2, [pc, #468]	; (8001830 <I3G450D_loop+0x75c>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1092      	asrs	r2, r2, #2
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a75      	ldr	r2, [pc, #468]	; (800183c <I3G450D_loop+0x768>)
 8001666:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	3301      	adds	r3, #1
 800166c:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 800166e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001670:	2b09      	cmp	r3, #9
 8001672:	d901      	bls.n	8001678 <I3G450D_loop+0x5a4>
									windowPosition=0;
 8001674:	2300      	movs	r3, #0
 8001676:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800167a:	3301      	adds	r3, #1
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001684:	d38a      	bcc.n	800159c <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001686:	2300      	movs	r3, #0
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
 800168a:	e089      	b.n	80017a0 <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 800168c:	4a65      	ldr	r2, [pc, #404]	; (8001824 <I3G450D_loop+0x750>)
 800168e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001690:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001694:	461a      	mov	r2, r3
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <I3G450D_loop+0x760>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1ad2      	subs	r2, r2, r3
 800169c:	4b68      	ldr	r3, [pc, #416]	; (8001840 <I3G450D_loop+0x76c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dd0a      	ble.n	80016ba <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80016a4:	4a5f      	ldr	r2, [pc, #380]	; (8001824 <I3G450D_loop+0x750>)
 80016a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <I3G450D_loop+0x760>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	4a62      	ldr	r2, [pc, #392]	; (8001840 <I3G450D_loop+0x76c>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e015      	b.n	80016e6 <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <I3G450D_loop+0x750>)
 80016bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <I3G450D_loop+0x760>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <I3G450D_loop+0x76c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	425b      	negs	r3, r3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	da08      	bge.n	80016e6 <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <I3G450D_loop+0x760>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4952      	ldr	r1, [pc, #328]	; (8001824 <I3G450D_loop+0x750>)
 80016da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016dc:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	4a57      	ldr	r2, [pc, #348]	; (8001840 <I3G450D_loop+0x76c>)
 80016e4:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 80016e6:	4a50      	ldr	r2, [pc, #320]	; (8001828 <I3G450D_loop+0x754>)
 80016e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <I3G450D_loop+0x764>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1ad2      	subs	r2, r2, r3
 80016f6:	4b53      	ldr	r3, [pc, #332]	; (8001844 <I3G450D_loop+0x770>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dd0a      	ble.n	8001714 <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 80016fe:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <I3G450D_loop+0x754>)
 8001700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001702:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001706:	461a      	mov	r2, r3
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <I3G450D_loop+0x764>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <I3G450D_loop+0x770>)
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e015      	b.n	8001740 <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <I3G450D_loop+0x754>)
 8001716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001718:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800171c:	461a      	mov	r2, r3
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <I3G450D_loop+0x764>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1ad2      	subs	r2, r2, r3
 8001724:	4b47      	ldr	r3, [pc, #284]	; (8001844 <I3G450D_loop+0x770>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	425b      	negs	r3, r3
 800172a:	429a      	cmp	r2, r3
 800172c:	da08      	bge.n	8001740 <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <I3G450D_loop+0x764>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	493d      	ldr	r1, [pc, #244]	; (8001828 <I3G450D_loop+0x754>)
 8001734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001736:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <I3G450D_loop+0x770>)
 800173e:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001740:	4a3a      	ldr	r2, [pc, #232]	; (800182c <I3G450D_loop+0x758>)
 8001742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001744:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001748:	461a      	mov	r2, r3
 800174a:	4b3c      	ldr	r3, [pc, #240]	; (800183c <I3G450D_loop+0x768>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <I3G450D_loop+0x774>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	dd0a      	ble.n	800176e <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001758:	4a34      	ldr	r2, [pc, #208]	; (800182c <I3G450D_loop+0x758>)
 800175a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800175c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001760:	461a      	mov	r2, r3
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <I3G450D_loop+0x768>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a37      	ldr	r2, [pc, #220]	; (8001848 <I3G450D_loop+0x774>)
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e015      	b.n	800179a <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <I3G450D_loop+0x758>)
 8001770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001776:	461a      	mov	r2, r3
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <I3G450D_loop+0x768>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <I3G450D_loop+0x774>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	425b      	negs	r3, r3
 8001784:	429a      	cmp	r2, r3
 8001786:	da08      	bge.n	800179a <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <I3G450D_loop+0x768>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4927      	ldr	r1, [pc, #156]	; (800182c <I3G450D_loop+0x758>)
 800178e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001790:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <I3G450D_loop+0x774>)
 8001798:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800179a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800179c:	3301      	adds	r3, #1
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
 80017a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017a6:	f4ff af71 	bcc.w	800168c <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <I3G450D_loop+0x76c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800184c <I3G450D_loop+0x778>
 80017ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <I3G450D_loop+0x77c>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <I3G450D_loop+0x770>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800184c <I3G450D_loop+0x778>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <I3G450D_loop+0x780>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <I3G450D_loop+0x774>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800184c <I3G450D_loop+0x778>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <I3G450D_loop+0x784>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <I3G450D_loop+0x788>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
							break;
 80017fe:	e004      	b.n	800180a <I3G450D_loop+0x736>
						break;
 8001800:	bf00      	nop
 8001802:	e002      	b.n	800180a <I3G450D_loop+0x736>
						break;
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <I3G450D_loop+0x736>
						break;
 8001808:	bf00      	nop
			currentState=L3GD20_fisrt;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <I3G450D_loop+0x78c>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <I3G450D_loop+0x790>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
			break;
 8001816:	e000      	b.n	800181a <I3G450D_loop+0x746>
				break;
 8001818:	bf00      	nop

		}
}
 800181a:	bf00      	nop
 800181c:	3760      	adds	r7, #96	; 0x60
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000208 	.word	0x20000208
 8001828:	200011a8 	.word	0x200011a8
 800182c:	20002148 	.word	0x20002148
 8001830:	66666667 	.word	0x66666667
 8001834:	200001c0 	.word	0x200001c0
 8001838:	200001c4 	.word	0x200001c4
 800183c:	200001c8 	.word	0x200001c8
 8001840:	200001f0 	.word	0x200001f0
 8001844:	200001f4 	.word	0x200001f4
 8001848:	200001f8 	.word	0x200001f8
 800184c:	3d8f5c29 	.word	0x3d8f5c29
 8001850:	200001cc 	.word	0x200001cc
 8001854:	200001d0 	.word	0x200001d0
 8001858:	200001d4 	.word	0x200001d4
 800185c:	200001af 	.word	0x200001af
 8001860:	200001b0 	.word	0x200001b0
 8001864:	20000000 	.word	0x20000000

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f001 fb29 	bl	8002ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 f84d 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f000 fa7b 	bl	8001d70 <MX_GPIO_Init>
  MX_CRC_Init();
 800187a:	f000 f8b3 	bl	80019e4 <MX_CRC_Init>
  MX_I2C3_Init();
 800187e:	f000 f8c5 	bl	8001a0c <MX_I2C3_Init>
  MX_SPI5_Init();
 8001882:	f000 f903 	bl	8001a8c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001886:	f000 f937 	bl	8001af8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800188a:	f000 f9fd 	bl	8001c88 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800188e:	f000 fa4f 	bl	8001d30 <MX_DMA_Init>
  MX_TIM2_Init();
 8001892:	f000 f985 	bl	8001ba0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001896:	f000 fa21 	bl	8001cdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  I3G450D_Init();
 800189a:	f7ff fb7d 	bl	8000f98 <I3G450D_Init>
  RetargetInit(&huart1);
 800189e:	481b      	ldr	r0, [pc, #108]	; (800190c <main+0xa4>)
 80018a0:	f000 fd58 	bl	8002354 <RetargetInit>
  ConsoleInit(&huart1);
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <main+0xa4>)
 80018a6:	f7fe ff1f 	bl	80006e8 <ConsoleInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80018ae:	230b      	movs	r3, #11
 80018b0:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	71bb      	strb	r3, [r7, #6]
 80018b6:	e01b      	b.n	80018f0 <main+0x88>
	  			// Calculate color
				uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 80018b8:	79ba      	ldrb	r2, [r7, #6]
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	fb12 f303 	smulbb	r3, r2, r3
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	227f      	movs	r2, #127	; 0x7f
 80018ca:	21ff      	movs	r1, #255	; 0xff
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fc75 	bl	80021bc <hsl_to_rgb>
 80018d2:	6038      	str	r0, [r7, #0]
	  			// Set color
	 			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	b2d9      	uxtb	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	79b8      	ldrb	r0, [r7, #6]
 80018e6:	f000 fe0f 	bl	8002508 <led_set_RGB>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	3301      	adds	r3, #1
 80018ee:	71bb      	strb	r3, [r7, #6]
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d9e0      	bls.n	80018b8 <main+0x50>
	 		}
	  		// Write to LED
	  	  	 ++angle;
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	3301      	adds	r3, #1
 80018fa:	71fb      	strb	r3, [r7, #7]
	  		led_render();
 80018fc:	f000 fe3c 	bl	8002578 <led_render>
	  		// Some delay*/
	  		ConsoleProcess();
 8001900:	f7fe ff22 	bl	8000748 <ConsoleProcess>
	  		I3G450D_loop();
 8001904:	f7ff fbe6 	bl	80010d4 <I3G450D_loop>
	 for(uint8_t i = 0; i < 8 /* Change that to your amount of LEDs */; i++) {
 8001908:	e7d3      	b.n	80018b2 <main+0x4a>
 800190a:	bf00      	nop
 800190c:	20003298 	.word	0x20003298

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2230      	movs	r2, #48	; 0x30
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f006 fa1a 	bl	8007d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SystemClock_Config+0xcc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <SystemClock_Config+0xcc>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <SystemClock_Config+0xcc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SystemClock_Config+0xd0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <SystemClock_Config+0xd0>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <SystemClock_Config+0xd0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2310      	movs	r3, #16
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001984:	2308      	movs	r3, #8
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001988:	2360      	movs	r3, #96	; 0x60
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001990:	2303      	movs	r3, #3
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fbdf 	bl	800415c <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a4:	f000 fcd0 	bl	8002348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fe41 	bl	800464c <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019d0:	f000 fcba 	bl	8002348 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_CRC_Init+0x20>)
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <MX_CRC_Init+0x24>)
 80019ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_CRC_Init+0x20>)
 80019f0:	f001 fc0f 	bl	8003212 <HAL_CRC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80019fa:	f000 fca5 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200030f4 	.word	0x200030f4
 8001a08:	40023000 	.word	0x40023000

08001a0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <MX_I2C3_Init+0x78>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <MX_I2C3_Init+0x7c>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a4a:	f002 f9c7 	bl	8003ddc <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 fc78 	bl	8002348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a5c:	f002 fb02 	bl	8004064 <HAL_I2CEx_ConfigAnalogFilter>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a66:	f000 fc6f 	bl	8002348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C3_Init+0x74>)
 8001a6e:	f002 fb35 	bl	80040dc <HAL_I2CEx_ConfigDigitalFilter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a78:	f000 fc66 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200030fc 	.word	0x200030fc
 8001a84:	40005c00 	.word	0x40005c00
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <MX_SPI5_Init+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ac0:	2218      	movs	r2, #24
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_SPI5_Init+0x64>)
 8001ade:	f002 ffd5 	bl	8004a8c <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ae8:	f000 fc2e 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20003150 	.word	0x20003150
 8001af4:	40015000 	.word	0x40015000

08001af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_TIM1_Init+0xa4>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b40:	4815      	ldr	r0, [pc, #84]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b42:	f003 fd4b 	bl	80055dc <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b4c:	f000 fbfc 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480e      	ldr	r0, [pc, #56]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b5e:	f004 fa49 	bl	8005ff4 <HAL_TIM_ConfigClockSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b68:	f000 fbee 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b7a:	f004 ff15 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b84:	f000 fbe0 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0xa0>)
 8001b8a:	f000 ffab 	bl	8002ae4 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200031a8 	.word	0x200031a8
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001be6:	223b      	movs	r2, #59	; 0x3b
 8001be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf6:	4823      	ldr	r0, [pc, #140]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001bf8:	f003 fcf0 	bl	80055dc <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c02:	f000 fba1 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c10:	4619      	mov	r1, r3
 8001c12:	481c      	ldr	r0, [pc, #112]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c14:	f004 f9ee 	bl	8005ff4 <HAL_TIM_ConfigClockSource>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001c1e:	f000 fb93 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c22:	4818      	ldr	r0, [pc, #96]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c24:	f003 fd29 	bl	800567a <HAL_TIM_PWM_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c2e:	f000 fb8b 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c42:	f004 feb1 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c4c:	f000 fb7c 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c68:	f004 f902 	bl	8005e70 <HAL_TIM_PWM_ConfigChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001c72:	f000 fb69 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c76:	4803      	ldr	r0, [pc, #12]	; (8001c84 <MX_TIM2_Init+0xe4>)
 8001c78:	f000 ffa4 	bl	8002bc4 <HAL_TIM_MspPostInit>

}
 8001c7c:	bf00      	nop
 8001c7e:	3738      	adds	r7, #56	; 0x38
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200031f0 	.word	0x200031f0

08001c88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <MX_USART1_UART_Init+0x50>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	f004 ff02 	bl	8006ac8 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cca:	f000 fb3d 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20003298 	.word	0x20003298
 8001cd8:	40011000 	.word	0x40011000

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_USART2_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d14:	f004 fed8 	bl	8006ac8 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 fb13 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200032dc 	.word	0x200032dc
 8001d2c:	40004400 	.word	0x40004400

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2010      	movs	r0, #16
 8001d58:	f001 fa25 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f001 fa3e 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08e      	sub	sp, #56	; 0x38
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	4bb2      	ldr	r3, [pc, #712]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4ab1      	ldr	r2, [pc, #708]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4baf      	ldr	r3, [pc, #700]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	4bab      	ldr	r3, [pc, #684]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4aaa      	ldr	r2, [pc, #680]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4ba8      	ldr	r3, [pc, #672]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4ba4      	ldr	r3, [pc, #656]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4aa3      	ldr	r2, [pc, #652]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4ba1      	ldr	r3, [pc, #644]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	4b9d      	ldr	r3, [pc, #628]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a9c      	ldr	r2, [pc, #624]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b9a      	ldr	r3, [pc, #616]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b96      	ldr	r3, [pc, #600]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a95      	ldr	r2, [pc, #596]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b93      	ldr	r3, [pc, #588]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b8f      	ldr	r3, [pc, #572]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a8e      	ldr	r2, [pc, #568]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a87      	ldr	r2, [pc, #540]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e38:	f043 0310 	orr.w	r3, r3, #16
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b81      	ldr	r3, [pc, #516]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a80      	ldr	r2, [pc, #512]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b7e      	ldr	r3, [pc, #504]	; (8002054 <MX_GPIO_Init+0x2e4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2116      	movs	r1, #22
 8001e6a:	487b      	ldr	r0, [pc, #492]	; (8002058 <MX_GPIO_Init+0x2e8>)
 8001e6c:	f001 ff9c 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	4879      	ldr	r0, [pc, #484]	; (800205c <MX_GPIO_Init+0x2ec>)
 8001e76:	f001 ff97 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001e80:	4877      	ldr	r0, [pc, #476]	; (8002060 <MX_GPIO_Init+0x2f0>)
 8001e82:	f001 ff91 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e8c:	4875      	ldr	r0, [pc, #468]	; (8002064 <MX_GPIO_Init+0x2f4>)
 8001e8e:	f001 ff8b 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	486e      	ldr	r0, [pc, #440]	; (8002068 <MX_GPIO_Init+0x2f8>)
 8001eb0:	f001 fdce 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec6:	230e      	movs	r3, #14
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4865      	ldr	r0, [pc, #404]	; (8002068 <MX_GPIO_Init+0x2f8>)
 8001ed2:	f001 fdbd 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4859      	ldr	r0, [pc, #356]	; (8002058 <MX_GPIO_Init+0x2e8>)
 8001ef2:	f001 fdad 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ef6:	2316      	movs	r3, #22
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4852      	ldr	r0, [pc, #328]	; (8002058 <MX_GPIO_Init+0x2e8>)
 8001f0e:	f001 fd9f 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001f12:	f248 0307 	movw	r3, #32775	; 0x8007
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	484c      	ldr	r0, [pc, #304]	; (800205c <MX_GPIO_Init+0x2ec>)
 8001f2a:	f001 fd91 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001f2e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f40:	230e      	movs	r3, #14
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4844      	ldr	r0, [pc, #272]	; (800205c <MX_GPIO_Init+0x2ec>)
 8001f4c:	f001 fd80 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	4619      	mov	r1, r3
 8001f66:	483d      	ldr	r0, [pc, #244]	; (800205c <MX_GPIO_Init+0x2ec>)
 8001f68:	f001 fd72 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4835      	ldr	r0, [pc, #212]	; (8002058 <MX_GPIO_Init+0x2e8>)
 8001f82:	f001 fd65 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001f86:	2303      	movs	r3, #3
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f96:	2309      	movs	r3, #9
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4832      	ldr	r0, [pc, #200]	; (800206c <MX_GPIO_Init+0x2fc>)
 8001fa2:	f001 fd55 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	482c      	ldr	r0, [pc, #176]	; (800206c <MX_GPIO_Init+0x2fc>)
 8001fba:	f001 fd49 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001fbe:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4822      	ldr	r0, [pc, #136]	; (8002064 <MX_GPIO_Init+0x2f4>)
 8001fdc:	f001 fd38 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001fe0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <MX_GPIO_Init+0x300>)
 8001ffe:	f001 fd27 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002002:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002014:	230e      	movs	r3, #14
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4813      	ldr	r0, [pc, #76]	; (800206c <MX_GPIO_Init+0x2fc>)
 8002020:	f001 fd16 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002024:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002036:	230c      	movs	r3, #12
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <MX_GPIO_Init+0x2fc>)
 8002042:	f001 fd05 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002050:	e010      	b.n	8002074 <MX_GPIO_Init+0x304>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021800 	.word	0x40021800
 8002068:	40021400 	.word	0x40021400
 800206c:	40020400 	.word	0x40020400
 8002070:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	484b      	ldr	r0, [pc, #300]	; (80021ac <MX_GPIO_Init+0x43c>)
 8002080:	f001 fce6 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002084:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002096:	230c      	movs	r3, #12
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	4843      	ldr	r0, [pc, #268]	; (80021b0 <MX_GPIO_Init+0x440>)
 80020a2:	f001 fcd5 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80020a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	483d      	ldr	r0, [pc, #244]	; (80021b0 <MX_GPIO_Init+0x440>)
 80020bc:	f001 fcc8 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80020c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4835      	ldr	r0, [pc, #212]	; (80021b0 <MX_GPIO_Init+0x440>)
 80020da:	f001 fcb9 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80020de:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f0:	230e      	movs	r3, #14
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	482e      	ldr	r0, [pc, #184]	; (80021b4 <MX_GPIO_Init+0x444>)
 80020fc:	f001 fca8 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002100:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002112:	230e      	movs	r3, #14
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	4826      	ldr	r0, [pc, #152]	; (80021b8 <MX_GPIO_Init+0x448>)
 800211e:	f001 fc97 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8002122:	2308      	movs	r3, #8
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002132:	230e      	movs	r3, #14
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	481c      	ldr	r0, [pc, #112]	; (80021b0 <MX_GPIO_Init+0x440>)
 800213e:	f001 fc87 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002142:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002154:	2309      	movs	r3, #9
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4815      	ldr	r0, [pc, #84]	; (80021b4 <MX_GPIO_Init+0x444>)
 8002160:	f001 fc76 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002164:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <MX_GPIO_Init+0x444>)
 800217e:	f001 fc67 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002182:	2360      	movs	r3, #96	; 0x60
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002192:	230c      	movs	r3, #12
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	4619      	mov	r1, r3
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <MX_GPIO_Init+0x43c>)
 800219e:	f001 fc57 	bl	8003a50 <HAL_GPIO_Init>

}
 80021a2:	bf00      	nop
 80021a4:	3738      	adds	r7, #56	; 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40020800 	.word	0x40020800

080021bc <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	460b      	mov	r3, r1
 80021c8:	71bb      	strb	r3, [r7, #6]
 80021ca:	4613      	mov	r3, r2
 80021cc:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <hsl_to_rgb+0x1c>
 80021d4:	2300      	movs	r3, #0
 80021d6:	e0b1      	b.n	800233c <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80021d8:	797b      	ldrb	r3, [r7, #5]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80021e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db09      	blt.n	80021fe <hsl_to_rgb+0x42>
 80021ea:	89bb      	ldrh	r3, [r7, #12]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	79ba      	ldrb	r2, [r7, #6]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	121b      	asrs	r3, r3, #8
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	74fb      	strb	r3, [r7, #19]
 80021fc:	e00a      	b.n	8002214 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	b29b      	uxth	r3, r3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002208:	79ba      	ldrb	r2, [r7, #6]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	121b      	asrs	r3, r3, #8
 8002210:	b2db      	uxtb	r3, r3
 8002212:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8002224:	897b      	ldrh	r3, [r7, #10]
 8002226:	b29b      	uxth	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 800222c:	7d3b      	ldrb	r3, [r7, #20]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	b29b      	uxth	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8002238:	897b      	ldrh	r3, [r7, #10]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <hsl_to_rgb+0x9c>
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	b29b      	uxth	r3, r3
 8002248:	7cfa      	ldrb	r2, [r7, #19]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	121b      	asrs	r3, r3, #8
 8002252:	b2db      	uxtb	r3, r3
 8002254:	74bb      	strb	r3, [r7, #18]
 8002256:	e00a      	b.n	800226e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002260:	7cfa      	ldrb	r2, [r7, #19]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	121b      	asrs	r3, r3, #8
 800226a:	b2db      	uxtb	r3, r3
 800226c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	797a      	ldrb	r2, [r7, #5]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b29b      	uxth	r3, r3
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b04      	cmp	r3, #4
 8002288:	d839      	bhi.n	80022fe <hsl_to_rgb+0x142>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <hsl_to_rgb+0xd4>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a5 	.word	0x080022a5
 8002294:	080022b7 	.word	0x080022b7
 8002298:	080022c9 	.word	0x080022c9
 800229c:	080022db 	.word	0x080022db
 80022a0:	080022ed 	.word	0x080022ed
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	75fb      	strb	r3, [r7, #23]
 80022aa:	7cbb      	ldrb	r3, [r7, #18]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	75bb      	strb	r3, [r7, #22]
 80022b0:	2300      	movs	r3, #0
 80022b2:	757b      	strb	r3, [r7, #21]
 80022b4:	e02c      	b.n	8002310 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80022b6:	7cbb      	ldrb	r3, [r7, #18]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	75fb      	strb	r3, [r7, #23]
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	75bb      	strb	r3, [r7, #22]
 80022c2:	2300      	movs	r3, #0
 80022c4:	757b      	strb	r3, [r7, #21]
 80022c6:	e023      	b.n	8002310 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	75bb      	strb	r3, [r7, #22]
 80022d2:	7cbb      	ldrb	r3, [r7, #18]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	757b      	strb	r3, [r7, #21]
 80022d8:	e01a      	b.n	8002310 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]
 80022de:	7cbb      	ldrb	r3, [r7, #18]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	75bb      	strb	r3, [r7, #22]
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	757b      	strb	r3, [r7, #21]
 80022ea:	e011      	b.n	8002310 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80022ec:	7cbb      	ldrb	r3, [r7, #18]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	75fb      	strb	r3, [r7, #23]
 80022f2:	2300      	movs	r3, #0
 80022f4:	75bb      	strb	r3, [r7, #22]
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	757b      	strb	r3, [r7, #21]
 80022fc:	e008      	b.n	8002310 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	75fb      	strb	r3, [r7, #23]
 8002304:	2300      	movs	r3, #0
 8002306:	75bb      	strb	r3, [r7, #22]
 8002308:	7cbb      	ldrb	r3, [r7, #18]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	757b      	strb	r3, [r7, #21]
 800230e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	7c7b      	ldrb	r3, [r7, #17]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4413      	add	r3, r2
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	7dbb      	ldrb	r3, [r7, #22]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	7c7b      	ldrb	r3, [r7, #17]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	440b      	add	r3, r1
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	431a      	orrs	r2, r3
 800232e:	7d7b      	ldrb	r3, [r7, #21]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	7c7b      	ldrb	r3, [r7, #17]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	440b      	add	r3, r1
 800233a:	4313      	orrs	r3, r2
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002350:	e7fe      	b.n	8002350 <Error_Handler+0x8>
	...

08002354 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <RetargetInit+0x28>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <RetargetInit+0x2c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6898      	ldr	r0, [r3, #8]
 8002368:	2300      	movs	r3, #0
 800236a:	2202      	movs	r2, #2
 800236c:	2100      	movs	r1, #0
 800236e:	f005 fd13 	bl	8007d98 <setvbuf>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20003320 	.word	0x20003320
 8002380:	20000010 	.word	0x20000010

08002384 <_isatty>:

int _isatty(int fd) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db04      	blt.n	800239c <_isatty+0x18>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	dc01      	bgt.n	800239c <_isatty+0x18>
    return 1;
 8002398:	2301      	movs	r3, #1
 800239a:	e005      	b.n	80023a8 <_isatty+0x24>

  errno = EBADF;
 800239c:	f005 fcb2 	bl	8007d04 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2209      	movs	r2, #9
 80023a4:	601a      	str	r2, [r3, #0]
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_write>:

int _write(int fd, char* ptr, int len) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <_write+0x18>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d111      	bne.n	80023ec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <_write+0x54>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	f004 fbc4 	bl	8006b62 <HAL_UART_Transmit>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <_write+0x38>
      return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	e008      	b.n	80023fa <_write+0x4a>
    else
      return EIO;
 80023e8:	2305      	movs	r3, #5
 80023ea:	e006      	b.n	80023fa <_write+0x4a>
  }
  errno = EBADF;
 80023ec:	f005 fc8a 	bl	8007d04 <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2209      	movs	r2, #9
 80023f4:	601a      	str	r2, [r3, #0]
  return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20003320 	.word	0x20003320

08002408 <_close>:

int _close(int fd) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db04      	blt.n	8002420 <_close+0x18>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	dc01      	bgt.n	8002420 <_close+0x18>
    return 0;
 800241c:	2300      	movs	r3, #0
 800241e:	e006      	b.n	800242e <_close+0x26>

  errno = EBADF;
 8002420:	f005 fc70 	bl	8007d04 <__errno>
 8002424:	4603      	mov	r3, r0
 8002426:	2209      	movs	r2, #9
 8002428:	601a      	str	r2, [r3, #0]
  return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002442:	f005 fc5f 	bl	8007d04 <__errno>
 8002446:	4603      	mov	r3, r0
 8002448:	2209      	movs	r2, #9
 800244a:	601a      	str	r2, [r3, #0]
  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_read>:

int _read(int fd, char* ptr, int len) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d110      	bne.n	800248c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <_read+0x4c>)
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002472:	2201      	movs	r2, #1
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	f004 fc06 	bl	8006c86 <HAL_UART_Receive>
 800247a:	4603      	mov	r3, r0
 800247c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <_read+0x30>
      return 1;
 8002484:	2301      	movs	r3, #1
 8002486:	e008      	b.n	800249a <_read+0x42>
    else
      return EIO;
 8002488:	2305      	movs	r3, #5
 800248a:	e006      	b.n	800249a <_read+0x42>
  }
  errno = EBADF;
 800248c:	f005 fc3a 	bl	8007d04 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	2209      	movs	r2, #9
 8002494:	601a      	str	r2, [r3, #0]
  return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20003320 	.word	0x20003320

080024a8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db08      	blt.n	80024ca <_fstat+0x22>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	dc05      	bgt.n	80024ca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c4:	605a      	str	r2, [r3, #4]
    return 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e005      	b.n	80024d6 <_fstat+0x2e>
  }

  errno = EBADF;
 80024ca:	f005 fc1b 	bl	8007d04 <__errno>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2209      	movs	r2, #9
 80024d2:	601a      	str	r2, [r3, #0]
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	460a      	mov	r2, r1
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	4613      	mov	r3, r2
 80024ec:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	79ba      	ldrb	r2, [r7, #6]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	121b      	asrs	r3, r3, #8
 80024f8:	b2db      	uxtb	r3, r3
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	4603      	mov	r3, r0
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	460b      	mov	r3, r1
 8002520:	717b      	strb	r3, [r7, #5]
 8002522:	4613      	mov	r3, r2
 8002524:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	189c      	adds	r4, r3, r2
 800252e:	797b      	ldrb	r3, [r7, #5]
 8002530:	21b0      	movs	r1, #176	; 0xb0
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ffd3 	bl	80024de <scale8>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <led_set_RGB+0x6c>)
 800253e:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3301      	adds	r3, #1
 800254a:	490a      	ldr	r1, [pc, #40]	; (8002574 <led_set_RGB+0x6c>)
 800254c:	79ba      	ldrb	r2, [r7, #6]
 800254e:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	1c9c      	adds	r4, r3, #2
 800255a:	793b      	ldrb	r3, [r7, #4]
 800255c:	21f0      	movs	r1, #240	; 0xf0
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ffbd 	bl	80024de <scale8>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <led_set_RGB+0x6c>)
 800256a:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	20003324 	.word	0x20003324

08002578 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 800257e:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <led_render+0x13c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <led_render+0x1a>
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <led_render+0x140>)
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d014      	beq.n	80025bc <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	e006      	b.n	80025a6 <led_render+0x2e>
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4a48      	ldr	r2, [pc, #288]	; (80026bc <led_render+0x144>)
 800259c:	2100      	movs	r1, #0
 800259e:	54d1      	strb	r1, [r2, r3]
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	3301      	adds	r3, #1
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b2f      	cmp	r3, #47	; 0x2f
 80025aa:	d9f5      	bls.n	8002598 <led_render+0x20>
    wr_buf_p = 0;
 80025ac:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <led_render+0x13c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80025b2:	2100      	movs	r1, #0
 80025b4:	4842      	ldr	r0, [pc, #264]	; (80026c0 <led_render+0x148>)
 80025b6:	f003 fa81 	bl	8005abc <HAL_TIM_PWM_Stop_DMA>
    return;
 80025ba:	e078      	b.n	80026ae <led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80025bc:	2300      	movs	r3, #0
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	e069      	b.n	8002696 <led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80025c2:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <led_render+0x14c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dd01      	ble.n	80025da <led_render+0x62>
 80025d6:	2126      	movs	r1, #38	; 0x26
 80025d8:	e000      	b.n	80025dc <led_render+0x64>
 80025da:	2113      	movs	r1, #19
 80025dc:	4a37      	ldr	r2, [pc, #220]	; (80026bc <led_render+0x144>)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	460a      	mov	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <led_render+0x14c>)
 80025e8:	785b      	ldrb	r3, [r3, #1]
 80025ea:	461a      	mov	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dd01      	ble.n	80025fe <led_render+0x86>
 80025fa:	2126      	movs	r1, #38	; 0x26
 80025fc:	e000      	b.n	8002600 <led_render+0x88>
 80025fe:	2113      	movs	r1, #19
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3308      	adds	r3, #8
 8002604:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <led_render+0x144>)
 8002606:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <led_render+0x14c>)
 800260a:	789b      	ldrb	r3, [r3, #2]
 800260c:	461a      	mov	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd01      	ble.n	8002620 <led_render+0xa8>
 800261c:	2126      	movs	r1, #38	; 0x26
 800261e:	e000      	b.n	8002622 <led_render+0xaa>
 8002620:	2113      	movs	r1, #19
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3310      	adds	r3, #16
 8002626:	4a25      	ldr	r2, [pc, #148]	; (80026bc <led_render+0x144>)
 8002628:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <led_render+0x14c>)
 800262c:	78db      	ldrb	r3, [r3, #3]
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	dd01      	ble.n	8002642 <led_render+0xca>
 800263e:	2126      	movs	r1, #38	; 0x26
 8002640:	e000      	b.n	8002644 <led_render+0xcc>
 8002642:	2113      	movs	r1, #19
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3318      	adds	r3, #24
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <led_render+0x144>)
 800264a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <led_render+0x14c>)
 800264e:	791b      	ldrb	r3, [r3, #4]
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b00      	cmp	r3, #0
 800265e:	dd01      	ble.n	8002664 <led_render+0xec>
 8002660:	2126      	movs	r1, #38	; 0x26
 8002662:	e000      	b.n	8002666 <led_render+0xee>
 8002664:	2113      	movs	r1, #19
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	3320      	adds	r3, #32
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <led_render+0x144>)
 800266c:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <led_render+0x14c>)
 8002670:	795b      	ldrb	r3, [r3, #5]
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	dd01      	ble.n	8002686 <led_render+0x10e>
 8002682:	2126      	movs	r1, #38	; 0x26
 8002684:	e000      	b.n	8002688 <led_render+0x110>
 8002686:	2113      	movs	r1, #19
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3328      	adds	r3, #40	; 0x28
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <led_render+0x144>)
 800268e:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b07      	cmp	r3, #7
 800269a:	d992      	bls.n	80025c2 <led_render+0x4a>
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 800269c:	2330      	movs	r3, #48	; 0x30
 800269e:	4a07      	ldr	r2, [pc, #28]	; (80026bc <led_render+0x144>)
 80026a0:	2100      	movs	r1, #0
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <led_render+0x148>)
 80026a4:	f003 f842 	bl	800572c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <led_render+0x13c>)
 80026aa:	2202      	movs	r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20003368 	.word	0x20003368
 80026b8:	20003238 	.word	0x20003238
 80026bc:	20003338 	.word	0x20003338
 80026c0:	200031f0 	.word	0x200031f0
 80026c4:	20003324 	.word	0x20003324

080026c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d853      	bhi.n	8002780 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e047      	b.n	800276e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	4a34      	ldr	r2, [pc, #208]	; (80027bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	dd01      	ble.n	8002700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80026fc:	2126      	movs	r1, #38	; 0x26
 80026fe:	e000      	b.n	8002702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8002700:	2113      	movs	r1, #19
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	460a      	mov	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	3301      	adds	r3, #1
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	461a      	mov	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	dd01      	ble.n	8002730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800272c:	2126      	movs	r1, #38	; 0x26
 800272e:	e000      	b.n	8002732 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8002730:	2113      	movs	r1, #19
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3308      	adds	r3, #8
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002738:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3302      	adds	r3, #2
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	dd01      	ble.n	800275e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800275a:	2126      	movs	r1, #38	; 0x26
 800275c:	e000      	b.n	8002760 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800275e:	2113      	movs	r1, #19
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3310      	adds	r3, #16
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002766:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b07      	cmp	r3, #7
 8002772:	d9b4      	bls.n	80026de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800277c:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800277e:	e015      	b.n	80027ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < 8 + 2) {
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b09      	cmp	r3, #9
 8002786:	d811      	bhi.n	80027ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	72fb      	strb	r3, [r7, #11]
 800278c:	e006      	b.n	800279c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002792:	2100      	movs	r1, #0
 8002794:	54d1      	strb	r1, [r2, r3]
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	3301      	adds	r3, #1
 800279a:	72fb      	strb	r3, [r7, #11]
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	2b17      	cmp	r3, #23
 80027a0:	d9f5      	bls.n	800278e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	20003368 	.word	0x20003368
 80027bc:	20003324 	.word	0x20003324
 80027c0:	20003338 	.word	0x20003338

080027c4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80027cc:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d852      	bhi.n	800287a <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e046      	b.n	8002868 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dd01      	ble.n	80027fc <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80027f8:	2126      	movs	r1, #38	; 0x26
 80027fa:	e000      	b.n	80027fe <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80027fc:	2113      	movs	r1, #19
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3318      	adds	r3, #24
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002804:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3301      	adds	r3, #1
 8002812:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd01      	ble.n	800282a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002826:	2126      	movs	r1, #38	; 0x26
 8002828:	e000      	b.n	800282c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800282a:	2113      	movs	r1, #19
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3320      	adds	r3, #32
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002832:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	3302      	adds	r3, #2
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	461a      	mov	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	dd01      	ble.n	8002858 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002854:	2126      	movs	r1, #38	; 0x26
 8002856:	e000      	b.n	800285a <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002858:	2113      	movs	r1, #19
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3328      	adds	r3, #40	; 0x28
 800285e:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002860:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d9b5      	bls.n	80027da <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002876:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8002878:	e01d      	b.n	80028b6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b07      	cmp	r3, #7
 8002880:	d812      	bhi.n	80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002882:	2318      	movs	r3, #24
 8002884:	72fb      	strb	r3, [r7, #11]
 8002886:	e006      	b.n	8002896 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800288c:	2100      	movs	r1, #0
 800288e:	54d1      	strb	r1, [r2, r3]
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	3301      	adds	r3, #1
 8002894:	72fb      	strb	r3, [r7, #11]
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	2b2f      	cmp	r3, #47	; 0x2f
 800289a:	d9f5      	bls.n	8002888 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028a4:	6013      	str	r3, [r2, #0]
}
 80028a6:	e006      	b.n	80028b6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80028ae:	2100      	movs	r1, #0
 80028b0:	4806      	ldr	r0, [pc, #24]	; (80028cc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80028b2:	f003 f903 	bl	8005abc <HAL_TIM_PWM_Stop_DMA>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20003368 	.word	0x20003368
 80028c4:	20003324 	.word	0x20003324
 80028c8:	20003338 	.word	0x20003338
 80028cc:	200031f0 	.word	0x200031f0

080028d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_MspInit+0x68>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <HAL_MspInit+0x68>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_MspInit+0x68>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_MspInit+0x68>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_MspInit+0x68>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_MspInit+0x68>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2005      	movs	r0, #5
 8002914:	f000 fc47 	bl	80031a6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002918:	2005      	movs	r0, #5
 800291a:	f000 fc60 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2005      	movs	r0, #5
 8002924:	f000 fc3f 	bl	80031a6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002928:	2005      	movs	r0, #5
 800292a:	f000 fc58 	bl	80031de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_CRC_MspInit+0x3c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_CRC_MspInit+0x40>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023000 	.word	0x40023000
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <HAL_I2C_MspInit+0xc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d14b      	bne.n	8002a3a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e0:	2312      	movs	r3, #18
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029ec:	2304      	movs	r3, #4
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4815      	ldr	r0, [pc, #84]	; (8002a4c <HAL_I2C_MspInit+0xcc>)
 80029f8:	f001 f82a 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a02:	2312      	movs	r3, #18
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <HAL_I2C_MspInit+0xd0>)
 8002a1a:	f001 f819 	bl	8003a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 8002a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_I2C_MspInit+0xc8>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40005c00 	.word	0x40005c00
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020000 	.word	0x40020000

08002a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_SPI_MspInit+0x84>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12c      	bne.n	8002ad0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_SPI_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002aae:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <HAL_SPI_MspInit+0x8c>)
 8002acc:	f000 ffc0 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40015000 	.word	0x40015000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021400 	.word	0x40021400

08002ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_TIM_Base_MspInit+0xd0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10e      	bne.n	8002b14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b12:	e04a      	b.n	8002baa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d145      	bne.n	8002baa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b46:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b76:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b7e:	480f      	ldr	r0, [pc, #60]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b80:	f000 fb64 	bl	800324c <HAL_DMA_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8002b8a:	f7ff fbdd 	bl	8002348 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
 8002b94:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_TIM_Base_MspInit+0xd8>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	201c      	movs	r0, #28
 8002ba0:	f000 fb01 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba4:	201c      	movs	r0, #28
 8002ba6:	f000 fb1a 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	20003238 	.word	0x20003238
 8002bc0:	40026088 	.word	0x40026088

08002bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d11d      	bne.n	8002c22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_TIM_MspPostInit+0x68>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_TIM_MspPostInit+0x68>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_TIM_MspPostInit+0x68>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c02:	2320      	movs	r3, #32
 8002c04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <HAL_TIM_MspPostInit+0x6c>)
 8002c1e:	f000 ff17 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a36      	ldr	r2, [pc, #216]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d135      	bne.n	8002cc2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4822      	ldr	r0, [pc, #136]	; (8002d34 <HAL_UART_MspInit+0x100>)
 8002cac:	f000 fed0 	bl	8003a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2025      	movs	r0, #37	; 0x25
 8002cb6:	f000 fa76 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cba:	2025      	movs	r0, #37	; 0x25
 8002cbc:	f000 fa8f 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cc0:	e030      	b.n	8002d24 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_UART_MspInit+0x104>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d12b      	bne.n	8002d24 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d04:	2360      	movs	r3, #96	; 0x60
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d14:	2307      	movs	r3, #7
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <HAL_UART_MspInit+0x108>)
 8002d20:	f000 fe96 	bl	8003a50 <HAL_GPIO_Init>
}
 8002d24:	bf00      	nop
 8002d26:	3730      	adds	r7, #48	; 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40011000 	.word	0x40011000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40004400 	.word	0x40004400
 8002d3c:	40020c00 	.word	0x40020c00

08002d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <NMI_Handler+0x4>

08002d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <HardFault_Handler+0x4>

08002d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <MemManage_Handler+0x4>

08002d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <BusFault_Handler+0x4>

08002d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <UsageFault_Handler+0x4>

08002d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d8c:	f000 f8ec 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <DMA1_Stream5_IRQHandler+0x10>)
 8002daa:	f000 fbe7 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20003238 	.word	0x20003238

08002db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <TIM2_IRQHandler+0x10>)
 8002dbe:	f002 ff4f 	bl	8005c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200031f0 	.word	0x200031f0

08002dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <USART1_IRQHandler+0x10>)
 8002dd2:	f004 f82b 	bl	8006e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20003298 	.word	0x20003298

08002de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <_sbrk+0x5c>)
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <_sbrk+0x60>)
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <_sbrk+0x64>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <_sbrk+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e10:	f004 ff78 	bl	8007d04 <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	220c      	movs	r2, #12
 8002e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e1e:	e009      	b.n	8002e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <_sbrk+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20030000 	.word	0x20030000
 8002e40:	00000400 	.word	0x00000400
 8002e44:	2000336c 	.word	0x2000336c
 8002e48:	20003388 	.word	0x20003388

08002e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <SystemInit+0x20>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <SystemInit+0x20>)
 8002e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e76:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e8c:	4c0b      	ldr	r4, [pc, #44]	; (8002ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e9a:	f7ff ffd7 	bl	8002e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f004 ff37 	bl	8007d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea2:	f7fe fce1 	bl	8001868 <main>
  bx  lr    
 8002ea6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ea8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002eb4:	080094b0 	.word	0x080094b0
  ldr r2, =_sbss
 8002eb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002ebc:	20003384 	.word	0x20003384

08002ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec0:	e7fe      	b.n	8002ec0 <ADC_IRQHandler>
	...

08002ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_Init+0x40>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_Init+0x40>)
 8002eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_Init+0x40>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eec:	2003      	movs	r0, #3
 8002eee:	f000 f94f 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f000 f808 	bl	8002f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fcea 	bl	80028d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_InitTick+0x54>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_InitTick+0x58>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f967 	bl	80031fa <HAL_SYSTICK_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00e      	b.n	8002f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d80a      	bhi.n	8002f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f44:	f000 f92f 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f48:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <HAL_InitTick+0x5c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	20000008 	.word	0x20000008

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	20003370 	.word	0x20003370

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20003370 	.word	0x20003370

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e00e      	b.n	8003242 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	795b      	ldrb	r3, [r3, #5]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fb81 	bl	800293c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003258:	f7ff fe9a 	bl	8002f90 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e099      	b.n	800339c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003288:	e00f      	b.n	80032aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328a:	f7ff fe81 	bl	8002f90 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b05      	cmp	r3, #5
 8003296:	d908      	bls.n	80032aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e078      	b.n	800339c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e8      	bne.n	800328a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_DMA_Init+0x158>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2b04      	cmp	r3, #4
 8003302:	d107      	bne.n	8003314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4313      	orrs	r3, r2
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b04      	cmp	r3, #4
 800333c:	d117      	bne.n	800336e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fb01 	bl	8003958 <DMA_CheckFifoParam>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800336a:	2301      	movs	r3, #1
 800336c:	e016      	b.n	800339c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fab8 	bl	80038ec <DMA_CalcBaseAndBitshift>
 800337c:	4603      	mov	r3, r0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	223f      	movs	r2, #63	; 0x3f
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	f010803f 	.word	0xf010803f

080033a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_DMA_Start_IT+0x26>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e040      	b.n	8003450 <HAL_DMA_Start_IT+0xa8>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d12f      	bne.n	8003442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa4a 	bl	8003890 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	223f      	movs	r2, #63	; 0x3f
 8003402:	409a      	lsls	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0216 	orr.w	r2, r2, #22
 8003416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e005      	b.n	800344e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800344a:	2302      	movs	r3, #2
 800344c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003466:	f7ff fd93 	bl	8002f90 <HAL_GetTick>
 800346a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d008      	beq.n	800348a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e052      	b.n	8003530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0216 	bic.w	r2, r2, #22
 8003498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_DMA_Abort+0x62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0208 	bic.w	r2, r2, #8
 80034c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034da:	e013      	b.n	8003504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034dc:	f7ff fd58 	bl	8002f90 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d90c      	bls.n	8003504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e015      	b.n	8003530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e4      	bne.n	80034dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	223f      	movs	r2, #63	; 0x3f
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e00c      	b.n	8003570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2205      	movs	r2, #5
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003588:	4b8e      	ldr	r3, [pc, #568]	; (80037c4 <HAL_DMA_IRQHandler+0x248>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a8e      	ldr	r2, [pc, #568]	; (80037c8 <HAL_DMA_IRQHandler+0x24c>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	2208      	movs	r2, #8
 80035a8:	409a      	lsls	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01a      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	2208      	movs	r2, #8
 80035d6:	409a      	lsls	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2201      	movs	r2, #1
 800360c:	409a      	lsls	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2204      	movs	r2, #4
 8003624:	409a      	lsls	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	2210      	movs	r2, #16
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d043      	beq.n	80036ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03c      	beq.n	80036ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2210      	movs	r2, #16
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d024      	beq.n	80036ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
 80036aa:	e01f      	b.n	80036ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	e016      	b.n	80036ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0208 	bic.w	r2, r2, #8
 80036da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2220      	movs	r2, #32
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 808f 	beq.w	800381c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8087 	beq.w	800381c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2220      	movs	r2, #32
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b05      	cmp	r3, #5
 8003724:	d136      	bne.n	8003794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0216 	bic.w	r2, r2, #22
 8003734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_DMA_IRQHandler+0x1da>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0208 	bic.w	r2, r2, #8
 8003764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	223f      	movs	r2, #63	; 0x3f
 800376c:	409a      	lsls	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	d07e      	beq.n	8003888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
        }
        return;
 8003792:	e079      	b.n	8003888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01d      	beq.n	80037de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d031      	beq.n	800381c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	e02c      	b.n	800381c <HAL_DMA_IRQHandler+0x2a0>
 80037c2:	bf00      	nop
 80037c4:	20000004 	.word	0x20000004
 80037c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d023      	beq.n	800381c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
 80037dc:	e01e      	b.n	800381c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10f      	bne.n	800380c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0210 	bic.w	r2, r2, #16
 80037fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	2b00      	cmp	r3, #0
 8003822:	d032      	beq.n	800388a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2205      	movs	r2, #5
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3301      	adds	r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	d307      	bcc.n	8003864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_DMA_IRQHandler+0x2cc>
 8003862:	e000      	b.n	8003866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e000      	b.n	800388a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003888:	bf00      	nop
    }
  }
}
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d108      	bne.n	80038d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038ce:	e007      	b.n	80038e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	3b10      	subs	r3, #16
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <DMA_CalcBaseAndBitshift+0x64>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <DMA_CalcBaseAndBitshift+0x68>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d909      	bls.n	800392e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	659a      	str	r2, [r3, #88]	; 0x58
 800392c:	e007      	b.n	800393e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	aaaaaaab 	.word	0xaaaaaaab
 8003954:	080092fc 	.word	0x080092fc

08003958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11f      	bne.n	80039b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d856      	bhi.n	8003a26 <DMA_CheckFifoParam+0xce>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <DMA_CheckFifoParam+0x28>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	08003991 	.word	0x08003991
 8003984:	080039a3 	.word	0x080039a3
 8003988:	08003991 	.word	0x08003991
 800398c:	08003a27 	.word	0x08003a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d046      	beq.n	8003a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a0:	e043      	b.n	8003a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039aa:	d140      	bne.n	8003a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b0:	e03d      	b.n	8003a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ba:	d121      	bne.n	8003a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d837      	bhi.n	8003a32 <DMA_CheckFifoParam+0xda>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x70>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039df 	.word	0x080039df
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	080039f1 	.word	0x080039f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e030      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d025      	beq.n	8003a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ee:	e022      	b.n	8003a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f8:	d11f      	bne.n	8003a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039fe:	e01c      	b.n	8003a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d903      	bls.n	8003a0e <DMA_CheckFifoParam+0xb6>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d003      	beq.n	8003a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a0c:	e018      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      break;
 8003a12:	e015      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e00b      	b.n	8003a3e <DMA_CheckFifoParam+0xe6>
      break;
 8003a26:	bf00      	nop
 8003a28:	e00a      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e008      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e006      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e004      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e002      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e177      	b.n	8003d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	f040 8166 	bne.w	8003d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d005      	beq.n	8003aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d130      	bne.n	8003b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0201 	and.w	r2, r3, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d017      	beq.n	8003b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d123      	bne.n	8003b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	08da      	lsrs	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3208      	adds	r2, #8
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	220f      	movs	r2, #15
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	69b9      	ldr	r1, [r7, #24]
 8003b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80c0 	beq.w	8003d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf2:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <HAL_GPIO_Init+0x328>)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_GPIO_Init+0x32c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d037      	beq.n	8003c8e <HAL_GPIO_Init+0x23e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_GPIO_Init+0x330>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_GPIO_Init+0x23a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_GPIO_Init+0x334>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02b      	beq.n	8003c86 <HAL_GPIO_Init+0x236>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a55      	ldr	r2, [pc, #340]	; (8003d88 <HAL_GPIO_Init+0x338>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d025      	beq.n	8003c82 <HAL_GPIO_Init+0x232>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_GPIO_Init+0x33c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <HAL_GPIO_Init+0x22e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <HAL_GPIO_Init+0x340>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d019      	beq.n	8003c7a <HAL_GPIO_Init+0x22a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_GPIO_Init+0x344>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_GPIO_Init+0x226>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a51      	ldr	r2, [pc, #324]	; (8003d98 <HAL_GPIO_Init+0x348>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00d      	beq.n	8003c72 <HAL_GPIO_Init+0x222>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a50      	ldr	r2, [pc, #320]	; (8003d9c <HAL_GPIO_Init+0x34c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <HAL_GPIO_Init+0x21e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	; (8003da0 <HAL_GPIO_Init+0x350>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_GPIO_Init+0x21a>
 8003c66:	2309      	movs	r3, #9
 8003c68:	e012      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	e010      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	e00e      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c72:	2307      	movs	r3, #7
 8003c74:	e00c      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c76:	2306      	movs	r3, #6
 8003c78:	e00a      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <HAL_GPIO_Init+0x328>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d26:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f ae84 	bls.w	8003a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40021400 	.word	0x40021400
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40021c00 	.word	0x40021c00
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	40022400 	.word	0x40022400
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc4:	e003      	b.n	8003dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	041a      	lsls	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	619a      	str	r2, [r3, #24]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e12b      	b.n	8004046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe fdbc 	bl	8002980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e40:	f000 fdfc 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a81      	ldr	r2, [pc, #516]	; (8004050 <HAL_I2C_Init+0x274>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d807      	bhi.n	8003e60 <HAL_I2C_Init+0x84>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_I2C_Init+0x278>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bf94      	ite	ls
 8003e58:	2301      	movls	r3, #1
 8003e5a:	2300      	movhi	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e006      	b.n	8003e6e <HAL_I2C_Init+0x92>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a7d      	ldr	r2, [pc, #500]	; (8004058 <HAL_I2C_Init+0x27c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0e7      	b.n	8004046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a78      	ldr	r2, [pc, #480]	; (800405c <HAL_I2C_Init+0x280>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a6a      	ldr	r2, [pc, #424]	; (8004050 <HAL_I2C_Init+0x274>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d802      	bhi.n	8003eb0 <HAL_I2C_Init+0xd4>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3301      	adds	r3, #1
 8003eae:	e009      	b.n	8003ec4 <HAL_I2C_Init+0xe8>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	4a69      	ldr	r2, [pc, #420]	; (8004060 <HAL_I2C_Init+0x284>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	495c      	ldr	r1, [pc, #368]	; (8004050 <HAL_I2C_Init+0x274>)
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	d819      	bhi.n	8003f18 <HAL_I2C_Init+0x13c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e59      	subs	r1, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef2:	1c59      	adds	r1, r3, #1
 8003ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef8:	400b      	ands	r3, r1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_I2C_Init+0x138>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1e59      	subs	r1, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f12:	e051      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e04f      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <HAL_I2C_Init+0x168>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e012      	b.n	8003f6a <HAL_I2C_Init+0x18e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	0099      	lsls	r1, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x196>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e022      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10e      	bne.n	8003f98 <HAL_I2C_Init+0x1bc>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1e58      	subs	r0, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	440b      	add	r3, r1
 8003f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f96:	e00f      	b.n	8003fb8 <HAL_I2C_Init+0x1dc>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	0099      	lsls	r1, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6809      	ldr	r1, [r1, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6911      	ldr	r1, [r2, #16]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68d2      	ldr	r2, [r2, #12]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	000186a0 	.word	0x000186a0
 8004054:	001e847f 	.word	0x001e847f
 8004058:	003d08ff 	.word	0x003d08ff
 800405c:	431bde83 	.word	0x431bde83
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d129      	bne.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2224      	movs	r2, #36	; 0x24
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0210 	bic.w	r2, r2, #16
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d12a      	bne.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2224      	movs	r2, #36	; 0x24
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	f023 030f 	bic.w	r3, r3, #15
 800411c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	b29a      	uxth	r2, r3
 8004122:	89fb      	ldrh	r3, [r7, #14]
 8004124:	4313      	orrs	r3, r2
 8004126:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	89fa      	ldrh	r2, [r7, #14]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e267      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d075      	beq.n	8004266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d112      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b7e      	ldr	r3, [pc, #504]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e242      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x74>
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x98>
 80041da:	4b70      	ldr	r3, [pc, #448]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6f      	ldr	r2, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6c      	ldr	r2, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041f4:	4b69      	ldr	r3, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b66      	ldr	r3, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe febc 	bl	8002f90 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe feb8 	bl	8002f90 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e207      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xc0>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fea8 	bl	8002f90 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fea4 	bl	8002f90 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1f3      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b51      	ldr	r3, [pc, #324]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004286:	2b08      	cmp	r3, #8
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <HAL_RCC_OscConfig+0x240>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1c7      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4937      	ldr	r1, [pc, #220]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x244>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fe5d 	bl	8002f90 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fe fe59 	bl	8002f90 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1a8      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4925      	ldr	r1, [pc, #148]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_OscConfig+0x244>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fe3c 	bl	8002f90 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fe fe38 	bl	8002f90 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e187      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d036      	beq.n	80043b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCC_OscConfig+0x248>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe fe1c 	bl	8002f90 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435c:	f7fe fe18 	bl	8002f90 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e167      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
 800437a:	e01b      	b.n	80043b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_OscConfig+0x248>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7fe fe05 	bl	8002f90 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e00e      	b.n	80043a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fe01 	bl	8002f90 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d907      	bls.n	80043a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e150      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
 800439c:	40023800 	.word	0x40023800
 80043a0:	42470000 	.word	0x42470000
 80043a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ea      	bne.n	800438a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8097 	beq.w	80044f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b7d      	ldr	r3, [pc, #500]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b7a      	ldr	r3, [pc, #488]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b77      	ldr	r3, [pc, #476]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d118      	bne.n	8004430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe fdc1 	bl	8002f90 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fe fdbd 	bl	8002f90 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e10c      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x2ea>
 8004438:	4b64      	ldr	r3, [pc, #400]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
 8004444:	e01c      	b.n	8004480 <HAL_RCC_OscConfig+0x324>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b05      	cmp	r3, #5
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0x30c>
 800444e:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	6713      	str	r3, [r2, #112]	; 0x70
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0x324>
 8004468:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a57      	ldr	r2, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	4b55      	ldr	r3, [pc, #340]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a54      	ldr	r2, [pc, #336]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 0304 	bic.w	r3, r3, #4
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fe fd82 	bl	8002f90 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fe fd7e 	bl	8002f90 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0cb      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ee      	beq.n	8004490 <HAL_RCC_OscConfig+0x334>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fe fd6c 	bl	8002f90 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fe fd68 	bl	8002f90 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0b5      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ee      	bne.n	80044bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a1 	beq.w	800463c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fa:	4b34      	ldr	r3, [pc, #208]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b08      	cmp	r3, #8
 8004504:	d05c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d141      	bne.n	8004592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe fd3c 	bl	8002f90 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451c:	f7fe fd38 	bl	8002f90 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e087      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fe fd11 	bl	8002f90 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fe fd0d 	bl	8002f90 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e05c      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x416>
 8004590:	e054      	b.n	800463c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe fcfa 	bl	8002f90 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe fcf6 	bl	8002f90 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e045      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x444>
 80045be:	e03d      	b.n	800463c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e038      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4ec>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d028      	beq.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d121      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d11a      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800460e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004610:	4293      	cmp	r3, r2
 8004612:	d111      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	3b01      	subs	r3, #1
 8004622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d107      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0cc      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b68      	ldr	r3, [pc, #416]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90c      	bls.n	8004688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0b8      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d044      	beq.n	800476c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d119      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d003      	beq.n	800470a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	2b03      	cmp	r3, #3
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e067      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4934      	ldr	r1, [pc, #208]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800473c:	f7fe fc28 	bl	8002f90 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fe fc24 	bl	8002f90 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b25      	ldr	r3, [pc, #148]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d20c      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e032      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490e      	ldr	r1, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047d2:	f000 f821 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	5ccb      	ldrb	r3, [r1, r3]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fb88 	bl	8002f08 <HAL_InitTick>

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023c00 	.word	0x40023c00
 8004808:	40023800 	.word	0x40023800
 800480c:	080092e4 	.word	0x080092e4
 8004810:	20000004 	.word	0x20000004
 8004814:	20000008 	.word	0x20000008

08004818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b094      	sub	sp, #80	; 0x50
 800481e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	2300      	movs	r3, #0
 8004826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004828:	2300      	movs	r3, #0
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004830:	4b79      	ldr	r3, [pc, #484]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d00d      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x40>
 800483c:	2b08      	cmp	r3, #8
 800483e:	f200 80e1 	bhi.w	8004a04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x34>
 8004846:	2b04      	cmp	r3, #4
 8004848:	d003      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x3a>
 800484a:	e0db      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x204>)
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004850:	e0db      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004852:	4b73      	ldr	r3, [pc, #460]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004856:	e0d8      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004858:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004862:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d063      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	2200      	movs	r2, #0
 8004876:	63bb      	str	r3, [r7, #56]	; 0x38
 8004878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	633b      	str	r3, [r7, #48]	; 0x30
 8004882:	2300      	movs	r3, #0
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
 8004886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	f04f 0000 	mov.w	r0, #0
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	0159      	lsls	r1, r3, #5
 8004898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800489c:	0150      	lsls	r0, r2, #5
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4621      	mov	r1, r4
 80048a4:	1a51      	subs	r1, r2, r1
 80048a6:	6139      	str	r1, [r7, #16]
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb63 0301 	sbc.w	r3, r3, r1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048bc:	4659      	mov	r1, fp
 80048be:	018b      	lsls	r3, r1, #6
 80048c0:	4651      	mov	r1, sl
 80048c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048c6:	4651      	mov	r1, sl
 80048c8:	018a      	lsls	r2, r1, #6
 80048ca:	4651      	mov	r1, sl
 80048cc:	ebb2 0801 	subs.w	r8, r2, r1
 80048d0:	4659      	mov	r1, fp
 80048d2:	eb63 0901 	sbc.w	r9, r3, r1
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ea:	4690      	mov	r8, r2
 80048ec:	4699      	mov	r9, r3
 80048ee:	4623      	mov	r3, r4
 80048f0:	eb18 0303 	adds.w	r3, r8, r3
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	462b      	mov	r3, r5
 80048f8:	eb49 0303 	adc.w	r3, r9, r3
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800490a:	4629      	mov	r1, r5
 800490c:	024b      	lsls	r3, r1, #9
 800490e:	4621      	mov	r1, r4
 8004910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004914:	4621      	mov	r1, r4
 8004916:	024a      	lsls	r2, r1, #9
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491e:	2200      	movs	r2, #0
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004928:	f7fb fcb2 	bl	8000290 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4613      	mov	r3, r2
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	e058      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004936:	4b38      	ldr	r3, [pc, #224]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	2200      	movs	r2, #0
 800493e:	4618      	mov	r0, r3
 8004940:	4611      	mov	r1, r2
 8004942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	f04f 0000 	mov.w	r0, #0
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	0159      	lsls	r1, r3, #5
 800495e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004962:	0150      	lsls	r0, r2, #5
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4641      	mov	r1, r8
 800496a:	ebb2 0a01 	subs.w	sl, r2, r1
 800496e:	4649      	mov	r1, r9
 8004970:	eb63 0b01 	sbc.w	fp, r3, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004988:	ebb2 040a 	subs.w	r4, r2, sl
 800498c:	eb63 050b 	sbc.w	r5, r3, fp
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	00eb      	lsls	r3, r5, #3
 800499a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499e:	00e2      	lsls	r2, r4, #3
 80049a0:	4614      	mov	r4, r2
 80049a2:	461d      	mov	r5, r3
 80049a4:	4643      	mov	r3, r8
 80049a6:	18e3      	adds	r3, r4, r3
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	464b      	mov	r3, r9
 80049ac:	eb45 0303 	adc.w	r3, r5, r3
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049be:	4629      	mov	r1, r5
 80049c0:	028b      	lsls	r3, r1, #10
 80049c2:	4621      	mov	r1, r4
 80049c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c8:	4621      	mov	r1, r4
 80049ca:	028a      	lsls	r2, r1, #10
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	61fa      	str	r2, [r7, #28]
 80049d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049dc:	f7fb fc58 	bl	8000290 <__aeabi_uldivmod>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4613      	mov	r3, r2
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3750      	adds	r7, #80	; 0x50
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	007a1200 	.word	0x007a1200

08004a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a40:	f7ff fff0 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0a9b      	lsrs	r3, r3, #10
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	080092f4 	.word	0x080092f4

08004a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a68:	f7ff ffdc 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0b5b      	lsrs	r3, r3, #13
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	080092f4 	.word	0x080092f4

08004a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e07b      	b.n	8004b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aae:	d009      	beq.n	8004ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
 8004ab6:	e005      	b.n	8004ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd ffb8 	bl	8002a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0104 	and.w	r1, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0210 	and.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b088      	sub	sp, #32
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_SPI_Transmit+0x22>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e126      	b.n	8004e0e <HAL_SPI_Transmit+0x270>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc8:	f7fe f9e2 	bl	8002f90 <HAL_GetTick>
 8004bcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
 8004be0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004be2:	e10b      	b.n	8004dfc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_Transmit+0x52>
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bf4:	e102      	b.n	8004dfc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3c:	d10f      	bne.n	8004c5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d007      	beq.n	8004c7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c84:	d14b      	bne.n	8004d1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Transmit+0xf6>
 8004c8e:	8afb      	ldrh	r3, [r7, #22]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d13e      	bne.n	8004d12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	881a      	ldrh	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	1c9a      	adds	r2, r3, #2
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cb8:	e02b      	b.n	8004d12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d112      	bne.n	8004cee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cec:	e011      	b.n	8004d12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cee:	f7fe f94f 	bl	8002f90 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d803      	bhi.n	8004d06 <HAL_SPI_Transmit+0x168>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d04:	d102      	bne.n	8004d0c <HAL_SPI_Transmit+0x16e>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d10:	e074      	b.n	8004dfc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ce      	bne.n	8004cba <HAL_SPI_Transmit+0x11c>
 8004d1c:	e04c      	b.n	8004db8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_Transmit+0x18e>
 8004d26:	8afb      	ldrh	r3, [r7, #22]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d140      	bne.n	8004dae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d52:	e02c      	b.n	8004dae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d113      	bne.n	8004d8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d88:	e011      	b.n	8004dae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8a:	f7fe f901 	bl	8002f90 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d803      	bhi.n	8004da2 <HAL_SPI_Transmit+0x204>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x20a>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dac:	e026      	b.n	8004dfc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1cd      	bne.n	8004d54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fbcb 	bl	8005558 <SPI_EndRxTxTransaction>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e000      	b.n	8004dfc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004dfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af02      	add	r7, sp, #8
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d112      	bne.n	8004e5a <HAL_SPI_Receive+0x44>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10e      	bne.n	8004e5a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f8f1 	bl	8005038 <HAL_SPI_TransmitReceive>
 8004e56:	4603      	mov	r3, r0
 8004e58:	e0ea      	b.n	8005030 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_SPI_Receive+0x52>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e0e3      	b.n	8005030 <HAL_SPI_Receive+0x21a>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e70:	f7fe f88e 	bl	8002f90 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
 8004e84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e86:	e0ca      	b.n	800501e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Receive+0x7e>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e98:	e0c1      	b.n	800501e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee0:	d10f      	bne.n	8004f02 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d007      	beq.n	8004f20 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d162      	bne.n	8004fee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f28:	e02e      	b.n	8004f88 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d115      	bne.n	8004f64 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f103 020c 	add.w	r2, r3, #12
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f62:	e011      	b.n	8004f88 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f64:	f7fe f814 	bl	8002f90 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d803      	bhi.n	8004f7c <HAL_SPI_Receive+0x166>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7a:	d102      	bne.n	8004f82 <HAL_SPI_Receive+0x16c>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f86:	e04a      	b.n	800501e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1cb      	bne.n	8004f2a <HAL_SPI_Receive+0x114>
 8004f92:	e031      	b.n	8004ff8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d113      	bne.n	8004fca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	b292      	uxth	r2, r2
 8004fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc8:	e011      	b.n	8004fee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fca:	f7fd ffe1 	bl	8002f90 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d803      	bhi.n	8004fe2 <HAL_SPI_Receive+0x1cc>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe0:	d102      	bne.n	8004fe8 <HAL_SPI_Receive+0x1d2>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fec:	e017      	b.n	800501e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1cd      	bne.n	8004f94 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa45 	bl	800548c <SPI_EndRxTransaction>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
 800501a:	e000      	b.n	800501e <HAL_SPI_Receive+0x208>
  }

error :
 800501c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005046:	2301      	movs	r3, #1
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_SPI_TransmitReceive+0x26>
 800505a:	2302      	movs	r3, #2
 800505c:	e18a      	b.n	8005374 <HAL_SPI_TransmitReceive+0x33c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005066:	f7fd ff93 	bl	8002f90 <HAL_GetTick>
 800506a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005084:	2b01      	cmp	r3, #1
 8005086:	d00f      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x70>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d107      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x68>
 8005098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800509c:	2b04      	cmp	r3, #4
 800509e:	d003      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050a6:	e15b      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_SPI_TransmitReceive+0x82>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_TransmitReceive+0x82>
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050c0:	e14e      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d003      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2205      	movs	r2, #5
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	887a      	ldrh	r2, [r7, #2]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	887a      	ldrh	r2, [r7, #2]
 80050f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	887a      	ldrh	r2, [r7, #2]
 80050fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d007      	beq.n	800512a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005132:	d178      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x10a>
 800513c:	8b7b      	ldrh	r3, [r7, #26]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d166      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005166:	e053      	b.n	8005210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d11b      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x176>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d016      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x176>
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d113      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d119      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x1b8>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d014      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	b292      	uxth	r2, r2
 80051d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	1c9a      	adds	r2, r3, #2
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ec:	2301      	movs	r3, #1
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051f0:	f7fd fece 	bl	8002f90 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d807      	bhi.n	8005210 <HAL_SPI_TransmitReceive+0x1d8>
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005206:	d003      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800520e:	e0a7      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1a6      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x130>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1a1      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x130>
 8005224:	e07c      	b.n	8005320 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x1fc>
 800522e:	8b7b      	ldrh	r3, [r7, #26]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d16b      	bne.n	800530c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525a:	e057      	b.n	800530c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d11c      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x26c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x26c>
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d114      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d119      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x2ae>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d014      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052e2:	2301      	movs	r3, #1
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052e6:	f7fd fe53 	bl	8002f90 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_TransmitReceive+0x2c6>
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x2cc>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800530a:	e029      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1a2      	bne.n	800525c <HAL_SPI_TransmitReceive+0x224>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d19d      	bne.n	800525c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f917 	bl	8005558 <SPI_EndRxTxTransaction>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800533c:	e010      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	e000      	b.n	8005360 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800535e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005374:	4618      	mov	r0, r3
 8005376:	3730      	adds	r7, #48	; 0x30
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800538c:	f7fd fe00 	bl	8002f90 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	4413      	add	r3, r2
 800539a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800539c:	f7fd fdf8 	bl	8002f90 <HAL_GetTick>
 80053a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	015b      	lsls	r3, r3, #5
 80053a8:	0d1b      	lsrs	r3, r3, #20
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053b2:	e054      	b.n	800545e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ba:	d050      	beq.n	800545e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053bc:	f7fd fde8 	bl	8002f90 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d902      	bls.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d13d      	bne.n	800544e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ea:	d111      	bne.n	8005410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d004      	beq.n	8005400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fe:	d107      	bne.n	8005410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005418:	d10f      	bne.n	800543a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e017      	b.n	800547e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3b01      	subs	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	429a      	cmp	r2, r3
 800547a:	d19b      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000004 	.word	0x20000004

0800548c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a0:	d111      	bne.n	80054c6 <SPI_EndRxTransaction+0x3a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054aa:	d004      	beq.n	80054b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d107      	bne.n	80054c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d12a      	bne.n	8005526 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d012      	beq.n	8005500 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2180      	movs	r1, #128	; 0x80
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff ff49 	bl	800537c <SPI_WaitFlagStateUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02d      	beq.n	800554c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	f043 0220 	orr.w	r2, r3, #32
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e026      	b.n	800554e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	2101      	movs	r1, #1
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff ff36 	bl	800537c <SPI_WaitFlagStateUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01a      	beq.n	800554c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e013      	b.n	800554e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	2101      	movs	r1, #1
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff23 	bl	800537c <SPI_WaitFlagStateUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e000      	b.n	800554e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <SPI_EndRxTxTransaction+0x7c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <SPI_EndRxTxTransaction+0x80>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	0d5b      	lsrs	r3, r3, #21
 8005570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d112      	bne.n	80055aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff fef4 	bl	800537c <SPI_WaitFlagStateUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e00f      	b.n	80055ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d0f2      	beq.n	80055aa <SPI_EndRxTxTransaction+0x52>
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80055c6:	bf00      	nop
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000004 	.word	0x20000004
 80055d8:	165e9f81 	.word	0x165e9f81

080055dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e041      	b.n	8005672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fa6e 	bl	8002ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 feb4 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e041      	b.n	8005710 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f839 	bl	8005718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 fe65 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e022      	b.n	800579e <HAL_TIM_PWM_Start_DMA+0x72>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d109      	bne.n	8005772 <HAL_TIM_PWM_Start_DMA+0x46>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e015      	b.n	800579e <HAL_TIM_PWM_Start_DMA+0x72>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start_DMA+0x60>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e008      	b.n	800579e <HAL_TIM_PWM_Start_DMA+0x72>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
 80057a4:	e171      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_TIM_PWM_Start_DMA+0x94>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e022      	b.n	8005806 <HAL_TIM_PWM_Start_DMA+0xda>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d109      	bne.n	80057da <HAL_TIM_PWM_Start_DMA+0xae>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e015      	b.n	8005806 <HAL_TIM_PWM_Start_DMA+0xda>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d109      	bne.n	80057f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e008      	b.n	8005806 <HAL_TIM_PWM_Start_DMA+0xda>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d024      	beq.n	8005854 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start_DMA+0xee>
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e137      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005828:	e016      	b.n	8005858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005838:	e00e      	b.n	8005858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005848:	e006      	b.n	8005858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005852:	e001      	b.n	8005858 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e118      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b0c      	cmp	r3, #12
 800585c:	f200 80ae 	bhi.w	80059bc <HAL_TIM_PWM_Start_DMA+0x290>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800589d 	.word	0x0800589d
 800586c:	080059bd 	.word	0x080059bd
 8005870:	080059bd 	.word	0x080059bd
 8005874:	080059bd 	.word	0x080059bd
 8005878:	080058e5 	.word	0x080058e5
 800587c:	080059bd 	.word	0x080059bd
 8005880:	080059bd 	.word	0x080059bd
 8005884:	080059bd 	.word	0x080059bd
 8005888:	0800592d 	.word	0x0800592d
 800588c:	080059bd 	.word	0x080059bd
 8005890:	080059bd 	.word	0x080059bd
 8005894:	080059bd 	.word	0x080059bd
 8005898:	08005975 	.word	0x08005975
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	4a7c      	ldr	r2, [pc, #496]	; (8005a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 80058a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	4a7b      	ldr	r2, [pc, #492]	; (8005a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	4a7a      	ldr	r2, [pc, #488]	; (8005a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 80058b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3334      	adds	r3, #52	; 0x34
 80058c0:	461a      	mov	r2, r3
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	f7fd fd70 	bl	80033a8 <HAL_DMA_Start_IT>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0db      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e0:	60da      	str	r2, [r3, #12]
      break;
 80058e2:	e06e      	b.n	80059c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	4a6a      	ldr	r2, [pc, #424]	; (8005a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 80058ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	4a69      	ldr	r2, [pc, #420]	; (8005a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	4a68      	ldr	r2, [pc, #416]	; (8005a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3338      	adds	r3, #56	; 0x38
 8005908:	461a      	mov	r2, r3
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	f7fd fd4c 	bl	80033a8 <HAL_DMA_Start_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0b7      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005928:	60da      	str	r2, [r3, #12]
      break;
 800592a:	e04a      	b.n	80059c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005932:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a57      	ldr	r2, [pc, #348]	; (8005a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a56      	ldr	r2, [pc, #344]	; (8005a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005942:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	333c      	adds	r3, #60	; 0x3c
 8005950:	461a      	mov	r2, r3
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	f7fd fd28 	bl	80033a8 <HAL_DMA_Start_IT>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e093      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005970:	60da      	str	r2, [r3, #12]
      break;
 8005972:	e026      	b.n	80059c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	4a46      	ldr	r2, [pc, #280]	; (8005a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 800597a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	4a45      	ldr	r2, [pc, #276]	; (8005a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	4a44      	ldr	r2, [pc, #272]	; (8005a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 800598a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3340      	adds	r3, #64	; 0x40
 8005998:	461a      	mov	r2, r3
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	f7fd fd04 	bl	80033a8 <HAL_DMA_Start_IT>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e06f      	b.n	8005a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059b8:	60da      	str	r2, [r3, #12]
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d15f      	bne.n	8005a88 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 ffc3 	bl	800695c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start_DMA+0x2be>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Start_DMA+0x2c2>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d01d      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <HAL_TIM_PWM_Start_DMA+0x380>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d111      	bne.n	8005a78 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d010      	beq.n	8005a88 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	e007      	b.n	8005a88 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	08006279 	.word	0x08006279
 8005a98:	08006321 	.word	0x08006321
 8005a9c:	080061e7 	.word	0x080061e7
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40001800 	.word	0x40001800

08005abc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d855      	bhi.n	8005b7c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005b7d 	.word	0x08005b7d
 8005ae0:	08005b7d 	.word	0x08005b7d
 8005ae4:	08005b7d 	.word	0x08005b7d
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b7d 	.word	0x08005b7d
 8005af0:	08005b7d 	.word	0x08005b7d
 8005af4:	08005b7d 	.word	0x08005b7d
 8005af8:	08005b45 	.word	0x08005b45
 8005afc:	08005b7d 	.word	0x08005b7d
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b61 	.word	0x08005b61
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd fd09 	bl	8003538 <HAL_DMA_Abort_IT>
      break;
 8005b26:	e02c      	b.n	8005b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd fcfb 	bl	8003538 <HAL_DMA_Abort_IT>
      break;
 8005b42:	e01e      	b.n	8005b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fced 	bl	8003538 <HAL_DMA_Abort_IT>
      break;
 8005b5e:	e010      	b.n	8005b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fd fcdf 	bl	8003538 <HAL_DMA_Abort_IT>
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d161      	bne.n	8005c4c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fee3 	bl	800695c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIM_PWM_Stop_DMA+0xee>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	; (8005c5c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_PWM_Stop_DMA+0xf2>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d017      	beq.n	8005be4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10f      	bne.n	8005be4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	f240 4344 	movw	r3, #1092	; 0x444
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6a1a      	ldr	r2, [r3, #32]
 8005bea:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10f      	bne.n	8005c14 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	f240 4344 	movw	r3, #1092	; 0x444
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c22:	e013      	b.n	8005c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d104      	bne.n	8005c34 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c32:	e00b      	b.n	8005c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d104      	bne.n	8005c44 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d122      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11b      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0202 	mvn.w	r2, #2
 8005c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa81 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa73 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fc fd87 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d122      	bne.n	8005d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0204 	mvn.w	r2, #4
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa57 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa49 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fc fd5d 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d122      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d11b      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0208 	mvn.w	r2, #8
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa2d 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa1f 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fc fd33 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d122      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d11b      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0210 	mvn.w	r2, #16
 8005d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa03 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005da4:	e005      	b.n	8005db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9f5 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc fd09 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10e      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d107      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0201 	mvn.w	r2, #1
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9cf 	bl	8006182 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d10e      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d107      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fe52 	bl	8006ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d10e      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d107      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9c1 	bl	80061be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d10e      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d107      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0220 	mvn.w	r2, #32
 8005e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fe1c 	bl	8006aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e0ae      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	f200 809f 	bhi.w	8005fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ed9 	.word	0x08005ed9
 8005ea8:	08005fdd 	.word	0x08005fdd
 8005eac:	08005fdd 	.word	0x08005fdd
 8005eb0:	08005fdd 	.word	0x08005fdd
 8005eb4:	08005f19 	.word	0x08005f19
 8005eb8:	08005fdd 	.word	0x08005fdd
 8005ebc:	08005fdd 	.word	0x08005fdd
 8005ec0:	08005fdd 	.word	0x08005fdd
 8005ec4:	08005f5b 	.word	0x08005f5b
 8005ec8:	08005fdd 	.word	0x08005fdd
 8005ecc:	08005fdd 	.word	0x08005fdd
 8005ed0:	08005fdd 	.word	0x08005fdd
 8005ed4:	08005f9b 	.word	0x08005f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 faf2 	bl	80064c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0208 	orr.w	r2, r2, #8
 8005ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0204 	bic.w	r2, r2, #4
 8005f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6999      	ldr	r1, [r3, #24]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	619a      	str	r2, [r3, #24]
      break;
 8005f16:	e064      	b.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fb42 	bl	80065a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	619a      	str	r2, [r3, #24]
      break;
 8005f58:	e043      	b.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fb97 	bl	8006694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0208 	orr.w	r2, r2, #8
 8005f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0204 	bic.w	r2, r2, #4
 8005f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69d9      	ldr	r1, [r3, #28]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	61da      	str	r2, [r3, #28]
      break;
 8005f98:	e023      	b.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fbeb 	bl	800677c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	021a      	lsls	r2, r3, #8
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	61da      	str	r2, [r3, #28]
      break;
 8005fda:	e002      	b.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIM_ConfigClockSource+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e0b4      	b.n	800617a <HAL_TIM_ConfigClockSource+0x186>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006048:	d03e      	beq.n	80060c8 <HAL_TIM_ConfigClockSource+0xd4>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	f200 8087 	bhi.w	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006056:	f000 8086 	beq.w	8006166 <HAL_TIM_ConfigClockSource+0x172>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d87f      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b70      	cmp	r3, #112	; 0x70
 8006062:	d01a      	beq.n	800609a <HAL_TIM_ConfigClockSource+0xa6>
 8006064:	2b70      	cmp	r3, #112	; 0x70
 8006066:	d87b      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b60      	cmp	r3, #96	; 0x60
 800606a:	d050      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x11a>
 800606c:	2b60      	cmp	r3, #96	; 0x60
 800606e:	d877      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b50      	cmp	r3, #80	; 0x50
 8006072:	d03c      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xfa>
 8006074:	2b50      	cmp	r3, #80	; 0x50
 8006076:	d873      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d058      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x13a>
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d86f      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d064      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006084:	2b30      	cmp	r3, #48	; 0x30
 8006086:	d86b      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d060      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b20      	cmp	r3, #32
 800608e:	d867      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d05c      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b10      	cmp	r3, #16
 8006096:	d05a      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	e062      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6899      	ldr	r1, [r3, #8]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f000 fc37 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	609a      	str	r2, [r3, #8]
      break;
 80060c6:	e04f      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f000 fc20 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ea:	609a      	str	r2, [r3, #8]
      break;
 80060ec:	e03c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 fb94 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2150      	movs	r1, #80	; 0x50
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fbed 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 800610c:	e02c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	461a      	mov	r2, r3
 800611c:	f000 fbb3 	bl	8006886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2160      	movs	r1, #96	; 0x60
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fbdd 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 800612c:	e01c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6859      	ldr	r1, [r3, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	461a      	mov	r2, r3
 800613c:	f000 fb74 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2140      	movs	r1, #64	; 0x40
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fbcd 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 800614c:	e00c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f000 fbc4 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 800615e:	e003      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	e000      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d107      	bne.n	800620e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620c:	e02a      	b.n	8006264 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d107      	bne.n	8006228 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2202      	movs	r2, #2
 800621c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006226:	e01d      	b.n	8006264 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d107      	bne.n	8006242 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2204      	movs	r2, #4
 8006236:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006240:	e010      	b.n	8006264 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	d107      	bne.n	800625c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2208      	movs	r2, #8
 8006250:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625a:	e003      	b.n	8006264 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff ffb4 	bl	80061d2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d10b      	bne.n	80062a8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d136      	bne.n	800630c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a6:	e031      	b.n	800630c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d10b      	bne.n	80062ca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d125      	bne.n	800630c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c8:	e020      	b.n	800630c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d10b      	bne.n	80062ec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2204      	movs	r2, #4
 80062d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d114      	bne.n	800630c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ea:	e00f      	b.n	800630c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d10a      	bne.n	800630c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2208      	movs	r2, #8
 80062fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7fc fa59 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d103      	bne.n	8006340 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	771a      	strb	r2, [r3, #28]
 800633e:	e019      	b.n	8006374 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d103      	bne.n	8006352 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2202      	movs	r2, #2
 800634e:	771a      	strb	r2, [r3, #28]
 8006350:	e010      	b.n	8006374 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d103      	bne.n	8006364 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2204      	movs	r2, #4
 8006360:	771a      	strb	r2, [r3, #28]
 8006362:	e007      	b.n	8006374 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d102      	bne.n	8006374 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2208      	movs	r2, #8
 8006372:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7fc f9a7 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <TIM_Base_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d00f      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3d      	ldr	r2, [pc, #244]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3c      	ldr	r2, [pc, #240]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3b      	ldr	r2, [pc, #236]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3a      	ldr	r2, [pc, #232]	; (80064ac <TIM_Base_SetConfig+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2f      	ldr	r2, [pc, #188]	; (800649c <TIM_Base_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d027      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d023      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <TIM_Base_SetConfig+0x124>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <TIM_Base_SetConfig+0x128>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <TIM_Base_SetConfig+0x12c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00f      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <TIM_Base_SetConfig+0x130>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a25      	ldr	r2, [pc, #148]	; (80064bc <TIM_Base_SetConfig+0x134>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <TIM_Base_SetConfig+0x138>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a23      	ldr	r2, [pc, #140]	; (80064c4 <TIM_Base_SetConfig+0x13c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d108      	bne.n	800644c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <TIM_Base_SetConfig+0x114>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <TIM_Base_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	615a      	str	r2, [r3, #20]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	40001800 	.word	0x40001800
 80064c0:	40001c00 	.word	0x40001c00
 80064c4:	40002000 	.word	0x40002000

080064c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0201 	bic.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 0302 	bic.w	r3, r3, #2
 8006510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <TIM_OC1_SetConfig+0xd8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC1_SetConfig+0x64>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <TIM_OC1_SetConfig+0xdc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10c      	bne.n	8006546 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0308 	bic.w	r3, r3, #8
 8006532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <TIM_OC1_SetConfig+0xd8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_OC1_SetConfig+0x8e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <TIM_OC1_SetConfig+0xdc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d111      	bne.n	800657a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800655c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	621a      	str	r2, [r3, #32]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40010000 	.word	0x40010000
 80065a4:	40010400 	.word	0x40010400

080065a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0210 	bic.w	r2, r3, #16
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0320 	bic.w	r3, r3, #32
 80065f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a22      	ldr	r2, [pc, #136]	; (800668c <TIM_OC2_SetConfig+0xe4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_OC2_SetConfig+0x68>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_OC2_SetConfig+0xe8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10d      	bne.n	800662c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a17      	ldr	r2, [pc, #92]	; (800668c <TIM_OC2_SetConfig+0xe4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC2_SetConfig+0x94>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a16      	ldr	r2, [pc, #88]	; (8006690 <TIM_OC2_SetConfig+0xe8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d113      	bne.n	8006664 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800664a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a21      	ldr	r2, [pc, #132]	; (8006774 <TIM_OC3_SetConfig+0xe0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_OC3_SetConfig+0x66>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <TIM_OC3_SetConfig+0xe4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10d      	bne.n	8006716 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_OC3_SetConfig+0xe0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC3_SetConfig+0x92>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	; (8006778 <TIM_OC3_SetConfig+0xe4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d113      	bne.n	800674e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800672c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	621a      	str	r2, [r3, #32]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a12      	ldr	r2, [pc, #72]	; (8006820 <TIM_OC4_SetConfig+0xa4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC4_SetConfig+0x68>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a11      	ldr	r2, [pc, #68]	; (8006824 <TIM_OC4_SetConfig+0xa8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d109      	bne.n	80067f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	019b      	lsls	r3, r3, #6
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40010400 	.word	0x40010400

08006828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 030a 	bic.w	r3, r3, #10
 8006864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006886:	b480      	push	{r7}
 8006888:	b087      	sub	sp, #28
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0210 	bic.w	r2, r3, #16
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	f043 0307 	orr.w	r3, r3, #7
 8006908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	021a      	lsls	r2, r3, #8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	431a      	orrs	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2201      	movs	r2, #1
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	43db      	mvns	r3, r3
 800697e:	401a      	ands	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	431a      	orrs	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069bc:	2302      	movs	r3, #2
 80069be:	e05a      	b.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d01d      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10c      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	40010400 	.word	0x40010400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40001800 	.word	0x40001800

08006aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e03f      	b.n	8006b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fc f8a0 	bl	8002c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fe81 	bl	8007814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08a      	sub	sp, #40	; 0x28
 8006b66:	af02      	add	r7, sp, #8
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d17c      	bne.n	8006c7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_UART_Transmit+0x2c>
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e075      	b.n	8006c7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UART_Transmit+0x3e>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e06e      	b.n	8006c7e <HAL_UART_Transmit+0x11c>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2221      	movs	r2, #33	; 0x21
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bb6:	f7fc f9eb 	bl	8002f90 <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	88fa      	ldrh	r2, [r7, #6]
 8006bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	d108      	bne.n	8006be4 <HAL_UART_Transmit+0x82>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	e003      	b.n	8006bec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bf4:	e02a      	b.n	8006c4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2180      	movs	r1, #128	; 0x80
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fbc1 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e036      	b.n	8006c7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e007      	b.n	8006c3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1cf      	bne.n	8006bf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2140      	movs	r1, #64	; 0x40
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fb91 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e006      	b.n	8006c7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e000      	b.n	8006c7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	; 0x28
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	f040 808c 	bne.w	8006dc0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_UART_Receive+0x2e>
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e084      	b.n	8006dc2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Receive+0x40>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e07d      	b.n	8006dc2 <HAL_UART_Receive+0x13c>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2222      	movs	r2, #34	; 0x22
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ce2:	f7fc f955 	bl	8002f90 <HAL_GetTick>
 8006ce6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d108      	bne.n	8006d10 <HAL_UART_Receive+0x8a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e003      	b.n	8006d18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006d20:	e043      	b.n	8006daa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2120      	movs	r1, #32
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fb2b 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e042      	b.n	8006dc2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10c      	bne.n	8006d5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	3302      	adds	r3, #2
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e01f      	b.n	8006d9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d007      	beq.n	8006d76 <HAL_UART_Receive+0xf0>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <HAL_UART_Receive+0xfe>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e008      	b.n	8006d96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1b6      	bne.n	8006d22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d11d      	bne.n	8006e20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_UART_Receive_IT+0x26>
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e016      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Receive_IT+0x38>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e00f      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fb24 	bl	8007464 <UART_Start_Receive_IT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b0ba      	sub	sp, #232	; 0xe8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
 8006e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc07 	bl	800769e <UART_Receive_IT>
      return;
 8006e90:	e256      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80de 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80d1 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0202 	orr.w	r2, r3, #2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
 8006f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f043 0204 	orr.w	r2, r3, #4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0208 	orr.w	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 81ed 	beq.w	8007336 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb92 	bl	800769e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x17a>
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d04f      	beq.n	8007046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa9a 	bl	80074e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d141      	bne.n	800703e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1d9      	bne.n	8006fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	2b00      	cmp	r3, #0
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	4a7d      	ldr	r2, [pc, #500]	; (8007208 <HAL_UART_IRQHandler+0x3dc>)
 8007014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	4618      	mov	r0, r3
 800701c:	f7fc fa8c 	bl	8003538 <HAL_DMA_Abort_IT>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00e      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f990 	bl	800735c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e00a      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f98c 	bl	800735c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e006      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f988 	bl	800735c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007052:	e170      	b.n	8007336 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	bf00      	nop
    return;
 8007056:	e16e      	b.n	8007336 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 814a 	bne.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8143 	beq.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 813c 	beq.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	f040 80b4 	bne.w	800720c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8140 	beq.w	800733a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f080 8139 	bcs.w	800733a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070da:	f000 8088 	beq.w	80071ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800710a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800710e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1d9      	bne.n	80070de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800713a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3314      	adds	r3, #20
 800714a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800714e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800718a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800718c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e3      	bne.n	8007166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80071d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e3      	bne.n	80071ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fc f935 	bl	8003458 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8b6 	bl	8007370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007204:	e099      	b.n	800733a <HAL_UART_IRQHandler+0x50e>
 8007206:	bf00      	nop
 8007208:	080075a7 	.word	0x080075a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808b 	beq.w	800733e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8086 	beq.w	800733e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007256:	647a      	str	r2, [r7, #68]	; 0x44
 8007258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800725c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e3      	bne.n	8007232 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3314      	adds	r3, #20
 800728a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800728e:	633a      	str	r2, [r7, #48]	; 0x30
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e3      	bne.n	800726a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072d4:	61fa      	str	r2, [r7, #28]
 80072d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	69b9      	ldr	r1, [r7, #24]
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	617b      	str	r3, [r7, #20]
   return(result);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e3      	bne.n	80072b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f83e 	bl	8007370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072f4:	e023      	b.n	800733e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <HAL_UART_IRQHandler+0x4ea>
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f95d 	bl	80075ce <UART_Transmit_IT>
    return;
 8007314:	e014      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <HAL_UART_IRQHandler+0x514>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f99d 	bl	800766e <UART_EndTransmit_IT>
    return;
 8007334:	e004      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
    return;
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
      return;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
      return;
 800733e:	bf00      	nop
  }
}
 8007340:	37e8      	adds	r7, #232	; 0xe8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b090      	sub	sp, #64	; 0x40
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	e050      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a0:	d04c      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073a8:	f7fb fdf2 	bl	8002f90 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d241      	bcs.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	330c      	adds	r3, #12
 80073d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d8:	637a      	str	r2, [r7, #52]	; 0x34
 80073da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e5      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3314      	adds	r3, #20
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	613b      	str	r3, [r7, #16]
   return(result);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	63bb      	str	r3, [r7, #56]	; 0x38
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740c:	623a      	str	r2, [r7, #32]
 800740e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	61bb      	str	r3, [r7, #24]
   return(result);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e00f      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	429a      	cmp	r2, r3
 8007458:	d09f      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3740      	adds	r7, #64	; 0x40
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2222      	movs	r2, #34	; 0x22
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0220 	orr.w	r2, r2, #32
 80074d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b095      	sub	sp, #84	; 0x54
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007508:	643a      	str	r2, [r7, #64]	; 0x40
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800750e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	61fb      	str	r3, [r7, #28]
   return(result);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b01      	cmp	r3, #1
 8007556:	d119      	bne.n	800758c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60bb      	str	r3, [r7, #8]
   return(result);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	647b      	str	r3, [r7, #68]	; 0x44
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007578:	61ba      	str	r2, [r7, #24]
 800757a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800759a:	bf00      	nop
 800759c:	3754      	adds	r7, #84	; 0x54
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fecb 	bl	800735c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b21      	cmp	r3, #33	; 0x21
 80075e0:	d13e      	bne.n	8007660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d114      	bne.n	8007616 <UART_Transmit_IT+0x48>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d110      	bne.n	8007616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	e008      	b.n	8007628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	1c59      	adds	r1, r3, #1
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6211      	str	r1, [r2, #32]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4619      	mov	r1, r3
 8007636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10f      	bne.n	800765c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fe5a 	bl	8007348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b22      	cmp	r3, #34	; 0x22
 80076b0:	f040 80ab 	bne.w	800780a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076bc:	d117      	bne.n	80076ee <UART_Receive_IT+0x50>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	629a      	str	r2, [r3, #40]	; 0x28
 80076ec:	e026      	b.n	800773c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007700:	d007      	beq.n	8007712 <UART_Receive_IT+0x74>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <UART_Receive_IT+0x82>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e008      	b.n	8007732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	b2da      	uxtb	r2, r3
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800774c:	2b00      	cmp	r3, #0
 800774e:	d15a      	bne.n	8007806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0220 	bic.w	r2, r2, #32
 800775e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800776e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	2b01      	cmp	r3, #1
 800778e:	d135      	bne.n	80077fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	613b      	str	r3, [r7, #16]
   return(result);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f023 0310 	bic.w	r3, r3, #16
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	623a      	str	r2, [r7, #32]
 80077b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	69f9      	ldr	r1, [r7, #28]
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d10a      	bne.n	80077ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fdbb 	bl	8007370 <HAL_UARTEx_RxEventCallback>
 80077fa:	e002      	b.n	8007802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7f9 fb9f 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e002      	b.n	800780c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	; 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b0c0      	sub	sp, #256	; 0x100
 800781a:	af00      	add	r7, sp, #0
 800781c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	68d9      	ldr	r1, [r3, #12]
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	ea40 0301 	orr.w	r3, r0, r1
 800783c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	431a      	orrs	r2, r3
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	431a      	orrs	r2, r3
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800786c:	f021 010c 	bic.w	r1, r1, #12
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800787a:	430b      	orrs	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788e:	6999      	ldr	r1, [r3, #24]
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	ea40 0301 	orr.w	r3, r0, r1
 800789a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b8f      	ldr	r3, [pc, #572]	; (8007ae0 <UART_SetConfig+0x2cc>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d005      	beq.n	80078b4 <UART_SetConfig+0xa0>
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b8d      	ldr	r3, [pc, #564]	; (8007ae4 <UART_SetConfig+0x2d0>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d104      	bne.n	80078be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fd f8d6 	bl	8004a64 <HAL_RCC_GetPCLK2Freq>
 80078b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078bc:	e003      	b.n	80078c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078be:	f7fd f8bd 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 80078c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	f040 810c 	bne.w	8007aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	1891      	adds	r1, r2, r2
 80078ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ee:	415b      	adcs	r3, r3
 80078f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078f6:	4621      	mov	r1, r4
 80078f8:	eb12 0801 	adds.w	r8, r2, r1
 80078fc:	4629      	mov	r1, r5
 80078fe:	eb43 0901 	adc.w	r9, r3, r1
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800790e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007916:	4690      	mov	r8, r2
 8007918:	4699      	mov	r9, r3
 800791a:	4623      	mov	r3, r4
 800791c:	eb18 0303 	adds.w	r3, r8, r3
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007924:	462b      	mov	r3, r5
 8007926:	eb49 0303 	adc.w	r3, r9, r3
 800792a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800793a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800793e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007942:	460b      	mov	r3, r1
 8007944:	18db      	adds	r3, r3, r3
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
 8007948:	4613      	mov	r3, r2
 800794a:	eb42 0303 	adc.w	r3, r2, r3
 800794e:	657b      	str	r3, [r7, #84]	; 0x54
 8007950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007958:	f7f8 fc9a 	bl	8000290 <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	011c      	lsls	r4, r3, #4
 800796a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	1891      	adds	r1, r2, r2
 8007982:	64b9      	str	r1, [r7, #72]	; 0x48
 8007984:	415b      	adcs	r3, r3
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800798c:	4641      	mov	r1, r8
 800798e:	eb12 0a01 	adds.w	sl, r2, r1
 8007992:	4649      	mov	r1, r9
 8007994:	eb43 0b01 	adc.w	fp, r3, r1
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ac:	4692      	mov	sl, r2
 80079ae:	469b      	mov	fp, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	eb1a 0303 	adds.w	r3, sl, r3
 80079b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ba:	464b      	mov	r3, r9
 80079bc:	eb4b 0303 	adc.w	r3, fp, r3
 80079c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079d8:	460b      	mov	r3, r1
 80079da:	18db      	adds	r3, r3, r3
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
 80079de:	4613      	mov	r3, r2
 80079e0:	eb42 0303 	adc.w	r3, r2, r3
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ee:	f7f8 fc4f 	bl	8000290 <__aeabi_uldivmod>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	4b3b      	ldr	r3, [pc, #236]	; (8007ae8 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2301 	umull	r2, r3, r3, r1
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	2264      	movs	r2, #100	; 0x64
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	1acb      	subs	r3, r1, r3
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007a10:	fba3 2302 	umull	r2, r3, r3, r2
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a1c:	441c      	add	r4, r3
 8007a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6339      	str	r1, [r7, #48]	; 0x30
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a74:	464b      	mov	r3, r9
 8007a76:	460a      	mov	r2, r1
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a94:	460b      	mov	r3, r1
 8007a96:	18db      	adds	r3, r3, r3
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	eb42 0303 	adc.w	r3, r2, r3
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007aaa:	f7f8 fbf1 	bl	8000290 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4422      	add	r2, r4
 8007ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007adc:	e105      	b.n	8007cea <UART_SetConfig+0x4d6>
 8007ade:	bf00      	nop
 8007ae0:	40011000 	.word	0x40011000
 8007ae4:	40011400 	.word	0x40011400
 8007ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	1891      	adds	r1, r2, r2
 8007b04:	6239      	str	r1, [r7, #32]
 8007b06:	415b      	adcs	r3, r3
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0e:	4641      	mov	r1, r8
 8007b10:	1854      	adds	r4, r2, r1
 8007b12:	4649      	mov	r1, r9
 8007b14:	eb43 0501 	adc.w	r5, r3, r1
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	00eb      	lsls	r3, r5, #3
 8007b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b26:	00e2      	lsls	r2, r4, #3
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	18e3      	adds	r3, r4, r3
 8007b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b34:	464b      	mov	r3, r9
 8007b36:	eb45 0303 	adc.w	r3, r5, r3
 8007b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	4621      	mov	r1, r4
 8007b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b64:	4621      	mov	r1, r4
 8007b66:	008a      	lsls	r2, r1, #2
 8007b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b6c:	f7f8 fb90 	bl	8000290 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4b60      	ldr	r3, [pc, #384]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007b76:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	011c      	lsls	r4, r3, #4
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	61b9      	str	r1, [r7, #24]
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	1851      	adds	r1, r2, r1
 8007ba4:	6139      	str	r1, [r7, #16]
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	414b      	adcs	r3, r1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bb8:	4659      	mov	r1, fp
 8007bba:	00cb      	lsls	r3, r1, #3
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	00ca      	lsls	r2, r1, #3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4642      	mov	r2, r8
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	eb42 0303 	adc.w	r3, r2, r3
 8007bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	008b      	lsls	r3, r1, #2
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c02:	4641      	mov	r1, r8
 8007c04:	008a      	lsls	r2, r1, #2
 8007c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c0a:	f7f8 fb41 	bl	8000290 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c14:	fba3 1302 	umull	r1, r3, r3, r2
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	2164      	movs	r1, #100	; 0x64
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	3332      	adds	r3, #50	; 0x32
 8007c26:	4a34      	ldr	r2, [pc, #208]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c32:	441c      	add	r4, r3
 8007c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c38:	2200      	movs	r2, #0
 8007c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007c3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c52:	4641      	mov	r1, r8
 8007c54:	1851      	adds	r1, r2, r1
 8007c56:	6039      	str	r1, [r7, #0]
 8007c58:	4649      	mov	r1, r9
 8007c5a:	414b      	adcs	r3, r1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	00cb      	lsls	r3, r1, #3
 8007c6e:	4651      	mov	r1, sl
 8007c70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c74:	4651      	mov	r1, sl
 8007c76:	00ca      	lsls	r2, r1, #3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4642      	mov	r2, r8
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c84:	464b      	mov	r3, r9
 8007c86:	460a      	mov	r2, r1
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	663b      	str	r3, [r7, #96]	; 0x60
 8007c98:	667a      	str	r2, [r7, #100]	; 0x64
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	008b      	lsls	r3, r1, #2
 8007caa:	4641      	mov	r1, r8
 8007cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	008a      	lsls	r2, r1, #2
 8007cb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cb8:	f7f8 faea 	bl	8000290 <__aeabi_uldivmod>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	2164      	movs	r1, #100	; 0x64
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	3332      	adds	r3, #50	; 0x32
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4422      	add	r2, r4
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf6:	bf00      	nop
 8007cf8:	51eb851f 	.word	0x51eb851f

08007cfc <atoi>:
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	2100      	movs	r1, #0
 8007d00:	f000 b992 	b.w	8008028 <strtol>

08007d04 <__errno>:
 8007d04:	4b01      	ldr	r3, [pc, #4]	; (8007d0c <__errno+0x8>)
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000010 	.word	0x20000010

08007d10 <__libc_init_array>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	4d0d      	ldr	r5, [pc, #52]	; (8007d48 <__libc_init_array+0x38>)
 8007d14:	4c0d      	ldr	r4, [pc, #52]	; (8007d4c <__libc_init_array+0x3c>)
 8007d16:	1b64      	subs	r4, r4, r5
 8007d18:	10a4      	asrs	r4, r4, #2
 8007d1a:	2600      	movs	r6, #0
 8007d1c:	42a6      	cmp	r6, r4
 8007d1e:	d109      	bne.n	8007d34 <__libc_init_array+0x24>
 8007d20:	4d0b      	ldr	r5, [pc, #44]	; (8007d50 <__libc_init_array+0x40>)
 8007d22:	4c0c      	ldr	r4, [pc, #48]	; (8007d54 <__libc_init_array+0x44>)
 8007d24:	f001 f908 	bl	8008f38 <_init>
 8007d28:	1b64      	subs	r4, r4, r5
 8007d2a:	10a4      	asrs	r4, r4, #2
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	42a6      	cmp	r6, r4
 8007d30:	d105      	bne.n	8007d3e <__libc_init_array+0x2e>
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d38:	4798      	blx	r3
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	e7ee      	b.n	8007d1c <__libc_init_array+0xc>
 8007d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d42:	4798      	blx	r3
 8007d44:	3601      	adds	r6, #1
 8007d46:	e7f2      	b.n	8007d2e <__libc_init_array+0x1e>
 8007d48:	080094a8 	.word	0x080094a8
 8007d4c:	080094a8 	.word	0x080094a8
 8007d50:	080094a8 	.word	0x080094a8
 8007d54:	080094ac 	.word	0x080094ac

08007d58 <memset>:
 8007d58:	4402      	add	r2, r0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d100      	bne.n	8007d62 <memset+0xa>
 8007d60:	4770      	bx	lr
 8007d62:	f803 1b01 	strb.w	r1, [r3], #1
 8007d66:	e7f9      	b.n	8007d5c <memset+0x4>

08007d68 <iprintf>:
 8007d68:	b40f      	push	{r0, r1, r2, r3}
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <iprintf+0x2c>)
 8007d6c:	b513      	push	{r0, r1, r4, lr}
 8007d6e:	681c      	ldr	r4, [r3, #0]
 8007d70:	b124      	cbz	r4, 8007d7c <iprintf+0x14>
 8007d72:	69a3      	ldr	r3, [r4, #24]
 8007d74:	b913      	cbnz	r3, 8007d7c <iprintf+0x14>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fa7a 	bl	8008270 <__sinit>
 8007d7c:	ab05      	add	r3, sp, #20
 8007d7e:	9a04      	ldr	r2, [sp, #16]
 8007d80:	68a1      	ldr	r1, [r4, #8]
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 fc8b 	bl	80086a0 <_vfiprintf_r>
 8007d8a:	b002      	add	sp, #8
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	b004      	add	sp, #16
 8007d92:	4770      	bx	lr
 8007d94:	20000010 	.word	0x20000010

08007d98 <setvbuf>:
 8007d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	461d      	mov	r5, r3
 8007d9e:	4b5d      	ldr	r3, [pc, #372]	; (8007f14 <setvbuf+0x17c>)
 8007da0:	681f      	ldr	r7, [r3, #0]
 8007da2:	4604      	mov	r4, r0
 8007da4:	460e      	mov	r6, r1
 8007da6:	4690      	mov	r8, r2
 8007da8:	b127      	cbz	r7, 8007db4 <setvbuf+0x1c>
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	b913      	cbnz	r3, 8007db4 <setvbuf+0x1c>
 8007dae:	4638      	mov	r0, r7
 8007db0:	f000 fa5e 	bl	8008270 <__sinit>
 8007db4:	4b58      	ldr	r3, [pc, #352]	; (8007f18 <setvbuf+0x180>)
 8007db6:	429c      	cmp	r4, r3
 8007db8:	d167      	bne.n	8007e8a <setvbuf+0xf2>
 8007dba:	687c      	ldr	r4, [r7, #4]
 8007dbc:	f1b8 0f02 	cmp.w	r8, #2
 8007dc0:	d006      	beq.n	8007dd0 <setvbuf+0x38>
 8007dc2:	f1b8 0f01 	cmp.w	r8, #1
 8007dc6:	f200 809f 	bhi.w	8007f08 <setvbuf+0x170>
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	f2c0 809c 	blt.w	8007f08 <setvbuf+0x170>
 8007dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd2:	07db      	lsls	r3, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <setvbuf+0x4a>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	0598      	lsls	r0, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <setvbuf+0x4a>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dde:	f000 fae5 	bl	80083ac <__retarget_lock_acquire_recursive>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4638      	mov	r0, r7
 8007de6:	f000 f9af 	bl	8008148 <_fflush_r>
 8007dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dec:	b141      	cbz	r1, 8007e00 <setvbuf+0x68>
 8007dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d002      	beq.n	8007dfc <setvbuf+0x64>
 8007df6:	4638      	mov	r0, r7
 8007df8:	f000 fb48 	bl	800848c <_free_r>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8007e00:	2300      	movs	r3, #0
 8007e02:	61a3      	str	r3, [r4, #24]
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	0619      	lsls	r1, r3, #24
 8007e0a:	d503      	bpl.n	8007e14 <setvbuf+0x7c>
 8007e0c:	6921      	ldr	r1, [r4, #16]
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f000 fb3c 	bl	800848c <_free_r>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	f1b8 0f02 	cmp.w	r8, #2
 8007e22:	81a3      	strh	r3, [r4, #12]
 8007e24:	d06c      	beq.n	8007f00 <setvbuf+0x168>
 8007e26:	ab01      	add	r3, sp, #4
 8007e28:	466a      	mov	r2, sp
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f000 fabf 	bl	80083b0 <__swhatbuf_r>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	4318      	orrs	r0, r3
 8007e36:	81a0      	strh	r0, [r4, #12]
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	d130      	bne.n	8007e9e <setvbuf+0x106>
 8007e3c:	9d00      	ldr	r5, [sp, #0]
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 fb1c 	bl	800847c <malloc>
 8007e44:	4606      	mov	r6, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d155      	bne.n	8007ef6 <setvbuf+0x15e>
 8007e4a:	f8dd 9000 	ldr.w	r9, [sp]
 8007e4e:	45a9      	cmp	r9, r5
 8007e50:	d14a      	bne.n	8007ee8 <setvbuf+0x150>
 8007e52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e56:	2200      	movs	r2, #0
 8007e58:	60a2      	str	r2, [r4, #8]
 8007e5a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	6122      	str	r2, [r4, #16]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e68:	6162      	str	r2, [r4, #20]
 8007e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	07d2      	lsls	r2, r2, #31
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	d405      	bmi.n	8007e82 <setvbuf+0xea>
 8007e76:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e7a:	d102      	bne.n	8007e82 <setvbuf+0xea>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7e:	f000 fa96 	bl	80083ae <__retarget_lock_release_recursive>
 8007e82:	4628      	mov	r0, r5
 8007e84:	b003      	add	sp, #12
 8007e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <setvbuf+0x184>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d101      	bne.n	8007e94 <setvbuf+0xfc>
 8007e90:	68bc      	ldr	r4, [r7, #8]
 8007e92:	e793      	b.n	8007dbc <setvbuf+0x24>
 8007e94:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <setvbuf+0x188>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	bf08      	it	eq
 8007e9a:	68fc      	ldreq	r4, [r7, #12]
 8007e9c:	e78e      	b.n	8007dbc <setvbuf+0x24>
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d0cd      	beq.n	8007e3e <setvbuf+0xa6>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	b913      	cbnz	r3, 8007eac <setvbuf+0x114>
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	f000 f9e2 	bl	8008270 <__sinit>
 8007eac:	f1b8 0f01 	cmp.w	r8, #1
 8007eb0:	bf08      	it	eq
 8007eb2:	89a3      	ldrheq	r3, [r4, #12]
 8007eb4:	6026      	str	r6, [r4, #0]
 8007eb6:	bf04      	itt	eq
 8007eb8:	f043 0301 	orreq.w	r3, r3, #1
 8007ebc:	81a3      	strheq	r3, [r4, #12]
 8007ebe:	89a2      	ldrh	r2, [r4, #12]
 8007ec0:	f012 0308 	ands.w	r3, r2, #8
 8007ec4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007ec8:	d01c      	beq.n	8007f04 <setvbuf+0x16c>
 8007eca:	07d3      	lsls	r3, r2, #31
 8007ecc:	bf41      	itttt	mi
 8007ece:	2300      	movmi	r3, #0
 8007ed0:	426d      	negmi	r5, r5
 8007ed2:	60a3      	strmi	r3, [r4, #8]
 8007ed4:	61a5      	strmi	r5, [r4, #24]
 8007ed6:	bf58      	it	pl
 8007ed8:	60a5      	strpl	r5, [r4, #8]
 8007eda:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007edc:	f015 0501 	ands.w	r5, r5, #1
 8007ee0:	d115      	bne.n	8007f0e <setvbuf+0x176>
 8007ee2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007ee6:	e7c8      	b.n	8007e7a <setvbuf+0xe2>
 8007ee8:	4648      	mov	r0, r9
 8007eea:	f000 fac7 	bl	800847c <malloc>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0ae      	beq.n	8007e52 <setvbuf+0xba>
 8007ef4:	464d      	mov	r5, r9
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	e7d0      	b.n	8007ea2 <setvbuf+0x10a>
 8007f00:	2500      	movs	r5, #0
 8007f02:	e7a8      	b.n	8007e56 <setvbuf+0xbe>
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	e7e8      	b.n	8007eda <setvbuf+0x142>
 8007f08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007f0c:	e7b9      	b.n	8007e82 <setvbuf+0xea>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	e7b7      	b.n	8007e82 <setvbuf+0xea>
 8007f12:	bf00      	nop
 8007f14:	20000010 	.word	0x20000010
 8007f18:	0800942c 	.word	0x0800942c
 8007f1c:	0800944c 	.word	0x0800944c
 8007f20:	0800940c 	.word	0x0800940c

08007f24 <_strtol_l.constprop.0>:
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2a:	d001      	beq.n	8007f30 <_strtol_l.constprop.0+0xc>
 8007f2c:	2b24      	cmp	r3, #36	; 0x24
 8007f2e:	d906      	bls.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8007f30:	f7ff fee8 	bl	8007d04 <__errno>
 8007f34:	2316      	movs	r3, #22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008024 <_strtol_l.constprop.0+0x100>
 8007f42:	460d      	mov	r5, r1
 8007f44:	462e      	mov	r6, r5
 8007f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f4e:	f017 0708 	ands.w	r7, r7, #8
 8007f52:	d1f7      	bne.n	8007f44 <_strtol_l.constprop.0+0x20>
 8007f54:	2c2d      	cmp	r4, #45	; 0x2d
 8007f56:	d132      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f58:	782c      	ldrb	r4, [r5, #0]
 8007f5a:	2701      	movs	r7, #1
 8007f5c:	1cb5      	adds	r5, r6, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d05b      	beq.n	800801a <_strtol_l.constprop.0+0xf6>
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d109      	bne.n	8007f7a <_strtol_l.constprop.0+0x56>
 8007f66:	2c30      	cmp	r4, #48	; 0x30
 8007f68:	d107      	bne.n	8007f7a <_strtol_l.constprop.0+0x56>
 8007f6a:	782c      	ldrb	r4, [r5, #0]
 8007f6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f70:	2c58      	cmp	r4, #88	; 0x58
 8007f72:	d14d      	bne.n	8008010 <_strtol_l.constprop.0+0xec>
 8007f74:	786c      	ldrb	r4, [r5, #1]
 8007f76:	2310      	movs	r3, #16
 8007f78:	3502      	adds	r5, #2
 8007f7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f7e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007f82:	f04f 0c00 	mov.w	ip, #0
 8007f86:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f8a:	4666      	mov	r6, ip
 8007f8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f94:	f1be 0f09 	cmp.w	lr, #9
 8007f98:	d816      	bhi.n	8007fc8 <_strtol_l.constprop.0+0xa4>
 8007f9a:	4674      	mov	r4, lr
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	dd24      	ble.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007fa0:	f1bc 0f00 	cmp.w	ip, #0
 8007fa4:	db1e      	blt.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa6:	45b1      	cmp	r9, r6
 8007fa8:	d31c      	bcc.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007faa:	d101      	bne.n	8007fb0 <_strtol_l.constprop.0+0x8c>
 8007fac:	45a2      	cmp	sl, r4
 8007fae:	db19      	blt.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fb0:	fb06 4603 	mla	r6, r6, r3, r4
 8007fb4:	f04f 0c01 	mov.w	ip, #1
 8007fb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fbc:	e7e8      	b.n	8007f90 <_strtol_l.constprop.0+0x6c>
 8007fbe:	2c2b      	cmp	r4, #43	; 0x2b
 8007fc0:	bf04      	itt	eq
 8007fc2:	782c      	ldrbeq	r4, [r5, #0]
 8007fc4:	1cb5      	addeq	r5, r6, #2
 8007fc6:	e7ca      	b.n	8007f5e <_strtol_l.constprop.0+0x3a>
 8007fc8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fcc:	f1be 0f19 	cmp.w	lr, #25
 8007fd0:	d801      	bhi.n	8007fd6 <_strtol_l.constprop.0+0xb2>
 8007fd2:	3c37      	subs	r4, #55	; 0x37
 8007fd4:	e7e2      	b.n	8007f9c <_strtol_l.constprop.0+0x78>
 8007fd6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fda:	f1be 0f19 	cmp.w	lr, #25
 8007fde:	d804      	bhi.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007fe0:	3c57      	subs	r4, #87	; 0x57
 8007fe2:	e7db      	b.n	8007f9c <_strtol_l.constprop.0+0x78>
 8007fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007fe8:	e7e6      	b.n	8007fb8 <_strtol_l.constprop.0+0x94>
 8007fea:	f1bc 0f00 	cmp.w	ip, #0
 8007fee:	da05      	bge.n	8007ffc <_strtol_l.constprop.0+0xd8>
 8007ff0:	2322      	movs	r3, #34	; 0x22
 8007ff2:	6003      	str	r3, [r0, #0]
 8007ff4:	4646      	mov	r6, r8
 8007ff6:	b942      	cbnz	r2, 800800a <_strtol_l.constprop.0+0xe6>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	e79e      	b.n	8007f3a <_strtol_l.constprop.0+0x16>
 8007ffc:	b107      	cbz	r7, 8008000 <_strtol_l.constprop.0+0xdc>
 8007ffe:	4276      	negs	r6, r6
 8008000:	2a00      	cmp	r2, #0
 8008002:	d0f9      	beq.n	8007ff8 <_strtol_l.constprop.0+0xd4>
 8008004:	f1bc 0f00 	cmp.w	ip, #0
 8008008:	d000      	beq.n	800800c <_strtol_l.constprop.0+0xe8>
 800800a:	1e69      	subs	r1, r5, #1
 800800c:	6011      	str	r1, [r2, #0]
 800800e:	e7f3      	b.n	8007ff8 <_strtol_l.constprop.0+0xd4>
 8008010:	2430      	movs	r4, #48	; 0x30
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1b1      	bne.n	8007f7a <_strtol_l.constprop.0+0x56>
 8008016:	2308      	movs	r3, #8
 8008018:	e7af      	b.n	8007f7a <_strtol_l.constprop.0+0x56>
 800801a:	2c30      	cmp	r4, #48	; 0x30
 800801c:	d0a5      	beq.n	8007f6a <_strtol_l.constprop.0+0x46>
 800801e:	230a      	movs	r3, #10
 8008020:	e7ab      	b.n	8007f7a <_strtol_l.constprop.0+0x56>
 8008022:	bf00      	nop
 8008024:	08009309 	.word	0x08009309

08008028 <strtol>:
 8008028:	4613      	mov	r3, r2
 800802a:	460a      	mov	r2, r1
 800802c:	4601      	mov	r1, r0
 800802e:	4802      	ldr	r0, [pc, #8]	; (8008038 <strtol+0x10>)
 8008030:	6800      	ldr	r0, [r0, #0]
 8008032:	f7ff bf77 	b.w	8007f24 <_strtol_l.constprop.0>
 8008036:	bf00      	nop
 8008038:	20000010 	.word	0x20000010

0800803c <__sflush_r>:
 800803c:	898a      	ldrh	r2, [r1, #12]
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	4605      	mov	r5, r0
 8008044:	0710      	lsls	r0, r2, #28
 8008046:	460c      	mov	r4, r1
 8008048:	d458      	bmi.n	80080fc <__sflush_r+0xc0>
 800804a:	684b      	ldr	r3, [r1, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dc05      	bgt.n	800805c <__sflush_r+0x20>
 8008050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	dc02      	bgt.n	800805c <__sflush_r+0x20>
 8008056:	2000      	movs	r0, #0
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800805e:	2e00      	cmp	r6, #0
 8008060:	d0f9      	beq.n	8008056 <__sflush_r+0x1a>
 8008062:	2300      	movs	r3, #0
 8008064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008068:	682f      	ldr	r7, [r5, #0]
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	d032      	beq.n	80080d4 <__sflush_r+0x98>
 800806e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	075a      	lsls	r2, r3, #29
 8008074:	d505      	bpl.n	8008082 <__sflush_r+0x46>
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	1ac0      	subs	r0, r0, r3
 800807a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800807c:	b10b      	cbz	r3, 8008082 <__sflush_r+0x46>
 800807e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008080:	1ac0      	subs	r0, r0, r3
 8008082:	2300      	movs	r3, #0
 8008084:	4602      	mov	r2, r0
 8008086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	4628      	mov	r0, r5
 800808c:	47b0      	blx	r6
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	d106      	bne.n	80080a2 <__sflush_r+0x66>
 8008094:	6829      	ldr	r1, [r5, #0]
 8008096:	291d      	cmp	r1, #29
 8008098:	d82c      	bhi.n	80080f4 <__sflush_r+0xb8>
 800809a:	4a2a      	ldr	r2, [pc, #168]	; (8008144 <__sflush_r+0x108>)
 800809c:	40ca      	lsrs	r2, r1
 800809e:	07d6      	lsls	r6, r2, #31
 80080a0:	d528      	bpl.n	80080f4 <__sflush_r+0xb8>
 80080a2:	2200      	movs	r2, #0
 80080a4:	6062      	str	r2, [r4, #4]
 80080a6:	04d9      	lsls	r1, r3, #19
 80080a8:	6922      	ldr	r2, [r4, #16]
 80080aa:	6022      	str	r2, [r4, #0]
 80080ac:	d504      	bpl.n	80080b8 <__sflush_r+0x7c>
 80080ae:	1c42      	adds	r2, r0, #1
 80080b0:	d101      	bne.n	80080b6 <__sflush_r+0x7a>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	b903      	cbnz	r3, 80080b8 <__sflush_r+0x7c>
 80080b6:	6560      	str	r0, [r4, #84]	; 0x54
 80080b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ba:	602f      	str	r7, [r5, #0]
 80080bc:	2900      	cmp	r1, #0
 80080be:	d0ca      	beq.n	8008056 <__sflush_r+0x1a>
 80080c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c4:	4299      	cmp	r1, r3
 80080c6:	d002      	beq.n	80080ce <__sflush_r+0x92>
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f9df 	bl	800848c <_free_r>
 80080ce:	2000      	movs	r0, #0
 80080d0:	6360      	str	r0, [r4, #52]	; 0x34
 80080d2:	e7c1      	b.n	8008058 <__sflush_r+0x1c>
 80080d4:	6a21      	ldr	r1, [r4, #32]
 80080d6:	2301      	movs	r3, #1
 80080d8:	4628      	mov	r0, r5
 80080da:	47b0      	blx	r6
 80080dc:	1c41      	adds	r1, r0, #1
 80080de:	d1c7      	bne.n	8008070 <__sflush_r+0x34>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0c4      	beq.n	8008070 <__sflush_r+0x34>
 80080e6:	2b1d      	cmp	r3, #29
 80080e8:	d001      	beq.n	80080ee <__sflush_r+0xb2>
 80080ea:	2b16      	cmp	r3, #22
 80080ec:	d101      	bne.n	80080f2 <__sflush_r+0xb6>
 80080ee:	602f      	str	r7, [r5, #0]
 80080f0:	e7b1      	b.n	8008056 <__sflush_r+0x1a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e7ad      	b.n	8008058 <__sflush_r+0x1c>
 80080fc:	690f      	ldr	r7, [r1, #16]
 80080fe:	2f00      	cmp	r7, #0
 8008100:	d0a9      	beq.n	8008056 <__sflush_r+0x1a>
 8008102:	0793      	lsls	r3, r2, #30
 8008104:	680e      	ldr	r6, [r1, #0]
 8008106:	bf08      	it	eq
 8008108:	694b      	ldreq	r3, [r1, #20]
 800810a:	600f      	str	r7, [r1, #0]
 800810c:	bf18      	it	ne
 800810e:	2300      	movne	r3, #0
 8008110:	eba6 0807 	sub.w	r8, r6, r7
 8008114:	608b      	str	r3, [r1, #8]
 8008116:	f1b8 0f00 	cmp.w	r8, #0
 800811a:	dd9c      	ble.n	8008056 <__sflush_r+0x1a>
 800811c:	6a21      	ldr	r1, [r4, #32]
 800811e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008120:	4643      	mov	r3, r8
 8008122:	463a      	mov	r2, r7
 8008124:	4628      	mov	r0, r5
 8008126:	47b0      	blx	r6
 8008128:	2800      	cmp	r0, #0
 800812a:	dc06      	bgt.n	800813a <__sflush_r+0xfe>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008138:	e78e      	b.n	8008058 <__sflush_r+0x1c>
 800813a:	4407      	add	r7, r0
 800813c:	eba8 0800 	sub.w	r8, r8, r0
 8008140:	e7e9      	b.n	8008116 <__sflush_r+0xda>
 8008142:	bf00      	nop
 8008144:	20400001 	.word	0x20400001

08008148 <_fflush_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	690b      	ldr	r3, [r1, #16]
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
 8008150:	b913      	cbnz	r3, 8008158 <_fflush_r+0x10>
 8008152:	2500      	movs	r5, #0
 8008154:	4628      	mov	r0, r5
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	b118      	cbz	r0, 8008162 <_fflush_r+0x1a>
 800815a:	6983      	ldr	r3, [r0, #24]
 800815c:	b90b      	cbnz	r3, 8008162 <_fflush_r+0x1a>
 800815e:	f000 f887 	bl	8008270 <__sinit>
 8008162:	4b14      	ldr	r3, [pc, #80]	; (80081b4 <_fflush_r+0x6c>)
 8008164:	429c      	cmp	r4, r3
 8008166:	d11b      	bne.n	80081a0 <_fflush_r+0x58>
 8008168:	686c      	ldr	r4, [r5, #4]
 800816a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0ef      	beq.n	8008152 <_fflush_r+0xa>
 8008172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008174:	07d0      	lsls	r0, r2, #31
 8008176:	d404      	bmi.n	8008182 <_fflush_r+0x3a>
 8008178:	0599      	lsls	r1, r3, #22
 800817a:	d402      	bmi.n	8008182 <_fflush_r+0x3a>
 800817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817e:	f000 f915 	bl	80083ac <__retarget_lock_acquire_recursive>
 8008182:	4628      	mov	r0, r5
 8008184:	4621      	mov	r1, r4
 8008186:	f7ff ff59 	bl	800803c <__sflush_r>
 800818a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800818c:	07da      	lsls	r2, r3, #31
 800818e:	4605      	mov	r5, r0
 8008190:	d4e0      	bmi.n	8008154 <_fflush_r+0xc>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	059b      	lsls	r3, r3, #22
 8008196:	d4dd      	bmi.n	8008154 <_fflush_r+0xc>
 8008198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819a:	f000 f908 	bl	80083ae <__retarget_lock_release_recursive>
 800819e:	e7d9      	b.n	8008154 <_fflush_r+0xc>
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <_fflush_r+0x70>)
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d101      	bne.n	80081aa <_fflush_r+0x62>
 80081a6:	68ac      	ldr	r4, [r5, #8]
 80081a8:	e7df      	b.n	800816a <_fflush_r+0x22>
 80081aa:	4b04      	ldr	r3, [pc, #16]	; (80081bc <_fflush_r+0x74>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	bf08      	it	eq
 80081b0:	68ec      	ldreq	r4, [r5, #12]
 80081b2:	e7da      	b.n	800816a <_fflush_r+0x22>
 80081b4:	0800942c 	.word	0x0800942c
 80081b8:	0800944c 	.word	0x0800944c
 80081bc:	0800940c 	.word	0x0800940c

080081c0 <std>:
 80081c0:	2300      	movs	r3, #0
 80081c2:	b510      	push	{r4, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	e9c0 3300 	strd	r3, r3, [r0]
 80081ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ce:	6083      	str	r3, [r0, #8]
 80081d0:	8181      	strh	r1, [r0, #12]
 80081d2:	6643      	str	r3, [r0, #100]	; 0x64
 80081d4:	81c2      	strh	r2, [r0, #14]
 80081d6:	6183      	str	r3, [r0, #24]
 80081d8:	4619      	mov	r1, r3
 80081da:	2208      	movs	r2, #8
 80081dc:	305c      	adds	r0, #92	; 0x5c
 80081de:	f7ff fdbb 	bl	8007d58 <memset>
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <std+0x38>)
 80081e4:	6263      	str	r3, [r4, #36]	; 0x24
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <std+0x3c>)
 80081e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <std+0x40>)
 80081ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ee:	4b05      	ldr	r3, [pc, #20]	; (8008204 <std+0x44>)
 80081f0:	6224      	str	r4, [r4, #32]
 80081f2:	6323      	str	r3, [r4, #48]	; 0x30
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	08008c49 	.word	0x08008c49
 80081fc:	08008c6b 	.word	0x08008c6b
 8008200:	08008ca3 	.word	0x08008ca3
 8008204:	08008cc7 	.word	0x08008cc7

08008208 <_cleanup_r>:
 8008208:	4901      	ldr	r1, [pc, #4]	; (8008210 <_cleanup_r+0x8>)
 800820a:	f000 b8af 	b.w	800836c <_fwalk_reent>
 800820e:	bf00      	nop
 8008210:	08008149 	.word	0x08008149

08008214 <__sfmoreglue>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	2268      	movs	r2, #104	; 0x68
 8008218:	1e4d      	subs	r5, r1, #1
 800821a:	4355      	muls	r5, r2
 800821c:	460e      	mov	r6, r1
 800821e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008222:	f000 f99f 	bl	8008564 <_malloc_r>
 8008226:	4604      	mov	r4, r0
 8008228:	b140      	cbz	r0, 800823c <__sfmoreglue+0x28>
 800822a:	2100      	movs	r1, #0
 800822c:	e9c0 1600 	strd	r1, r6, [r0]
 8008230:	300c      	adds	r0, #12
 8008232:	60a0      	str	r0, [r4, #8]
 8008234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008238:	f7ff fd8e 	bl	8007d58 <memset>
 800823c:	4620      	mov	r0, r4
 800823e:	bd70      	pop	{r4, r5, r6, pc}

08008240 <__sfp_lock_acquire>:
 8008240:	4801      	ldr	r0, [pc, #4]	; (8008248 <__sfp_lock_acquire+0x8>)
 8008242:	f000 b8b3 	b.w	80083ac <__retarget_lock_acquire_recursive>
 8008246:	bf00      	nop
 8008248:	20003375 	.word	0x20003375

0800824c <__sfp_lock_release>:
 800824c:	4801      	ldr	r0, [pc, #4]	; (8008254 <__sfp_lock_release+0x8>)
 800824e:	f000 b8ae 	b.w	80083ae <__retarget_lock_release_recursive>
 8008252:	bf00      	nop
 8008254:	20003375 	.word	0x20003375

08008258 <__sinit_lock_acquire>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__sinit_lock_acquire+0x8>)
 800825a:	f000 b8a7 	b.w	80083ac <__retarget_lock_acquire_recursive>
 800825e:	bf00      	nop
 8008260:	20003376 	.word	0x20003376

08008264 <__sinit_lock_release>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__sinit_lock_release+0x8>)
 8008266:	f000 b8a2 	b.w	80083ae <__retarget_lock_release_recursive>
 800826a:	bf00      	nop
 800826c:	20003376 	.word	0x20003376

08008270 <__sinit>:
 8008270:	b510      	push	{r4, lr}
 8008272:	4604      	mov	r4, r0
 8008274:	f7ff fff0 	bl	8008258 <__sinit_lock_acquire>
 8008278:	69a3      	ldr	r3, [r4, #24]
 800827a:	b11b      	cbz	r3, 8008284 <__sinit+0x14>
 800827c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008280:	f7ff bff0 	b.w	8008264 <__sinit_lock_release>
 8008284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008288:	6523      	str	r3, [r4, #80]	; 0x50
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <__sinit+0x68>)
 800828c:	4a13      	ldr	r2, [pc, #76]	; (80082dc <__sinit+0x6c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	62a2      	str	r2, [r4, #40]	; 0x28
 8008292:	42a3      	cmp	r3, r4
 8008294:	bf04      	itt	eq
 8008296:	2301      	moveq	r3, #1
 8008298:	61a3      	streq	r3, [r4, #24]
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f820 	bl	80082e0 <__sfp>
 80082a0:	6060      	str	r0, [r4, #4]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 f81c 	bl	80082e0 <__sfp>
 80082a8:	60a0      	str	r0, [r4, #8]
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f818 	bl	80082e0 <__sfp>
 80082b0:	2200      	movs	r2, #0
 80082b2:	60e0      	str	r0, [r4, #12]
 80082b4:	2104      	movs	r1, #4
 80082b6:	6860      	ldr	r0, [r4, #4]
 80082b8:	f7ff ff82 	bl	80081c0 <std>
 80082bc:	68a0      	ldr	r0, [r4, #8]
 80082be:	2201      	movs	r2, #1
 80082c0:	2109      	movs	r1, #9
 80082c2:	f7ff ff7d 	bl	80081c0 <std>
 80082c6:	68e0      	ldr	r0, [r4, #12]
 80082c8:	2202      	movs	r2, #2
 80082ca:	2112      	movs	r1, #18
 80082cc:	f7ff ff78 	bl	80081c0 <std>
 80082d0:	2301      	movs	r3, #1
 80082d2:	61a3      	str	r3, [r4, #24]
 80082d4:	e7d2      	b.n	800827c <__sinit+0xc>
 80082d6:	bf00      	nop
 80082d8:	08009304 	.word	0x08009304
 80082dc:	08008209 	.word	0x08008209

080082e0 <__sfp>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	4607      	mov	r7, r0
 80082e4:	f7ff ffac 	bl	8008240 <__sfp_lock_acquire>
 80082e8:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <__sfp+0x84>)
 80082ea:	681e      	ldr	r6, [r3, #0]
 80082ec:	69b3      	ldr	r3, [r6, #24]
 80082ee:	b913      	cbnz	r3, 80082f6 <__sfp+0x16>
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7ff ffbd 	bl	8008270 <__sinit>
 80082f6:	3648      	adds	r6, #72	; 0x48
 80082f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	d503      	bpl.n	8008308 <__sfp+0x28>
 8008300:	6833      	ldr	r3, [r6, #0]
 8008302:	b30b      	cbz	r3, 8008348 <__sfp+0x68>
 8008304:	6836      	ldr	r6, [r6, #0]
 8008306:	e7f7      	b.n	80082f8 <__sfp+0x18>
 8008308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800830c:	b9d5      	cbnz	r5, 8008344 <__sfp+0x64>
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <__sfp+0x88>)
 8008310:	60e3      	str	r3, [r4, #12]
 8008312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008316:	6665      	str	r5, [r4, #100]	; 0x64
 8008318:	f000 f847 	bl	80083aa <__retarget_lock_init_recursive>
 800831c:	f7ff ff96 	bl	800824c <__sfp_lock_release>
 8008320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008328:	6025      	str	r5, [r4, #0]
 800832a:	61a5      	str	r5, [r4, #24]
 800832c:	2208      	movs	r2, #8
 800832e:	4629      	mov	r1, r5
 8008330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008334:	f7ff fd10 	bl	8007d58 <memset>
 8008338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800833c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008340:	4620      	mov	r0, r4
 8008342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008344:	3468      	adds	r4, #104	; 0x68
 8008346:	e7d9      	b.n	80082fc <__sfp+0x1c>
 8008348:	2104      	movs	r1, #4
 800834a:	4638      	mov	r0, r7
 800834c:	f7ff ff62 	bl	8008214 <__sfmoreglue>
 8008350:	4604      	mov	r4, r0
 8008352:	6030      	str	r0, [r6, #0]
 8008354:	2800      	cmp	r0, #0
 8008356:	d1d5      	bne.n	8008304 <__sfp+0x24>
 8008358:	f7ff ff78 	bl	800824c <__sfp_lock_release>
 800835c:	230c      	movs	r3, #12
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	e7ee      	b.n	8008340 <__sfp+0x60>
 8008362:	bf00      	nop
 8008364:	08009304 	.word	0x08009304
 8008368:	ffff0001 	.word	0xffff0001

0800836c <_fwalk_reent>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	4606      	mov	r6, r0
 8008372:	4688      	mov	r8, r1
 8008374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008378:	2700      	movs	r7, #0
 800837a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800837e:	f1b9 0901 	subs.w	r9, r9, #1
 8008382:	d505      	bpl.n	8008390 <_fwalk_reent+0x24>
 8008384:	6824      	ldr	r4, [r4, #0]
 8008386:	2c00      	cmp	r4, #0
 8008388:	d1f7      	bne.n	800837a <_fwalk_reent+0xe>
 800838a:	4638      	mov	r0, r7
 800838c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008390:	89ab      	ldrh	r3, [r5, #12]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d907      	bls.n	80083a6 <_fwalk_reent+0x3a>
 8008396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800839a:	3301      	adds	r3, #1
 800839c:	d003      	beq.n	80083a6 <_fwalk_reent+0x3a>
 800839e:	4629      	mov	r1, r5
 80083a0:	4630      	mov	r0, r6
 80083a2:	47c0      	blx	r8
 80083a4:	4307      	orrs	r7, r0
 80083a6:	3568      	adds	r5, #104	; 0x68
 80083a8:	e7e9      	b.n	800837e <_fwalk_reent+0x12>

080083aa <__retarget_lock_init_recursive>:
 80083aa:	4770      	bx	lr

080083ac <__retarget_lock_acquire_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_release_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <__swhatbuf_r>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	460e      	mov	r6, r1
 80083b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b8:	2900      	cmp	r1, #0
 80083ba:	b096      	sub	sp, #88	; 0x58
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	da08      	bge.n	80083d4 <__swhatbuf_r+0x24>
 80083c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	061a      	lsls	r2, r3, #24
 80083cc:	d410      	bmi.n	80083f0 <__swhatbuf_r+0x40>
 80083ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d2:	e00e      	b.n	80083f2 <__swhatbuf_r+0x42>
 80083d4:	466a      	mov	r2, sp
 80083d6:	f000 fd5d 	bl	8008e94 <_fstat_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dbf1      	blt.n	80083c2 <__swhatbuf_r+0x12>
 80083de:	9a01      	ldr	r2, [sp, #4]
 80083e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083e8:	425a      	negs	r2, r3
 80083ea:	415a      	adcs	r2, r3
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	e7ee      	b.n	80083ce <__swhatbuf_r+0x1e>
 80083f0:	2340      	movs	r3, #64	; 0x40
 80083f2:	2000      	movs	r0, #0
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	b016      	add	sp, #88	; 0x58
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080083fc <__smakebuf_r>:
 80083fc:	898b      	ldrh	r3, [r1, #12]
 80083fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008400:	079d      	lsls	r5, r3, #30
 8008402:	4606      	mov	r6, r0
 8008404:	460c      	mov	r4, r1
 8008406:	d507      	bpl.n	8008418 <__smakebuf_r+0x1c>
 8008408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	2301      	movs	r3, #1
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	b002      	add	sp, #8
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	ab01      	add	r3, sp, #4
 800841a:	466a      	mov	r2, sp
 800841c:	f7ff ffc8 	bl	80083b0 <__swhatbuf_r>
 8008420:	9900      	ldr	r1, [sp, #0]
 8008422:	4605      	mov	r5, r0
 8008424:	4630      	mov	r0, r6
 8008426:	f000 f89d 	bl	8008564 <_malloc_r>
 800842a:	b948      	cbnz	r0, 8008440 <__smakebuf_r+0x44>
 800842c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008430:	059a      	lsls	r2, r3, #22
 8008432:	d4ef      	bmi.n	8008414 <__smakebuf_r+0x18>
 8008434:	f023 0303 	bic.w	r3, r3, #3
 8008438:	f043 0302 	orr.w	r3, r3, #2
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	e7e3      	b.n	8008408 <__smakebuf_r+0xc>
 8008440:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <__smakebuf_r+0x7c>)
 8008442:	62b3      	str	r3, [r6, #40]	; 0x28
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844c:	81a3      	strh	r3, [r4, #12]
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	6163      	str	r3, [r4, #20]
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	6120      	str	r0, [r4, #16]
 8008456:	b15b      	cbz	r3, 8008470 <__smakebuf_r+0x74>
 8008458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800845c:	4630      	mov	r0, r6
 800845e:	f000 fd2b 	bl	8008eb8 <_isatty_r>
 8008462:	b128      	cbz	r0, 8008470 <__smakebuf_r+0x74>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	f043 0301 	orr.w	r3, r3, #1
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	89a0      	ldrh	r0, [r4, #12]
 8008472:	4305      	orrs	r5, r0
 8008474:	81a5      	strh	r5, [r4, #12]
 8008476:	e7cd      	b.n	8008414 <__smakebuf_r+0x18>
 8008478:	08008209 	.word	0x08008209

0800847c <malloc>:
 800847c:	4b02      	ldr	r3, [pc, #8]	; (8008488 <malloc+0xc>)
 800847e:	4601      	mov	r1, r0
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	f000 b86f 	b.w	8008564 <_malloc_r>
 8008486:	bf00      	nop
 8008488:	20000010 	.word	0x20000010

0800848c <_free_r>:
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	2900      	cmp	r1, #0
 8008490:	d044      	beq.n	800851c <_free_r+0x90>
 8008492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f1a1 0404 	sub.w	r4, r1, #4
 800849e:	bfb8      	it	lt
 80084a0:	18e4      	addlt	r4, r4, r3
 80084a2:	f000 fd2b 	bl	8008efc <__malloc_lock>
 80084a6:	4a1e      	ldr	r2, [pc, #120]	; (8008520 <_free_r+0x94>)
 80084a8:	9801      	ldr	r0, [sp, #4]
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	b933      	cbnz	r3, 80084bc <_free_r+0x30>
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6014      	str	r4, [r2, #0]
 80084b2:	b003      	add	sp, #12
 80084b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b8:	f000 bd26 	b.w	8008f08 <__malloc_unlock>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d908      	bls.n	80084d2 <_free_r+0x46>
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	1961      	adds	r1, r4, r5
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf01      	itttt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	1949      	addeq	r1, r1, r5
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	e7ed      	b.n	80084ae <_free_r+0x22>
 80084d2:	461a      	mov	r2, r3
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b10b      	cbz	r3, 80084dc <_free_r+0x50>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d9fa      	bls.n	80084d2 <_free_r+0x46>
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	1855      	adds	r5, r2, r1
 80084e0:	42a5      	cmp	r5, r4
 80084e2:	d10b      	bne.n	80084fc <_free_r+0x70>
 80084e4:	6824      	ldr	r4, [r4, #0]
 80084e6:	4421      	add	r1, r4
 80084e8:	1854      	adds	r4, r2, r1
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	d1e0      	bne.n	80084b2 <_free_r+0x26>
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	4421      	add	r1, r4
 80084f8:	6011      	str	r1, [r2, #0]
 80084fa:	e7da      	b.n	80084b2 <_free_r+0x26>
 80084fc:	d902      	bls.n	8008504 <_free_r+0x78>
 80084fe:	230c      	movs	r3, #12
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	e7d6      	b.n	80084b2 <_free_r+0x26>
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	1961      	adds	r1, r4, r5
 8008508:	428b      	cmp	r3, r1
 800850a:	bf04      	itt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	6063      	str	r3, [r4, #4]
 8008512:	bf04      	itt	eq
 8008514:	1949      	addeq	r1, r1, r5
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	6054      	str	r4, [r2, #4]
 800851a:	e7ca      	b.n	80084b2 <_free_r+0x26>
 800851c:	b003      	add	sp, #12
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	20003378 	.word	0x20003378

08008524 <sbrk_aligned>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4e0e      	ldr	r6, [pc, #56]	; (8008560 <sbrk_aligned+0x3c>)
 8008528:	460c      	mov	r4, r1
 800852a:	6831      	ldr	r1, [r6, #0]
 800852c:	4605      	mov	r5, r0
 800852e:	b911      	cbnz	r1, 8008536 <sbrk_aligned+0x12>
 8008530:	f000 fb7a 	bl	8008c28 <_sbrk_r>
 8008534:	6030      	str	r0, [r6, #0]
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 fb75 	bl	8008c28 <_sbrk_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d00a      	beq.n	8008558 <sbrk_aligned+0x34>
 8008542:	1cc4      	adds	r4, r0, #3
 8008544:	f024 0403 	bic.w	r4, r4, #3
 8008548:	42a0      	cmp	r0, r4
 800854a:	d007      	beq.n	800855c <sbrk_aligned+0x38>
 800854c:	1a21      	subs	r1, r4, r0
 800854e:	4628      	mov	r0, r5
 8008550:	f000 fb6a 	bl	8008c28 <_sbrk_r>
 8008554:	3001      	adds	r0, #1
 8008556:	d101      	bne.n	800855c <sbrk_aligned+0x38>
 8008558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800855c:	4620      	mov	r0, r4
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	2000337c 	.word	0x2000337c

08008564 <_malloc_r>:
 8008564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008568:	1ccd      	adds	r5, r1, #3
 800856a:	f025 0503 	bic.w	r5, r5, #3
 800856e:	3508      	adds	r5, #8
 8008570:	2d0c      	cmp	r5, #12
 8008572:	bf38      	it	cc
 8008574:	250c      	movcc	r5, #12
 8008576:	2d00      	cmp	r5, #0
 8008578:	4607      	mov	r7, r0
 800857a:	db01      	blt.n	8008580 <_malloc_r+0x1c>
 800857c:	42a9      	cmp	r1, r5
 800857e:	d905      	bls.n	800858c <_malloc_r+0x28>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	2600      	movs	r6, #0
 8008586:	4630      	mov	r0, r6
 8008588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858c:	4e2e      	ldr	r6, [pc, #184]	; (8008648 <_malloc_r+0xe4>)
 800858e:	f000 fcb5 	bl	8008efc <__malloc_lock>
 8008592:	6833      	ldr	r3, [r6, #0]
 8008594:	461c      	mov	r4, r3
 8008596:	bb34      	cbnz	r4, 80085e6 <_malloc_r+0x82>
 8008598:	4629      	mov	r1, r5
 800859a:	4638      	mov	r0, r7
 800859c:	f7ff ffc2 	bl	8008524 <sbrk_aligned>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	4604      	mov	r4, r0
 80085a4:	d14d      	bne.n	8008642 <_malloc_r+0xde>
 80085a6:	6834      	ldr	r4, [r6, #0]
 80085a8:	4626      	mov	r6, r4
 80085aa:	2e00      	cmp	r6, #0
 80085ac:	d140      	bne.n	8008630 <_malloc_r+0xcc>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	4631      	mov	r1, r6
 80085b2:	4638      	mov	r0, r7
 80085b4:	eb04 0803 	add.w	r8, r4, r3
 80085b8:	f000 fb36 	bl	8008c28 <_sbrk_r>
 80085bc:	4580      	cmp	r8, r0
 80085be:	d13a      	bne.n	8008636 <_malloc_r+0xd2>
 80085c0:	6821      	ldr	r1, [r4, #0]
 80085c2:	3503      	adds	r5, #3
 80085c4:	1a6d      	subs	r5, r5, r1
 80085c6:	f025 0503 	bic.w	r5, r5, #3
 80085ca:	3508      	adds	r5, #8
 80085cc:	2d0c      	cmp	r5, #12
 80085ce:	bf38      	it	cc
 80085d0:	250c      	movcc	r5, #12
 80085d2:	4629      	mov	r1, r5
 80085d4:	4638      	mov	r0, r7
 80085d6:	f7ff ffa5 	bl	8008524 <sbrk_aligned>
 80085da:	3001      	adds	r0, #1
 80085dc:	d02b      	beq.n	8008636 <_malloc_r+0xd2>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	442b      	add	r3, r5
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	e00e      	b.n	8008604 <_malloc_r+0xa0>
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	1b52      	subs	r2, r2, r5
 80085ea:	d41e      	bmi.n	800862a <_malloc_r+0xc6>
 80085ec:	2a0b      	cmp	r2, #11
 80085ee:	d916      	bls.n	800861e <_malloc_r+0xba>
 80085f0:	1961      	adds	r1, r4, r5
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	6025      	str	r5, [r4, #0]
 80085f6:	bf18      	it	ne
 80085f8:	6059      	strne	r1, [r3, #4]
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	bf08      	it	eq
 80085fe:	6031      	streq	r1, [r6, #0]
 8008600:	5162      	str	r2, [r4, r5]
 8008602:	604b      	str	r3, [r1, #4]
 8008604:	4638      	mov	r0, r7
 8008606:	f104 060b 	add.w	r6, r4, #11
 800860a:	f000 fc7d 	bl	8008f08 <__malloc_unlock>
 800860e:	f026 0607 	bic.w	r6, r6, #7
 8008612:	1d23      	adds	r3, r4, #4
 8008614:	1af2      	subs	r2, r6, r3
 8008616:	d0b6      	beq.n	8008586 <_malloc_r+0x22>
 8008618:	1b9b      	subs	r3, r3, r6
 800861a:	50a3      	str	r3, [r4, r2]
 800861c:	e7b3      	b.n	8008586 <_malloc_r+0x22>
 800861e:	6862      	ldr	r2, [r4, #4]
 8008620:	42a3      	cmp	r3, r4
 8008622:	bf0c      	ite	eq
 8008624:	6032      	streq	r2, [r6, #0]
 8008626:	605a      	strne	r2, [r3, #4]
 8008628:	e7ec      	b.n	8008604 <_malloc_r+0xa0>
 800862a:	4623      	mov	r3, r4
 800862c:	6864      	ldr	r4, [r4, #4]
 800862e:	e7b2      	b.n	8008596 <_malloc_r+0x32>
 8008630:	4634      	mov	r4, r6
 8008632:	6876      	ldr	r6, [r6, #4]
 8008634:	e7b9      	b.n	80085aa <_malloc_r+0x46>
 8008636:	230c      	movs	r3, #12
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	4638      	mov	r0, r7
 800863c:	f000 fc64 	bl	8008f08 <__malloc_unlock>
 8008640:	e7a1      	b.n	8008586 <_malloc_r+0x22>
 8008642:	6025      	str	r5, [r4, #0]
 8008644:	e7de      	b.n	8008604 <_malloc_r+0xa0>
 8008646:	bf00      	nop
 8008648:	20003378 	.word	0x20003378

0800864c <__sfputc_r>:
 800864c:	6893      	ldr	r3, [r2, #8]
 800864e:	3b01      	subs	r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	b410      	push	{r4}
 8008654:	6093      	str	r3, [r2, #8]
 8008656:	da08      	bge.n	800866a <__sfputc_r+0x1e>
 8008658:	6994      	ldr	r4, [r2, #24]
 800865a:	42a3      	cmp	r3, r4
 800865c:	db01      	blt.n	8008662 <__sfputc_r+0x16>
 800865e:	290a      	cmp	r1, #10
 8008660:	d103      	bne.n	800866a <__sfputc_r+0x1e>
 8008662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008666:	f000 bb33 	b.w	8008cd0 <__swbuf_r>
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	1c58      	adds	r0, r3, #1
 800866e:	6010      	str	r0, [r2, #0]
 8008670:	7019      	strb	r1, [r3, #0]
 8008672:	4608      	mov	r0, r1
 8008674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008678:	4770      	bx	lr

0800867a <__sfputs_r>:
 800867a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867c:	4606      	mov	r6, r0
 800867e:	460f      	mov	r7, r1
 8008680:	4614      	mov	r4, r2
 8008682:	18d5      	adds	r5, r2, r3
 8008684:	42ac      	cmp	r4, r5
 8008686:	d101      	bne.n	800868c <__sfputs_r+0x12>
 8008688:	2000      	movs	r0, #0
 800868a:	e007      	b.n	800869c <__sfputs_r+0x22>
 800868c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008690:	463a      	mov	r2, r7
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ffda 	bl	800864c <__sfputc_r>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d1f3      	bne.n	8008684 <__sfputs_r+0xa>
 800869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086a0 <_vfiprintf_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	460d      	mov	r5, r1
 80086a6:	b09d      	sub	sp, #116	; 0x74
 80086a8:	4614      	mov	r4, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	4606      	mov	r6, r0
 80086ae:	b118      	cbz	r0, 80086b8 <_vfiprintf_r+0x18>
 80086b0:	6983      	ldr	r3, [r0, #24]
 80086b2:	b90b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x18>
 80086b4:	f7ff fddc 	bl	8008270 <__sinit>
 80086b8:	4b89      	ldr	r3, [pc, #548]	; (80088e0 <_vfiprintf_r+0x240>)
 80086ba:	429d      	cmp	r5, r3
 80086bc:	d11b      	bne.n	80086f6 <_vfiprintf_r+0x56>
 80086be:	6875      	ldr	r5, [r6, #4]
 80086c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086c2:	07d9      	lsls	r1, r3, #31
 80086c4:	d405      	bmi.n	80086d2 <_vfiprintf_r+0x32>
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	059a      	lsls	r2, r3, #22
 80086ca:	d402      	bmi.n	80086d2 <_vfiprintf_r+0x32>
 80086cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ce:	f7ff fe6d 	bl	80083ac <__retarget_lock_acquire_recursive>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	071b      	lsls	r3, r3, #28
 80086d6:	d501      	bpl.n	80086dc <_vfiprintf_r+0x3c>
 80086d8:	692b      	ldr	r3, [r5, #16]
 80086da:	b9eb      	cbnz	r3, 8008718 <_vfiprintf_r+0x78>
 80086dc:	4629      	mov	r1, r5
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 fb5a 	bl	8008d98 <__swsetup_r>
 80086e4:	b1c0      	cbz	r0, 8008718 <_vfiprintf_r+0x78>
 80086e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086e8:	07dc      	lsls	r4, r3, #31
 80086ea:	d50e      	bpl.n	800870a <_vfiprintf_r+0x6a>
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f0:	b01d      	add	sp, #116	; 0x74
 80086f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f6:	4b7b      	ldr	r3, [pc, #492]	; (80088e4 <_vfiprintf_r+0x244>)
 80086f8:	429d      	cmp	r5, r3
 80086fa:	d101      	bne.n	8008700 <_vfiprintf_r+0x60>
 80086fc:	68b5      	ldr	r5, [r6, #8]
 80086fe:	e7df      	b.n	80086c0 <_vfiprintf_r+0x20>
 8008700:	4b79      	ldr	r3, [pc, #484]	; (80088e8 <_vfiprintf_r+0x248>)
 8008702:	429d      	cmp	r5, r3
 8008704:	bf08      	it	eq
 8008706:	68f5      	ldreq	r5, [r6, #12]
 8008708:	e7da      	b.n	80086c0 <_vfiprintf_r+0x20>
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	0598      	lsls	r0, r3, #22
 800870e:	d4ed      	bmi.n	80086ec <_vfiprintf_r+0x4c>
 8008710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008712:	f7ff fe4c 	bl	80083ae <__retarget_lock_release_recursive>
 8008716:	e7e9      	b.n	80086ec <_vfiprintf_r+0x4c>
 8008718:	2300      	movs	r3, #0
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	2320      	movs	r3, #32
 800871e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008722:	f8cd 800c 	str.w	r8, [sp, #12]
 8008726:	2330      	movs	r3, #48	; 0x30
 8008728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088ec <_vfiprintf_r+0x24c>
 800872c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008730:	f04f 0901 	mov.w	r9, #1
 8008734:	4623      	mov	r3, r4
 8008736:	469a      	mov	sl, r3
 8008738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873c:	b10a      	cbz	r2, 8008742 <_vfiprintf_r+0xa2>
 800873e:	2a25      	cmp	r2, #37	; 0x25
 8008740:	d1f9      	bne.n	8008736 <_vfiprintf_r+0x96>
 8008742:	ebba 0b04 	subs.w	fp, sl, r4
 8008746:	d00b      	beq.n	8008760 <_vfiprintf_r+0xc0>
 8008748:	465b      	mov	r3, fp
 800874a:	4622      	mov	r2, r4
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ff93 	bl	800867a <__sfputs_r>
 8008754:	3001      	adds	r0, #1
 8008756:	f000 80aa 	beq.w	80088ae <_vfiprintf_r+0x20e>
 800875a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875c:	445a      	add	r2, fp
 800875e:	9209      	str	r2, [sp, #36]	; 0x24
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80a2 	beq.w	80088ae <_vfiprintf_r+0x20e>
 800876a:	2300      	movs	r3, #0
 800876c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008774:	f10a 0a01 	add.w	sl, sl, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008780:	931a      	str	r3, [sp, #104]	; 0x68
 8008782:	4654      	mov	r4, sl
 8008784:	2205      	movs	r2, #5
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	4858      	ldr	r0, [pc, #352]	; (80088ec <_vfiprintf_r+0x24c>)
 800878c:	f7f7 fd30 	bl	80001f0 <memchr>
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	b9d8      	cbnz	r0, 80087cc <_vfiprintf_r+0x12c>
 8008794:	06d1      	lsls	r1, r2, #27
 8008796:	bf44      	itt	mi
 8008798:	2320      	movmi	r3, #32
 800879a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879e:	0713      	lsls	r3, r2, #28
 80087a0:	bf44      	itt	mi
 80087a2:	232b      	movmi	r3, #43	; 0x2b
 80087a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ac:	2b2a      	cmp	r3, #42	; 0x2a
 80087ae:	d015      	beq.n	80087dc <_vfiprintf_r+0x13c>
 80087b0:	9a07      	ldr	r2, [sp, #28]
 80087b2:	4654      	mov	r4, sl
 80087b4:	2000      	movs	r0, #0
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	4621      	mov	r1, r4
 80087bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c0:	3b30      	subs	r3, #48	; 0x30
 80087c2:	2b09      	cmp	r3, #9
 80087c4:	d94e      	bls.n	8008864 <_vfiprintf_r+0x1c4>
 80087c6:	b1b0      	cbz	r0, 80087f6 <_vfiprintf_r+0x156>
 80087c8:	9207      	str	r2, [sp, #28]
 80087ca:	e014      	b.n	80087f6 <_vfiprintf_r+0x156>
 80087cc:	eba0 0308 	sub.w	r3, r0, r8
 80087d0:	fa09 f303 	lsl.w	r3, r9, r3
 80087d4:	4313      	orrs	r3, r2
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	46a2      	mov	sl, r4
 80087da:	e7d2      	b.n	8008782 <_vfiprintf_r+0xe2>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	1d19      	adds	r1, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfbb      	ittet	lt
 80087e8:	425b      	neglt	r3, r3
 80087ea:	f042 0202 	orrlt.w	r2, r2, #2
 80087ee:	9307      	strge	r3, [sp, #28]
 80087f0:	9307      	strlt	r3, [sp, #28]
 80087f2:	bfb8      	it	lt
 80087f4:	9204      	strlt	r2, [sp, #16]
 80087f6:	7823      	ldrb	r3, [r4, #0]
 80087f8:	2b2e      	cmp	r3, #46	; 0x2e
 80087fa:	d10c      	bne.n	8008816 <_vfiprintf_r+0x176>
 80087fc:	7863      	ldrb	r3, [r4, #1]
 80087fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008800:	d135      	bne.n	800886e <_vfiprintf_r+0x1ce>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	9203      	str	r2, [sp, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	bfb8      	it	lt
 800880e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008812:	3402      	adds	r4, #2
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088fc <_vfiprintf_r+0x25c>
 800881a:	7821      	ldrb	r1, [r4, #0]
 800881c:	2203      	movs	r2, #3
 800881e:	4650      	mov	r0, sl
 8008820:	f7f7 fce6 	bl	80001f0 <memchr>
 8008824:	b140      	cbz	r0, 8008838 <_vfiprintf_r+0x198>
 8008826:	2340      	movs	r3, #64	; 0x40
 8008828:	eba0 000a 	sub.w	r0, r0, sl
 800882c:	fa03 f000 	lsl.w	r0, r3, r0
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	4303      	orrs	r3, r0
 8008834:	3401      	adds	r4, #1
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883c:	482c      	ldr	r0, [pc, #176]	; (80088f0 <_vfiprintf_r+0x250>)
 800883e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008842:	2206      	movs	r2, #6
 8008844:	f7f7 fcd4 	bl	80001f0 <memchr>
 8008848:	2800      	cmp	r0, #0
 800884a:	d03f      	beq.n	80088cc <_vfiprintf_r+0x22c>
 800884c:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <_vfiprintf_r+0x254>)
 800884e:	bb1b      	cbnz	r3, 8008898 <_vfiprintf_r+0x1f8>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	3307      	adds	r3, #7
 8008854:	f023 0307 	bic.w	r3, r3, #7
 8008858:	3308      	adds	r3, #8
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	443b      	add	r3, r7
 8008860:	9309      	str	r3, [sp, #36]	; 0x24
 8008862:	e767      	b.n	8008734 <_vfiprintf_r+0x94>
 8008864:	fb0c 3202 	mla	r2, ip, r2, r3
 8008868:	460c      	mov	r4, r1
 800886a:	2001      	movs	r0, #1
 800886c:	e7a5      	b.n	80087ba <_vfiprintf_r+0x11a>
 800886e:	2300      	movs	r3, #0
 8008870:	3401      	adds	r4, #1
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	4619      	mov	r1, r3
 8008876:	f04f 0c0a 	mov.w	ip, #10
 800887a:	4620      	mov	r0, r4
 800887c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008880:	3a30      	subs	r2, #48	; 0x30
 8008882:	2a09      	cmp	r2, #9
 8008884:	d903      	bls.n	800888e <_vfiprintf_r+0x1ee>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0c5      	beq.n	8008816 <_vfiprintf_r+0x176>
 800888a:	9105      	str	r1, [sp, #20]
 800888c:	e7c3      	b.n	8008816 <_vfiprintf_r+0x176>
 800888e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008892:	4604      	mov	r4, r0
 8008894:	2301      	movs	r3, #1
 8008896:	e7f0      	b.n	800887a <_vfiprintf_r+0x1da>
 8008898:	ab03      	add	r3, sp, #12
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	462a      	mov	r2, r5
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <_vfiprintf_r+0x258>)
 80088a0:	a904      	add	r1, sp, #16
 80088a2:	4630      	mov	r0, r6
 80088a4:	f3af 8000 	nop.w
 80088a8:	4607      	mov	r7, r0
 80088aa:	1c78      	adds	r0, r7, #1
 80088ac:	d1d6      	bne.n	800885c <_vfiprintf_r+0x1bc>
 80088ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b0:	07d9      	lsls	r1, r3, #31
 80088b2:	d405      	bmi.n	80088c0 <_vfiprintf_r+0x220>
 80088b4:	89ab      	ldrh	r3, [r5, #12]
 80088b6:	059a      	lsls	r2, r3, #22
 80088b8:	d402      	bmi.n	80088c0 <_vfiprintf_r+0x220>
 80088ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088bc:	f7ff fd77 	bl	80083ae <__retarget_lock_release_recursive>
 80088c0:	89ab      	ldrh	r3, [r5, #12]
 80088c2:	065b      	lsls	r3, r3, #25
 80088c4:	f53f af12 	bmi.w	80086ec <_vfiprintf_r+0x4c>
 80088c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ca:	e711      	b.n	80086f0 <_vfiprintf_r+0x50>
 80088cc:	ab03      	add	r3, sp, #12
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	462a      	mov	r2, r5
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <_vfiprintf_r+0x258>)
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	4630      	mov	r0, r6
 80088d8:	f000 f880 	bl	80089dc <_printf_i>
 80088dc:	e7e4      	b.n	80088a8 <_vfiprintf_r+0x208>
 80088de:	bf00      	nop
 80088e0:	0800942c 	.word	0x0800942c
 80088e4:	0800944c 	.word	0x0800944c
 80088e8:	0800940c 	.word	0x0800940c
 80088ec:	0800946c 	.word	0x0800946c
 80088f0:	08009476 	.word	0x08009476
 80088f4:	00000000 	.word	0x00000000
 80088f8:	0800867b 	.word	0x0800867b
 80088fc:	08009472 	.word	0x08009472

08008900 <_printf_common>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	4616      	mov	r6, r2
 8008906:	4699      	mov	r9, r3
 8008908:	688a      	ldr	r2, [r1, #8]
 800890a:	690b      	ldr	r3, [r1, #16]
 800890c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008910:	4293      	cmp	r3, r2
 8008912:	bfb8      	it	lt
 8008914:	4613      	movlt	r3, r2
 8008916:	6033      	str	r3, [r6, #0]
 8008918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800891c:	4607      	mov	r7, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b10a      	cbz	r2, 8008926 <_printf_common+0x26>
 8008922:	3301      	adds	r3, #1
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	0699      	lsls	r1, r3, #26
 800892a:	bf42      	ittt	mi
 800892c:	6833      	ldrmi	r3, [r6, #0]
 800892e:	3302      	addmi	r3, #2
 8008930:	6033      	strmi	r3, [r6, #0]
 8008932:	6825      	ldr	r5, [r4, #0]
 8008934:	f015 0506 	ands.w	r5, r5, #6
 8008938:	d106      	bne.n	8008948 <_printf_common+0x48>
 800893a:	f104 0a19 	add.w	sl, r4, #25
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	6832      	ldr	r2, [r6, #0]
 8008942:	1a9b      	subs	r3, r3, r2
 8008944:	42ab      	cmp	r3, r5
 8008946:	dc26      	bgt.n	8008996 <_printf_common+0x96>
 8008948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800894c:	1e13      	subs	r3, r2, #0
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	bf18      	it	ne
 8008952:	2301      	movne	r3, #1
 8008954:	0692      	lsls	r2, r2, #26
 8008956:	d42b      	bmi.n	80089b0 <_printf_common+0xb0>
 8008958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800895c:	4649      	mov	r1, r9
 800895e:	4638      	mov	r0, r7
 8008960:	47c0      	blx	r8
 8008962:	3001      	adds	r0, #1
 8008964:	d01e      	beq.n	80089a4 <_printf_common+0xa4>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	68e5      	ldr	r5, [r4, #12]
 800896a:	6832      	ldr	r2, [r6, #0]
 800896c:	f003 0306 	and.w	r3, r3, #6
 8008970:	2b04      	cmp	r3, #4
 8008972:	bf08      	it	eq
 8008974:	1aad      	subeq	r5, r5, r2
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	bf0c      	ite	eq
 800897c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008980:	2500      	movne	r5, #0
 8008982:	4293      	cmp	r3, r2
 8008984:	bfc4      	itt	gt
 8008986:	1a9b      	subgt	r3, r3, r2
 8008988:	18ed      	addgt	r5, r5, r3
 800898a:	2600      	movs	r6, #0
 800898c:	341a      	adds	r4, #26
 800898e:	42b5      	cmp	r5, r6
 8008990:	d11a      	bne.n	80089c8 <_printf_common+0xc8>
 8008992:	2000      	movs	r0, #0
 8008994:	e008      	b.n	80089a8 <_printf_common+0xa8>
 8008996:	2301      	movs	r3, #1
 8008998:	4652      	mov	r2, sl
 800899a:	4649      	mov	r1, r9
 800899c:	4638      	mov	r0, r7
 800899e:	47c0      	blx	r8
 80089a0:	3001      	adds	r0, #1
 80089a2:	d103      	bne.n	80089ac <_printf_common+0xac>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ac:	3501      	adds	r5, #1
 80089ae:	e7c6      	b.n	800893e <_printf_common+0x3e>
 80089b0:	18e1      	adds	r1, r4, r3
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	2030      	movs	r0, #48	; 0x30
 80089b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089ba:	4422      	add	r2, r4
 80089bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089c4:	3302      	adds	r3, #2
 80089c6:	e7c7      	b.n	8008958 <_printf_common+0x58>
 80089c8:	2301      	movs	r3, #1
 80089ca:	4622      	mov	r2, r4
 80089cc:	4649      	mov	r1, r9
 80089ce:	4638      	mov	r0, r7
 80089d0:	47c0      	blx	r8
 80089d2:	3001      	adds	r0, #1
 80089d4:	d0e6      	beq.n	80089a4 <_printf_common+0xa4>
 80089d6:	3601      	adds	r6, #1
 80089d8:	e7d9      	b.n	800898e <_printf_common+0x8e>
	...

080089dc <_printf_i>:
 80089dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	7e0f      	ldrb	r7, [r1, #24]
 80089e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089e4:	2f78      	cmp	r7, #120	; 0x78
 80089e6:	4691      	mov	r9, r2
 80089e8:	4680      	mov	r8, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	469a      	mov	sl, r3
 80089ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089f2:	d807      	bhi.n	8008a04 <_printf_i+0x28>
 80089f4:	2f62      	cmp	r7, #98	; 0x62
 80089f6:	d80a      	bhi.n	8008a0e <_printf_i+0x32>
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	f000 80d8 	beq.w	8008bae <_printf_i+0x1d2>
 80089fe:	2f58      	cmp	r7, #88	; 0x58
 8008a00:	f000 80a3 	beq.w	8008b4a <_printf_i+0x16e>
 8008a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a0c:	e03a      	b.n	8008a84 <_printf_i+0xa8>
 8008a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a12:	2b15      	cmp	r3, #21
 8008a14:	d8f6      	bhi.n	8008a04 <_printf_i+0x28>
 8008a16:	a101      	add	r1, pc, #4	; (adr r1, 8008a1c <_printf_i+0x40>)
 8008a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008a05 	.word	0x08008a05
 8008a28:	08008a05 	.word	0x08008a05
 8008a2c:	08008a05 	.word	0x08008a05
 8008a30:	08008a05 	.word	0x08008a05
 8008a34:	08008a89 	.word	0x08008a89
 8008a38:	08008a05 	.word	0x08008a05
 8008a3c:	08008a05 	.word	0x08008a05
 8008a40:	08008a05 	.word	0x08008a05
 8008a44:	08008a05 	.word	0x08008a05
 8008a48:	08008b95 	.word	0x08008b95
 8008a4c:	08008ab9 	.word	0x08008ab9
 8008a50:	08008b77 	.word	0x08008b77
 8008a54:	08008a05 	.word	0x08008a05
 8008a58:	08008a05 	.word	0x08008a05
 8008a5c:	08008bb7 	.word	0x08008bb7
 8008a60:	08008a05 	.word	0x08008a05
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008a05 	.word	0x08008a05
 8008a6c:	08008a05 	.word	0x08008a05
 8008a70:	08008b7f 	.word	0x08008b7f
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	1d1a      	adds	r2, r3, #4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	602a      	str	r2, [r5, #0]
 8008a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0a3      	b.n	8008bd0 <_printf_i+0x1f4>
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	6829      	ldr	r1, [r5, #0]
 8008a8c:	0606      	lsls	r6, r0, #24
 8008a8e:	f101 0304 	add.w	r3, r1, #4
 8008a92:	d50a      	bpl.n	8008aaa <_printf_i+0xce>
 8008a94:	680e      	ldr	r6, [r1, #0]
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	2e00      	cmp	r6, #0
 8008a9a:	da03      	bge.n	8008aa4 <_printf_i+0xc8>
 8008a9c:	232d      	movs	r3, #45	; 0x2d
 8008a9e:	4276      	negs	r6, r6
 8008aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa4:	485e      	ldr	r0, [pc, #376]	; (8008c20 <_printf_i+0x244>)
 8008aa6:	230a      	movs	r3, #10
 8008aa8:	e019      	b.n	8008ade <_printf_i+0x102>
 8008aaa:	680e      	ldr	r6, [r1, #0]
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ab2:	bf18      	it	ne
 8008ab4:	b236      	sxthne	r6, r6
 8008ab6:	e7ef      	b.n	8008a98 <_printf_i+0xbc>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	1d19      	adds	r1, r3, #4
 8008abe:	6029      	str	r1, [r5, #0]
 8008ac0:	0601      	lsls	r1, r0, #24
 8008ac2:	d501      	bpl.n	8008ac8 <_printf_i+0xec>
 8008ac4:	681e      	ldr	r6, [r3, #0]
 8008ac6:	e002      	b.n	8008ace <_printf_i+0xf2>
 8008ac8:	0646      	lsls	r6, r0, #25
 8008aca:	d5fb      	bpl.n	8008ac4 <_printf_i+0xe8>
 8008acc:	881e      	ldrh	r6, [r3, #0]
 8008ace:	4854      	ldr	r0, [pc, #336]	; (8008c20 <_printf_i+0x244>)
 8008ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ad2:	bf0c      	ite	eq
 8008ad4:	2308      	moveq	r3, #8
 8008ad6:	230a      	movne	r3, #10
 8008ad8:	2100      	movs	r1, #0
 8008ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ade:	6865      	ldr	r5, [r4, #4]
 8008ae0:	60a5      	str	r5, [r4, #8]
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	bfa2      	ittt	ge
 8008ae6:	6821      	ldrge	r1, [r4, #0]
 8008ae8:	f021 0104 	bicge.w	r1, r1, #4
 8008aec:	6021      	strge	r1, [r4, #0]
 8008aee:	b90e      	cbnz	r6, 8008af4 <_printf_i+0x118>
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	d04d      	beq.n	8008b90 <_printf_i+0x1b4>
 8008af4:	4615      	mov	r5, r2
 8008af6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008afa:	fb03 6711 	mls	r7, r3, r1, r6
 8008afe:	5dc7      	ldrb	r7, [r0, r7]
 8008b00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b04:	4637      	mov	r7, r6
 8008b06:	42bb      	cmp	r3, r7
 8008b08:	460e      	mov	r6, r1
 8008b0a:	d9f4      	bls.n	8008af6 <_printf_i+0x11a>
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d10b      	bne.n	8008b28 <_printf_i+0x14c>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	07de      	lsls	r6, r3, #31
 8008b14:	d508      	bpl.n	8008b28 <_printf_i+0x14c>
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	6861      	ldr	r1, [r4, #4]
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	bfde      	ittt	le
 8008b1e:	2330      	movle	r3, #48	; 0x30
 8008b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b28:	1b52      	subs	r2, r2, r5
 8008b2a:	6122      	str	r2, [r4, #16]
 8008b2c:	f8cd a000 	str.w	sl, [sp]
 8008b30:	464b      	mov	r3, r9
 8008b32:	aa03      	add	r2, sp, #12
 8008b34:	4621      	mov	r1, r4
 8008b36:	4640      	mov	r0, r8
 8008b38:	f7ff fee2 	bl	8008900 <_printf_common>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d14c      	bne.n	8008bda <_printf_i+0x1fe>
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b44:	b004      	add	sp, #16
 8008b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4a:	4835      	ldr	r0, [pc, #212]	; (8008c20 <_printf_i+0x244>)
 8008b4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b50:	6829      	ldr	r1, [r5, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b58:	6029      	str	r1, [r5, #0]
 8008b5a:	061d      	lsls	r5, r3, #24
 8008b5c:	d514      	bpl.n	8008b88 <_printf_i+0x1ac>
 8008b5e:	07df      	lsls	r7, r3, #31
 8008b60:	bf44      	itt	mi
 8008b62:	f043 0320 	orrmi.w	r3, r3, #32
 8008b66:	6023      	strmi	r3, [r4, #0]
 8008b68:	b91e      	cbnz	r6, 8008b72 <_printf_i+0x196>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f023 0320 	bic.w	r3, r3, #32
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	2310      	movs	r3, #16
 8008b74:	e7b0      	b.n	8008ad8 <_printf_i+0xfc>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	f043 0320 	orr.w	r3, r3, #32
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	2378      	movs	r3, #120	; 0x78
 8008b80:	4828      	ldr	r0, [pc, #160]	; (8008c24 <_printf_i+0x248>)
 8008b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b86:	e7e3      	b.n	8008b50 <_printf_i+0x174>
 8008b88:	0659      	lsls	r1, r3, #25
 8008b8a:	bf48      	it	mi
 8008b8c:	b2b6      	uxthmi	r6, r6
 8008b8e:	e7e6      	b.n	8008b5e <_printf_i+0x182>
 8008b90:	4615      	mov	r5, r2
 8008b92:	e7bb      	b.n	8008b0c <_printf_i+0x130>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	6826      	ldr	r6, [r4, #0]
 8008b98:	6961      	ldr	r1, [r4, #20]
 8008b9a:	1d18      	adds	r0, r3, #4
 8008b9c:	6028      	str	r0, [r5, #0]
 8008b9e:	0635      	lsls	r5, r6, #24
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	d501      	bpl.n	8008ba8 <_printf_i+0x1cc>
 8008ba4:	6019      	str	r1, [r3, #0]
 8008ba6:	e002      	b.n	8008bae <_printf_i+0x1d2>
 8008ba8:	0670      	lsls	r0, r6, #25
 8008baa:	d5fb      	bpl.n	8008ba4 <_printf_i+0x1c8>
 8008bac:	8019      	strh	r1, [r3, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	4615      	mov	r5, r2
 8008bb4:	e7ba      	b.n	8008b2c <_printf_i+0x150>
 8008bb6:	682b      	ldr	r3, [r5, #0]
 8008bb8:	1d1a      	adds	r2, r3, #4
 8008bba:	602a      	str	r2, [r5, #0]
 8008bbc:	681d      	ldr	r5, [r3, #0]
 8008bbe:	6862      	ldr	r2, [r4, #4]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7f7 fb14 	bl	80001f0 <memchr>
 8008bc8:	b108      	cbz	r0, 8008bce <_printf_i+0x1f2>
 8008bca:	1b40      	subs	r0, r0, r5
 8008bcc:	6060      	str	r0, [r4, #4]
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd8:	e7a8      	b.n	8008b2c <_printf_i+0x150>
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4649      	mov	r1, r9
 8008be0:	4640      	mov	r0, r8
 8008be2:	47d0      	blx	sl
 8008be4:	3001      	adds	r0, #1
 8008be6:	d0ab      	beq.n	8008b40 <_printf_i+0x164>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	079b      	lsls	r3, r3, #30
 8008bec:	d413      	bmi.n	8008c16 <_printf_i+0x23a>
 8008bee:	68e0      	ldr	r0, [r4, #12]
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	4298      	cmp	r0, r3
 8008bf4:	bfb8      	it	lt
 8008bf6:	4618      	movlt	r0, r3
 8008bf8:	e7a4      	b.n	8008b44 <_printf_i+0x168>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	47d0      	blx	sl
 8008c04:	3001      	adds	r0, #1
 8008c06:	d09b      	beq.n	8008b40 <_printf_i+0x164>
 8008c08:	3501      	adds	r5, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	9903      	ldr	r1, [sp, #12]
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	dcf2      	bgt.n	8008bfa <_printf_i+0x21e>
 8008c14:	e7eb      	b.n	8008bee <_printf_i+0x212>
 8008c16:	2500      	movs	r5, #0
 8008c18:	f104 0619 	add.w	r6, r4, #25
 8008c1c:	e7f5      	b.n	8008c0a <_printf_i+0x22e>
 8008c1e:	bf00      	nop
 8008c20:	0800947d 	.word	0x0800947d
 8008c24:	0800948e 	.word	0x0800948e

08008c28 <_sbrk_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_sbrk_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7fa f8d4 	bl	8002de0 <_sbrk>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_sbrk_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_sbrk_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20003380 	.word	0x20003380

08008c48 <__sread>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	f000 f960 	bl	8008f14 <_read_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	bfab      	itete	ge
 8008c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c5c:	181b      	addge	r3, r3, r0
 8008c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c62:	bfac      	ite	ge
 8008c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c66:	81a3      	strhlt	r3, [r4, #12]
 8008c68:	bd10      	pop	{r4, pc}

08008c6a <__swrite>:
 8008c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6e:	461f      	mov	r7, r3
 8008c70:	898b      	ldrh	r3, [r1, #12]
 8008c72:	05db      	lsls	r3, r3, #23
 8008c74:	4605      	mov	r5, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	4616      	mov	r6, r2
 8008c7a:	d505      	bpl.n	8008c88 <__swrite+0x1e>
 8008c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c80:	2302      	movs	r3, #2
 8008c82:	2200      	movs	r2, #0
 8008c84:	f000 f928 	bl	8008ed8 <_lseek_r>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	4632      	mov	r2, r6
 8008c96:	463b      	mov	r3, r7
 8008c98:	4628      	mov	r0, r5
 8008c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9e:	f000 b869 	b.w	8008d74 <_write_r>

08008ca2 <__sseek>:
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008caa:	f000 f915 	bl	8008ed8 <_lseek_r>
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	bf15      	itete	ne
 8008cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cbe:	81a3      	strheq	r3, [r4, #12]
 8008cc0:	bf18      	it	ne
 8008cc2:	81a3      	strhne	r3, [r4, #12]
 8008cc4:	bd10      	pop	{r4, pc}

08008cc6 <__sclose>:
 8008cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cca:	f000 b8d3 	b.w	8008e74 <_close_r>
	...

08008cd0 <__swbuf_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	460e      	mov	r6, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b118      	cbz	r0, 8008ce2 <__swbuf_r+0x12>
 8008cda:	6983      	ldr	r3, [r0, #24]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <__swbuf_r+0x12>
 8008cde:	f7ff fac7 	bl	8008270 <__sinit>
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <__swbuf_r+0x98>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d12b      	bne.n	8008d40 <__swbuf_r+0x70>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	071a      	lsls	r2, r3, #28
 8008cf2:	d52f      	bpl.n	8008d54 <__swbuf_r+0x84>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	b36b      	cbz	r3, 8008d54 <__swbuf_r+0x84>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	6963      	ldr	r3, [r4, #20]
 8008d00:	b2f6      	uxtb	r6, r6
 8008d02:	4283      	cmp	r3, r0
 8008d04:	4637      	mov	r7, r6
 8008d06:	dc04      	bgt.n	8008d12 <__swbuf_r+0x42>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7ff fa1c 	bl	8008148 <_fflush_r>
 8008d10:	bb30      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	701e      	strb	r6, [r3, #0]
 8008d20:	6963      	ldr	r3, [r4, #20]
 8008d22:	3001      	adds	r0, #1
 8008d24:	4283      	cmp	r3, r0
 8008d26:	d004      	beq.n	8008d32 <__swbuf_r+0x62>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d506      	bpl.n	8008d3c <__swbuf_r+0x6c>
 8008d2e:	2e0a      	cmp	r6, #10
 8008d30:	d104      	bne.n	8008d3c <__swbuf_r+0x6c>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f7ff fa07 	bl	8008148 <_fflush_r>
 8008d3a:	b988      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <__swbuf_r+0x9c>)
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d101      	bne.n	8008d4a <__swbuf_r+0x7a>
 8008d46:	68ac      	ldr	r4, [r5, #8]
 8008d48:	e7cf      	b.n	8008cea <__swbuf_r+0x1a>
 8008d4a:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <__swbuf_r+0xa0>)
 8008d4c:	429c      	cmp	r4, r3
 8008d4e:	bf08      	it	eq
 8008d50:	68ec      	ldreq	r4, [r5, #12]
 8008d52:	e7ca      	b.n	8008cea <__swbuf_r+0x1a>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 f81e 	bl	8008d98 <__swsetup_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d0cb      	beq.n	8008cf8 <__swbuf_r+0x28>
 8008d60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d64:	e7ea      	b.n	8008d3c <__swbuf_r+0x6c>
 8008d66:	bf00      	nop
 8008d68:	0800942c 	.word	0x0800942c
 8008d6c:	0800944c 	.word	0x0800944c
 8008d70:	0800940c 	.word	0x0800940c

08008d74 <_write_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d07      	ldr	r5, [pc, #28]	; (8008d94 <_write_r+0x20>)
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	602a      	str	r2, [r5, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f7f9 fb14 	bl	80023b0 <_write>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_write_r+0x1e>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_write_r+0x1e>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20003380 	.word	0x20003380

08008d98 <__swsetup_r>:
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <__swsetup_r+0xcc>)
 8008d9a:	b570      	push	{r4, r5, r6, lr}
 8008d9c:	681d      	ldr	r5, [r3, #0]
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	b125      	cbz	r5, 8008dae <__swsetup_r+0x16>
 8008da4:	69ab      	ldr	r3, [r5, #24]
 8008da6:	b913      	cbnz	r3, 8008dae <__swsetup_r+0x16>
 8008da8:	4628      	mov	r0, r5
 8008daa:	f7ff fa61 	bl	8008270 <__sinit>
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <__swsetup_r+0xd0>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d10f      	bne.n	8008dd4 <__swsetup_r+0x3c>
 8008db4:	686c      	ldr	r4, [r5, #4]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dbc:	0719      	lsls	r1, r3, #28
 8008dbe:	d42c      	bmi.n	8008e1a <__swsetup_r+0x82>
 8008dc0:	06dd      	lsls	r5, r3, #27
 8008dc2:	d411      	bmi.n	8008de8 <__swsetup_r+0x50>
 8008dc4:	2309      	movs	r3, #9
 8008dc6:	6033      	str	r3, [r6, #0]
 8008dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd2:	e03e      	b.n	8008e52 <__swsetup_r+0xba>
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <__swsetup_r+0xd4>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <__swsetup_r+0x46>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7eb      	b.n	8008db6 <__swsetup_r+0x1e>
 8008dde:	4b24      	ldr	r3, [pc, #144]	; (8008e70 <__swsetup_r+0xd8>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7e6      	b.n	8008db6 <__swsetup_r+0x1e>
 8008de8:	0758      	lsls	r0, r3, #29
 8008dea:	d512      	bpl.n	8008e12 <__swsetup_r+0x7a>
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	b141      	cbz	r1, 8008e02 <__swsetup_r+0x6a>
 8008df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d002      	beq.n	8008dfe <__swsetup_r+0x66>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff fb47 	bl	800848c <_free_r>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6363      	str	r3, [r4, #52]	; 0x34
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f043 0308 	orr.w	r3, r3, #8
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	b94b      	cbnz	r3, 8008e32 <__swsetup_r+0x9a>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e28:	d003      	beq.n	8008e32 <__swsetup_r+0x9a>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff fae5 	bl	80083fc <__smakebuf_r>
 8008e32:	89a0      	ldrh	r0, [r4, #12]
 8008e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e38:	f010 0301 	ands.w	r3, r0, #1
 8008e3c:	d00a      	beq.n	8008e54 <__swsetup_r+0xbc>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	6963      	ldr	r3, [r4, #20]
 8008e44:	425b      	negs	r3, r3
 8008e46:	61a3      	str	r3, [r4, #24]
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	b943      	cbnz	r3, 8008e5e <__swsetup_r+0xc6>
 8008e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e50:	d1ba      	bne.n	8008dc8 <__swsetup_r+0x30>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0781      	lsls	r1, r0, #30
 8008e56:	bf58      	it	pl
 8008e58:	6963      	ldrpl	r3, [r4, #20]
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	e7f4      	b.n	8008e48 <__swsetup_r+0xb0>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e7f7      	b.n	8008e52 <__swsetup_r+0xba>
 8008e62:	bf00      	nop
 8008e64:	20000010 	.word	0x20000010
 8008e68:	0800942c 	.word	0x0800942c
 8008e6c:	0800944c 	.word	0x0800944c
 8008e70:	0800940c 	.word	0x0800940c

08008e74 <_close_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_close_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f9 fac2 	bl	8002408 <_close>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_close_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_close_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20003380 	.word	0x20003380

08008e94 <_fstat_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	; (8008eb4 <_fstat_r+0x20>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f9 fb01 	bl	80024a8 <_fstat>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_fstat_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_fstat_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20003380 	.word	0x20003380

08008eb8 <_isatty_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	; (8008ed4 <_isatty_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f9 fa5e 	bl	8002384 <_isatty>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_isatty_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_isatty_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20003380 	.word	0x20003380

08008ed8 <_lseek_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_lseek_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f9 faa5 	bl	8002436 <_lseek>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_lseek_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_lseek_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20003380 	.word	0x20003380

08008efc <__malloc_lock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__malloc_lock+0x8>)
 8008efe:	f7ff ba55 	b.w	80083ac <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	20003374 	.word	0x20003374

08008f08 <__malloc_unlock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__malloc_unlock+0x8>)
 8008f0a:	f7ff ba50 	b.w	80083ae <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	20003374 	.word	0x20003374

08008f14 <_read_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	; (8008f34 <_read_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7f9 fa98 	bl	8002458 <_read>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_read_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_read_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20003380 	.word	0x20003380

08008f38 <_init>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr

08008f44 <_fini>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	bf00      	nop
 8008f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4a:	bc08      	pop	{r3}
 8008f4c:	469e      	mov	lr, r3
 8008f4e:	4770      	bx	lr
